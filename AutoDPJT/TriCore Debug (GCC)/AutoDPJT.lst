
AutoDPJT.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bmhd_0       00000020  80000000  80000000  00000294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .bmhd_1       00000020  80020000  80020000  00010668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .startup      00000010  80000020  80000020  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .interface_const 00000000  80000040  80000040  00011014  2**0
                  CONTENTS
  4 .traptab_tc0  00000100  80000100  80000100  000002e0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
  5 .rodata       00000f00  80000200  80000200  000003e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .CPU2.zbss    00000000  50000000  50000000  00011014  2**0
                  CONTENTS
  7 .CPU2.bss     00000000  50000000  50000000  00011014  2**0
                  CONTENTS
  8 .CPU1.zbss    00000000  60000000  60000000  00011014  2**0
                  CONTENTS
  9 .CPU1.bss     00000000  600022d0  600022d0  00011014  2**0
                  CONTENTS
 10 .CPU0.zbss    00000000  70000000  70000000  00011014  2**0
                  CONTENTS
 11 .CPU0.bss     00000000  70000000  70000000  00011014  2**0
                  CONTENTS
 12 .zbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC
 13 .sbss         00000000  60000000  801f6300  00000000  2**0
                  ALLOC, SMALL_DATA
 14 .bss          00000b78  60000758  801f6a54  00011018  2**3
                  ALLOC
 15 .CPU2.zdata   00000000  50000000  50000000  00011014  2**0
                  CONTENTS
 16 .CPU2.data    00000000  50000000  50000000  00011014  2**0
                  CONTENTS
 17 .CPU1.zdata   00000000  60000000  60000000  00011014  2**0
                  CONTENTS
 18 .CPU1.data    00000000  600022d0  600022d0  00011014  2**0
                  CONTENTS
 19 .CPU0.zdata   00000000  70000000  70000000  00011014  2**0
                  CONTENTS
 20 .CPU0.data    00000000  70000000  70000000  00011014  2**0
                  CONTENTS
 21 .zdata        00000000  60000000  801f6a54  00011014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .sdata        00000000  60000000  801f6a54  00011014  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
 23 .data         00000754  60000000  801f6300  000108c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .lmu_zdata    00000000  90000000  90000000  00011014  2**0
                  CONTENTS
 25 .lmu_sdata    00000000  90000000  90000000  00011014  2**0
                  CONTENTS
 26 .lmu_data     00000000  90000000  90000000  00011014  2**0
                  CONTENTS
 27 .CPU0.psram_text 00000000  70100000  70100000  00011014  2**0
                  CONTENTS
 28 .CPU1.psram_text 00000000  60100000  60100000  00011014  2**0
                  CONTENTS
 29 .CPU2.psram_text 00000000  50100000  50100000  00011014  2**0
                  CONTENTS
 30 .text         0000f350  80001100  80001100  000012e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .init         00000010  80010450  80010450  00010630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .fini         00000008  80010460  80010460  00010640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .eh_frame     00000000  80010468  80010468  00011014  2**0
                  CONTENTS
 34 .gcc_except_table 00000000  80010468  80010468  00011014  2**0
                  CONTENTS
 35 .ctors        00000010  80010468  80010468  00010648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 36 .dtors        00000010  80010478  80010478  00010658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 37 .traptab_tc2  00000100  801f6100  801f6100  000106c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 38 .traptab_tc1  00000100  801f6200  801f6200  000107c0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 39 .heap         00001000  600012d0  801f6a54  00011014  2**0
                  ALLOC
 40 .CPU2.ustack  00000800  5001ae00  5001ae00  00000294  2**0
                  ALLOC
 41 .CPU2.istack  00000400  5001b700  5001b700  00000294  2**0
                  ALLOC
 42 .CPU2.csa     00002000  5001bc00  5001bc00  00000294  2**0
                  ALLOC
 43 .CPU1.ustack  00000800  6001ae00  6001ae00  00000294  2**0
                  ALLOC
 44 .CPU1.istack  00000400  6001b700  6001b700  00000294  2**0
                  ALLOC
 45 .CPU1.csa     00002000  6001bc00  6001bc00  00000294  2**0
                  ALLOC
 46 .CPU0.ustack  00000800  70018e00  70018e00  00000294  2**0
                  ALLOC
 47 .CPU0.istack  00000400  70019700  70019700  00000294  2**0
                  ALLOC
 48 .CPU0.csa     00002000  70019c00  70019c00  00000294  2**0
                  ALLOC
 49 .inttab_tc0_000 00000000  801f4000  801f4000  00011014  2**0
                  CONTENTS
 50 .inttab_tc0_001 00000000  801f4020  801f4020  00011014  2**0
                  CONTENTS
 51 .inttab_tc0_002 00000000  801f4040  801f4040  00011014  2**0
                  CONTENTS
 52 .inttab_tc0_003 00000000  801f4060  801f4060  00011014  2**0
                  CONTENTS
 53 .inttab_tc0_004 0000000e  801f4080  801f4080  00010688  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .inttab_tc0_005 00000000  801f40a0  801f40a0  00011014  2**0
                  CONTENTS
 55 .inttab_tc0_006 00000000  801f40c0  801f40c0  00011014  2**0
                  CONTENTS
 56 .inttab_tc0_007 00000000  801f40e0  801f40e0  00011014  2**0
                  CONTENTS
 57 .inttab_tc0_008 0000000e  801f4100  801f4100  00010696  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .inttab_tc0_009 00000000  801f4120  801f4120  00011014  2**0
                  CONTENTS
 59 .inttab_tc0_00A 00000000  801f4140  801f4140  00011014  2**0
                  CONTENTS
 60 .inttab_tc0_00B 00000000  801f4160  801f4160  00011014  2**0
                  CONTENTS
 61 .inttab_tc0_00C 0000000e  801f4180  801f4180  000106a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .inttab_tc0_00D 00000000  801f41a0  801f41a0  00011014  2**0
                  CONTENTS
 63 .inttab_tc0_00E 00000000  801f41c0  801f41c0  00011014  2**0
                  CONTENTS
 64 .inttab_tc0_00F 00000000  801f41e0  801f41e0  00011014  2**0
                  CONTENTS
 65 .inttab_tc0_010 00000000  801f4200  801f4200  00011014  2**0
                  CONTENTS
 66 .inttab_tc0_011 00000000  801f4220  801f4220  00011014  2**0
                  CONTENTS
 67 .inttab_tc0_012 00000000  801f4240  801f4240  00011014  2**0
                  CONTENTS
 68 .inttab_tc0_013 00000000  801f4260  801f4260  00011014  2**0
                  CONTENTS
 69 .inttab_tc0_014 00000000  801f4280  801f4280  00011014  2**0
                  CONTENTS
 70 .inttab_tc0_015 00000000  801f42a0  801f42a0  00011014  2**0
                  CONTENTS
 71 .inttab_tc0_016 00000000  801f42c0  801f42c0  00011014  2**0
                  CONTENTS
 72 .inttab_tc0_017 00000000  801f42e0  801f42e0  00011014  2**0
                  CONTENTS
 73 .inttab_tc0_018 00000000  801f4300  801f4300  00011014  2**0
                  CONTENTS
 74 .inttab_tc0_019 00000000  801f4320  801f4320  00011014  2**0
                  CONTENTS
 75 .inttab_tc0_01A 00000000  801f4340  801f4340  00011014  2**0
                  CONTENTS
 76 .inttab_tc0_01B 00000000  801f4360  801f4360  00011014  2**0
                  CONTENTS
 77 .inttab_tc0_01C 00000000  801f4380  801f4380  00011014  2**0
                  CONTENTS
 78 .inttab_tc0_01D 00000000  801f43a0  801f43a0  00011014  2**0
                  CONTENTS
 79 .inttab_tc0_01E 00000000  801f43c0  801f43c0  00011014  2**0
                  CONTENTS
 80 .inttab_tc0_01F 00000000  801f43e0  801f43e0  00011014  2**0
                  CONTENTS
 81 .inttab_tc0_020 00000000  801f4400  801f4400  00011014  2**0
                  CONTENTS
 82 .inttab_tc0_021 00000000  801f4420  801f4420  00011014  2**0
                  CONTENTS
 83 .inttab_tc0_022 00000000  801f4440  801f4440  00011014  2**0
                  CONTENTS
 84 .inttab_tc0_023 00000000  801f4460  801f4460  00011014  2**0
                  CONTENTS
 85 .inttab_tc0_024 00000000  801f4480  801f4480  00011014  2**0
                  CONTENTS
 86 .inttab_tc0_025 00000000  801f44a0  801f44a0  00011014  2**0
                  CONTENTS
 87 .inttab_tc0_026 00000000  801f44c0  801f44c0  00011014  2**0
                  CONTENTS
 88 .inttab_tc0_027 00000000  801f44e0  801f44e0  00011014  2**0
                  CONTENTS
 89 .inttab_tc0_028 00000000  801f4500  801f4500  00011014  2**0
                  CONTENTS
 90 .inttab_tc0_029 00000000  801f4520  801f4520  00011014  2**0
                  CONTENTS
 91 .inttab_tc0_02A 00000000  801f4540  801f4540  00011014  2**0
                  CONTENTS
 92 .inttab_tc0_02B 00000000  801f4560  801f4560  00011014  2**0
                  CONTENTS
 93 .inttab_tc0_02C 00000000  801f4580  801f4580  00011014  2**0
                  CONTENTS
 94 .inttab_tc0_02D 00000000  801f45a0  801f45a0  00011014  2**0
                  CONTENTS
 95 .inttab_tc0_02E 00000000  801f45c0  801f45c0  00011014  2**0
                  CONTENTS
 96 .inttab_tc0_02F 00000000  801f45e0  801f45e0  00011014  2**0
                  CONTENTS
 97 .inttab_tc0_030 00000000  801f4600  801f4600  00011014  2**0
                  CONTENTS
 98 .inttab_tc0_031 00000000  801f4620  801f4620  00011014  2**0
                  CONTENTS
 99 .inttab_tc0_032 00000000  801f4640  801f4640  00011014  2**0
                  CONTENTS
100 .inttab_tc0_033 00000000  801f4660  801f4660  00011014  2**0
                  CONTENTS
101 .inttab_tc0_034 00000000  801f4680  801f4680  00011014  2**0
                  CONTENTS
102 .inttab_tc0_035 00000000  801f46a0  801f46a0  00011014  2**0
                  CONTENTS
103 .inttab_tc0_036 00000000  801f46c0  801f46c0  00011014  2**0
                  CONTENTS
104 .inttab_tc0_037 00000000  801f46e0  801f46e0  00011014  2**0
                  CONTENTS
105 .inttab_tc0_038 00000000  801f4700  801f4700  00011014  2**0
                  CONTENTS
106 .inttab_tc0_039 00000000  801f4720  801f4720  00011014  2**0
                  CONTENTS
107 .inttab_tc0_03A 00000000  801f4740  801f4740  00011014  2**0
                  CONTENTS
108 .inttab_tc0_03B 00000000  801f4760  801f4760  00011014  2**0
                  CONTENTS
109 .inttab_tc0_03C 00000000  801f4780  801f4780  00011014  2**0
                  CONTENTS
110 .inttab_tc0_03D 00000000  801f47a0  801f47a0  00011014  2**0
                  CONTENTS
111 .inttab_tc0_03E 00000000  801f47c0  801f47c0  00011014  2**0
                  CONTENTS
112 .inttab_tc0_03F 00000000  801f47e0  801f47e0  00011014  2**0
                  CONTENTS
113 .inttab_tc0_040 00000000  801f4800  801f4800  00011014  2**0
                  CONTENTS
114 .inttab_tc0_041 00000000  801f4820  801f4820  00011014  2**0
                  CONTENTS
115 .inttab_tc0_042 00000000  801f4840  801f4840  00011014  2**0
                  CONTENTS
116 .inttab_tc0_043 00000000  801f4860  801f4860  00011014  2**0
                  CONTENTS
117 .inttab_tc0_044 00000000  801f4880  801f4880  00011014  2**0
                  CONTENTS
118 .inttab_tc0_045 00000000  801f48a0  801f48a0  00011014  2**0
                  CONTENTS
119 .inttab_tc0_046 00000000  801f48c0  801f48c0  00011014  2**0
                  CONTENTS
120 .inttab_tc0_047 00000000  801f48e0  801f48e0  00011014  2**0
                  CONTENTS
121 .inttab_tc0_048 00000000  801f4900  801f4900  00011014  2**0
                  CONTENTS
122 .inttab_tc0_049 00000000  801f4920  801f4920  00011014  2**0
                  CONTENTS
123 .inttab_tc0_04A 00000000  801f4940  801f4940  00011014  2**0
                  CONTENTS
124 .inttab_tc0_04B 00000000  801f4960  801f4960  00011014  2**0
                  CONTENTS
125 .inttab_tc0_04C 00000000  801f4980  801f4980  00011014  2**0
                  CONTENTS
126 .inttab_tc0_04D 00000000  801f49a0  801f49a0  00011014  2**0
                  CONTENTS
127 .inttab_tc0_04E 00000000  801f49c0  801f49c0  00011014  2**0
                  CONTENTS
128 .inttab_tc0_04F 00000000  801f49e0  801f49e0  00011014  2**0
                  CONTENTS
129 .inttab_tc0_050 00000000  801f4a00  801f4a00  00011014  2**0
                  CONTENTS
130 .inttab_tc0_051 00000000  801f4a20  801f4a20  00011014  2**0
                  CONTENTS
131 .inttab_tc0_052 00000000  801f4a40  801f4a40  00011014  2**0
                  CONTENTS
132 .inttab_tc0_053 00000000  801f4a60  801f4a60  00011014  2**0
                  CONTENTS
133 .inttab_tc0_054 00000000  801f4a80  801f4a80  00011014  2**0
                  CONTENTS
134 .inttab_tc0_055 00000000  801f4aa0  801f4aa0  00011014  2**0
                  CONTENTS
135 .inttab_tc0_056 00000000  801f4ac0  801f4ac0  00011014  2**0
                  CONTENTS
136 .inttab_tc0_057 00000000  801f4ae0  801f4ae0  00011014  2**0
                  CONTENTS
137 .inttab_tc0_058 00000000  801f4b00  801f4b00  00011014  2**0
                  CONTENTS
138 .inttab_tc0_059 00000000  801f4b20  801f4b20  00011014  2**0
                  CONTENTS
139 .inttab_tc0_05A 00000000  801f4b40  801f4b40  00011014  2**0
                  CONTENTS
140 .inttab_tc0_05B 00000000  801f4b60  801f4b60  00011014  2**0
                  CONTENTS
141 .inttab_tc0_05C 00000000  801f4b80  801f4b80  00011014  2**0
                  CONTENTS
142 .inttab_tc0_05D 00000000  801f4ba0  801f4ba0  00011014  2**0
                  CONTENTS
143 .inttab_tc0_05E 00000000  801f4bc0  801f4bc0  00011014  2**0
                  CONTENTS
144 .inttab_tc0_05F 00000000  801f4be0  801f4be0  00011014  2**0
                  CONTENTS
145 .inttab_tc0_060 00000000  801f4c00  801f4c00  00011014  2**0
                  CONTENTS
146 .inttab_tc0_061 00000000  801f4c20  801f4c20  00011014  2**0
                  CONTENTS
147 .inttab_tc0_062 00000000  801f4c40  801f4c40  00011014  2**0
                  CONTENTS
148 .inttab_tc0_063 00000000  801f4c60  801f4c60  00011014  2**0
                  CONTENTS
149 .inttab_tc0_064 00000000  801f4c80  801f4c80  00011014  2**0
                  CONTENTS
150 .inttab_tc0_065 00000000  801f4ca0  801f4ca0  00011014  2**0
                  CONTENTS
151 .inttab_tc0_066 00000000  801f4cc0  801f4cc0  00011014  2**0
                  CONTENTS
152 .inttab_tc0_067 00000000  801f4ce0  801f4ce0  00011014  2**0
                  CONTENTS
153 .inttab_tc0_068 00000000  801f4d00  801f4d00  00011014  2**0
                  CONTENTS
154 .inttab_tc0_069 00000000  801f4d20  801f4d20  00011014  2**0
                  CONTENTS
155 .inttab_tc0_06A 00000000  801f4d40  801f4d40  00011014  2**0
                  CONTENTS
156 .inttab_tc0_06B 00000000  801f4d60  801f4d60  00011014  2**0
                  CONTENTS
157 .inttab_tc0_06C 00000000  801f4d80  801f4d80  00011014  2**0
                  CONTENTS
158 .inttab_tc0_06D 00000000  801f4da0  801f4da0  00011014  2**0
                  CONTENTS
159 .inttab_tc0_06E 00000000  801f4dc0  801f4dc0  00011014  2**0
                  CONTENTS
160 .inttab_tc0_06F 00000000  801f4de0  801f4de0  00011014  2**0
                  CONTENTS
161 .inttab_tc0_070 00000000  801f4e00  801f4e00  00011014  2**0
                  CONTENTS
162 .inttab_tc0_071 00000000  801f4e20  801f4e20  00011014  2**0
                  CONTENTS
163 .inttab_tc0_072 00000000  801f4e40  801f4e40  00011014  2**0
                  CONTENTS
164 .inttab_tc0_073 00000000  801f4e60  801f4e60  00011014  2**0
                  CONTENTS
165 .inttab_tc0_074 00000000  801f4e80  801f4e80  00011014  2**0
                  CONTENTS
166 .inttab_tc0_075 00000000  801f4ea0  801f4ea0  00011014  2**0
                  CONTENTS
167 .inttab_tc0_076 00000000  801f4ec0  801f4ec0  00011014  2**0
                  CONTENTS
168 .inttab_tc0_077 00000000  801f4ee0  801f4ee0  00011014  2**0
                  CONTENTS
169 .inttab_tc0_078 00000000  801f4f00  801f4f00  00011014  2**0
                  CONTENTS
170 .inttab_tc0_079 00000000  801f4f20  801f4f20  00011014  2**0
                  CONTENTS
171 .inttab_tc0_07A 00000000  801f4f40  801f4f40  00011014  2**0
                  CONTENTS
172 .inttab_tc0_07B 00000000  801f4f60  801f4f60  00011014  2**0
                  CONTENTS
173 .inttab_tc0_07C 00000000  801f4f80  801f4f80  00011014  2**0
                  CONTENTS
174 .inttab_tc0_07D 00000000  801f4fa0  801f4fa0  00011014  2**0
                  CONTENTS
175 .inttab_tc0_07E 00000000  801f4fc0  801f4fc0  00011014  2**0
                  CONTENTS
176 .inttab_tc0_07F 00000000  801f4fe0  801f4fe0  00011014  2**0
                  CONTENTS
177 .inttab_tc0_080 00000000  801f5000  801f5000  00011014  2**0
                  CONTENTS
178 .inttab_tc0_081 00000000  801f5020  801f5020  00011014  2**0
                  CONTENTS
179 .inttab_tc0_082 00000000  801f5040  801f5040  00011014  2**0
                  CONTENTS
180 .inttab_tc0_083 00000000  801f5060  801f5060  00011014  2**0
                  CONTENTS
181 .inttab_tc0_084 00000000  801f5080  801f5080  00011014  2**0
                  CONTENTS
182 .inttab_tc0_085 00000000  801f50a0  801f50a0  00011014  2**0
                  CONTENTS
183 .inttab_tc0_086 00000000  801f50c0  801f50c0  00011014  2**0
                  CONTENTS
184 .inttab_tc0_087 00000000  801f50e0  801f50e0  00011014  2**0
                  CONTENTS
185 .inttab_tc0_088 00000000  801f5100  801f5100  00011014  2**0
                  CONTENTS
186 .inttab_tc0_089 00000000  801f5120  801f5120  00011014  2**0
                  CONTENTS
187 .inttab_tc0_08A 00000000  801f5140  801f5140  00011014  2**0
                  CONTENTS
188 .inttab_tc0_08B 00000000  801f5160  801f5160  00011014  2**0
                  CONTENTS
189 .inttab_tc0_08C 00000000  801f5180  801f5180  00011014  2**0
                  CONTENTS
190 .inttab_tc0_08D 00000000  801f51a0  801f51a0  00011014  2**0
                  CONTENTS
191 .inttab_tc0_08E 00000000  801f51c0  801f51c0  00011014  2**0
                  CONTENTS
192 .inttab_tc0_08F 00000000  801f51e0  801f51e0  00011014  2**0
                  CONTENTS
193 .inttab_tc0_090 00000000  801f5200  801f5200  00011014  2**0
                  CONTENTS
194 .inttab_tc0_091 00000000  801f5220  801f5220  00011014  2**0
                  CONTENTS
195 .inttab_tc0_092 00000000  801f5240  801f5240  00011014  2**0
                  CONTENTS
196 .inttab_tc0_093 00000000  801f5260  801f5260  00011014  2**0
                  CONTENTS
197 .inttab_tc0_094 00000000  801f5280  801f5280  00011014  2**0
                  CONTENTS
198 .inttab_tc0_095 00000000  801f52a0  801f52a0  00011014  2**0
                  CONTENTS
199 .inttab_tc0_096 00000000  801f52c0  801f52c0  00011014  2**0
                  CONTENTS
200 .inttab_tc0_097 00000000  801f52e0  801f52e0  00011014  2**0
                  CONTENTS
201 .inttab_tc0_098 00000000  801f5300  801f5300  00011014  2**0
                  CONTENTS
202 .inttab_tc0_099 00000000  801f5320  801f5320  00011014  2**0
                  CONTENTS
203 .inttab_tc0_09A 00000000  801f5340  801f5340  00011014  2**0
                  CONTENTS
204 .inttab_tc0_09B 00000000  801f5360  801f5360  00011014  2**0
                  CONTENTS
205 .inttab_tc0_09C 00000000  801f5380  801f5380  00011014  2**0
                  CONTENTS
206 .inttab_tc0_09D 00000000  801f53a0  801f53a0  00011014  2**0
                  CONTENTS
207 .inttab_tc0_09E 00000000  801f53c0  801f53c0  00011014  2**0
                  CONTENTS
208 .inttab_tc0_09F 00000000  801f53e0  801f53e0  00011014  2**0
                  CONTENTS
209 .inttab_tc0_0A0 00000000  801f5400  801f5400  00011014  2**0
                  CONTENTS
210 .inttab_tc0_0A1 00000000  801f5420  801f5420  00011014  2**0
                  CONTENTS
211 .inttab_tc0_0A2 00000000  801f5440  801f5440  00011014  2**0
                  CONTENTS
212 .inttab_tc0_0A3 00000000  801f5460  801f5460  00011014  2**0
                  CONTENTS
213 .inttab_tc0_0A4 00000000  801f5480  801f5480  00011014  2**0
                  CONTENTS
214 .inttab_tc0_0A5 00000000  801f54a0  801f54a0  00011014  2**0
                  CONTENTS
215 .inttab_tc0_0A6 00000000  801f54c0  801f54c0  00011014  2**0
                  CONTENTS
216 .inttab_tc0_0A7 00000000  801f54e0  801f54e0  00011014  2**0
                  CONTENTS
217 .inttab_tc0_0A8 00000000  801f5500  801f5500  00011014  2**0
                  CONTENTS
218 .inttab_tc0_0A9 00000000  801f5520  801f5520  00011014  2**0
                  CONTENTS
219 .inttab_tc0_0AA 00000000  801f5540  801f5540  00011014  2**0
                  CONTENTS
220 .inttab_tc0_0AB 00000000  801f5560  801f5560  00011014  2**0
                  CONTENTS
221 .inttab_tc0_0AC 00000000  801f5580  801f5580  00011014  2**0
                  CONTENTS
222 .inttab_tc0_0AD 00000000  801f55a0  801f55a0  00011014  2**0
                  CONTENTS
223 .inttab_tc0_0AE 00000000  801f55c0  801f55c0  00011014  2**0
                  CONTENTS
224 .inttab_tc0_0AF 00000000  801f55e0  801f55e0  00011014  2**0
                  CONTENTS
225 .inttab_tc0_0B0 00000000  801f5600  801f5600  00011014  2**0
                  CONTENTS
226 .inttab_tc0_0B1 00000000  801f5620  801f5620  00011014  2**0
                  CONTENTS
227 .inttab_tc0_0B2 00000000  801f5640  801f5640  00011014  2**0
                  CONTENTS
228 .inttab_tc0_0B3 00000000  801f5660  801f5660  00011014  2**0
                  CONTENTS
229 .inttab_tc0_0B4 00000000  801f5680  801f5680  00011014  2**0
                  CONTENTS
230 .inttab_tc0_0B5 00000000  801f56a0  801f56a0  00011014  2**0
                  CONTENTS
231 .inttab_tc0_0B6 00000000  801f56c0  801f56c0  00011014  2**0
                  CONTENTS
232 .inttab_tc0_0B7 00000000  801f56e0  801f56e0  00011014  2**0
                  CONTENTS
233 .inttab_tc0_0B8 00000000  801f5700  801f5700  00011014  2**0
                  CONTENTS
234 .inttab_tc0_0B9 00000000  801f5720  801f5720  00011014  2**0
                  CONTENTS
235 .inttab_tc0_0BA 00000000  801f5740  801f5740  00011014  2**0
                  CONTENTS
236 .inttab_tc0_0BB 00000000  801f5760  801f5760  00011014  2**0
                  CONTENTS
237 .inttab_tc0_0BC 00000000  801f5780  801f5780  00011014  2**0
                  CONTENTS
238 .inttab_tc0_0BD 00000000  801f57a0  801f57a0  00011014  2**0
                  CONTENTS
239 .inttab_tc0_0BE 00000000  801f57c0  801f57c0  00011014  2**0
                  CONTENTS
240 .inttab_tc0_0BF 00000000  801f57e0  801f57e0  00011014  2**0
                  CONTENTS
241 .inttab_tc0_0C0 00000000  801f5800  801f5800  00011014  2**0
                  CONTENTS
242 .inttab_tc0_0C1 00000000  801f5820  801f5820  00011014  2**0
                  CONTENTS
243 .inttab_tc0_0C2 00000000  801f5840  801f5840  00011014  2**0
                  CONTENTS
244 .inttab_tc0_0C3 00000000  801f5860  801f5860  00011014  2**0
                  CONTENTS
245 .inttab_tc0_0C4 00000000  801f5880  801f5880  00011014  2**0
                  CONTENTS
246 .inttab_tc0_0C5 00000000  801f58a0  801f58a0  00011014  2**0
                  CONTENTS
247 .inttab_tc0_0C6 00000000  801f58c0  801f58c0  00011014  2**0
                  CONTENTS
248 .inttab_tc0_0C7 00000000  801f58e0  801f58e0  00011014  2**0
                  CONTENTS
249 .inttab_tc0_0C8 00000000  801f5900  801f5900  00011014  2**0
                  CONTENTS
250 .inttab_tc0_0C9 00000000  801f5920  801f5920  00011014  2**0
                  CONTENTS
251 .inttab_tc0_0CA 00000000  801f5940  801f5940  00011014  2**0
                  CONTENTS
252 .inttab_tc0_0CB 00000000  801f5960  801f5960  00011014  2**0
                  CONTENTS
253 .inttab_tc0_0CC 00000000  801f5980  801f5980  00011014  2**0
                  CONTENTS
254 .inttab_tc0_0CD 00000000  801f59a0  801f59a0  00011014  2**0
                  CONTENTS
255 .inttab_tc0_0CE 00000000  801f59c0  801f59c0  00011014  2**0
                  CONTENTS
256 .inttab_tc0_0CF 00000000  801f59e0  801f59e0  00011014  2**0
                  CONTENTS
257 .inttab_tc0_0D0 00000000  801f5a00  801f5a00  00011014  2**0
                  CONTENTS
258 .inttab_tc0_0D1 00000000  801f5a20  801f5a20  00011014  2**0
                  CONTENTS
259 .inttab_tc0_0D2 00000000  801f5a40  801f5a40  00011014  2**0
                  CONTENTS
260 .inttab_tc0_0D3 00000000  801f5a60  801f5a60  00011014  2**0
                  CONTENTS
261 .inttab_tc0_0D4 00000000  801f5a80  801f5a80  00011014  2**0
                  CONTENTS
262 .inttab_tc0_0D5 00000000  801f5aa0  801f5aa0  00011014  2**0
                  CONTENTS
263 .inttab_tc0_0D6 00000000  801f5ac0  801f5ac0  00011014  2**0
                  CONTENTS
264 .inttab_tc0_0D7 00000000  801f5ae0  801f5ae0  00011014  2**0
                  CONTENTS
265 .inttab_tc0_0D8 00000000  801f5b00  801f5b00  00011014  2**0
                  CONTENTS
266 .inttab_tc0_0D9 00000000  801f5b20  801f5b20  00011014  2**0
                  CONTENTS
267 .inttab_tc0_0DA 00000000  801f5b40  801f5b40  00011014  2**0
                  CONTENTS
268 .inttab_tc0_0DB 00000000  801f5b60  801f5b60  00011014  2**0
                  CONTENTS
269 .inttab_tc0_0DC 00000000  801f5b80  801f5b80  00011014  2**0
                  CONTENTS
270 .inttab_tc0_0DD 00000000  801f5ba0  801f5ba0  00011014  2**0
                  CONTENTS
271 .inttab_tc0_0DE 00000000  801f5bc0  801f5bc0  00011014  2**0
                  CONTENTS
272 .inttab_tc0_0DF 00000000  801f5be0  801f5be0  00011014  2**0
                  CONTENTS
273 .inttab_tc0_0E0 00000000  801f5c00  801f5c00  00011014  2**0
                  CONTENTS
274 .inttab_tc0_0E1 00000000  801f5c20  801f5c20  00011014  2**0
                  CONTENTS
275 .inttab_tc0_0E2 00000000  801f5c40  801f5c40  00011014  2**0
                  CONTENTS
276 .inttab_tc0_0E3 00000000  801f5c60  801f5c60  00011014  2**0
                  CONTENTS
277 .inttab_tc0_0E4 00000000  801f5c80  801f5c80  00011014  2**0
                  CONTENTS
278 .inttab_tc0_0E5 00000000  801f5ca0  801f5ca0  00011014  2**0
                  CONTENTS
279 .inttab_tc0_0E6 00000000  801f5cc0  801f5cc0  00011014  2**0
                  CONTENTS
280 .inttab_tc0_0E7 00000000  801f5ce0  801f5ce0  00011014  2**0
                  CONTENTS
281 .inttab_tc0_0E8 00000000  801f5d00  801f5d00  00011014  2**0
                  CONTENTS
282 .inttab_tc0_0E9 00000000  801f5d20  801f5d20  00011014  2**0
                  CONTENTS
283 .inttab_tc0_0EA 00000000  801f5d40  801f5d40  00011014  2**0
                  CONTENTS
284 .inttab_tc0_0EB 00000000  801f5d60  801f5d60  00011014  2**0
                  CONTENTS
285 .inttab_tc0_0EC 00000000  801f5d80  801f5d80  00011014  2**0
                  CONTENTS
286 .inttab_tc0_0ED 00000000  801f5da0  801f5da0  00011014  2**0
                  CONTENTS
287 .inttab_tc0_0EE 00000000  801f5dc0  801f5dc0  00011014  2**0
                  CONTENTS
288 .inttab_tc0_0EF 00000000  801f5de0  801f5de0  00011014  2**0
                  CONTENTS
289 .inttab_tc0_0F0 00000000  801f5e00  801f5e00  00011014  2**0
                  CONTENTS
290 .inttab_tc0_0F1 00000000  801f5e20  801f5e20  00011014  2**0
                  CONTENTS
291 .inttab_tc0_0F2 00000000  801f5e40  801f5e40  00011014  2**0
                  CONTENTS
292 .inttab_tc0_0F3 00000000  801f5e60  801f5e60  00011014  2**0
                  CONTENTS
293 .inttab_tc0_0F4 00000000  801f5e80  801f5e80  00011014  2**0
                  CONTENTS
294 .inttab_tc0_0F5 00000000  801f5ea0  801f5ea0  00011014  2**0
                  CONTENTS
295 .inttab_tc0_0F6 00000000  801f5ec0  801f5ec0  00011014  2**0
                  CONTENTS
296 .inttab_tc0_0F7 00000000  801f5ee0  801f5ee0  00011014  2**0
                  CONTENTS
297 .inttab_tc0_0F8 00000000  801f5f00  801f5f00  00011014  2**0
                  CONTENTS
298 .inttab_tc0_0F9 00000000  801f5f20  801f5f20  00011014  2**0
                  CONTENTS
299 .inttab_tc0_0FA 00000000  801f5f40  801f5f40  00011014  2**0
                  CONTENTS
300 .inttab_tc0_0FB 00000000  801f5f60  801f5f60  00011014  2**0
                  CONTENTS
301 .inttab_tc0_0FC 00000000  801f5f80  801f5f80  00011014  2**0
                  CONTENTS
302 .inttab_tc0_0FD 00000000  801f5fa0  801f5fa0  00011014  2**0
                  CONTENTS
303 .inttab_tc0_0FE 00000000  801f5fc0  801f5fc0  00011014  2**0
                  CONTENTS
304 .inttab_tc0_0FF 00000000  801f5fe0  801f5fe0  00011014  2**0
                  CONTENTS
305 .comment      000000c3  00000000  00000000  00011014  2**0
                  CONTENTS, READONLY
306 .debug_aranges 00001858  00000000  00000000  000110d8  2**3
                  CONTENTS, READONLY, DEBUGGING
307 .debug_info   000bfa1a  00000000  00000000  00012930  2**0
                  CONTENTS, READONLY, DEBUGGING
308 .debug_abbrev 0000e8cf  00000000  00000000  000d234a  2**0
                  CONTENTS, READONLY, DEBUGGING
309 .debug_line   0002aa72  00000000  00000000  000e0c19  2**0
                  CONTENTS, READONLY, DEBUGGING
310 .debug_frame  00002ab8  00000000  00000000  0010b68c  2**2
                  CONTENTS, READONLY, DEBUGGING
311 .debug_str    00001ecf  00000000  00000000  0010e144  2**0
                  CONTENTS, READONLY, DEBUGGING
312 .debug_loc    0001dd49  00000000  00000000  00110013  2**0
                  CONTENTS, READONLY, DEBUGGING
313 .debug_ranges 00002460  00000000  00000000  0012dd60  2**3
                  CONTENTS, READONLY, DEBUGGING
314 .debug_macro  0004461a  00000000  00000000  001301c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .startup:

80000020 <_START>:
#elif defined(__DCC__)
#pragma section CODE ".start" X
#endif

void _START(void)
{
80000020:	40 ae       	mov.aa %a14,%sp
    __non_return_call(_Core0_start);
80000022:	91 00 00 28 	movh.a %a2,32768
80000026:	d9 22 70 95 	lea %a2,[%a2]22128 <80005670 <_Core0_start>>
8000002a:	dc 02       	ji %a2
}
8000002c:	00 90       	ret 

8000002e <_START_end>:
8000002e:	08 00       	ld.bu %d0,[%a15]0

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 32 85 	lea %a2,[%a2]21042 <80005232 <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 20 95 	lea %a2,[%a2]21088 <80005260 <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 0e a5 	lea %a2,[%a2]21134 <8000528e <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 3c a5 	lea %a2,[%a2]21180 <800052bc <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 2a b5 	lea %a2,[%a2]21226 <800052ea <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 18 c5 	lea %a2,[%a2]21272 <80005318 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 0c d5 	lea %a2,[%a2]21324 <8000534c <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 10 f5 	lea %a2,[%a2]21456 <800053d0 <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .text:

80001100 <deregister_tm_clones>:
80001100:	7b 00 00 26 	movh %d2,24576
80001104:	1b 42 75 20 	addi %d2,%d2,1876
80001108:	91 00 00 46 	movh.a %a4,24576
8000110c:	60 22       	mov.a %a2,%d2
8000110e:	d9 44 54 d0 	lea %a4,[%a4]1876 <60000754 <__TMC_END__>>
80001112:	7d 42 0a 00 	jeq.a %a2,%a4,80001126 <deregister_tm_clones+0x26>
80001116:	91 00 00 20 	movh.a %a2,0
8000111a:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
8000111e:	bd 02 04 00 	jz.a %a2,80001126 <deregister_tm_clones+0x26>
80001122:	2d 02 00 00 	calli %a2
80001126:	00 90       	ret 

80001128 <register_tm_clones>:
80001128:	7b 00 00 26 	movh %d2,24576
8000112c:	1b 42 75 20 	addi %d2,%d2,1876
80001130:	91 00 00 46 	movh.a %a4,24576
80001134:	60 22       	mov.a %a2,%d2
80001136:	d9 44 54 d0 	lea %a4,[%a4]1876 <60000754 <__TMC_END__>>
8000113a:	01 42 20 20 	sub.a %a2,%a2,%a4
8000113e:	80 22       	mov.d %d2,%a2
80001140:	8f e2 3f 30 	sha %d3,%d2,-2
80001144:	8f 12 1e 20 	sh %d2,%d2,-31
80001148:	42 32       	add %d2,%d3
8000114a:	8f f2 3f 40 	sha %d4,%d2,-1
8000114e:	df 04 0a 00 	jeq %d4,0,80001162 <register_tm_clones+0x3a>
80001152:	91 00 00 20 	movh.a %a2,0
80001156:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x270>>
8000115a:	bd 02 04 00 	jz.a %a2,80001162 <register_tm_clones+0x3a>
8000115e:	2d 02 00 00 	calli %a2
80001162:	00 90       	ret 

80001164 <__do_global_dtors_aux>:
80001164:	91 00 00 e6 	movh.a %a14,24576
80001168:	39 e2 58 d0 	ld.bu %d2,[%a14]1880 <60000758 <completed.1>>
8000116c:	df 02 2d 80 	jne %d2,0,800011c6 <__do_global_dtors_aux+0x62>
80001170:	91 10 00 38 	movh.a %a3,32769
80001174:	91 10 00 28 	movh.a %a2,32769
80001178:	d9 33 48 20 	lea %a3,[%a3]1160 <80010488 <__DTOR_END__>>
8000117c:	d9 22 7c 10 	lea %a2,[%a2]1148 <8001047c <__DTOR_LIST__>>
80001180:	01 23 20 20 	sub.a %a2,%a3,%a2
80001184:	80 22       	mov.d %d2,%a2
80001186:	86 e2       	sha %d2,-2
80001188:	1b f2 ff 8f 	addi %d8,%d2,-1
8000118c:	91 00 00 c6 	movh.a %a12,24576
80001190:	7b 10 00 28 	movh %d2,32769
80001194:	1b c2 47 20 	addi %d2,%d2,1148
80001198:	60 2d       	mov.a %a13,%d2
8000119a:	19 c2 5c d0 	ld.w %d2,[%a12]1884 <6000075c <dtor_idx.0>>
8000119e:	7f 82 0f 80 	jge.u %d2,%d8,800011bc <__do_global_dtors_aux+0x58>
800011a2:	d9 cc 5c d0 	lea %a12,[%a12]1884 <6000075c <dtor_idx.0>>
800011a6:	c2 12       	add %d2,1
800011a8:	74 c2       	st.w [%a12],%d2
800011aa:	06 22       	sh %d2,2
800011ac:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
800011b0:	d4 22       	ld.a %a2,[%a2]
800011b2:	2d 02 00 00 	calli %a2
800011b6:	54 c2       	ld.w %d2,[%a12]
800011b8:	3f 82 f7 ff 	jlt.u %d2,%d8,800011a6 <__do_global_dtors_aux+0x42>
800011bc:	6d ff a2 ff 	call 80001100 <deregister_tm_clones>
800011c0:	82 12       	mov %d2,1
800011c2:	e9 e2 58 d0 	st.b [%a14]1880 <60000758 <completed.1>>,%d2
800011c6:	00 90       	ret 

800011c8 <frame_dummy>:
800011c8:	6d ff b0 ff 	call 80001128 <register_tm_clones>
800011cc:	00 90       	ret 

800011ce <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
800011ce:	40 ae       	mov.aa %a14,%sp
800011d0:	40 52       	mov.aa %a2,%a5
    uint8 *Dest = (uint8 *)data;
800011d2:	1d 00 07 00 	j 800011e0 <Ifx_CircularBuffer_read8+0x12>
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800011d6:	82 02       	mov %d2,0
800011d8:	f9 42 04 00 	st.h [%a4]4,%d2
        }
    } while (count > 0);
800011dc:	bf 14 19 00 	jlt %d4,1,8000120e <Ifx_CircularBuffer_read8+0x40>
        count--;
800011e0:	c2 f4       	add %d4,-1
800011e2:	37 04 50 40 	extr %d4,%d4,0,16
        *Dest = ((uint8 *)buffer->base)[buffer->index];
800011e6:	b9 42 04 00 	ld.hu %d2,[%a4]4
800011ea:	d4 43       	ld.a %a3,[%a4]
800011ec:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
800011f0:	14 32       	ld.bu %d2,[%a3]
800011f2:	24 22       	st.b [%a2+],%d2
        buffer->index++;
800011f4:	b9 42 04 00 	ld.hu %d2,[%a4]4
800011f8:	c2 12       	add %d2,1
800011fa:	37 02 70 20 	extr.u %d2,%d2,0,16
800011fe:	f9 42 04 00 	st.h [%a4]4,%d2
        if (buffer->index >= buffer->length)
80001202:	b9 43 06 00 	ld.hu %d3,[%a4]6
80001206:	3f 32 eb ff 	jlt.u %d2,%d3,800011dc <Ifx_CircularBuffer_read8+0xe>
8000120a:	1d ff e6 ff 	j 800011d6 <Ifx_CircularBuffer_read8+0x8>

    return Dest;
}
8000120e:	00 90       	ret 

80001210 <Ifx_CircularBuffer_write8>:
    return Dest;
}


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80001210:	40 ae       	mov.aa %a14,%sp
80001212:	40 52       	mov.aa %a2,%a5
    const uint8 *source = (const uint8 *)data;
80001214:	1d 00 07 00 	j 80001222 <Ifx_CircularBuffer_write8+0x12>
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80001218:	82 02       	mov %d2,0
8000121a:	f9 42 04 00 	st.h [%a4]4,%d2
        }
    } while (count > 0);
8000121e:	bf 14 19 00 	jlt %d4,1,80001250 <Ifx_CircularBuffer_write8+0x40>
        count--;
80001222:	c2 f4       	add %d4,-1
80001224:	37 04 50 40 	extr %d4,%d4,0,16
        ((uint8 *)buffer->base)[buffer->index] = *source;
80001228:	b9 42 04 00 	ld.hu %d2,[%a4]4
8000122c:	d4 43       	ld.a %a3,[%a4]
8000122e:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
80001232:	04 22       	ld.bu %d2,[%a2+]
80001234:	34 32       	st.b [%a3],%d2
        buffer->index++;
80001236:	b9 42 04 00 	ld.hu %d2,[%a4]4
8000123a:	c2 12       	add %d2,1
8000123c:	37 02 70 20 	extr.u %d2,%d2,0,16
80001240:	f9 42 04 00 	st.h [%a4]4,%d2
        if (buffer->index >= buffer->length)
80001244:	b9 43 06 00 	ld.hu %d3,[%a4]6
80001248:	3f 32 eb ff 	jlt.u %d2,%d3,8000121e <Ifx_CircularBuffer_write8+0xe>
8000124c:	1d ff e6 ff 	j 80001218 <Ifx_CircularBuffer_write8+0x8>

    return source;
}
80001250:	00 90       	ret 

80001252 <Ifx_Fifo_beginRead>:

/**
 * param: count in bytes
 */
static Ifx_SizeT Ifx_Fifo_beginRead(Ifx_Fifo *fifo, Ifx_SizeT count)
{
80001252:	40 ae       	mov.aa %a14,%sp
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80001254:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80001258:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000125c:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80001260:	00 00       	nop 
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80001262:	c9 40 04 00 	ld.h %d0,[%a4]4
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80001266:	0b 04 80 01 	min %d0,%d4,%d0
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
8000126a:	37 00 50 50 	extr %d5,%d0,0,16
    blockSize               -= blockSize % fifo->elementSize;
8000126e:	c9 46 1a 00 	ld.h %d6,[%a4]26
80001272:	4b 65 01 62 	div %e6,%d5,%d6
80001276:	0b 70 80 20 	sub %d2,%d0,%d7
8000127a:	37 02 50 20 	extr %d2,%d2,0,16
    fifo->eventReader        = FALSE;
8000127e:	82 05       	mov %d5,0
80001280:	e9 45 1c 00 	st.b [%a4]28,%d5
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80001284:	a2 24       	sub %d4,%d2
80001286:	c9 45 18 00 	ld.h %d5,[%a4]24
8000128a:	0b 54 80 41 	min %d4,%d4,%d5
8000128e:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80001292:	df 03 04 00 	jeq %d3,0,8000129a <Ifx_Fifo_beginRead+0x48>
    {
        __enable();
80001296:	0d 00 00 03 	enable 
    IfxCpu_restoreInterrupts(interruptState);

    return blockSize;
}
8000129a:	00 90       	ret 

8000129c <Ifx_Fifo_readEnd>:

/**
 * param: count in bytes
 */
static Ifx_SizeT Ifx_Fifo_readEnd(Ifx_Fifo *fifo, Ifx_SizeT count, Ifx_SizeT blockSize)
{
8000129c:	40 ae       	mov.aa %a14,%sp
8000129e:	02 47       	mov %d7,%d4
    reg.U = __mfcr(CPU_ICR);
800012a0:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800012a4:	37 03 e1 37 	extr.u %d3,%d3,15,1
    __disable();
800012a8:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
800012ac:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
800012ae:	37 05 70 20 	extr.u %d2,%d5,0,16
800012b2:	c9 46 04 00 	ld.h %d6,[%a4]4
800012b6:	a2 26       	sub %d6,%d2
800012b8:	f9 46 04 00 	st.h [%a4]4,%d6

    if (fifo->shared.writerWaitx != 0)
800012bc:	d9 42 0c 00 	lea %a2,[%a4]12
800012c0:	19 46 0c 00 	ld.w %d6,[%a4]12
800012c4:	df 06 07 00 	jeq %d6,0,800012d2 <Ifx_Fifo_readEnd+0x36>
    {
        fifo->shared.writerWaitx -= blockSize;
800012c8:	0b 56 80 40 	sub %d4,%d6,%d5
800012cc:	74 24       	st.w [%a2],%d4

        if (fifo->shared.writerWaitx <= 0)
800012ce:	bf 14 0b 00 	jlt %d4,1,800012e4 <Ifx_Fifo_readEnd+0x48>
    if (enabled != FALSE)
800012d2:	df 03 04 00 	jeq %d3,0,800012da <Ifx_Fifo_readEnd+0x3e>
        __enable();
800012d6:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800012da:	0b 27 80 20 	sub %d2,%d7,%d2
}
800012de:	37 02 50 20 	extr %d2,%d2,0,16
800012e2:	00 90       	ret 
            fifo->shared.writerWaitx = 0;
800012e4:	82 04       	mov %d4,0
800012e6:	74 24       	st.w [%a2],%d4
            fifo->eventWriter        = TRUE; /* Signal the writer */
800012e8:	82 14       	mov %d4,1
800012ea:	e9 44 1d 00 	st.b [%a4]29,%d4
800012ee:	1d ff f2 ff 	j 800012d2 <Ifx_Fifo_readEnd+0x36>

800012f2 <Ifx_Fifo_beginWrite>:
    IfxCpu_restoreInterrupts(interruptState);
}


static Ifx_SizeT Ifx_Fifo_beginWrite(Ifx_Fifo *fifo, Ifx_SizeT count)
{
800012f2:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_ICR);
800012f4:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800012f8:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
800012fc:	0d 00 40 03 	disable 
80001300:	00 00       	nop 
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
80001302:	c9 43 18 00 	ld.h %d3,[%a4]24
80001306:	c9 42 04 00 	ld.h %d2,[%a4]4
8000130a:	0b 23 80 20 	sub %d2,%d3,%d2
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000130e:	0b 24 80 01 	min %d0,%d4,%d2
80001312:	37 00 50 60 	extr %d6,%d0,0,16
    blockSize               -= blockSize % fifo->elementSize;
80001316:	c9 42 1a 00 	ld.h %d2,[%a4]26
8000131a:	4b 26 01 62 	div %e6,%d6,%d2
8000131e:	0b 70 80 20 	sub %d2,%d0,%d7
80001322:	37 02 50 20 	extr %d2,%d2,0,16
    fifo->eventWriter        = FALSE;
80001326:	82 06       	mov %d6,0
80001328:	e9 46 1d 00 	st.b [%a4]29,%d6
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
8000132c:	a2 24       	sub %d4,%d2
8000132e:	0b 34 80 41 	min %d4,%d4,%d3
80001332:	59 44 0c 00 	st.w [%a4]12,%d4
    if (enabled != FALSE)
80001336:	df 05 04 00 	jeq %d5,0,8000133e <Ifx_Fifo_beginWrite+0x4c>
        __enable();
8000133a:	0d 00 00 03 	enable 
    IfxCpu_restoreInterrupts(interruptState);

    return blockSize;
}
8000133e:	00 90       	ret 

80001340 <Ifx_Fifo_endWrite>:

    return result;
}

static Ifx_SizeT Ifx_Fifo_endWrite(Ifx_Fifo *fifo, Ifx_SizeT count, Ifx_SizeT blockSize)
{
80001340:	40 ae       	mov.aa %a14,%sp
80001342:	02 40       	mov %d0,%d4
    reg.U = __mfcr(CPU_ICR);
80001344:	4d c0 e2 6f 	mfcr %d6,$icr
    return reg.B.IE != 0;
80001348:	37 06 e1 67 	extr.u %d6,%d6,15,1
    __disable();
8000134c:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
80001350:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80001352:	37 05 70 20 	extr.u %d2,%d5,0,16
80001356:	c9 43 04 00 	ld.h %d3,[%a4]4
8000135a:	42 23       	add %d3,%d2
8000135c:	37 03 50 30 	extr %d3,%d3,0,16
80001360:	f9 43 04 00 	st.h [%a4]4,%d3
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80001364:	c9 47 10 00 	ld.h %d7,[%a4]16
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80001368:	0b 37 a0 31 	max %d3,%d7,%d3
8000136c:	f9 43 10 00 	st.h [%a4]16,%d3

    if (fifo->shared.readerWaitx != 0)
80001370:	d9 42 08 00 	lea %a2,[%a4]8
80001374:	19 43 08 00 	ld.w %d3,[%a4]8
80001378:	df 03 06 00 	jeq %d3,0,80001384 <Ifx_Fifo_endWrite+0x44>
    {
        fifo->shared.readerWaitx -= blockSize;
8000137c:	a2 53       	sub %d3,%d5
8000137e:	74 23       	st.w [%a2],%d3

        if (fifo->shared.readerWaitx <= 0)
80001380:	bf 13 0b 00 	jlt %d3,1,80001396 <Ifx_Fifo_endWrite+0x56>
    if (enabled != FALSE)
80001384:	df 06 04 00 	jeq %d6,0,8000138c <Ifx_Fifo_endWrite+0x4c>
        __enable();
80001388:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000138c:	0b 20 80 20 	sub %d2,%d0,%d2
}
80001390:	37 02 50 20 	extr %d2,%d2,0,16
80001394:	00 90       	ret 
            fifo->shared.readerWaitx = 0;
80001396:	82 03       	mov %d3,0
80001398:	74 23       	st.w [%a2],%d3
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
8000139a:	82 13       	mov %d3,1
8000139c:	e9 43 1c 00 	st.b [%a4]28,%d3
800013a0:	1d ff f2 ff 	j 80001384 <Ifx_Fifo_endWrite+0x44>

800013a4 <Ifx_Fifo_init>:
{
800013a4:	40 ae       	mov.aa %a14,%sp
800013a6:	40 42       	mov.aa %a2,%a4
    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800013a8:	c2 34       	add %d4,3
800013aa:	37 04 50 40 	extr %d4,%d4,0,16
800013ae:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
800013b2:	82 02       	mov %d2,0
800013b4:	e9 42 1c 00 	st.b [%a4]28,%d2
        fifo->eventWriter        = TRUE;
800013b8:	82 12       	mov %d2,1
800013ba:	e9 42 1d 00 	st.b [%a4]29,%d2
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800013be:	80 42       	mov.d %d2,%a4
800013c0:	1b 72 02 20 	addi %d2,%d2,39
800013c4:	8f 72 c0 21 	andn %d2,%d2,7
800013c8:	74 42       	st.w [%a4],%d2
        fifo->shared.count       = 0;
800013ca:	82 02       	mov %d2,0
800013cc:	f9 42 04 00 	st.h [%a4]4,%d2
        fifo->shared.maxcount    = 0;
800013d0:	f9 42 10 00 	st.h [%a4]16,%d2
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800013d4:	82 02       	mov %d2,0
800013d6:	59 42 0c 00 	st.w [%a4]12,%d2
800013da:	59 42 08 00 	st.w [%a4]8,%d2
        fifo->startIndex         = fifo->endIndex = 0;
800013de:	f9 42 16 00 	st.h [%a4]22,%d2
800013e2:	f9 42 14 00 	st.h [%a4]20,%d2
        fifo->size               = size;
800013e6:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
800013ea:	f9 45 1a 00 	st.h [%a4]26,%d5
}
800013ee:	00 90       	ret 

800013f0 <Ifx_Fifo_create>:
{
800013f0:	40 ae       	mov.aa %a14,%sp
800013f2:	37 05 50 90 	extr %d9,%d5,0,16
    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
800013f6:	1b 34 00 20 	addi %d2,%d4,3
800013fa:	37 02 50 20 	extr %d2,%d2,0,16
800013fe:	8f 32 c0 81 	andn %d8,%d2,3
    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
80001402:	1b 88 02 40 	addi %d4,%d8,40
80001406:	6d 00 f7 37 	call 800083f4 <malloc>
    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
8000140a:	bd 02 07 00 	jz.a %a2,80001418 <Ifx_Fifo_create+0x28>
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
8000140e:	02 95       	mov %d5,%d9
80001410:	02 84       	mov %d4,%d8
80001412:	40 24       	mov.aa %a4,%a2
80001414:	6d ff c8 ff 	call 800013a4 <Ifx_Fifo_init>
}
80001418:	00 90       	ret 

8000141a <Ifx_Fifo_canReadCount>:
{
8000141a:	40 ae       	mov.aa %a14,%sp
    if ((count < fifo->elementSize) || (count > fifo->size))
8000141c:	c9 42 1a 00 	ld.h %d2,[%a4]26
80001420:	3f 24 80 00 	jlt %d4,%d2,80001520 <Ifx_Fifo_canReadCount+0x106>
80001424:	c9 42 18 00 	ld.h %d2,[%a4]24
80001428:	3f 42 7e 00 	jlt %d2,%d4,80001524 <Ifx_Fifo_canReadCount+0x10a>
    reg.U = __mfcr(CPU_ICR);
8000142c:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80001430:	37 03 e1 37 	extr.u %d3,%d3,15,1
    __disable();
80001434:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
80001438:	00 00       	nop 
8000143a:	c9 40 04 00 	ld.h %d0,[%a4]4
        waitCount      = count - Ifx_Fifo_readCount(fifo);
8000143e:	0b 04 80 00 	sub %d0,%d4,%d0
        if (waitCount <= 0)
80001442:	bf 10 2e 00 	jlt %d0,1,8000149e <Ifx_Fifo_canReadCount+0x84>

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80001446:	82 f2       	mov %d2,-1
80001448:	06 f2       	sh %d2,-1
8000144a:	0b 27 00 21 	eq %d2,%d7,%d2
8000144e:	8b f6 1f 24 	and.eq %d2,%d6,-1
80001452:	df 02 1b 80 	jne %d2,0,80001488 <Ifx_Fifo_canReadCount+0x6e>
    reg.U = __mfcr(CPU_ICR);
80001456:	4d c0 e2 1f 	mfcr %d1,$icr
    return reg.B.IE != 0;
8000145a:	37 01 e1 17 	extr.u %d1,%d1,15,1
    __disable();
8000145e:	0d 00 40 03 	disable 
80001462:	00 00       	nop 
    result  = stm->TIM0.U;
80001464:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
80001468:	19 28 10 00 	ld.w %d8,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
8000146c:	19 24 2c 00 	ld.w %d4,[%a2]44
80001470:	02 45       	mov %d5,%d4
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80001472:	02 84       	mov %d4,%d8
80001474:	b7 05 81 2f 	insert %d2,%d5,0,31,1
    if (enabled != FALSE)
80001478:	df 01 04 00 	jeq %d1,0,80001480 <Ifx_Fifo_canReadCount+0x66>
        __enable();
8000147c:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80001480:	0b 46 40 60 	addx %d6,%d6,%d4
80001484:	0b 27 50 70 	addc %d7,%d7,%d2
            fifo->eventReader        = FALSE;
80001488:	82 02       	mov %d2,0
8000148a:	e9 42 1c 00 	st.b [%a4]28,%d2
            fifo->shared.readerWaitx = waitCount;
8000148e:	59 40 08 00 	st.w [%a4]8,%d0
    if (enabled != FALSE)
80001492:	df 03 1c 00 	jeq %d3,0,800014ca <Ifx_Fifo_canReadCount+0xb0>
        __enable();
80001496:	0d 00 00 03 	enable 
8000149a:	1d 00 18 00 	j 800014ca <Ifx_Fifo_canReadCount+0xb0>
            fifo->shared.readerWaitx = 0;
8000149e:	82 02       	mov %d2,0
800014a0:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
800014a4:	82 12       	mov %d2,1
800014a6:	e9 42 1c 00 	st.b [%a4]28,%d2
    if (enabled != FALSE)
800014aa:	df 03 3f 00 	jeq %d3,0,80001528 <Ifx_Fifo_canReadCount+0x10e>
        __enable();
800014ae:	0d 00 00 03 	enable 
            result                   = TRUE;
800014b2:	82 12       	mov %d2,1
800014b4:	00 90       	ret 
    {
        result = FALSE;
    }
    else
    {
        result = IfxStm_now() >= deadLine;
800014b6:	0b 37 00 21 	eq %d2,%d7,%d3
800014ba:	0b 64 50 22 	and.ge.u %d2,%d4,%d6
800014be:	0b 37 90 22 	or.lt %d2,%d7,%d3
800014c2:	8f f2 0f 21 	and %d2,%d2,255
            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800014c6:	df 02 25 80 	jne %d2,0,80001510 <Ifx_Fifo_canReadCount+0xf6>
800014ca:	39 42 1c 00 	ld.bu %d2,[%a4]28
800014ce:	df 02 21 80 	jne %d2,0,80001510 <Ifx_Fifo_canReadCount+0xf6>
    if (deadLine == TIME_INFINITE)
800014d2:	82 f2       	mov %d2,-1
800014d4:	06 f2       	sh %d2,-1
800014d6:	0b 27 00 21 	eq %d2,%d7,%d2
800014da:	8b f6 1f 24 	and.eq %d2,%d6,-1
800014de:	df 02 f6 ff 	jne %d2,0,800014ca <Ifx_Fifo_canReadCount+0xb0>
    reg.U = __mfcr(CPU_ICR);
800014e2:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800014e6:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
800014ea:	0d 00 40 03 	disable 
800014ee:	00 00       	nop 
    result  = stm->TIM0.U;
800014f0:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
800014f4:	19 24 10 00 	ld.w %d4,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
800014f8:	19 22 2c 00 	ld.w %d2,[%a2]44
800014fc:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80001500:	b7 02 81 3f 	insert %d3,%d2,0,31,1
    if (enabled != FALSE)
80001504:	df 05 d9 7f 	jeq %d5,0,800014b6 <Ifx_Fifo_canReadCount+0x9c>
        __enable();
80001508:	0d 00 00 03 	enable 
8000150c:	1d ff d5 ff 	j 800014b6 <Ifx_Fifo_canReadCount+0x9c>
            fifo->shared.readerWaitx = 0;
80001510:	82 02       	mov %d2,0
80001512:	59 42 08 00 	st.w [%a4]8,%d2
            result = fifo->eventReader == TRUE;
80001516:	39 42 1c 00 	ld.bu %d2,[%a4]28
8000151a:	8b 12 00 22 	eq %d2,%d2,1
8000151e:	00 90       	ret 
        result = FALSE;
80001520:	82 02       	mov %d2,0
80001522:	00 90       	ret 
80001524:	82 02       	mov %d2,0
80001526:	00 90       	ret 
            result                   = TRUE;
80001528:	82 12       	mov %d2,1
}
8000152a:	00 90       	ret 

8000152c <Ifx_Fifo_read>:
{
8000152c:	40 ae       	mov.aa %a14,%sp
8000152e:	20 08       	sub.a %sp,8
80001530:	40 4c       	mov.aa %a12,%a4
80001532:	80 5d       	mov.d %d13,%a5
80001534:	02 69       	mov %d9,%d6
80001536:	02 78       	mov %d8,%d7
80001538:	37 04 50 a0 	extr %d10,%d4,0,16
    if (count != 0)
8000153c:	df 0a 7c 00 	jeq %d10,0,80001634 <Ifx_Fifo_read+0x108>
        buffer.base   = fifo->buffer;
80001540:	54 42       	ld.w %d2,[%a4]
80001542:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
80001546:	b9 42 18 00 	ld.hu %d2,[%a4]24
8000154a:	f9 e2 fe ff 	st.h [%a14]-2,%d2
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
8000154e:	b9 42 14 00 	ld.hu %d2,[%a4]20
80001552:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    if (timeout == TIME_INFINITE)
80001556:	82 f2       	mov %d2,-1
80001558:	06 f2       	sh %d2,-1
8000155a:	0b 27 00 21 	eq %d2,%d7,%d2
8000155e:	8b f6 1f 24 	and.eq %d2,%d6,-1
80001562:	df 02 1a 80 	jne %d2,0,80001596 <Ifx_Fifo_read+0x6a>
    reg.U = __mfcr(CPU_ICR);
80001566:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
8000156a:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
8000156e:	0d 00 40 03 	disable 
80001572:	00 00       	nop 
    result  = stm->TIM0.U;
80001574:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
80001578:	19 26 10 00 	ld.w %d6,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
8000157c:	19 22 2c 00 	ld.w %d2,[%a2]44
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80001580:	02 63       	mov %d3,%d6
80001582:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
80001586:	df 04 04 00 	jeq %d4,0,8000158e <Ifx_Fifo_read+0x62>
        __enable();
8000158a:	0d 00 00 03 	enable 
        deadLine = IfxStm_now() + timeout;
8000158e:	0b 39 40 90 	addx %d9,%d9,%d3
80001592:	0b 28 50 80 	addc %d8,%d8,%d2
    boolean            Stop = FALSE;
80001596:	82 0c       	mov %d12,0
80001598:	1d 00 1f 00 	j 800015d6 <Ifx_Fifo_read+0xaa>
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
8000159c:	02 24       	mov %d4,%d2
8000159e:	60 d5       	mov.a %a5,%d13
800015a0:	d9 e4 f8 ff 	lea %a4,[%a14]-8
800015a4:	6d ff 15 fe 	call 800011ce <Ifx_CircularBuffer_read8>
800015a8:	80 2d       	mov.d %d13,%a2
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
800015aa:	02 b5       	mov %d5,%d11
800015ac:	02 a4       	mov %d4,%d10
800015ae:	40 c4       	mov.aa %a4,%a12
800015b0:	6d ff 76 fe 	call 8000129c <Ifx_Fifo_readEnd>
800015b4:	02 2a       	mov %d10,%d2
800015b6:	1d 00 17 00 	j 800015e4 <Ifx_Fifo_read+0xb8>
        result = IfxStm_now() >= deadLine;
800015ba:	0b 38 00 21 	eq %d2,%d8,%d3
800015be:	0b 94 50 22 	and.ge.u %d2,%d4,%d9
800015c2:	0b 38 90 22 	or.lt %d2,%d8,%d3
800015c6:	8f f2 0f 21 	and %d2,%d2,255
            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800015ca:	df 02 2e 80 	jne %d2,0,80001626 <Ifx_Fifo_read+0xfa>
            if (count != 0)
800015ce:	df 0a 3f 80 	jne %d10,0,8000164c <Ifx_Fifo_read+0x120>
        } while (count != 0);
800015d2:	df 0a 2d 00 	jeq %d10,0,8000162c <Ifx_Fifo_read+0x100>
            blockSize = Ifx_Fifo_beginRead(fifo, count);
800015d6:	02 a4       	mov %d4,%d10
800015d8:	40 c4       	mov.aa %a4,%a12
800015da:	6d ff 3c fe 	call 80001252 <Ifx_Fifo_beginRead>
800015de:	02 2b       	mov %d11,%d2
            if (blockSize != 0)
800015e0:	df 02 de ff 	jne %d2,0,8000159c <Ifx_Fifo_read+0x70>
            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800015e4:	df 0c 21 80 	jne %d12,0,80001626 <Ifx_Fifo_read+0xfa>
    if (deadLine == TIME_INFINITE)
800015e8:	82 f2       	mov %d2,-1
800015ea:	06 f2       	sh %d2,-1
800015ec:	0b 28 00 21 	eq %d2,%d8,%d2
800015f0:	8b f9 1f 24 	and.eq %d2,%d9,-1
800015f4:	df 02 ed ff 	jne %d2,0,800015ce <Ifx_Fifo_read+0xa2>
    reg.U = __mfcr(CPU_ICR);
800015f8:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800015fc:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
80001600:	0d 00 40 03 	disable 
80001604:	00 00       	nop 
    result  = stm->TIM0.U;
80001606:	c5 f3 00 00 	lea %a3,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000160a:	19 34 10 00 	ld.w %d4,[%a3]16
    result |= ((uint64)stm->CAP.U) << 32;
8000160e:	19 32 2c 00 	ld.w %d2,[%a3]44
80001612:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80001616:	b7 02 81 3f 	insert %d3,%d2,0,31,1
    if (enabled != FALSE)
8000161a:	df 05 d0 7f 	jeq %d5,0,800015ba <Ifx_Fifo_read+0x8e>
        __enable();
8000161e:	0d 00 00 03 	enable 
80001622:	1d ff cc ff 	j 800015ba <Ifx_Fifo_read+0x8e>
                fifo->shared.readerWaitx = 0;
80001626:	82 02       	mov %d2,0
80001628:	59 c2 08 00 	st.w [%a12]8,%d2
        fifo->startIndex = buffer.index;
8000162c:	c9 e2 fc ff 	ld.h %d2,[%a14]-4
80001630:	f9 c2 14 00 	st.h [%a12]20,%d2
}
80001634:	02 a2       	mov %d2,%d10
80001636:	00 90       	ret 
        result = IfxStm_now() >= deadLine;
80001638:	0b 28 00 31 	eq %d3,%d8,%d2
8000163c:	0b 94 50 32 	and.ge.u %d3,%d4,%d9
80001640:	0b 28 90 32 	or.lt %d3,%d8,%d2
80001644:	8f f3 0f 31 	and %d3,%d3,255
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80001648:	df 03 25 80 	jne %d3,0,80001692 <Ifx_Fifo_read+0x166>
8000164c:	39 c2 1c 00 	ld.bu %d2,[%a12]28
80001650:	df 02 21 80 	jne %d2,0,80001692 <Ifx_Fifo_read+0x166>
    if (deadLine == TIME_INFINITE)
80001654:	82 f2       	mov %d2,-1
80001656:	06 f2       	sh %d2,-1
80001658:	0b 28 00 21 	eq %d2,%d8,%d2
8000165c:	8b f9 1f 24 	and.eq %d2,%d9,-1
80001660:	df 02 f6 ff 	jne %d2,0,8000164c <Ifx_Fifo_read+0x120>
    reg.U = __mfcr(CPU_ICR);
80001664:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80001668:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
8000166c:	0d 00 40 03 	disable 
80001670:	00 00       	nop 
    result  = stm->TIM0.U;
80001672:	c5 f3 00 00 	lea %a3,f0000000 <_SMALL_DATA4_+0x5fff8000>
80001676:	19 34 10 00 	ld.w %d4,[%a3]16
    result |= ((uint64)stm->CAP.U) << 32;
8000167a:	19 32 2c 00 	ld.w %d2,[%a3]44
8000167e:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80001682:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
80001686:	df 05 d9 7f 	jeq %d5,0,80001638 <Ifx_Fifo_read+0x10c>
        __enable();
8000168a:	0d 00 00 03 	enable 
8000168e:	1d ff d5 ff 	j 80001638 <Ifx_Fifo_read+0x10c>
                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
80001692:	39 cc 1c 00 	ld.bu %d12,[%a12]28
80001696:	8b 0c 00 c2 	eq %d12,%d12,0
8000169a:	1d ff 9c ff 	j 800015d2 <Ifx_Fifo_read+0xa6>

8000169e <Ifx_Fifo_clear>:
{
8000169e:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_ICR);
800016a0:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
800016a4:	37 03 e1 37 	extr.u %d3,%d3,15,1
    __disable();
800016a8:	0d 00 40 03 	disable 
800016ac:	00 00       	nop 
    if (fifo->shared.writerWaitx != 0)
800016ae:	d9 42 0c 00 	lea %a2,[%a4]12
800016b2:	19 42 0c 00 	ld.w %d2,[%a4]12
800016b6:	df 02 07 00 	jeq %d2,0,800016c4 <Ifx_Fifo_clear+0x26>
        fifo->shared.writerWaitx = 0;
800016ba:	82 02       	mov %d2,0
800016bc:	74 22       	st.w [%a2],%d2
        fifo->eventWriter        = TRUE; /* Signal the writer */
800016be:	82 12       	mov %d2,1
800016c0:	e9 42 1d 00 	st.b [%a4]29,%d2
    fifo->eventReader        = FALSE;
800016c4:	82 02       	mov %d2,0
800016c6:	e9 42 1c 00 	st.b [%a4]28,%d2
    fifo->shared.readerWaitx = 0;
800016ca:	82 02       	mov %d2,0
800016cc:	59 42 08 00 	st.w [%a4]8,%d2
    fifo->shared.count       = 0;
800016d0:	f9 42 04 00 	st.h [%a4]4,%d2
    fifo->shared.maxcount    = 0;
800016d4:	f9 42 10 00 	st.h [%a4]16,%d2
    fifo->startIndex         = fifo->endIndex;
800016d8:	c9 42 16 00 	ld.h %d2,[%a4]22
800016dc:	f9 42 14 00 	st.h [%a4]20,%d2
    if (enabled != FALSE)
800016e0:	df 03 04 00 	jeq %d3,0,800016e8 <Ifx_Fifo_clear+0x4a>
        __enable();
800016e4:	0d 00 00 03 	enable 
}
800016e8:	00 90       	ret 

800016ea <Ifx_Fifo_canWriteCount>:
{
800016ea:	40 ae       	mov.aa %a14,%sp
    if ((count < fifo->elementSize) || (count > fifo->size))
800016ec:	c9 42 1a 00 	ld.h %d2,[%a4]26
800016f0:	3f 24 8d 00 	jlt %d4,%d2,8000180a <Ifx_Fifo_canWriteCount+0x120>
800016f4:	c9 42 18 00 	ld.h %d2,[%a4]24
800016f8:	3f 42 8b 00 	jlt %d2,%d4,8000180e <Ifx_Fifo_canWriteCount+0x124>
    reg.U = __mfcr(CPU_ICR);
800016fc:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80001700:	37 03 e1 37 	extr.u %d3,%d3,15,1
    __disable();
80001704:	0d 00 40 03 	disable 
80001708:	00 00       	nop 
        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
8000170a:	c9 45 18 00 	ld.h %d5,[%a4]24
8000170e:	c9 42 04 00 	ld.h %d2,[%a4]4
80001712:	0b 25 80 20 	sub %d2,%d5,%d2
80001716:	3f 42 0e 00 	jlt %d2,%d4,80001732 <Ifx_Fifo_canWriteCount+0x48>
            fifo->shared.writerWaitx = 0;
8000171a:	82 02       	mov %d2,0
8000171c:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
80001720:	82 12       	mov %d2,1
80001722:	e9 42 1d 00 	st.b [%a4]29,%d2
    if (enabled != FALSE)
80001726:	df 03 76 00 	jeq %d3,0,80001812 <Ifx_Fifo_canWriteCount+0x128>
        __enable();
8000172a:	0d 00 00 03 	enable 
            result                   = TRUE;
8000172e:	82 12       	mov %d2,1
80001730:	00 90       	ret 
    if (timeout == TIME_INFINITE)
80001732:	82 f2       	mov %d2,-1
80001734:	06 f2       	sh %d2,-1
80001736:	0b 27 00 21 	eq %d2,%d7,%d2
8000173a:	8b f6 1f 24 	and.eq %d2,%d6,-1
8000173e:	df 02 1b 80 	jne %d2,0,80001774 <Ifx_Fifo_canWriteCount+0x8a>
    reg.U = __mfcr(CPU_ICR);
80001742:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80001746:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
8000174a:	0d 00 40 03 	disable 
8000174e:	00 00       	nop 
    result  = stm->TIM0.U;
80001750:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
80001754:	19 28 10 00 	ld.w %d8,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
80001758:	19 20 2c 00 	ld.w %d0,[%a2]44
8000175c:	02 01       	mov %d1,%d0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000175e:	02 80       	mov %d0,%d8
80001760:	b7 01 81 2f 	insert %d2,%d1,0,31,1
    if (enabled != FALSE)
80001764:	df 05 04 00 	jeq %d5,0,8000176c <Ifx_Fifo_canWriteCount+0x82>
        __enable();
80001768:	0d 00 00 03 	enable 
        deadLine = IfxStm_now() + timeout;
8000176c:	0b 06 40 60 	addx %d6,%d6,%d0
80001770:	0b 27 50 70 	addc %d7,%d7,%d2
            fifo->eventWriter        = FALSE;
80001774:	82 02       	mov %d2,0
80001776:	e9 42 1d 00 	st.b [%a4]29,%d2
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000177a:	c9 45 18 00 	ld.h %d5,[%a4]24
8000177e:	c9 42 04 00 	ld.h %d2,[%a4]4
80001782:	0b 25 80 20 	sub %d2,%d5,%d2
80001786:	0b 24 80 20 	sub %d2,%d4,%d2
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000178a:	82 04       	mov %d4,0
8000178c:	0b 24 a0 21 	max %d2,%d4,%d2
80001790:	59 42 0c 00 	st.w [%a4]12,%d2
    if (enabled != FALSE)
80001794:	df 03 10 00 	jeq %d3,0,800017b4 <Ifx_Fifo_canWriteCount+0xca>
        __enable();
80001798:	0d 00 00 03 	enable 
8000179c:	1d 00 0c 00 	j 800017b4 <Ifx_Fifo_canWriteCount+0xca>
        result = IfxStm_now() >= deadLine;
800017a0:	0b 37 00 21 	eq %d2,%d7,%d3
800017a4:	0b 64 50 22 	and.ge.u %d2,%d4,%d6
800017a8:	0b 37 90 22 	or.lt %d2,%d7,%d3
800017ac:	8f f2 0f 21 	and %d2,%d2,255
            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800017b0:	df 02 25 80 	jne %d2,0,800017fa <Ifx_Fifo_canWriteCount+0x110>
800017b4:	39 42 1d 00 	ld.bu %d2,[%a4]29
800017b8:	df 02 21 80 	jne %d2,0,800017fa <Ifx_Fifo_canWriteCount+0x110>
    if (deadLine == TIME_INFINITE)
800017bc:	82 f2       	mov %d2,-1
800017be:	06 f2       	sh %d2,-1
800017c0:	0b 27 00 21 	eq %d2,%d7,%d2
800017c4:	8b f6 1f 24 	and.eq %d2,%d6,-1
800017c8:	df 02 f6 ff 	jne %d2,0,800017b4 <Ifx_Fifo_canWriteCount+0xca>
    reg.U = __mfcr(CPU_ICR);
800017cc:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800017d0:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
800017d4:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
800017d8:	00 00       	nop 
    result  = stm->TIM0.U;
800017da:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
800017de:	19 24 10 00 	ld.w %d4,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
800017e2:	19 22 2c 00 	ld.w %d2,[%a2]44
800017e6:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800017ea:	b7 02 81 3f 	insert %d3,%d2,0,31,1
    if (enabled != FALSE)
800017ee:	df 05 d9 7f 	jeq %d5,0,800017a0 <Ifx_Fifo_canWriteCount+0xb6>
        __enable();
800017f2:	0d 00 00 03 	enable 
800017f6:	1d ff d5 ff 	j 800017a0 <Ifx_Fifo_canWriteCount+0xb6>
            fifo->shared.writerWaitx = 0;
800017fa:	82 02       	mov %d2,0
800017fc:	59 42 0c 00 	st.w [%a4]12,%d2
            result = fifo->eventWriter == TRUE;
80001800:	39 42 1d 00 	ld.bu %d2,[%a4]29
80001804:	8b 12 00 22 	eq %d2,%d2,1
80001808:	00 90       	ret 
        result = FALSE;
8000180a:	82 02       	mov %d2,0
8000180c:	00 90       	ret 
8000180e:	82 02       	mov %d2,0
80001810:	00 90       	ret 
            result                   = TRUE;
80001812:	82 12       	mov %d2,1
}
80001814:	00 90       	ret 

80001816 <Ifx_Fifo_write>:



Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
80001816:	40 ae       	mov.aa %a14,%sp
80001818:	20 08       	sub.a %sp,8
8000181a:	40 4c       	mov.aa %a12,%a4
8000181c:	80 5d       	mov.d %d13,%a5
8000181e:	02 69       	mov %d9,%d6
80001820:	02 78       	mov %d8,%d7
80001822:	37 04 50 a0 	extr %d10,%d4,0,16
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80001826:	df 0a 7c 00 	jeq %d10,0,8000191e <Ifx_Fifo_write+0x108>
    {
        buffer.base   = fifo->buffer;
8000182a:	54 42       	ld.w %d2,[%a4]
8000182c:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
80001830:	b9 42 18 00 	ld.hu %d2,[%a4]24
80001834:	f9 e2 fe ff 	st.h [%a14]-2,%d2
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
80001838:	b9 42 16 00 	ld.hu %d2,[%a4]22
8000183c:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    if (timeout == TIME_INFINITE)
80001840:	82 f2       	mov %d2,-1
80001842:	06 f2       	sh %d2,-1
80001844:	0b 27 00 21 	eq %d2,%d7,%d2
80001848:	8b f6 1f 24 	and.eq %d2,%d6,-1
8000184c:	df 02 1a 80 	jne %d2,0,80001880 <Ifx_Fifo_write+0x6a>
    reg.U = __mfcr(CPU_ICR);
80001850:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80001854:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
80001858:	0d 00 40 03 	disable 
8000185c:	00 00       	nop 
    result  = stm->TIM0.U;
8000185e:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
80001862:	19 26 10 00 	ld.w %d6,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
80001866:	19 22 2c 00 	ld.w %d2,[%a2]44
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000186a:	02 63       	mov %d3,%d6
8000186c:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
80001870:	df 04 04 00 	jeq %d4,0,80001878 <Ifx_Fifo_write+0x62>
        __enable();
80001874:	0d 00 00 03 	enable 
        deadLine = IfxStm_now() + timeout;
80001878:	0b 39 40 90 	addx %d9,%d9,%d3
8000187c:	0b 28 50 80 	addc %d8,%d8,%d2
    boolean            Stop = FALSE;
80001880:	82 0c       	mov %d12,0
80001882:	1d 00 1f 00 	j 800018c0 <Ifx_Fifo_write+0xaa>
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
            {
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
80001886:	02 24       	mov %d4,%d2
80001888:	60 d5       	mov.a %a5,%d13
8000188a:	d9 e4 f8 ff 	lea %a4,[%a14]-8
8000188e:	6d ff c1 fc 	call 80001210 <Ifx_CircularBuffer_write8>
80001892:	80 2d       	mov.d %d13,%a2
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
80001894:	02 b5       	mov %d5,%d11
80001896:	02 a4       	mov %d4,%d10
80001898:	40 c4       	mov.aa %a4,%a12
8000189a:	6d ff 53 fd 	call 80001340 <Ifx_Fifo_endWrite>
8000189e:	02 2a       	mov %d10,%d2
800018a0:	1d 00 17 00 	j 800018ce <Ifx_Fifo_write+0xb8>
        result = IfxStm_now() >= deadLine;
800018a4:	0b 38 00 21 	eq %d2,%d8,%d3
800018a8:	0b 94 50 22 	and.ge.u %d2,%d4,%d9
800018ac:	0b 38 90 22 	or.lt %d2,%d8,%d3
800018b0:	8f f2 0f 21 	and %d2,%d2,255
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800018b4:	df 02 2e 80 	jne %d2,0,80001910 <Ifx_Fifo_write+0xfa>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
800018b8:	df 0a 3f 80 	jne %d10,0,80001936 <Ifx_Fifo_write+0x120>
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
            }
        } while (count != 0);
800018bc:	df 0a 2d 00 	jeq %d10,0,80001916 <Ifx_Fifo_write+0x100>
            blockSize = Ifx_Fifo_beginWrite(fifo, count);
800018c0:	02 a4       	mov %d4,%d10
800018c2:	40 c4       	mov.aa %a4,%a12
800018c4:	6d ff 17 fd 	call 800012f2 <Ifx_Fifo_beginWrite>
800018c8:	02 2b       	mov %d11,%d2
            if (blockSize != 0)
800018ca:	df 02 de ff 	jne %d2,0,80001886 <Ifx_Fifo_write+0x70>
            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800018ce:	df 0c 21 80 	jne %d12,0,80001910 <Ifx_Fifo_write+0xfa>
    if (deadLine == TIME_INFINITE)
800018d2:	82 f2       	mov %d2,-1
800018d4:	06 f2       	sh %d2,-1
800018d6:	0b 28 00 21 	eq %d2,%d8,%d2
800018da:	8b f9 1f 24 	and.eq %d2,%d9,-1
800018de:	df 02 ed ff 	jne %d2,0,800018b8 <Ifx_Fifo_write+0xa2>
    reg.U = __mfcr(CPU_ICR);
800018e2:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800018e6:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
800018ea:	0d 00 40 03 	disable 
800018ee:	00 00       	nop 
    result  = stm->TIM0.U;
800018f0:	c5 f3 00 00 	lea %a3,f0000000 <_SMALL_DATA4_+0x5fff8000>
800018f4:	19 34 10 00 	ld.w %d4,[%a3]16
    result |= ((uint64)stm->CAP.U) << 32;
800018f8:	19 32 2c 00 	ld.w %d2,[%a3]44
800018fc:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80001900:	b7 02 81 3f 	insert %d3,%d2,0,31,1
    if (enabled != FALSE)
80001904:	df 05 d0 7f 	jeq %d5,0,800018a4 <Ifx_Fifo_write+0x8e>
        __enable();
80001908:	0d 00 00 03 	enable 
8000190c:	1d ff cc ff 	j 800018a4 <Ifx_Fifo_write+0x8e>
                fifo->shared.writerWaitx = 0;
80001910:	82 02       	mov %d2,0
80001912:	59 c2 0c 00 	st.w [%a12]12,%d2

        fifo->endIndex = buffer.index;
80001916:	c9 e2 fc ff 	ld.h %d2,[%a14]-4
8000191a:	f9 c2 16 00 	st.h [%a12]22,%d2
    }

    return count;
}
8000191e:	02 a2       	mov %d2,%d10
80001920:	00 90       	ret 
        result = IfxStm_now() >= deadLine;
80001922:	0b 28 00 31 	eq %d3,%d8,%d2
80001926:	0b 94 50 32 	and.ge.u %d3,%d4,%d9
8000192a:	0b 28 90 32 	or.lt %d3,%d8,%d2
8000192e:	8f f3 0f 31 	and %d3,%d3,255
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80001932:	df 03 25 80 	jne %d3,0,8000197c <Ifx_Fifo_write+0x166>
80001936:	39 c2 1d 00 	ld.bu %d2,[%a12]29
8000193a:	df 02 21 80 	jne %d2,0,8000197c <Ifx_Fifo_write+0x166>
    if (deadLine == TIME_INFINITE)
8000193e:	82 f2       	mov %d2,-1
80001940:	06 f2       	sh %d2,-1
80001942:	0b 28 00 21 	eq %d2,%d8,%d2
80001946:	8b f9 1f 24 	and.eq %d2,%d9,-1
8000194a:	df 02 f6 ff 	jne %d2,0,80001936 <Ifx_Fifo_write+0x120>
    reg.U = __mfcr(CPU_ICR);
8000194e:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
80001952:	37 05 e1 57 	extr.u %d5,%d5,15,1
    __disable();
80001956:	0d 00 40 03 	disable 
8000195a:	00 00       	nop 
    result  = stm->TIM0.U;
8000195c:	c5 f3 00 00 	lea %a3,f0000000 <_SMALL_DATA4_+0x5fff8000>
80001960:	19 34 10 00 	ld.w %d4,[%a3]16
    result |= ((uint64)stm->CAP.U) << 32;
80001964:	19 32 2c 00 	ld.w %d2,[%a3]44
80001968:	8f 04 40 41 	or %d4,%d4,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000196c:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
80001970:	df 05 d9 7f 	jeq %d5,0,80001922 <Ifx_Fifo_write+0x10c>
        __enable();
80001974:	0d 00 00 03 	enable 
80001978:	1d ff d5 ff 	j 80001922 <Ifx_Fifo_write+0x10c>
                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
8000197c:	39 cc 1d 00 	ld.bu %d12,[%a12]29
80001980:	8b 0c 00 c2 	eq %d12,%d12,0
80001984:	1d ff 9c ff 	j 800018bc <Ifx_Fifo_write+0xa6>

80001988 <IfxScuCcu_isOscillatorStable>:
    *cfg = IfxScuCcu_defaultErayPllConfig;
}


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
80001988:	40 ae       	mov.aa %a14,%sp
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000198a:	6d 00 15 05 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
8000198e:	02 28       	mov %d8,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80001990:	91 30 00 2f 	movh.a %a2,61443
80001994:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
80001998:	54 23       	ld.w %d3,[%a2]
8000199a:	8f 03 c6 31 	andn %d3,%d3,96
8000199e:	74 23       	st.w [%a2],%d3

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
800019a0:	91 00 00 36 	movh.a %a3,24576
800019a4:	19 33 40 c0 	ld.w %d3,[%a3]1792 <60000700 <IfxScuCcu_xtalFrequency>>
800019a8:	7b 00 b6 26 	movh %d2,27488
800019ac:	1b b2 a6 2c 	addi %d2,%d2,-13717
800019b0:	73 23 68 20 	mul.u %e2,%d3,%d2
800019b4:	8f c3 1e 20 	sh %d2,%d3,-20
800019b8:	c2 f2       	add %d2,-1
800019ba:	54 23       	ld.w %d3,[%a2]
800019bc:	37 23 05 38 	insert %d3,%d3,%d2,16,5
800019c0:	74 23       	st.w [%a2],%d3

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
800019c2:	54 23       	ld.w %d3,[%a2]
800019c4:	b7 13 01 31 	insert %d3,%d3,1,2,1
800019c8:	74 23       	st.w [%a2],%d3
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
800019ca:	3b 00 28 30 	mov %d3,640

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800019ce:	1d 00 05 00 	j 800019d8 <IfxScuCcu_isOscillatorStable+0x50>
    {
        TimeoutCtr--;
800019d2:	c2 f3       	add %d3,-1

        if (TimeoutCtr == 0)
800019d4:	df 03 25 00 	jeq %d3,0,80001a1e <IfxScuCcu_isOscillatorStable+0x96>
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
800019d8:	91 30 00 2f 	movh.a %a2,61443
800019dc:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x6002e010>>
800019e0:	54 25       	ld.w %d5,[%a2]
800019e2:	6f 15 f8 7f 	jz.t %d5,1,800019d2 <IfxScuCcu_isOscillatorStable+0x4a>
800019e6:	54 25       	ld.w %d5,[%a2]
800019e8:	6f 85 f5 7f 	jz.t %d5,8,800019d2 <IfxScuCcu_isOscillatorStable+0x4a>
    boolean status     = 0;
800019ec:	82 09       	mov %d9,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
800019ee:	02 84       	mov %d4,%d8
800019f0:	6d 00 79 03 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
800019f4:	91 30 00 2f 	movh.a %a2,61443
800019f8:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
800019fc:	54 23       	ld.w %d3,[%a2]
800019fe:	b7 13 81 31 	insert %d3,%d3,1,3,1
80001a02:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
80001a04:	91 30 00 2f 	movh.a %a2,61443
80001a08:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001a0c:	54 23       	ld.w %d3,[%a2]
80001a0e:	b7 13 81 31 	insert %d3,%d3,1,3,1
80001a12:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinitPw);
80001a14:	02 84       	mov %d4,%d8
80001a16:	6d 00 ec 04 	call 800023ee <IfxScuWdt_setCpuEndinit>
    }

    return status;
}
80001a1a:	02 92       	mov %d2,%d9
80001a1c:	00 90       	ret 
            status = 1;
80001a1e:	82 19       	mov %d9,1
80001a20:	1d ff e7 ff 	j 800019ee <IfxScuCcu_isOscillatorStable+0x66>

80001a24 <IfxScuCcu_getOsc0Frequency>:
{
80001a24:	40 ae       	mov.aa %a14,%sp
    return (float32)IfxScuCcu_xtalFrequency;
80001a26:	91 00 00 26 	movh.a %a2,24576
80001a2a:	19 22 40 c0 	ld.w %d2,[%a2]1792 <60000700 <IfxScuCcu_xtalFrequency>>
}
80001a2e:	4b 02 61 21 	utof %d2,%d2
80001a32:	00 90       	ret 

80001a34 <IfxScuCcu_getOscFrequency>:
{
80001a34:	40 ae       	mov.aa %a14,%sp
    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80001a36:	91 30 00 2f 	movh.a %a2,61443
80001a3a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001a3e:	54 22       	ld.w %d2,[%a2]
80001a40:	37 02 62 2e 	extr.u %d2,%d2,28,2
80001a44:	df 02 10 00 	jeq %d2,0,80001a64 <IfxScuCcu_getOscFrequency+0x30>
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80001a48:	54 22       	ld.w %d2,[%a2]
80001a4a:	37 02 62 2e 	extr.u %d2,%d2,28,2
80001a4e:	df 12 04 00 	jeq %d2,1,80001a56 <IfxScuCcu_getOscFrequency+0x22>
        freq = 0.0f;
80001a52:	82 02       	mov %d2,0
}
80001a54:	00 90       	ret 
        freq = (float32)IfxScuCcu_xtalFrequency;
80001a56:	91 00 00 26 	movh.a %a2,24576
80001a5a:	19 22 40 c0 	ld.w %d2,[%a2]1792 <60000700 <IfxScuCcu_xtalFrequency>>
80001a5e:	4b 02 61 21 	utof %d2,%d2
80001a62:	00 90       	ret 
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80001a64:	7b f0 cb 24 	movh %d2,19647
80001a68:	1b 02 c2 2b 	addi %d2,%d2,-17376
80001a6c:	00 90       	ret 

80001a6e <IfxScuCcu_getPllErayFrequency>:
{
80001a6e:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
80001a70:	6d ff e2 ff 	call 80001a34 <IfxScuCcu_getOscFrequency>
80001a74:	02 24       	mov %d4,%d2
    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80001a76:	91 30 00 2f 	movh.a %a2,61443
80001a7a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001a7e:	19 23 24 00 	ld.w %d3,[%a2]36 <f0030024 <_SMALL_DATA4_+0x60028024>>
80001a82:	6f 03 21 80 	jnz.t %d3,0,80001ac4 <IfxScuCcu_getPllErayFrequency+0x56>
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80001a86:	91 30 00 2f 	movh.a %a2,61443
80001a8a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001a8e:	19 22 24 00 	ld.w %d2,[%a2]36 <f0030024 <_SMALL_DATA4_+0x60028024>>
80001a92:	6f 32 27 80 	jnz.t %d2,3,80001ae0 <IfxScuCcu_getPllErayFrequency+0x72>
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80001a96:	91 30 00 2f 	movh.a %a2,61443
80001a9a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001a9e:	19 22 28 00 	ld.w %d2,[%a2]40 <f0030028 <_SMALL_DATA4_+0x60028028>>
80001aa2:	37 02 e5 24 	extr.u %d2,%d2,9,5
80001aa6:	c2 12       	add %d2,1
80001aa8:	4b 02 41 21 	itof %d2,%d2
80001aac:	4b 42 41 40 	mul.f %d4,%d2,%d4
80001ab0:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <_SMALL_DATA4_+0x6002802c>>
80001ab4:	8f f2 07 21 	and %d2,%d2,127
80001ab8:	c2 12       	add %d2,1
80001aba:	4b 02 41 21 	itof %d2,%d2
80001abe:	4b 24 51 20 	div.f %d2,%d4,%d2
}
80001ac2:	00 90       	ret 
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80001ac4:	91 30 00 2f 	movh.a %a2,61443
80001ac8:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001acc:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <_SMALL_DATA4_+0x6002802c>>
80001ad0:	37 02 67 28 	extr.u %d2,%d2,16,7
80001ad4:	c2 12       	add %d2,1
80001ad6:	4b 02 41 21 	itof %d2,%d2
80001ada:	4b 24 51 20 	div.f %d2,%d4,%d2
80001ade:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80001ae0:	91 30 00 2f 	movh.a %a2,61443
80001ae4:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001ae8:	19 24 2c 00 	ld.w %d4,[%a2]44 <f003002c <_SMALL_DATA4_+0x6002802c>>
80001aec:	8f f4 07 41 	and %d4,%d4,127
80001af0:	c2 14       	add %d4,1
80001af2:	6d 00 81 31 	call 80007df4 <__floatsidf>
80001af6:	0b 23 10 68 	mov %e6,%d3,%d2
80001afa:	82 04       	mov %d4,0
80001afc:	7b 80 19 54 	movh %d5,16792
80001b00:	1b 45 78 5d 	addi %d5,%d5,-10364
80001b04:	6d 00 90 30 	call 80007c24 <__divdf3>
80001b08:	0b 23 10 48 	mov %e4,%d3,%d2
80001b0c:	6d 00 bf 31 	call 80007e8a <__truncdfsf2>
80001b10:	00 90       	ret 

80001b12 <IfxScuCcu_getPllFrequency>:
{
80001b12:	40 ae       	mov.aa %a14,%sp
    oscFreq = IfxScuCcu_getOscFrequency();
80001b14:	6d ff 90 ff 	call 80001a34 <IfxScuCcu_getOscFrequency>
80001b18:	02 24       	mov %d4,%d2
    if (scu->PLLSTAT.B.VCOBYST == 1)
80001b1a:	91 30 00 2f 	movh.a %a2,61443
80001b1e:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001b22:	19 23 14 00 	ld.w %d3,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
80001b26:	6f 03 27 80 	jnz.t %d3,0,80001b74 <IfxScuCcu_getPllFrequency+0x62>
    else if (scu->PLLSTAT.B.FINDIS == 1)
80001b2a:	91 30 00 2f 	movh.a %a2,61443
80001b2e:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001b32:	19 22 14 00 	ld.w %d2,[%a2]20 <f0030014 <_SMALL_DATA4_+0x60028014>>
80001b36:	6f 32 2d 80 	jnz.t %d2,3,80001b90 <IfxScuCcu_getPllFrequency+0x7e>
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80001b3a:	91 30 00 2f 	movh.a %a2,61443
80001b3e:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001b42:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
80001b46:	37 02 e7 24 	extr.u %d2,%d2,9,7
80001b4a:	c2 12       	add %d2,1
80001b4c:	4b 02 41 21 	itof %d2,%d2
80001b50:	4b 42 41 30 	mul.f %d3,%d2,%d4
80001b54:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001b58:	8f f4 07 41 	and %d4,%d4,127
80001b5c:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <_SMALL_DATA4_+0x60028018>>
80001b60:	37 02 64 2c 	extr.u %d2,%d2,24,4
80001b64:	c2 12       	add %d2,1
80001b66:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80001b6a:	4b 02 41 21 	itof %d2,%d2
80001b6e:	4b 23 51 20 	div.f %d2,%d3,%d2
}
80001b72:	00 90       	ret 
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80001b74:	91 30 00 2f 	movh.a %a2,61443
80001b78:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001b7c:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001b80:	37 02 67 28 	extr.u %d2,%d2,16,7
80001b84:	c2 12       	add %d2,1
80001b86:	4b 02 41 21 	itof %d2,%d2
80001b8a:	4b 24 51 20 	div.f %d2,%d4,%d2
80001b8e:	00 90       	ret 
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80001b90:	91 30 00 2f 	movh.a %a2,61443
80001b94:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <_SMALL_DATA4_+0x6002e000>>
80001b98:	19 24 1c 00 	ld.w %d4,[%a2]28 <f003001c <_SMALL_DATA4_+0x6002801c>>
80001b9c:	8f f4 07 41 	and %d4,%d4,127
80001ba0:	c2 14       	add %d4,1
80001ba2:	6d 00 29 31 	call 80007df4 <__floatsidf>
80001ba6:	0b 23 10 68 	mov %e6,%d3,%d2
80001baa:	82 04       	mov %d4,0
80001bac:	7b 80 19 54 	movh %d5,16792
80001bb0:	1b 45 78 5d 	addi %d5,%d5,-10364
80001bb4:	6d 00 38 30 	call 80007c24 <__divdf3>
80001bb8:	0b 23 10 48 	mov %e4,%d3,%d2
80001bbc:	6d 00 67 31 	call 80007e8a <__truncdfsf2>
80001bc0:	00 90       	ret 

80001bc2 <IfxScuCcu_getSourceFrequency>:
{
80001bc2:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON0.B.CLKSEL)
80001bc4:	91 30 00 2f 	movh.a %a2,61443
80001bc8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001bcc:	54 22       	ld.w %d2,[%a2]
80001bce:	37 02 62 2e 	extr.u %d2,%d2,28,2
80001bd2:	df 02 07 00 	jeq %d2,0,80001be0 <IfxScuCcu_getSourceFrequency+0x1e>
80001bd6:	df 12 0a 80 	jne %d2,1,80001bea <IfxScuCcu_getSourceFrequency+0x28>
        sourcefreq = IfxScuCcu_getPllFrequency();
80001bda:	6d ff 9c ff 	call 80001b12 <IfxScuCcu_getPllFrequency>
        break;
80001bde:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
80001be0:	7b f0 cb 24 	movh %d2,19647
80001be4:	1b 02 c2 2b 	addi %d2,%d2,-17376
80001be8:	00 90       	ret 
        sourcefreq = 0;
80001bea:	82 02       	mov %d2,0
}
80001bec:	00 90       	ret 

80001bee <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80001bee:	40 ae       	mov.aa %a14,%sp
80001bf0:	02 48       	mov %d8,%d4
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
80001bf2:	6d ff e8 ff 	call 80001bc2 <IfxScuCcu_getSourceFrequency>
80001bf6:	91 30 00 2f 	movh.a %a2,61443
80001bfa:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001bfe:	54 23       	ld.w %d3,[%a2]
80001c00:	37 03 64 34 	extr.u %d3,%d3,8,4
80001c04:	4b 03 41 31 	itof %d3,%d3
80001c08:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80001c0c:	4b 28 41 40 	mul.f %d4,%d8,%d2
80001c10:	4b 04 71 41 	ftouz %d4,%d4
    uint32 stmCountBegin = STM0_TIM0.U;
80001c14:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80001c18:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80001c1c:	a2 32       	sub %d2,%d3
80001c1e:	3f 42 fd ff 	jlt.u %d2,%d4,80001c18 <IfxScuCcu_wait+0x2a>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80001c22:	00 90       	ret 

80001c24 <IfxScuCcu_getMaxFrequency>:
{
80001c24:	40 ae       	mov.aa %a14,%sp
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80001c26:	6d ff ce ff 	call 80001bc2 <IfxScuCcu_getSourceFrequency>
    switch (SCU_CCUCON0.B.LPDIV)
80001c2a:	91 30 00 2f 	movh.a %a2,61443
80001c2e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001c32:	54 23       	ld.w %d3,[%a2]
80001c34:	37 03 64 36 	extr.u %d3,%d3,12,4
80001c38:	ff 53 39 80 	jge.u %d3,5,80001caa <IfxScuCcu_getMaxFrequency+0x86>
80001c3c:	91 00 00 28 	movh.a %a2,32768
80001c40:	d9 22 cc 11 	lea %a2,[%a2]7244 <80001c4c <IfxScuCcu_getMaxFrequency+0x28>>
80001c44:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
80001c48:	dc 02       	ji %a2
80001c4a:	00 00       	nop 
80001c4c:	1d 00 0a 00 	j 80001c60 <IfxScuCcu_getMaxFrequency+0x3c>
80001c50:	1d 00 19 00 	j 80001c82 <IfxScuCcu_getMaxFrequency+0x5e>
80001c54:	1d 00 1c 00 	j 80001c8c <IfxScuCcu_getMaxFrequency+0x68>
80001c58:	1d 00 1f 00 	j 80001c96 <IfxScuCcu_getMaxFrequency+0x72>
80001c5c:	1d 00 22 00 	j 80001ca0 <IfxScuCcu_getMaxFrequency+0x7c>
        if (SCU_CCUCON5.B.MAXDIV == 0)
80001c60:	91 30 00 2f 	movh.a %a2,61443
80001c64:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
80001c68:	54 23       	ld.w %d3,[%a2]
80001c6a:	8f f3 00 31 	and %d3,%d3,15
80001c6e:	df 03 1f 00 	jeq %d3,0,80001cac <IfxScuCcu_getMaxFrequency+0x88>
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
80001c72:	54 23       	ld.w %d3,[%a2]
80001c74:	8f f3 00 31 	and %d3,%d3,15
80001c78:	4b 03 41 31 	itof %d3,%d3
80001c7c:	4b 32 51 20 	div.f %d2,%d2,%d3
80001c80:	00 90       	ret 
        maxFrequency = sourceFrequency / 15;
80001c82:	7b 00 17 34 	movh %d3,16752
80001c86:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001c8a:	00 90       	ret 
        maxFrequency = sourceFrequency / 30;
80001c8c:	7b 00 1f 34 	movh %d3,16880
80001c90:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001c94:	00 90       	ret 
        maxFrequency = sourceFrequency / 60;
80001c96:	7b 00 27 34 	movh %d3,17008
80001c9a:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001c9e:	00 90       	ret 
        maxFrequency = sourceFrequency / 120;
80001ca0:	7b 00 2f 34 	movh %d3,17136
80001ca4:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001ca8:	00 90       	ret 
    switch (SCU_CCUCON0.B.LPDIV)
80001caa:	82 02       	mov %d2,0
}
80001cac:	00 90       	ret 

80001cae <IfxScuCcu_getMaxFrequency_end>:
	...

80001cb0 <IfxScuCcu_getBaud1Frequency>:
{
80001cb0:	40 ae       	mov.aa %a14,%sp
80001cb2:	20 08       	sub.a %sp,8
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80001cb4:	91 30 00 2f 	movh.a %a2,61443
80001cb8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001cbc:	54 28       	ld.w %d8,[%a2]
    if (ccucon0.B.BAUD1DIV == 0)
80001cbe:	59 e8 fc ff 	st.w [%a14]-4 <f0036030 <_SMALL_DATA4_+0x6002e030>>,%d8
80001cc2:	8f f8 00 21 	and %d2,%d8,15
80001cc6:	df 02 04 80 	jne %d2,0,80001cce <IfxScuCcu_getBaud1Frequency+0x1e>
        frequency = 0;
80001cca:	82 02       	mov %d2,0
}
80001ccc:	00 90       	ret 
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
80001cce:	6d ff ab ff 	call 80001c24 <IfxScuCcu_getMaxFrequency>
80001cd2:	8f f8 00 31 	and %d3,%d8,15
80001cd6:	4b 03 41 31 	itof %d3,%d3
80001cda:	4b 32 51 20 	div.f %d2,%d2,%d3
80001cde:	00 90       	ret 

80001ce0 <IfxScuCcu_getBaud2Frequency>:
{
80001ce0:	40 ae       	mov.aa %a14,%sp
80001ce2:	20 08       	sub.a %sp,8
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80001ce4:	91 30 00 2f 	movh.a %a2,61443
80001ce8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001cec:	54 28       	ld.w %d8,[%a2]
    if (ccucon0.B.BAUD2DIV == 0)
80001cee:	59 e8 fc ff 	st.w [%a14]-4 <f0036030 <_SMALL_DATA4_+0x6002e030>>,%d8
80001cf2:	8f 08 0f 21 	and %d2,%d8,240
80001cf6:	df 02 04 80 	jne %d2,0,80001cfe <IfxScuCcu_getBaud2Frequency+0x1e>
        frequency = 0;
80001cfa:	82 02       	mov %d2,0
}
80001cfc:	00 90       	ret 
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
80001cfe:	6d ff 93 ff 	call 80001c24 <IfxScuCcu_getMaxFrequency>
80001d02:	37 08 64 32 	extr.u %d3,%d8,4,4
80001d06:	4b 03 41 31 	itof %d3,%d3
80001d0a:	4b 32 51 20 	div.f %d2,%d2,%d3
80001d0e:	00 90       	ret 

80001d10 <IfxScuCcu_getSpbFrequency>:
{
80001d10:	40 ae       	mov.aa %a14,%sp
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80001d12:	6d ff 58 ff 	call 80001bc2 <IfxScuCcu_getSourceFrequency>
    switch (SCU_CCUCON0.B.LPDIV)
80001d16:	91 30 00 2f 	movh.a %a2,61443
80001d1a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001d1e:	54 23       	ld.w %d3,[%a2]
80001d20:	37 03 64 36 	extr.u %d3,%d3,12,4
80001d24:	ff 53 39 80 	jge.u %d3,5,80001d96 <IfxScuCcu_getSpbFrequency+0x86>
80001d28:	91 00 00 28 	movh.a %a2,32768
80001d2c:	d9 22 f8 41 	lea %a2,[%a2]7480 <80001d38 <IfxScuCcu_getSpbFrequency+0x28>>
80001d30:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
80001d34:	dc 02       	ji %a2
80001d36:	00 00       	nop 
80001d38:	1d 00 0a 00 	j 80001d4c <IfxScuCcu_getSpbFrequency+0x3c>
80001d3c:	1d 00 19 00 	j 80001d6e <IfxScuCcu_getSpbFrequency+0x5e>
80001d40:	1d 00 1c 00 	j 80001d78 <IfxScuCcu_getSpbFrequency+0x68>
80001d44:	1d 00 1f 00 	j 80001d82 <IfxScuCcu_getSpbFrequency+0x72>
80001d48:	1d 00 22 00 	j 80001d8c <IfxScuCcu_getSpbFrequency+0x7c>
        if (SCU_CCUCON0.B.SPBDIV == 0)
80001d4c:	91 30 00 2f 	movh.a %a2,61443
80001d50:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001d54:	54 23       	ld.w %d3,[%a2]
80001d56:	37 03 64 38 	extr.u %d3,%d3,16,4
80001d5a:	df 03 20 00 	jeq %d3,0,80001d9a <IfxScuCcu_getSpbFrequency+0x8a>
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
80001d5e:	54 23       	ld.w %d3,[%a2]
80001d60:	37 03 64 38 	extr.u %d3,%d3,16,4
80001d64:	4b 03 41 31 	itof %d3,%d3
80001d68:	4b 32 51 20 	div.f %d2,%d2,%d3
80001d6c:	00 90       	ret 
        spbFrequency = sourceFrequency / 30;
80001d6e:	7b 00 1f 34 	movh %d3,16880
80001d72:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001d76:	00 90       	ret 
        spbFrequency = sourceFrequency / 60;
80001d78:	7b 00 27 34 	movh %d3,17008
80001d7c:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001d80:	00 90       	ret 
        spbFrequency = sourceFrequency / 120;
80001d82:	7b 00 2f 34 	movh %d3,17136
80001d86:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001d8a:	00 90       	ret 
        spbFrequency = sourceFrequency / 240;
80001d8c:	7b 00 37 34 	movh %d3,17264
80001d90:	4b 32 51 20 	div.f %d2,%d2,%d3
        break;
80001d94:	00 90       	ret 
    switch (SCU_CCUCON0.B.LPDIV)
80001d96:	82 02       	mov %d2,0
80001d98:	00 90       	ret 
            spbFrequency = 0.0f;
80001d9a:	82 02       	mov %d2,0
}
80001d9c:	00 90       	ret 

80001d9e <IfxScuCcu_getSpbFrequency_end>:
	...

80001da0 <IfxScuCcu_init>:
{
80001da0:	40 ae       	mov.aa %a14,%sp
80001da2:	40 4c       	mov.aa %a12,%a4
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80001da4:	19 42 10 10 	ld.w %d2,[%a4]80
80001da8:	91 00 00 26 	movh.a %a2,24576
80001dac:	59 22 40 c0 	st.w [%a2]1792 <60000700 <IfxScuCcu_xtalFrequency>>,%d2
    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
80001db0:	6d 00 02 03 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
80001db4:	02 2a       	mov %d10,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
80001db6:	6d 00 11 03 	call 800023d8 <IfxScuWdt_getSafetyWatchdogPassword>
80001dba:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80001dbc:	02 a4       	mov %d4,%d10
80001dbe:	6d 00 92 01 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80001dc2:	91 30 00 2f 	movh.a %a2,61443
80001dc6:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001dca:	54 2d       	ld.w %d13,[%a2]
80001dcc:	37 0d e1 d1 	extr.u %d13,%d13,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
80001dd0:	54 22       	ld.w %d2,[%a2]
80001dd2:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001dd6:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80001dd8:	02 a4       	mov %d4,%d10
80001dda:	6d 00 0a 03 	call 800023ee <IfxScuWdt_setCpuEndinit>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001dde:	02 84       	mov %d4,%d8
80001de0:	6d 00 a6 01 	call 8000212c <IfxScuWdt_clearSafetyEndinit>
        while (SCU_CCUCON0.B.LCK != 0U)
80001de4:	91 30 00 2f 	movh.a %a2,61443
80001de8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001dec:	54 23       	ld.w %d3,[%a2]
80001dee:	bf 03 fb 7f 	jlt %d3,0,80001de4 <IfxScuCcu_init+0x44>
        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80001df2:	54 22       	ld.w %d2,[%a2]
80001df4:	b7 02 02 2e 	insert %d2,%d2,0,28,2
80001df8:	74 22       	st.w [%a2],%d2
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80001dfa:	54 22       	ld.w %d2,[%a2]
80001dfc:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80001e00:	74 22       	st.w [%a2],%d2
        SCU_PLLCON0.B.SETFINDIS = 1;
80001e02:	91 30 00 2f 	movh.a %a2,61443
80001e06:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001e0a:	54 22       	ld.w %d2,[%a2]
80001e0c:	b7 12 01 22 	insert %d2,%d2,1,4,1
80001e10:	74 22       	st.w [%a2],%d2
        while (SCU_CCUCON1.B.LCK != 0U)
80001e12:	91 30 00 2f 	movh.a %a2,61443
80001e16:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001e1a:	54 23       	ld.w %d3,[%a2]
80001e1c:	bf 03 fb 7f 	jlt %d3,0,80001e12 <IfxScuCcu_init+0x72>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80001e20:	54 22       	ld.w %d2,[%a2]
80001e22:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80001e26:	74 22       	st.w [%a2],%d2
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80001e28:	54 22       	ld.w %d2,[%a2]
80001e2a:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80001e2e:	74 22       	st.w [%a2],%d2
        status             |= IfxScuCcu_isOscillatorStable();
80001e30:	6d ff ac fd 	call 80001988 <IfxScuCcu_isOscillatorStable>
80001e34:	02 2c       	mov %d12,%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001e36:	02 84       	mov %d4,%d8
80001e38:	6d 00 00 03 	call 80002438 <IfxScuWdt_setSafetyEndinit>
    if (status == 0)
80001e3c:	df 0c 28 00 	jeq %d12,0,80001e8c <IfxScuCcu_init+0xec>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001e40:	02 84       	mov %d4,%d8
80001e42:	6d 00 75 01 	call 8000212c <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80001e46:	91 30 00 2f 	movh.a %a2,61443
80001e4a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001e4e:	54 23       	ld.w %d3,[%a2]
80001e50:	8f 03 c4 31 	andn %d3,%d3,64
80001e54:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80001e56:	02 84       	mov %d4,%d8
80001e58:	6d 00 f0 02 	call 80002438 <IfxScuWdt_setSafetyEndinit>
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80001e5c:	02 a4       	mov %d4,%d10
80001e5e:	6d 00 42 01 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80001e62:	91 30 00 2f 	movh.a %a2,61443
80001e66:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x6002e12c>>
80001e6a:	54 23       	ld.w %d3,[%a2]
80001e6c:	b7 13 81 31 	insert %d3,%d3,1,3,1
80001e70:	74 23       	st.w [%a2],%d3
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80001e72:	91 30 00 2f 	movh.a %a2,61443
80001e76:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x6002e130>>
80001e7a:	54 23       	ld.w %d3,[%a2]
80001e7c:	67 d3 03 30 	ins.t %d3,%d3,3,%d13,0
80001e80:	74 23       	st.w [%a2],%d3
        IfxScuWdt_setCpuEndinit(endinit_pw);
80001e82:	02 a4       	mov %d4,%d10
80001e84:	6d 00 b5 02 	call 800023ee <IfxScuWdt_setCpuEndinit>
}
80001e88:	02 c2       	mov %d2,%d12
80001e8a:	00 90       	ret 
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80001e8c:	02 84       	mov %d4,%d8
80001e8e:	6d 00 4f 01 	call 8000212c <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80001e92:	91 30 00 2f 	movh.a %a2,61443
80001e96:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001e9a:	54 23       	ld.w %d3,[%a2]
80001e9c:	6f 53 fb 7f 	jz.t %d3,5,80001e92 <IfxScuCcu_init+0xf2>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
80001ea0:	39 c3 0a 00 	ld.bu %d3,[%a12]10
80001ea4:	91 30 00 2f 	movh.a %a2,61443
80001ea8:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
80001eac:	54 22       	ld.w %d2,[%a2]
80001eae:	37 32 07 20 	insert %d2,%d2,%d3,0,7
80001eb2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
80001eb4:	39 c3 08 00 	ld.bu %d3,[%a12]8
80001eb8:	91 30 00 2f 	movh.a %a2,61443
80001ebc:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001ec0:	54 22       	ld.w %d2,[%a2]
80001ec2:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
80001ec6:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
80001ec8:	39 c3 09 00 	ld.bu %d3,[%a12]9
80001ecc:	54 22       	ld.w %d2,[%a2]
80001ece:	37 32 87 24 	insert %d2,%d2,%d3,9,7
80001ed2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80001ed4:	54 22       	ld.w %d2,[%a2]
80001ed6:	b7 12 01 23 	insert %d2,%d2,1,6,1
80001eda:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
80001edc:	54 22       	ld.w %d2,[%a2]
80001ede:	b7 02 01 28 	insert %d2,%d2,0,16,1
80001ee2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
80001ee4:	54 22       	ld.w %d2,[%a2]
80001ee6:	b7 12 81 22 	insert %d2,%d2,1,5,1
80001eea:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80001eec:	54 22       	ld.w %d2,[%a2]
80001eee:	b7 12 01 28 	insert %d2,%d2,1,16,1
80001ef2:	74 22       	st.w [%a2],%d2
                    SCU_PLLCON0.B.RESLD = 1;
80001ef4:	54 22       	ld.w %d2,[%a2]
80001ef6:	b7 12 01 29 	insert %d2,%d2,1,18,1
80001efa:	74 22       	st.w [%a2],%d2
                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80001efc:	7b 20 85 43 	movh %d4,14418
80001f00:	1b 74 71 4b 	addi %d4,%d4,-18665
80001f04:	6d ff 75 fe 	call 80001bee <IfxScuCcu_wait>
                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
80001f08:	91 30 00 2f 	movh.a %a2,61443
80001f0c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
80001f10:	54 23       	ld.w %d3,[%a2]
80001f12:	6f 23 fb 7f 	jz.t %d3,2,80001f08 <IfxScuCcu_init+0x168>
                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80001f16:	91 30 00 2f 	movh.a %a2,61443
80001f1a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x6002e018>>
80001f1e:	54 22       	ld.w %d2,[%a2]
80001f20:	8f 12 c0 21 	andn %d2,%d2,1
80001f24:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80001f26:	91 30 00 2f 	movh.a %a2,61443
80001f2a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001f2e:	54 23       	ld.w %d3,[%a2]
80001f30:	bf 03 fb 7f 	jlt %d3,0,80001f26 <IfxScuCcu_init+0x186>
                    SCU_CCUCON0.B.CLKSEL = 0x01;
80001f34:	54 22       	ld.w %d2,[%a2]
80001f36:	b7 12 02 2e 	insert %d2,%d2,1,28,2
80001f3a:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON0.B.LCK != 0U)
80001f3c:	91 30 00 2f 	movh.a %a2,61443
80001f40:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001f44:	54 23       	ld.w %d3,[%a2]
80001f46:	bf 03 fb 7f 	jlt %d3,0,80001f3c <IfxScuCcu_init+0x19c>
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80001f4a:	19 c4 0c 00 	ld.w %d4,[%a12]12
80001f4e:	6d ff 50 fe 	call 80001bee <IfxScuCcu_wait>
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80001f52:	91 30 00 2f 	movh.a %a2,61443
80001f56:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001f5a:	54 23       	ld.w %d3,[%a2]
80001f5c:	19 c4 14 00 	ld.w %d4,[%a12]20 <f0036030 <_SMALL_DATA4_+0x6002e030>>
80001f60:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80001f64:	19 c2 10 00 	ld.w %d2,[%a12]16
80001f68:	26 42       	and %d2,%d4
80001f6a:	a6 23       	or %d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80001f6c:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon0.B.UP     = 1;
80001f70:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80001f74:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON1.B.LCK != 0U)
80001f76:	91 30 00 2f 	movh.a %a2,61443
80001f7a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
80001f7e:	54 23       	ld.w %d3,[%a2]
80001f80:	bf 03 fb 7f 	jlt %d3,0,80001f76 <IfxScuCcu_init+0x1d6>
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
80001f84:	54 23       	ld.w %d3,[%a2]
80001f86:	19 c4 1c 00 	ld.w %d4,[%a12]28
80001f8a:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
80001f8e:	19 c2 18 00 	ld.w %d2,[%a12]24
80001f92:	26 42       	and %d2,%d4
80001f94:	a6 23       	or %d3,%d2
                        ccucon1.B.INSEL = 1;
80001f96:	b7 13 02 3e 	insert %d3,%d3,1,28,2
                        ccucon1.B.UP    = 1;
80001f9a:	b7 13 01 3f 	insert %d3,%d3,1,30,1
                        SCU_CCUCON1     = ccucon1;
80001f9e:	74 23       	st.w [%a2],%d3
                    while (SCU_CCUCON2.B.LCK != 0U)
80001fa0:	91 30 00 2f 	movh.a %a2,61443
80001fa4:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x6002e040>>
80001fa8:	54 23       	ld.w %d3,[%a2]
80001faa:	bf 03 fb 7f 	jlt %d3,0,80001fa0 <IfxScuCcu_init+0x200>
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
80001fae:	54 23       	ld.w %d3,[%a2]
80001fb0:	19 c4 24 00 	ld.w %d4,[%a12]36
80001fb4:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
80001fb8:	19 c2 20 00 	ld.w %d2,[%a12]32
80001fbc:	26 42       	and %d2,%d4
80001fbe:	a6 32       	or %d2,%d3
                        ccucon2.B.UP = 1;
80001fc0:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON2  = ccucon2;
80001fc4:	74 22       	st.w [%a2],%d2
                    while (SCU_CCUCON5.B.LCK != 0U)
80001fc6:	91 30 00 2f 	movh.a %a2,61443
80001fca:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x6002e04c>>
80001fce:	54 23       	ld.w %d3,[%a2]
80001fd0:	bf 03 fb 7f 	jlt %d3,0,80001fc6 <IfxScuCcu_init+0x226>
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80001fd4:	54 23       	ld.w %d3,[%a2]
80001fd6:	19 c4 2c 00 	ld.w %d4,[%a12]44
80001fda:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80001fde:	19 c2 28 00 	ld.w %d2,[%a12]40
80001fe2:	26 42       	and %d2,%d4
80001fe4:	a6 32       	or %d2,%d3
                        ccucon5.B.UP = 1;
80001fe6:	b7 12 01 2f 	insert %d2,%d2,1,30,1
                        SCU_CCUCON5  = ccucon5;
80001fea:	74 22       	st.w [%a2],%d2
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
80001fec:	91 30 00 2f 	movh.a %a2,61443
80001ff0:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x6002e080>>
80001ff4:	54 23       	ld.w %d3,[%a2]
80001ff6:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036080 <_SMALL_DATA4_+0x6002e080>>
80001ffa:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80001ffe:	19 c2 30 00 	ld.w %d2,[%a12]48
80002002:	26 42       	and %d2,%d4
80002004:	a6 32       	or %d2,%d3
                        SCU_CCUCON6 = ccucon6;
80002006:	74 22       	st.w [%a2],%d2
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80002008:	91 30 00 2f 	movh.a %a2,61443
8000200c:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x6002e084>>
80002010:	54 23       	ld.w %d3,[%a2]
80002012:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f0036084 <_SMALL_DATA4_+0x6002e084>>
80002016:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
8000201a:	19 c2 38 00 	ld.w %d2,[%a12]56
8000201e:	26 42       	and %d2,%d4
80002020:	a6 32       	or %d2,%d3
                        SCU_CCUCON7 = ccucon7;
80002022:	74 22       	st.w [%a2],%d2
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80002024:	91 30 00 2f 	movh.a %a2,61443
80002028:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x6002e088>>
8000202c:	54 23       	ld.w %d3,[%a2]
8000202e:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036088 <_SMALL_DATA4_+0x6002e088>>
80002032:	0f 43 e0 30 	andn %d3,%d3,%d4
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80002036:	19 c2 00 10 	ld.w %d2,[%a12]64
8000203a:	26 42       	and %d2,%d4
8000203c:	a6 32       	or %d2,%d3
                        SCU_CCUCON8 = ccucon8;
8000203e:	74 22       	st.w [%a2],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80002040:	02 84       	mov %d4,%d8
80002042:	6d 00 fb 01 	call 80002438 <IfxScuWdt_setSafetyEndinit>
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80002046:	91 00 80 df 	movh.a %a13,63488
8000204a:	d9 dd 14 02 	lea %a13,[%a13]8212 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
8000204e:	54 d9       	ld.w %d9,[%a13]
80002050:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f8002014 <_SMALL_DATA4_+0x67ffa014>>
80002054:	0f 49 e0 90 	andn %d9,%d9,%d4
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80002058:	19 c2 08 10 	ld.w %d2,[%a12]72
8000205c:	26 42       	and %d2,%d4
8000205e:	a6 29       	or %d9,%d2
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80002060:	02 a4       	mov %d4,%d10
80002062:	6d 00 40 00 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80002066:	74 d9       	st.w [%a13],%d9
                IfxScuWdt_setCpuEndinit(endinit_pw);
80002068:	02 a4       	mov %d4,%d10
8000206a:	6d 00 c2 01 	call 800023ee <IfxScuWdt_setCpuEndinit>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
8000206e:	02 c9       	mov %d9,%d12
80002070:	1d 00 0d 00 	j 8000208a <IfxScuCcu_init+0x2ea>
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
80002074:	99 c2 04 00 	ld.a %a2,[%a12]4
80002078:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
8000207c:	19 24 04 00 	ld.w %d4,[%a2]4
80002080:	6d ff b7 fd 	call 80001bee <IfxScuCcu_wait>
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
80002084:	c2 19       	add %d9,1
80002086:	8f f9 0f 91 	and %d9,%d9,255
8000208a:	14 c3       	ld.bu %d3,[%a12]
8000208c:	7f 39 da fe 	jge.u %d9,%d3,80001e40 <IfxScuCcu_init+0xa0>
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80002090:	02 84       	mov %d4,%d8
80002092:	6d 00 4d 00 	call 8000212c <IfxScuWdt_clearSafetyEndinit>
                while (SCU_PLLSTAT.B.K2RDY == 0U)
80002096:	91 30 00 2f 	movh.a %a2,61443
8000209a:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x6002e014>>
8000209e:	54 23       	ld.w %d3,[%a2]
800020a0:	6f 53 fb 7f 	jz.t %d3,5,80002096 <IfxScuCcu_init+0x2f6>
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800020a4:	53 c9 20 b0 	mul %d11,%d9,12
800020a8:	99 c2 04 00 	ld.a %a2,[%a12]4
800020ac:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
800020b0:	14 24       	ld.bu %d4,[%a2]
800020b2:	91 30 00 2f 	movh.a %a2,61443
800020b6:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x6002e01c>>
800020ba:	54 23       	ld.w %d3,[%a2]
800020bc:	37 43 07 30 	insert %d3,%d3,%d4,0,7
800020c0:	74 23       	st.w [%a2],%d3
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800020c2:	02 84       	mov %d4,%d8
800020c4:	6d 00 ba 01 	call 80002438 <IfxScuWdt_setSafetyEndinit>
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
800020c8:	99 c2 04 00 	ld.a %a2,[%a12]4
800020cc:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
800020d0:	d9 22 08 00 	lea %a2,[%a2]8
800020d4:	d4 22       	ld.a %a2,[%a2]
800020d6:	bd 02 cf 7f 	jz.a %a2,80002074 <IfxScuCcu_init+0x2d4>
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
800020da:	2d 02 00 00 	calli %a2
800020de:	1d ff cb ff 	j 80002074 <IfxScuCcu_init+0x2d4>

800020e2 <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
800020e2:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800020e4:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800020e8:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800020ec:	7b 30 00 3f 	movh %d3,61443
800020f0:	1b 03 10 36 	addi %d3,%d3,24832
800020f4:	13 c2 20 23 	madd %d2,%d3,%d2,12
800020f8:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800020fa:	54 22       	ld.w %d2,[%a2]
800020fc:	6f 12 0b 00 	jz.t %d2,1,80002112 <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002100:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002104:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002108:	54 22       	ld.w %d2,[%a2]
8000210a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000210e:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002110:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002112:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002116:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000211a:	54 22       	ld.w %d2,[%a2]
8000211c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80002120:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80002122:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80002124:	54 22       	ld.w %d2,[%a2]
80002126:	6f 02 ff ff 	jnz.t %d2,0,80002124 <IfxScuWdt_clearCpuEndinit+0x42>
}
8000212a:	00 90       	ret 

8000212c <IfxScuWdt_clearSafetyEndinit>:


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
8000212c:	40 ae       	mov.aa %a14,%sp
8000212e:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80002132:	91 30 00 2f 	movh.a %a2,61443
80002136:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000213a:	54 22       	ld.w %d2,[%a2]
8000213c:	6f 12 0b 00 	jz.t %d2,1,80002152 <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002140:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002144:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002148:	54 22       	ld.w %d2,[%a2]
8000214a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000214e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002150:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002152:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002156:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000215a:	91 30 00 2f 	movh.a %a2,61443
8000215e:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002162:	54 22       	ld.w %d2,[%a2]
80002164:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002168:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000216a:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000216c:	91 30 00 2f 	movh.a %a2,61443
80002170:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002174:	54 22       	ld.w %d2,[%a2]
80002176:	6f 02 fb ff 	jnz.t %d2,0,8000216c <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
8000217a:	00 90       	ret 

8000217c <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
8000217c:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
8000217e:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80002182:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
80002186:	7b 30 00 3f 	movh %d3,61443
8000218a:	1b 03 10 36 	addi %d3,%d3,24832
8000218e:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002192:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80002194:	54 22       	ld.w %d2,[%a2]
80002196:	6f 12 0b 00 	jz.t %d2,1,800021ac <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000219a:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000219e:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800021a2:	54 22       	ld.w %d2,[%a2]
800021a4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021a8:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800021aa:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021ac:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800021ae:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800021b2:	54 22       	ld.w %d2,[%a2]
800021b4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021b8:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800021ba:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800021bc:	54 22       	ld.w %d2,[%a2]
800021be:	6f 02 ff ff 	jnz.t %d2,0,800021bc <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
800021c2:	d9 23 04 00 	lea %a3,[%a2]4
800021c6:	19 22 04 00 	ld.w %d2,[%a2]4
800021ca:	b7 12 81 21 	insert %d2,%d2,1,3,1
800021ce:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800021d0:	54 22       	ld.w %d2,[%a2]
800021d2:	6f 12 09 00 	jz.t %d2,1,800021e4 <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800021d6:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800021da:	54 22       	ld.w %d2,[%a2]
800021dc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021e0:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800021e2:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800021e4:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800021e8:	54 22       	ld.w %d2,[%a2]
800021ea:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800021ee:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800021f0:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800021f2:	54 22       	ld.w %d2,[%a2]
800021f4:	6f 02 ff 7f 	jz.t %d2,0,800021f2 <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800021f8:	00 90       	ret 

800021fa <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
800021fa:	40 ae       	mov.aa %a14,%sp
800021fc:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80002200:	91 30 00 2f 	movh.a %a2,61443
80002204:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002208:	54 22       	ld.w %d2,[%a2]
8000220a:	6f 12 0b 00 	jz.t %d2,1,80002220 <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000220e:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002212:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002216:	54 22       	ld.w %d2,[%a2]
80002218:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000221c:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000221e:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002220:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002222:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002226:	91 30 00 2f 	movh.a %a2,61443
8000222a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000222e:	54 22       	ld.w %d2,[%a2]
80002230:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002234:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002236:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002238:	91 30 00 2f 	movh.a %a2,61443
8000223c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002240:	54 22       	ld.w %d2,[%a2]
80002242:	6f 02 fb ff 	jnz.t %d2,0,80002238 <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80002246:	91 30 00 2f 	movh.a %a2,61443
8000224a:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
8000224e:	54 22       	ld.w %d2,[%a2]
80002250:	b7 12 81 21 	insert %d2,%d2,1,3,1
80002254:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80002256:	91 30 00 2f 	movh.a %a2,61443
8000225a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000225e:	54 22       	ld.w %d2,[%a2]
80002260:	6f 12 09 00 	jz.t %d2,1,80002272 <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002264:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002268:	54 22       	ld.w %d2,[%a2]
8000226a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000226e:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002270:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002272:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002276:	91 30 00 2f 	movh.a %a2,61443
8000227a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000227e:	54 22       	ld.w %d2,[%a2]
80002280:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002284:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002286:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002288:	91 30 00 2f 	movh.a %a2,61443
8000228c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002290:	54 22       	ld.w %d2,[%a2]
80002292:	6f 02 fb 7f 	jz.t %d2,0,80002288 <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80002296:	00 90       	ret 

80002298 <IfxScuWdt_enableCpuWatchdog>:


void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
80002298:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
8000229a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000229e:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
800022a2:	7b 30 00 3f 	movh %d3,61443
800022a6:	1b 03 10 36 	addi %d3,%d3,24832
800022aa:	13 c2 20 23 	madd %d2,%d3,%d2,12
800022ae:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
800022b0:	54 22       	ld.w %d2,[%a2]
800022b2:	6f 12 0b 00 	jz.t %d2,1,800022c8 <IfxScuWdt_enableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800022b6:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800022ba:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800022be:	54 22       	ld.w %d2,[%a2]
800022c0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800022c4:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800022c6:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800022c8:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800022ca:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800022ce:	54 22       	ld.w %d2,[%a2]
800022d0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800022d4:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800022d6:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800022d8:	54 22       	ld.w %d2,[%a2]
800022da:	6f 02 ff ff 	jnz.t %d2,0,800022d8 <IfxScuWdt_enableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
800022de:	d9 23 04 00 	lea %a3,[%a2]4
800022e2:	19 22 04 00 	ld.w %d2,[%a2]4
800022e6:	8f 82 c0 21 	andn %d2,%d2,8
800022ea:	74 32       	st.w [%a3],%d2
    if (watchdog->CON0.B.LCK)
800022ec:	54 22       	ld.w %d2,[%a2]
800022ee:	6f 12 09 00 	jz.t %d2,1,80002300 <IfxScuWdt_enableCpuWatchdog+0x68>
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800022f2:	8f 14 40 31 	or %d3,%d4,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800022f6:	54 22       	ld.w %d2,[%a2]
800022f8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800022fc:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800022fe:	74 22       	st.w [%a2],%d2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002300:	8f 34 40 41 	or %d4,%d4,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002304:	54 22       	ld.w %d2,[%a2]
80002306:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000230a:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000230c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8000230e:	54 22       	ld.w %d2,[%a2]
80002310:	6f 02 ff 7f 	jz.t %d2,0,8000230e <IfxScuWdt_enableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80002314:	00 90       	ret 

80002316 <IfxScuWdt_enableSafetyWatchdog>:


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
80002316:	40 ae       	mov.aa %a14,%sp
80002318:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
8000231c:	91 30 00 2f 	movh.a %a2,61443
80002320:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002324:	54 22       	ld.w %d2,[%a2]
80002326:	6f 12 0b 00 	jz.t %d2,1,8000233c <IfxScuWdt_enableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000232a:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000232e:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002332:	54 22       	ld.w %d2,[%a2]
80002334:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002338:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000233a:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000233c:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000233e:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002342:	91 30 00 2f 	movh.a %a2,61443
80002346:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000234a:	54 22       	ld.w %d2,[%a2]
8000234c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002350:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002352:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80002354:	91 30 00 2f 	movh.a %a2,61443
80002358:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000235c:	54 22       	ld.w %d2,[%a2]
8000235e:	6f 02 fb ff 	jnz.t %d2,0,80002354 <IfxScuWdt_enableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
80002362:	91 30 00 2f 	movh.a %a2,61443
80002366:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x6002e0f4>>
8000236a:	54 22       	ld.w %d2,[%a2]
8000236c:	8f 82 c0 21 	andn %d2,%d2,8
80002370:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
80002372:	91 30 00 2f 	movh.a %a2,61443
80002376:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000237a:	54 22       	ld.w %d2,[%a2]
8000237c:	6f 12 09 00 	jz.t %d2,1,8000238e <IfxScuWdt_enableSafetyWatchdog+0x78>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002380:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002384:	54 22       	ld.w %d2,[%a2]
80002386:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000238a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000238c:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000238e:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002392:	91 30 00 2f 	movh.a %a2,61443
80002396:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000239a:	54 22       	ld.w %d2,[%a2]
8000239c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800023a0:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800023a2:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800023a4:	91 30 00 2f 	movh.a %a2,61443
800023a8:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800023ac:	54 22       	ld.w %d2,[%a2]
800023ae:	6f 02 fb 7f 	jz.t %d2,0,800023a4 <IfxScuWdt_enableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
800023b2:	00 90       	ret 

800023b4 <IfxScuWdt_getCpuWatchdogPassword>:


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
800023b4:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800023b6:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800023ba:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800023be:	7b 30 00 3f 	movh %d3,61443
800023c2:	1b 03 10 36 	addi %d3,%d3,24832
800023c6:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
800023ca:	60 22       	mov.a %a2,%d2
800023cc:	54 22       	ld.w %d2,[%a2]
800023ce:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
800023d2:	8f f2 83 21 	xor %d2,%d2,63
800023d6:	00 90       	ret 

800023d8 <IfxScuWdt_getSafetyWatchdogPassword>:
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
800023d8:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
800023da:	91 30 00 2f 	movh.a %a2,61443
800023de:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
800023e2:	54 22       	ld.w %d2,[%a2]
800023e4:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
800023e8:	8f f2 83 21 	xor %d2,%d2,63
800023ec:	00 90       	ret 

800023ee <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
800023ee:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800023f0:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800023f4:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800023f8:	7b 30 00 3f 	movh %d3,61443
800023fc:	1b 03 10 36 	addi %d3,%d3,24832
80002400:	13 c2 20 23 	madd %d2,%d3,%d2,12
80002404:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80002406:	54 22       	ld.w %d2,[%a2]
80002408:	6f 12 0b 00 	jz.t %d2,1,8000241e <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000240c:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002410:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002414:	54 22       	ld.w %d2,[%a2]
80002416:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000241a:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000241c:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000241e:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80002422:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80002426:	54 22       	ld.w %d2,[%a2]
80002428:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000242c:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000242e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80002430:	54 22       	ld.w %d2,[%a2]
80002432:	6f 02 ff 7f 	jz.t %d2,0,80002430 <IfxScuWdt_setCpuEndinit+0x42>
}
80002436:	00 90       	ret 

80002438 <IfxScuWdt_setSafetyEndinit>:


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
80002438:	40 ae       	mov.aa %a14,%sp
8000243a:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
8000243e:	91 30 00 2f 	movh.a %a2,61443
80002442:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002446:	54 22       	ld.w %d2,[%a2]
80002448:	6f 12 0b 00 	jz.t %d2,1,8000245e <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000244c:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002450:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002454:	54 22       	ld.w %d2,[%a2]
80002456:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000245a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000245c:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000245e:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80002462:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80002466:	91 30 00 2f 	movh.a %a2,61443
8000246a:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
8000246e:	54 22       	ld.w %d2,[%a2]
80002470:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80002474:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80002476:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80002478:	91 30 00 2f 	movh.a %a2,61443
8000247c:	d9 22 30 36 	lea %a2,[%a2]24816 <f00360f0 <_SMALL_DATA4_+0x6002e0f0>>
80002480:	54 22       	ld.w %d2,[%a2]
80002482:	6f 02 fb 7f 	jz.t %d2,0,80002478 <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80002486:	00 90       	ret 

80002488 <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80002488:	40 ae       	mov.aa %a14,%sp
8000248a:	40 4c       	mov.aa %a12,%a4
8000248c:	02 5a       	mov %d10,%d5
8000248e:	8f f4 0f c1 	and %d12,%d4,255
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80002492:	80 42       	mov.d %d2,%a4
80002494:	1b 02 01 b0 	addi %d11,%d2,16
    uint8                 iocrIndex = (pinIndex / 4);
80002498:	37 04 66 91 	extr.u %d9,%d4,2,6
    uint8                 shift     = (pinIndex & 0x3U) * 8;
8000249c:	8f 34 00 41 	and %d4,%d4,3
800024a0:	8f 34 00 80 	sh %d8,%d4,3

    if (port == &MODULE_P40)
800024a4:	7b 40 00 2f 	movh %d2,61444
800024a8:	1b 02 00 2e 	addi %d2,%d2,-8192
800024ac:	80 43       	mov.d %d3,%a4
800024ae:	5f 23 12 00 	jeq %d3,%d2,800024d2 <IfxPort_setPinMode+0x4a>
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
        IfxScuWdt_setCpuEndinit(passwd);
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
800024b2:	8f 29 00 20 	sh %d2,%d9,2
800024b6:	60 b2       	mov.a %a2,%d11
800024b8:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800024bc:	3b f0 0f 40 	mov %d4,255
800024c0:	0f 84 00 40 	sh %d4,%d4,%d8
800024c4:	0f 8a 00 20 	sh %d2,%d10,%d8
                     ::"a"(address), "d"(mask), "d"((long long)value));
800024c8:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
800024ca:	02 43       	mov %d3,%d4
800024cc:	49 22 40 08 	ldmst [%a2]0,%e2
}
800024d0:	00 90       	ret 
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800024d2:	6d ff 71 ff 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
800024d6:	02 2d       	mov %d13,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
800024d8:	02 24       	mov %d4,%d2
800024da:	6d ff 04 fe 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
800024de:	d9 c2 20 10 	lea %a2,[%a12]96
800024e2:	19 c2 20 10 	ld.w %d2,[%a12]96
800024e6:	d7 02 01 2c 	insert %d2,%d2,0,%d12,1
800024ea:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(passwd);
800024ec:	02 d4       	mov %d4,%d13
800024ee:	6d ff 80 ff 	call 800023ee <IfxScuWdt_setCpuEndinit>
800024f2:	1d ff e0 ff 	j 800024b2 <IfxPort_setPinMode+0x2a>

800024f6 <IfxPort_setPinPadDriver>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
800024f6:	40 ae       	mov.aa %a14,%sp
800024f8:	80 4b       	mov.d %d11,%a4
800024fa:	02 5a       	mov %d10,%d5
800024fc:	8f f4 0f 81 	and %d8,%d4,255
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80002500:	6d ff 5a ff 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
80002504:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80002506:	02 24       	mov %d4,%d2
80002508:	6d ff ed fd 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
8000250c:	1b 0b 04 40 	addi %d4,%d11,64
        uint8            pdrIndex = (pinIndex / 8);
80002510:	8f d8 1f 20 	sh %d2,%d8,-3
        uint8            shift    = (pinIndex & 0x7U) * 4;
80002514:	8f 78 00 31 	and %d3,%d8,7
80002518:	06 23       	sh %d3,2
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
8000251a:	06 22       	sh %d2,2
8000251c:	60 42       	mov.a %a2,%d4
8000251e:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
80002522:	3b f0 00 20 	mov %d2,15
80002526:	0f 32 00 20 	sh %d2,%d2,%d3
8000252a:	0f 3a 00 30 	sh %d3,%d10,%d3
                     ::"a"(address), "d"(mask), "d"((long long)value));
8000252e:	53 13 40 60 	mul.u %e6,%d3,1
    __asm__ volatile("mov %H2,%1 \n\
80002532:	02 27       	mov %d7,%d2
80002534:	49 46 40 08 	ldmst [%a4]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80002538:	02 94       	mov %d4,%d9
8000253a:	6d ff 5a ff 	call 800023ee <IfxScuWdt_setCpuEndinit>
}
8000253e:	00 90       	ret 

80002540 <toggleLEDShell>:
    return TRUE;
}

/* Function to toggle the LED */
boolean toggleLEDShell (pchar args, void *data, IfxStdIf_DPipe *io)
{
80002540:	40 ae       	mov.aa %a14,%sp
80002542:	40 42       	mov.aa %a2,%a4
80002544:	40 64       	mov.aa %a4,%a6
    if (args[0] == '1')
80002546:	79 22 00 00 	ld.b %d2,[%a2]0
8000254a:	3b 10 03 30 	mov %d3,49
8000254e:	5f 32 13 80 	jne %d2,%d3,80002574 <toggleLEDShell+0x34>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80002552:	91 40 00 2f 	movh.a %a2,61444
80002556:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
8000255a:	7b 40 00 20 	movh %d2,4
8000255e:	c2 42       	add %d2,4
80002560:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    {
        IfxPort_setPinState(LED, IfxPort_State_toggled);
        IfxStdIf_DPipe_print(io, "Toggled LED!" ENDLINE ENDLINE);
80002564:	91 00 00 58 	movh.a %a5,32768
80002568:	d9 55 00 80 	lea %a5,[%a5]512 <80000200 <IfxCpu_Trap_vectorTable0_end+0xc>>
8000256c:	6d 00 4f 27 	call 8000740a <IfxStdIf_DPipe_print>
        IfxStdIf_DPipe_print(io, "Command syntax not correct." ENDLINE
        "The correct syntax for this command is" ENDLINE "    '" COMMAND_TOGGLE " [1]'" ENDLINE
        "Turned off the LED!" ENDLINE);
        return FALSE; /* Returning false triggers a Shell command error */
    }
    return TRUE;
80002570:	82 12       	mov %d2,1
80002572:	00 90       	ret 
80002574:	91 40 00 2f 	movh.a %a2,61444
80002578:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
8000257c:	7b 40 00 20 	movh %d2,4
80002580:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
        IfxStdIf_DPipe_print(io, "Command syntax not correct." ENDLINE
80002584:	91 00 00 58 	movh.a %a5,32768
80002588:	d9 55 11 80 	lea %a5,[%a5]529 <80000211 <IfxCpu_Trap_vectorTable0_end+0x1d>>
8000258c:	6d 00 3f 27 	call 8000740a <IfxStdIf_DPipe_print>
        return FALSE; /* Returning false triggers a Shell command error */
80002590:	82 02       	mov %d2,0
}
80002592:	00 90       	ret 

80002594 <showMsgSignal>:
//
//
//}

boolean showMsgSignal (pchar args, void *data, IfxStdIf_DPipe *io)
{
80002594:	40 ae       	mov.aa %a14,%sp
80002596:	40 4c       	mov.aa %a12,%a4
80002598:	80 68       	mov.d %d8,%a6
    IfxStdIf_DPipe_print(io, "******************************************************************************"ENDLINE);
8000259a:	91 00 00 58 	movh.a %a5,32768
8000259e:	d9 55 3e 90 	lea %a5,[%a5]638 <8000027e <IfxCpu_Trap_vectorTable0_end+0x8a>>
800025a2:	40 64       	mov.aa %a4,%a6
800025a4:	6d 00 33 27 	call 8000740a <IfxStdIf_DPipe_print>
    if (args[0] == '1')
800025a8:	79 c2 00 00 	ld.b %d2,[%a12]0
800025ac:	3b 10 03 30 	mov %d3,49
800025b0:	5f 32 1a 00 	jeq %d2,%d3,800025e4 <showMsgSignal+0x50>
    {
        IfxStdIf_DPipe_print(io, "all messages"ENDLINE);
        //print_all(io);

    }
    else if (args[0] == '2')
800025b4:	3b 20 03 30 	mov %d3,50
800025b8:	5f 32 1f 00 	jeq %d2,%d3,800025f6 <showMsgSignal+0x62>
    {
        IfxStdIf_DPipe_print(io, "unprocessed rx messages"ENDLINE);
        //print_unprocessed(io);
    }
    else if (args[0] == '3')
800025bc:	3b 30 03 30 	mov %d3,51
800025c0:	5f 32 24 80 	jne %d2,%d3,80002608 <showMsgSignal+0x74>
    {
        IfxStdIf_DPipe_print(io, "unprocessed rx messages"ENDLINE);
800025c4:	91 00 00 58 	movh.a %a5,32768
800025c8:	d9 55 1e b0 	lea %a5,[%a5]734 <800002de <IfxCpu_Trap_vectorTable0_end+0xea>>
800025cc:	60 84       	mov.a %a4,%d8
800025ce:	6d 00 1e 27 	call 8000740a <IfxStdIf_DPipe_print>
    else
    {
        IfxStdIf_DPipe_print(io, "Command syntax not correct." ENDLINE);
        return FALSE;
    }
    IfxStdIf_DPipe_print(io, "******************************************************************************"ENDLINE);
800025d2:	91 00 00 58 	movh.a %a5,32768
800025d6:	d9 55 3e 90 	lea %a5,[%a5]638 <8000027e <IfxCpu_Trap_vectorTable0_end+0x8a>>
800025da:	60 84       	mov.a %a4,%d8
800025dc:	6d 00 17 27 	call 8000740a <IfxStdIf_DPipe_print>
    return TRUE;
800025e0:	82 12       	mov %d2,1
}
800025e2:	00 90       	ret 
        IfxStdIf_DPipe_print(io, "all messages"ENDLINE);
800025e4:	91 00 00 58 	movh.a %a5,32768
800025e8:	d9 55 0f b0 	lea %a5,[%a5]719 <800002cf <IfxCpu_Trap_vectorTable0_end+0xdb>>
800025ec:	60 84       	mov.a %a4,%d8
800025ee:	6d 00 0e 27 	call 8000740a <IfxStdIf_DPipe_print>
800025f2:	1d ff f0 ff 	j 800025d2 <showMsgSignal+0x3e>
        IfxStdIf_DPipe_print(io, "unprocessed rx messages"ENDLINE);
800025f6:	91 00 00 58 	movh.a %a5,32768
800025fa:	d9 55 1e b0 	lea %a5,[%a5]734 <800002de <IfxCpu_Trap_vectorTable0_end+0xea>>
800025fe:	60 84       	mov.a %a4,%d8
80002600:	6d 00 05 27 	call 8000740a <IfxStdIf_DPipe_print>
80002604:	1d ff e7 ff 	j 800025d2 <showMsgSignal+0x3e>
        IfxStdIf_DPipe_print(io, "Command syntax not correct." ENDLINE);
80002608:	91 00 00 58 	movh.a %a5,32768
8000260c:	d9 55 38 b0 	lea %a5,[%a5]760 <800002f8 <IfxCpu_Trap_vectorTable0_end+0x104>>
80002610:	60 84       	mov.a %a4,%d8
80002612:	6d 00 fc 26 	call 8000740a <IfxStdIf_DPipe_print>
        return FALSE;
80002616:	82 02       	mov %d2,0
80002618:	00 90       	ret 

8000261a <asc0TxISR>:
{
8000261a:	40 ae       	mov.aa %a14,%sp

/** \copydoc IfxStdIf_DPipe_OnTransmit
 */
IFX_INLINE void IfxStdIf_DPipe_onTransmit(IfxStdIf_DPipe *stdIf)
{
    stdIf->onTransmit(stdIf->driver);
8000261c:	91 00 00 46 	movh.a %a4,24576
80002620:	d9 42 d4 30 	lea %a2,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
80002624:	d9 22 38 00 	lea %a2,[%a2]56 <60000cd4 <g_ascStandardInterface>>
80002628:	d4 22       	ld.a %a2,[%a2]
8000262a:	99 44 d4 30 	ld.a %a4,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
8000262e:	2d 02 00 00 	calli %a2
}
80002632:	0d 00 40 02 	rslcx 
80002636:	00 80       	rfe 

80002638 <asc0ErrISR>:
{
80002638:	40 ae       	mov.aa %a14,%sp

/** \copydoc IfxStdIf_DPipe_OnError
 */
IFX_INLINE void IfxStdIf_DPipe_onError(IfxStdIf_DPipe *stdIf)
{
    stdIf->onError(stdIf->driver);
8000263a:	91 00 00 46 	movh.a %a4,24576
8000263e:	d9 42 d4 30 	lea %a2,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
80002642:	d9 22 3c 00 	lea %a2,[%a2]60 <60000cd4 <g_ascStandardInterface>>
80002646:	d4 22       	ld.a %a2,[%a2]
80002648:	99 44 d4 30 	ld.a %a4,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
8000264c:	2d 02 00 00 	calli %a2
}
80002650:	0d 00 40 02 	rslcx 
80002654:	00 80       	rfe 

80002656 <dpipeReceiveCallback>:
{
80002656:	40 ae       	mov.aa %a14,%sp
80002658:	20 08       	sub.a %sp,8
    Ifx_SizeT readCount = 1;
8000265a:	82 12       	mov %d2,1
8000265c:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    return stdIf->getReadCount(stdIf->driver);
80002660:	91 00 00 46 	movh.a %a4,24576
80002664:	d9 42 d4 30 	lea %a2,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
80002668:	d9 22 10 00 	lea %a2,[%a2]16 <60000cd4 <g_ascStandardInterface>>
8000266c:	d4 22       	ld.a %a2,[%a2]
8000266e:	99 44 d4 30 	ld.a %a4,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
80002672:	2d 02 00 00 	calli %a2
    while (IfxStdIf_DPipe_getReadCount(&g_ascStandardInterface) > 0)
80002676:	bf 12 75 00 	jlt %d2,1,80002760 <dpipeReceiveCallback+0x10a>
    return stdIf->read(stdIf->driver, data, count, timeout);
8000267a:	91 00 00 46 	movh.a %a4,24576
8000267e:	d9 42 d4 30 	lea %a2,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
80002682:	d9 22 0c 00 	lea %a2,[%a2]12 <60000cd4 <g_ascStandardInterface>>
80002686:	d4 22       	ld.a %a2,[%a2]
80002688:	d2 04       	mov %e4,0
8000268a:	d9 e6 fc ff 	lea %a6,[%a14]-4
8000268e:	d9 e5 ff ff 	lea %a5,[%a14]-1
80002692:	99 44 d4 30 	ld.a %a4,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
80002696:	2d 02 00 00 	calli %a2
        if (rxIndex < RX_BUFFER_SIZE)
8000269a:	91 00 00 26 	movh.a %a2,24576
8000269e:	39 22 84 d0 	ld.bu %d2,[%a2]2884 <60000b44 <rxIndex>>
800026a2:	ff 82 df ff 	jge.u %d2,8,80002660 <dpipeReceiveCallback+0xa>
            rxBuffer[rxIndex++] = receivedByte;
800026a6:	1b 12 00 30 	addi %d3,%d2,1
800026aa:	8f f3 0f 31 	and %d3,%d3,255
800026ae:	e9 23 84 d0 	st.b [%a2]2884 <60000b44 <rxIndex>>,%d3
800026b2:	39 e4 ff ff 	ld.bu %d4,[%a14]-1 <60000b44 <rxIndex>>
800026b6:	91 00 00 26 	movh.a %a2,24576
800026ba:	d9 22 88 d0 	lea %a2,[%a2]2888 <60000b48 <rxBuffer>>
800026be:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800026c2:	34 24       	st.b [%a2],%d4
            if (rxIndex == RX_BUFFER_SIZE)
800026c4:	3b 80 00 20 	mov %d2,8
800026c8:	5f 23 cc ff 	jne %d3,%d2,80002660 <dpipeReceiveCallback+0xa>
                temp = (uint16) (rxBuffer[0] << 8) | rxBuffer[1];
800026cc:	91 00 00 36 	movh.a %a3,24576
800026d0:	d9 32 88 d0 	lea %a2,[%a3]2888 <60000b48 <rxBuffer>>
800026d4:	39 32 88 d0 	ld.bu %d2,[%a3]2888 <60000b48 <rxBuffer>>
800026d8:	8f 82 00 20 	sh %d2,%d2,8
800026dc:	39 23 01 00 	ld.bu %d3,[%a2]1
800026e0:	a6 23       	or %d3,%d2
                p_gain = (float) temp / 1000.0f;
800026e2:	4b 03 61 31 	utof %d3,%d3
800026e6:	7b a0 47 24 	movh %d2,17530
800026ea:	4b 23 51 30 	div.f %d3,%d3,%d2
800026ee:	91 00 00 36 	movh.a %a3,24576
800026f2:	d9 33 bc c0 	lea %a3,[%a3]2876 <60000b3c <p_gain>>
800026f6:	74 33       	st.w [%a3],%d3
                temp = (uint16) (rxBuffer[2] << 8) | rxBuffer[3];
800026f8:	39 23 02 00 	ld.bu %d3,[%a2]2 <60000b3c <p_gain>>
800026fc:	8f 83 00 30 	sh %d3,%d3,8
80002700:	39 24 03 00 	ld.bu %d4,[%a2]3
80002704:	a6 43       	or %d3,%d4
                i_gain = (float) temp / 1000.0f;
80002706:	4b 03 61 31 	utof %d3,%d3
8000270a:	4b 23 51 30 	div.f %d3,%d3,%d2
8000270e:	91 00 00 36 	movh.a %a3,24576
80002712:	d9 33 b8 c0 	lea %a3,[%a3]2872 <60000b38 <i_gain>>
80002716:	74 33       	st.w [%a3],%d3
                temp = (uint16) (rxBuffer[4] << 8) | rxBuffer[5];
80002718:	39 23 04 00 	ld.bu %d3,[%a2]4 <60000b38 <i_gain>>
8000271c:	8f 83 00 30 	sh %d3,%d3,8
80002720:	39 24 05 00 	ld.bu %d4,[%a2]5
80002724:	a6 43       	or %d3,%d4
                d_gain = (float) temp / 1000.0f;
80002726:	4b 03 61 31 	utof %d3,%d3
8000272a:	4b 23 51 20 	div.f %d2,%d3,%d2
8000272e:	91 00 00 36 	movh.a %a3,24576
80002732:	d9 33 b4 c0 	lea %a3,[%a3]2868 <60000b34 <d_gain>>
80002736:	74 32       	st.w [%a3],%d2
                temp = (uint16) (rxBuffer[6] << 8) | rxBuffer[7];
80002738:	39 22 06 00 	ld.bu %d2,[%a2]6 <60000b34 <d_gain>>
8000273c:	8f 82 00 20 	sh %d2,%d2,8
80002740:	39 23 07 00 	ld.bu %d3,[%a2]7
80002744:	a6 32       	or %d2,%d3
                rpm_speed = (sint16) temp - 5000;
80002746:	1b 82 c7 2e 	addi %d2,%d2,-5000
8000274a:	91 00 00 26 	movh.a %a2,24576
8000274e:	f9 22 b0 c0 	st.h [%a2]2864 <60000b30 <rpm_speed>>,%d2
                rxIndex = 0;
80002752:	91 00 00 26 	movh.a %a2,24576
80002756:	82 02       	mov %d2,0
80002758:	e9 22 84 d0 	st.b [%a2]2884 <60000b44 <rxIndex>>,%d2
8000275c:	1d ff 82 ff 	j 80002660 <dpipeReceiveCallback+0xa>
}
80002760:	00 90       	ret 

80002762 <asc0RxISR>:
{
80002762:	40 ae       	mov.aa %a14,%sp
    stdIf->onReceive(stdIf->driver);
80002764:	91 00 00 c6 	movh.a %a12,24576
80002768:	d9 cd d4 30 	lea %a13,[%a12]3284 <60000cd4 <g_ascStandardInterface>>
8000276c:	99 d2 34 00 	ld.a %a2,[%a13]52 <60000cd4 <g_ascStandardInterface>>
80002770:	99 c4 d4 30 	ld.a %a4,[%a12]3284 <60000cd4 <g_ascStandardInterface>>
80002774:	2d 02 00 00 	calli %a2
    return stdIf->getReadCount(stdIf->driver);
80002778:	99 d2 10 00 	ld.a %a2,[%a13]16
8000277c:	99 c4 d4 30 	ld.a %a4,[%a12]3284 <60000cd4 <g_ascStandardInterface>>
80002780:	2d 02 00 00 	calli %a2
    rx_count = IfxStdIf_DPipe_getReadCount(&g_ascStandardInterface);
80002784:	91 00 00 26 	movh.a %a2,24576
80002788:	59 22 80 d0 	st.w [%a2]2880 <60000b40 <rx_count>>,%d2
    if (rx_count > 0)
8000278c:	df 02 05 80 	jne %d2,0,80002796 <asc0RxISR+0x34>
}
80002790:	0d 00 40 02 	rslcx 
80002794:	00 80       	rfe 
        dpipeReceiveCallback();
80002796:	6d ff 60 ff 	call 80002656 <dpipeReceiveCallback>
}
8000279a:	1d ff fb ff 	j 80002790 <asc0RxISR+0x2e>

8000279e <printInfo>:
{
8000279e:	40 ae       	mov.aa %a14,%sp
800027a0:	80 48       	mov.d %d8,%a4
    IfxStdIf_DPipe_print(io, ENDLINE);
800027a2:	91 00 00 58 	movh.a %a5,32768
800027a6:	d9 55 16 c0 	lea %a5,[%a5]790 <80000316 <IfxCpu_Trap_vectorTable0_end+0x122>>
800027aa:	6d 00 30 26 	call 8000740a <IfxStdIf_DPipe_print>
    IfxStdIf_DPipe_print(io, "******************************************************************************"ENDLINE);
800027ae:	91 00 00 c8 	movh.a %a12,32768
800027b2:	d9 cc 3e 90 	lea %a12,[%a12]638 <8000027e <IfxCpu_Trap_vectorTable0_end+0x8a>>
800027b6:	40 c5       	mov.aa %a5,%a12
800027b8:	60 84       	mov.a %a4,%d8
800027ba:	6d 00 28 26 	call 8000740a <IfxStdIf_DPipe_print>
    IfxStdIf_DPipe_print(io, "This is an example that shows how to use the Infineon Shell from iLLDs.       "ENDLINE);
800027be:	91 00 00 58 	movh.a %a5,32768
800027c2:	d9 55 19 c0 	lea %a5,[%a5]793 <80000319 <IfxCpu_Trap_vectorTable0_end+0x125>>
800027c6:	60 84       	mov.a %a4,%d8
800027c8:	6d 00 21 26 	call 8000740a <IfxStdIf_DPipe_print>
    IfxStdIf_DPipe_print(io,
800027cc:	91 00 00 58 	movh.a %a5,32768
800027d0:	d9 55 2a d0 	lea %a5,[%a5]874 <8000036a <IfxCpu_Trap_vectorTable0_end+0x176>>
800027d4:	60 84       	mov.a %a4,%d8
800027d6:	6d 00 1a 26 	call 8000740a <IfxStdIf_DPipe_print>
    IfxStdIf_DPipe_print(io, "following parameters:                                                         "ENDLINE);
800027da:	91 00 00 58 	movh.a %a5,32768
800027de:	d9 55 3a e0 	lea %a5,[%a5]954 <800003ba <IfxCpu_Trap_vectorTable0_end+0x1c6>>
800027e2:	60 84       	mov.a %a4,%d8
800027e4:	6d 00 13 26 	call 8000740a <IfxStdIf_DPipe_print>
    IfxStdIf_DPipe_print(io, "  - '1': toggles the LED                                                      "ENDLINE);
800027e8:	91 00 00 58 	movh.a %a5,32768
800027ec:	d9 55 4b 00 	lea %a5,[%a5]1035 <8000040b <IfxCpu_Trap_vectorTable0_end+0x217>>
800027f0:	60 84       	mov.a %a4,%d8
800027f2:	6d 00 0c 26 	call 8000740a <IfxStdIf_DPipe_print>
    IfxStdIf_DPipe_print(io, "Any other parameter turns off the LED and reports a Shell command error.      "ENDLINE);
800027f6:	91 00 00 58 	movh.a %a5,32768
800027fa:	d9 55 5c 10 	lea %a5,[%a5]1116 <8000045c <IfxCpu_Trap_vectorTable0_end+0x268>>
800027fe:	60 84       	mov.a %a4,%d8
80002800:	6d 00 05 26 	call 8000740a <IfxStdIf_DPipe_print>
    IfxStdIf_DPipe_print(io, "******************************************************************************"ENDLINE);
80002804:	40 c5       	mov.aa %a5,%a12
80002806:	60 84       	mov.a %a4,%d8
80002808:	6d 00 01 26 	call 8000740a <IfxStdIf_DPipe_print>
}
8000280c:	00 90       	ret 

8000280e <printShellInfo>:
{
8000280e:	40 ae       	mov.aa %a14,%sp
80002810:	40 64       	mov.aa %a4,%a6
    printInfo(io);
80002812:	6d ff c6 ff 	call 8000279e <printInfo>
}
80002816:	82 12       	mov %d2,1
80002818:	00 90       	ret 

8000281a <initLED>:

/* Function to initialize GPIO pins for the LED */
void initLED (void)
{
8000281a:	40 ae       	mov.aa %a14,%sp
    /* Initialize GPIO pins for the LED */
    IfxPort_setPinMode(LED, IfxPort_Mode_outputPushPullGeneral);
8000281c:	3b 00 08 50 	mov %d5,128
80002820:	82 24       	mov %d4,2
80002822:	91 40 00 4f 	movh.a %a4,61444
80002826:	d9 44 00 0b 	lea %a4,[%a4]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
8000282a:	6d ff 2f fe 	call 80002488 <IfxPort_setPinMode>
8000282e:	91 40 00 2f 	movh.a %a2,61444
80002832:	d9 22 00 0b 	lea %a2,[%a2]-20480 <f003b000 <_SMALL_DATA4_+0x60033000>>
80002836:	7b 40 00 20 	movh %d2,4
8000283a:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2

    /* Turn off the LED */
    IfxPort_setPinState(LED, IfxPort_State_low);
}
8000283e:	00 90       	ret 

80002840 <initSerialInterface>:

/* Function to initialize ASCLIN module */
void initSerialInterface (void)
{
80002840:	40 ae       	mov.aa %a14,%sp
80002842:	20 98       	sub.a %sp,152
    IfxAsclin_Asc_Config ascConf;

    /* Set default configurations */
    IfxAsclin_Asc_initModuleConfig(&ascConf, &MODULE_ASCLIN3); /* Initialize the structure with default values      */
80002844:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x5fff8900>
80002848:	d9 e4 cc ef 	lea %a4,[%a14]-116
8000284c:	6d 00 da 20 	call 80006a00 <IfxAsclin_Asc_initModuleConfig>

    /* Set the desired baud rate */
    ascConf.baudrate.baudrate = ASC_BAUDRATE; /* Set the baud rate in bit/s       */
80002850:	7b 10 7e 24 	movh %d2,18401
80002854:	59 e2 d0 ef 	st.w [%a14]-112,%d2
    ascConf.baudrate.oversampling = IfxAsclin_OversamplingFactor_16; /* Set the oversampling factor      */
80002858:	3b f0 00 20 	mov %d2,15
8000285c:	59 e2 d8 ef 	st.w [%a14]-104,%d2

    /* Configure the sampling mode */
    ascConf.bitTiming.medianFilter = IfxAsclin_SamplesPerBit_three; /* Set the number of samples per bit*/
80002860:	82 12       	mov %d2,1
80002862:	59 e2 dc ef 	st.w [%a14]-100,%d2
    ascConf.bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_8; /* Set the first sample position    */
80002866:	3b 80 00 30 	mov %d3,8
8000286a:	59 e3 e0 ef 	st.w [%a14]-96,%d3

    ascConf.baudrate.prescaler = 1;
8000286e:	f9 e2 d4 ef 	st.h [%a14]-108,%d2

    // 데이터 프레임 설정
    ascConf.frame.dataLength = IfxAsclin_DataLength_8;
80002872:	82 74       	mov %d4,7
80002874:	59 e4 f8 ef 	st.w [%a14]-72,%d4
    ascConf.frame.stopBit = IfxAsclin_StopBit_1;
80002878:	59 e2 e8 ef 	st.w [%a14]-88,%d2

    // 핸드쉐이크 설정
    //ascConf.flowControl = IfxAsclin_FlowControl_none;

    /* ISR priorities and interrupt target */
    ascConf.interrupt.txPriority = ISR_PRIORITY_ASCLIN_TX; /* Set the interrupt priority for TX events             */
8000287c:	f9 e3 d4 ff 	st.h [%a14]-44,%d3
    ascConf.interrupt.rxPriority = ISR_PRIORITY_ASCLIN_RX; /* Set the interrupt priority for RX events             */
80002880:	82 42       	mov %d2,4
80002882:	f9 e2 d6 ff 	st.h [%a14]-42,%d2
    ascConf.interrupt.erPriority = ISR_PRIORITY_ASCLIN_ER; /* Set the interrupt priority for Error events          */
80002886:	3b c0 00 20 	mov %d2,12
8000288a:	f9 e2 d8 ff 	st.h [%a14]-40,%d2
    ascConf.interrupt.typeOfService = IfxSrc_Tos_cpu0;
8000288e:	82 02       	mov %d2,0
80002890:	59 e2 dc ff 	st.w [%a14]-36,%d2

    /* Pin configuration */
    const IfxAsclin_Asc_Pins pins = {.cts = NULL_PTR, /* CTS pin not used                                     */
80002894:	d9 e3 e8 df 	lea %a3,[%a14]-152
80002898:	91 00 00 26 	movh.a %a2,24576
8000289c:	d9 22 00 00 	lea %a2,[%a2]0 <60000000 <LCF_DSPR1_START>>
800028a0:	40 34       	mov.aa %a4,%a3
800028a2:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
800028a6:	89 44 48 01 	st.d [%a4+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
800028aa:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
800028ae:	89 44 48 01 	st.d [%a4+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
800028b2:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
800028b6:	89 44 48 01 	st.d [%a4+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
800028ba:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
800028be:	89 44 48 01 	st.d [%a4+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
800028c2:	44 24       	ld.w %d4,[%a2+]
800028c4:	64 44       	st.w [%a4+],%d4
    .rxMode = IfxPort_InputMode_pullUp, /* RX pin                                               */
    .rts = NULL_PTR, /* RTS pin not used                                     */
    .rtsMode = IfxPort_OutputMode_pushPull, .tx = &IfxAsclin3_TX_P15_7_OUT, /* Select the pin for TX connected to the USB port      */
    .txMode = IfxPort_OutputMode_pushPull, /* TX pin                                               */
    .pinDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1};
    ascConf.pins = &pins;
800028c6:	b5 e3 e0 ff 	st.a [%a14]-32 <60000008 <LCF_DSPR1_START+0x8>>,%a3

    /* FIFO buffers configuration */
    ascConf.txBuffer = g_uartTxBuffer; /* Set the transmission buffer                          */
800028ca:	91 00 00 26 	movh.a %a2,24576
800028ce:	d9 22 88 80 	lea %a2,[%a2]2568 <60000a08 <g_uartTxBuffer>>
800028d2:	b5 e2 ec ff 	st.a [%a14]-20 <60000a08 <g_uartTxBuffer>>,%a2
    ascConf.txBufferSize = ASC_TX_BUFFER_SIZE; /* Set the transmission buffer size                     */
800028d6:	3b 00 10 20 	mov %d2,256
800028da:	f9 e2 ea ff 	st.h [%a14]-22,%d2
    ascConf.rxBuffer = g_uartRxBuffer; /* Set the receiving buffer                             */
800028de:	91 00 00 26 	movh.a %a2,24576
800028e2:	d9 22 a0 30 	lea %a2,[%a2]2272 <600008e0 <g_uartRxBuffer>>
800028e6:	b5 e2 f4 ff 	st.a [%a14]-12 <600008e0 <g_uartRxBuffer>>,%a2
    ascConf.rxBufferSize = ASC_RX_BUFFER_SIZE; /* Set the receiving buffer size                        */
800028ea:	f9 e2 f0 ff 	st.h [%a14]-16 <600008e0 <g_uartRxBuffer>>,%d2

    /* Init ASCLIN module */
    IfxAsclin_Asc_initModule(&g_asclin, &ascConf); /* Initialize the module with the given configuration   */
800028ee:	d9 e5 cc ef 	lea %a5,[%a14]-116 <600008e0 <g_uartRxBuffer>>
800028f2:	91 00 00 46 	movh.a %a4,24576
800028f6:	d9 44 f4 20 	lea %a4,[%a4]3252 <60000cb4 <g_asclin>>
800028fa:	6d 00 49 1e 	call 8000658c <IfxAsclin_Asc_initModule>
}
800028fe:	00 90       	ret 

80002900 <initShellInterface>:

/* Function to initialize the Shell */
void initShellInterface (void)
{
80002900:	40 ae       	mov.aa %a14,%sp
80002902:	20 28       	sub.a %sp,40
    /* Initialize the hardware peripherals */
    initLED();
80002904:	6d ff 8b ff 	call 8000281a <initLED>
    initSerialInterface();
80002908:	6d ff 9c ff 	call 80002840 <initSerialInterface>

    /* Initialize the Standard Interface */
    IfxAsclin_Asc_stdIfDPipeInit(&g_ascStandardInterface, &g_asclin);
8000290c:	91 00 00 c6 	movh.a %a12,24576
80002910:	d9 cc d4 30 	lea %a12,[%a12]3284 <60000cd4 <g_ascStandardInterface>>
80002914:	91 00 00 56 	movh.a %a5,24576
80002918:	d9 55 f4 20 	lea %a5,[%a5]3252 <60000cb4 <g_asclin>>
8000291c:	40 c4       	mov.aa %a4,%a12
8000291e:	6d 00 2c 21 	call 80006b76 <IfxAsclin_Asc_stdIfDPipeInit>

    /* Initialize the Console */
    Ifx_Console_init(&g_ascStandardInterface);
80002922:	40 c4       	mov.aa %a4,%a12
80002924:	6d 00 9a 21 	call 80006c58 <Ifx_Console_init>

    /* Print info to the console */
    //printInfo(&g_ascStandardInterface);
    Ifx_Console_print(ENDLINE "Enter '" COMMAND_HELP "' to see the available commands" ENDLINE);
80002928:	91 00 00 48 	movh.a %a4,32768
8000292c:	d9 44 6d 20 	lea %a4,[%a4]1197 <800004ad <IfxCpu_Trap_vectorTable0_end+0x2b9>>
80002930:	6d 00 9f 21 	call 80006c6e <Ifx_Console_print>

    /* Initialize the shell */
    Ifx_Shell_Config shellConf;
    Ifx_Shell_initConfig(&shellConf); /* Initialize the structure with default values         */
80002934:	d9 e4 dc ff 	lea %a4,[%a14]-36
80002938:	6d 00 c5 21 	call 80006cc2 <Ifx_Shell_initConfig>

    shellConf.standardIo = &g_ascStandardInterface; /* Set a pointer to the standard interface              */
8000293c:	b5 ec dc ff 	st.a [%a14]-36,%a12
    shellConf.commandList[0] = &g_shellCommands[0]; /* Set the supported command list                       */
80002940:	91 00 00 28 	movh.a %a2,32768
80002944:	d9 22 c4 e0 	lea %a2,[%a2]3972 <80000f84 <g_shellCommands>>
80002948:	b5 e2 e4 ff 	st.a [%a14]-28 <80000f84 <g_shellCommands>>,%a2

    Ifx_Shell_init(&g_shellInterface, &shellConf); /* Initialize the Shell with the given configuration    */
8000294c:	d9 e5 dc ff 	lea %a5,[%a14]-36 <80000f84 <g_shellCommands>>
80002950:	91 00 00 46 	movh.a %a4,24576
80002954:	d9 44 90 d0 	lea %a4,[%a4]2896 <60000b50 <g_shellInterface>>
80002958:	6d 00 d9 21 	call 80006d0a <Ifx_Shell_init>
}
8000295c:	00 90       	ret 

8000295e <put_data>:
            str[97], str[98], str[99],str[100], str[101], str[102], str[103], str[104], str[105], str[106], str[107], str[108], str[109], str[110], str[111], str[112],
            str[113], str[114], str[115], str[116], str[117], str[118], str[119], str[120], str[121], str[122], str[123], str[124],
            str[125], str[126], str[127], str[128], str[129]);
}
void put_data (char *str, sint32 value, uint8 cnt)
{
8000295e:	40 ae       	mov.aa %a14,%sp
    boolean sign = FALSE;

    if (value < 0)
80002960:	bf 04 08 00 	jlt %d4,0,80002970 <put_data+0x12>
    boolean sign = FALSE;
80002964:	82 00       	mov %d0,0
    {
        value = -value;
        sign = TRUE;
    }
    sint32 divisor = 1;
    for (int i = 8; i >= 0; i--)
80002966:	3b 80 00 60 	mov %d6,8
    sint32 divisor = 1;
8000296a:	82 17       	mov %d7,1
    for (int i = 8; i >= 0; i--)
8000296c:	1d 00 14 00 	j 80002994 <put_data+0x36>
        value = -value;
80002970:	32 54       	rsub %d4
        sign = TRUE;
80002972:	82 10       	mov %d0,1
80002974:	1d ff f9 ff 	j 80002966 <put_data+0x8>
    {
        if (i != 8)
            divisor *= 10;
        str[cnt * 10 + i] = '0' + ((value / divisor) % 10);
80002978:	4b 74 01 82 	div %e8,%d4,%d7
8000297c:	3b a0 00 30 	mov %d3,10
80002980:	4b 38 01 22 	div %e2,%d8,%d3
80002984:	13 a5 20 16 	madd %d1,%d6,%d5,10
80002988:	01 41 00 26 	addsc.a %a2,%a4,%d1,0
8000298c:	1b 03 03 20 	addi %d2,%d3,48
80002990:	34 22       	st.b [%a2],%d2
    for (int i = 8; i >= 0; i--)
80002992:	c2 f6       	add %d6,-1
80002994:	bf 06 0a 00 	jlt %d6,0,800029a8 <put_data+0x4a>
        if (i != 8)
80002998:	8b 86 00 22 	eq %d2,%d6,8
8000299c:	df 02 ee ff 	jne %d2,0,80002978 <put_data+0x1a>
            divisor *= 10;
800029a0:	53 a7 20 70 	mul %d7,%d7,10
800029a4:	1d ff ea ff 	j 80002978 <put_data+0x1a>
    }
    if (sign == TRUE)
800029a8:	df 00 0c 80 	jne %d0,0,800029c0 <put_data+0x62>
    {
        str[cnt * 10 + 9] = 'm';
    }
    else
    {
        str[cnt * 10 + 9] = 'p';
800029ac:	53 a5 20 20 	mul %d2,%d5,10
800029b0:	1b 92 00 20 	addi %d2,%d2,9
800029b4:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
800029b8:	3b 00 07 20 	mov %d2,112
800029bc:	34 42       	st.b [%a4],%d2
    }
}
800029be:	00 90       	ret 
        str[cnt * 10 + 9] = 'm';
800029c0:	53 a5 20 20 	mul %d2,%d5,10
800029c4:	1b 92 00 20 	addi %d2,%d2,9
800029c8:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
800029cc:	3b d0 06 20 	mov %d2,109
800029d0:	34 42       	st.b [%a4],%d2
800029d2:	00 90       	ret 

800029d4 <print_enc>:
{
800029d4:	40 ae       	mov.aa %a14,%sp
800029d6:	d9 aa 88 ff 	lea %sp,[%sp]-1080
800029da:	40 4c       	mov.aa %a12,%a4
800029dc:	40 5d       	mov.aa %a13,%a5
    char str[130] = {0};
800029de:	82 02       	mov %d2,0
800029e0:	59 e2 fc df 	st.w [%a14]-132,%d2
800029e4:	3b e0 07 50 	mov %d5,126
800029e8:	82 04       	mov %d4,0
800029ea:	d9 e4 c0 ef 	lea %a4,[%a14]-128
800029ee:	6d 00 7b 26 	call 800076e4 <memset>
    sint32 value = (sint32) (imu_data->accel_x * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
800029f2:	54 c2       	ld.w %d2,[%a12]
800029f4:	7b a0 47 84 	movh %d8,17530
800029f8:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 0);
800029fc:	82 05       	mov %d5,0
800029fe:	4b 04 31 41 	ftoiz %d4,%d4
80002a02:	d9 e4 fc df 	lea %a4,[%a14]-132
80002a06:	6d ff ac ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->accel_y * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002a0a:	19 c2 04 00 	ld.w %d2,[%a12]4
80002a0e:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 1);
80002a12:	82 15       	mov %d5,1
80002a14:	4b 04 31 41 	ftoiz %d4,%d4
80002a18:	d9 e4 fc df 	lea %a4,[%a14]-132
80002a1c:	6d ff a1 ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->accel_z * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002a20:	19 c2 08 00 	ld.w %d2,[%a12]8
80002a24:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 2);
80002a28:	82 25       	mov %d5,2
80002a2a:	4b 04 31 41 	ftoiz %d4,%d4
80002a2e:	d9 e4 fc df 	lea %a4,[%a14]-132
80002a32:	6d ff 96 ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->gyro_x * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002a36:	19 c2 0c 00 	ld.w %d2,[%a12]12
80002a3a:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 3);
80002a3e:	82 35       	mov %d5,3
80002a40:	4b 04 31 41 	ftoiz %d4,%d4
80002a44:	d9 e4 fc df 	lea %a4,[%a14]-132
80002a48:	6d ff 8b ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->gyro_y * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002a4c:	19 c2 10 00 	ld.w %d2,[%a12]16
80002a50:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 4);
80002a54:	82 45       	mov %d5,4
80002a56:	4b 04 31 41 	ftoiz %d4,%d4
80002a5a:	d9 e4 fc df 	lea %a4,[%a14]-132
80002a5e:	6d ff 80 ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->gyro_z * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002a62:	19 c2 14 00 	ld.w %d2,[%a12]20
80002a66:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 5);
80002a6a:	82 55       	mov %d5,5
80002a6c:	4b 04 31 41 	ftoiz %d4,%d4
80002a70:	d9 e4 fc df 	lea %a4,[%a14]-132
80002a74:	6d ff 75 ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->mag_x * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002a78:	19 c2 18 00 	ld.w %d2,[%a12]24
80002a7c:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 6);
80002a80:	82 65       	mov %d5,6
80002a82:	4b 04 31 41 	ftoiz %d4,%d4
80002a86:	d9 e4 fc df 	lea %a4,[%a14]-132
80002a8a:	6d ff 6a ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->mag_y * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002a8e:	19 c2 1c 00 	ld.w %d2,[%a12]28
80002a92:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 7);
80002a96:	82 75       	mov %d5,7
80002a98:	4b 04 31 41 	ftoiz %d4,%d4
80002a9c:	d9 e4 fc df 	lea %a4,[%a14]-132
80002aa0:	6d ff 5f ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->mag_z * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002aa4:	19 c2 20 00 	ld.w %d2,[%a12]32
80002aa8:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 8);
80002aac:	3b 80 00 50 	mov %d5,8
80002ab0:	4b 04 31 41 	ftoiz %d4,%d4
80002ab4:	d9 e4 fc df 	lea %a4,[%a14]-132
80002ab8:	6d ff 53 ff 	call 8000295e <put_data>
    value = (sint32) (imu_data->heading * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002abc:	19 c4 24 00 	ld.w %d4,[%a12]36
80002ac0:	4b 84 41 40 	mul.f %d4,%d4,%d8
    put_data(str, value, 9);
80002ac4:	3b 90 00 50 	mov %d5,9
80002ac8:	4b 04 31 41 	ftoiz %d4,%d4
80002acc:	d9 e4 fc df 	lea %a4,[%a14]-132
80002ad0:	6d ff 47 ff 	call 8000295e <put_data>
    value = (sint32) (euler_data->roll * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002ad4:	54 d2       	ld.w %d2,[%a13]
80002ad6:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 10);
80002ada:	3b a0 00 50 	mov %d5,10
80002ade:	4b 04 31 41 	ftoiz %d4,%d4
80002ae2:	d9 e4 fc df 	lea %a4,[%a14]-132
80002ae6:	6d ff 3c ff 	call 8000295e <put_data>
    value = (sint32) (euler_data->pitch * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002aea:	19 d2 04 00 	ld.w %d2,[%a13]4
80002aee:	4b 82 41 40 	mul.f %d4,%d2,%d8
    put_data(str, value, 11);
80002af2:	3b b0 00 50 	mov %d5,11
80002af6:	4b 04 31 41 	ftoiz %d4,%d4
80002afa:	d9 e4 fc df 	lea %a4,[%a14]-132
80002afe:	6d ff 30 ff 	call 8000295e <put_data>
    value = (sint32) (euler_data->yaw * 1000);  //32비트 부호있으면 10자리까지-> 9자리까지 한다 생각
80002b02:	19 d4 08 00 	ld.w %d4,[%a13]8
80002b06:	4b 84 41 40 	mul.f %d4,%d4,%d8
    put_data(str, value, 12);
80002b0a:	3b c0 00 50 	mov %d5,12
80002b0e:	4b 04 31 41 	ftoiz %d4,%d4
80002b12:	d9 e4 fc df 	lea %a4,[%a14]-132
80002b16:	6d ff 24 ff 	call 8000295e <put_data>
    PRINT_ALL_SIGNAL(&g_ascStandardInterface, 1,
80002b1a:	79 e2 fc df 	ld.b %d2,[%a14]-132
80002b1e:	59 e2 f4 df 	st.w [%a14]-140,%d2
80002b22:	79 e3 fd df 	ld.b %d3,[%a14]-131
80002b26:	59 e3 f0 df 	st.w [%a14]-144,%d3
80002b2a:	79 e4 fe df 	ld.b %d4,[%a14]-130
80002b2e:	59 e4 ec df 	st.w [%a14]-148,%d4
80002b32:	79 e5 ff df 	ld.b %d5,[%a14]-129
80002b36:	59 e5 e8 df 	st.w [%a14]-152,%d5
80002b3a:	79 e6 c0 ef 	ld.b %d6,[%a14]-128
80002b3e:	59 e6 e4 df 	st.w [%a14]-156,%d6
80002b42:	79 e7 c1 ef 	ld.b %d7,[%a14]-127
80002b46:	59 e7 e0 df 	st.w [%a14]-160,%d7
80002b4a:	79 e0 c2 ef 	ld.b %d0,[%a14]-126
80002b4e:	59 e0 dc df 	st.w [%a14]-164,%d0
80002b52:	79 e1 c3 ef 	ld.b %d1,[%a14]-125
80002b56:	59 e1 d8 df 	st.w [%a14]-168,%d1
80002b5a:	79 e8 c4 ef 	ld.b %d8,[%a14]-124
80002b5e:	59 e8 d4 df 	st.w [%a14]-172,%d8
80002b62:	79 e9 c5 ef 	ld.b %d9,[%a14]-123
80002b66:	59 e9 d0 df 	st.w [%a14]-176,%d9
80002b6a:	79 ea c6 ef 	ld.b %d10,[%a14]-122
80002b6e:	59 ea cc df 	st.w [%a14]-180,%d10
80002b72:	79 eb c7 ef 	ld.b %d11,[%a14]-121
80002b76:	59 eb c8 df 	st.w [%a14]-184,%d11
80002b7a:	79 ec c8 ef 	ld.b %d12,[%a14]-120
80002b7e:	59 ec c4 df 	st.w [%a14]-188,%d12
80002b82:	79 ed c9 ef 	ld.b %d13,[%a14]-119
80002b86:	59 ed c0 df 	st.w [%a14]-192,%d13
80002b8a:	79 ee ca ef 	ld.b %d14,[%a14]-118
80002b8e:	59 ee fc cf 	st.w [%a14]-196,%d14
80002b92:	79 ef cb ef 	ld.b %d15,[%a14]-117
80002b96:	59 ef f8 cf 	st.w [%a14]-200,%d15
80002b9a:	79 e2 cc ef 	ld.b %d2,[%a14]-116
80002b9e:	59 e2 f4 cf 	st.w [%a14]-204,%d2
80002ba2:	79 e3 cd ef 	ld.b %d3,[%a14]-115
80002ba6:	59 e3 f0 cf 	st.w [%a14]-208,%d3
80002baa:	79 e4 ce ef 	ld.b %d4,[%a14]-114
80002bae:	59 e4 ec cf 	st.w [%a14]-212,%d4
80002bb2:	79 e5 cf ef 	ld.b %d5,[%a14]-113
80002bb6:	59 e5 e8 cf 	st.w [%a14]-216,%d5
80002bba:	79 e6 d0 ef 	ld.b %d6,[%a14]-112
80002bbe:	59 e6 e4 cf 	st.w [%a14]-220,%d6
80002bc2:	79 e7 d1 ef 	ld.b %d7,[%a14]-111
80002bc6:	59 e7 e0 cf 	st.w [%a14]-224,%d7
80002bca:	79 e0 d2 ef 	ld.b %d0,[%a14]-110
80002bce:	59 e0 dc cf 	st.w [%a14]-228,%d0
80002bd2:	79 e1 d3 ef 	ld.b %d1,[%a14]-109
80002bd6:	59 e1 d8 cf 	st.w [%a14]-232,%d1
80002bda:	79 e8 d4 ef 	ld.b %d8,[%a14]-108
80002bde:	59 e8 d4 cf 	st.w [%a14]-236,%d8
80002be2:	79 e9 d5 ef 	ld.b %d9,[%a14]-107
80002be6:	59 e9 d0 cf 	st.w [%a14]-240,%d9
80002bea:	79 ea d6 ef 	ld.b %d10,[%a14]-106
80002bee:	59 ea cc cf 	st.w [%a14]-244,%d10
80002bf2:	79 eb d7 ef 	ld.b %d11,[%a14]-105
80002bf6:	59 eb c8 cf 	st.w [%a14]-248,%d11
80002bfa:	79 ec d8 ef 	ld.b %d12,[%a14]-104
80002bfe:	59 ec c4 cf 	st.w [%a14]-252,%d12
80002c02:	79 ed d9 ef 	ld.b %d13,[%a14]-103
80002c06:	59 ed c0 cf 	st.w [%a14]-256,%d13
80002c0a:	79 ee da ef 	ld.b %d14,[%a14]-102
80002c0e:	59 ee fc bf 	st.w [%a14]-260,%d14
80002c12:	79 ef db ef 	ld.b %d15,[%a14]-101
80002c16:	59 ef f8 bf 	st.w [%a14]-264,%d15
80002c1a:	79 e2 dc ef 	ld.b %d2,[%a14]-100
80002c1e:	59 e2 f4 bf 	st.w [%a14]-268,%d2
80002c22:	79 e3 dd ef 	ld.b %d3,[%a14]-99
80002c26:	59 e3 f0 bf 	st.w [%a14]-272,%d3
80002c2a:	79 e4 de ef 	ld.b %d4,[%a14]-98
80002c2e:	59 e4 ec bf 	st.w [%a14]-276,%d4
80002c32:	79 e5 df ef 	ld.b %d5,[%a14]-97
80002c36:	59 e5 e8 bf 	st.w [%a14]-280,%d5
80002c3a:	79 e6 e0 ef 	ld.b %d6,[%a14]-96
80002c3e:	59 e6 e4 bf 	st.w [%a14]-284,%d6
80002c42:	79 e7 e1 ef 	ld.b %d7,[%a14]-95
80002c46:	59 e7 e0 bf 	st.w [%a14]-288,%d7
80002c4a:	79 e0 e2 ef 	ld.b %d0,[%a14]-94
80002c4e:	59 e0 dc bf 	st.w [%a14]-292,%d0
80002c52:	79 e1 e3 ef 	ld.b %d1,[%a14]-93
80002c56:	59 e1 d8 bf 	st.w [%a14]-296,%d1
80002c5a:	79 e8 e4 ef 	ld.b %d8,[%a14]-92
80002c5e:	59 e8 d4 bf 	st.w [%a14]-300,%d8
80002c62:	79 e9 e5 ef 	ld.b %d9,[%a14]-91
80002c66:	59 e9 d0 bf 	st.w [%a14]-304,%d9
80002c6a:	79 ea e6 ef 	ld.b %d10,[%a14]-90
80002c6e:	59 ea cc bf 	st.w [%a14]-308,%d10
80002c72:	79 eb e7 ef 	ld.b %d11,[%a14]-89
80002c76:	59 eb c8 bf 	st.w [%a14]-312,%d11
80002c7a:	79 ec e8 ef 	ld.b %d12,[%a14]-88
80002c7e:	59 ec c4 bf 	st.w [%a14]-316,%d12
80002c82:	79 ed e9 ef 	ld.b %d13,[%a14]-87
80002c86:	59 ed c0 bf 	st.w [%a14]-320,%d13
80002c8a:	79 ee ea ef 	ld.b %d14,[%a14]-86
80002c8e:	59 ee fc af 	st.w [%a14]-324,%d14
80002c92:	79 ef eb ef 	ld.b %d15,[%a14]-85
80002c96:	59 ef f8 af 	st.w [%a14]-328,%d15
80002c9a:	79 e2 ec ef 	ld.b %d2,[%a14]-84
80002c9e:	59 e2 f4 af 	st.w [%a14]-332,%d2
80002ca2:	79 e3 ed ef 	ld.b %d3,[%a14]-83
80002ca6:	59 e3 f0 af 	st.w [%a14]-336,%d3
80002caa:	79 e4 ee ef 	ld.b %d4,[%a14]-82
80002cae:	59 e4 ec af 	st.w [%a14]-340,%d4
80002cb2:	79 e5 ef ef 	ld.b %d5,[%a14]-81
80002cb6:	59 e5 e8 af 	st.w [%a14]-344,%d5
80002cba:	79 e6 f0 ef 	ld.b %d6,[%a14]-80
80002cbe:	59 e6 e4 af 	st.w [%a14]-348,%d6
80002cc2:	79 e7 f1 ef 	ld.b %d7,[%a14]-79
80002cc6:	59 e7 e0 af 	st.w [%a14]-352,%d7
80002cca:	79 e0 f2 ef 	ld.b %d0,[%a14]-78
80002cce:	59 e0 dc af 	st.w [%a14]-356,%d0
80002cd2:	79 e1 f3 ef 	ld.b %d1,[%a14]-77
80002cd6:	59 e1 d8 af 	st.w [%a14]-360,%d1
80002cda:	79 e8 f4 ef 	ld.b %d8,[%a14]-76
80002cde:	59 e8 d4 af 	st.w [%a14]-364,%d8
80002ce2:	79 e9 f5 ef 	ld.b %d9,[%a14]-75
80002ce6:	59 e9 d0 af 	st.w [%a14]-368,%d9
80002cea:	79 ea f6 ef 	ld.b %d10,[%a14]-74
80002cee:	59 ea cc af 	st.w [%a14]-372,%d10
80002cf2:	79 eb f7 ef 	ld.b %d11,[%a14]-73
80002cf6:	59 eb c8 af 	st.w [%a14]-376,%d11
80002cfa:	79 ec f8 ef 	ld.b %d12,[%a14]-72
80002cfe:	59 ec c4 af 	st.w [%a14]-380,%d12
80002d02:	79 ed f9 ef 	ld.b %d13,[%a14]-71
80002d06:	59 ed c0 af 	st.w [%a14]-384,%d13
80002d0a:	79 ee fa ef 	ld.b %d14,[%a14]-70
80002d0e:	59 ee fc 9f 	st.w [%a14]-388,%d14
80002d12:	79 ef fb ef 	ld.b %d15,[%a14]-69
80002d16:	59 ef f8 9f 	st.w [%a14]-392,%d15
80002d1a:	79 e2 fc ef 	ld.b %d2,[%a14]-68
80002d1e:	59 e2 f4 9f 	st.w [%a14]-396,%d2
80002d22:	79 e3 fd ef 	ld.b %d3,[%a14]-67
80002d26:	59 e3 f0 9f 	st.w [%a14]-400,%d3
80002d2a:	79 e4 fe ef 	ld.b %d4,[%a14]-66
80002d2e:	59 e4 ec 9f 	st.w [%a14]-404,%d4
80002d32:	79 e5 ff ef 	ld.b %d5,[%a14]-65
80002d36:	59 e5 e8 9f 	st.w [%a14]-408,%d5
80002d3a:	79 e6 c0 ff 	ld.b %d6,[%a14]-64
80002d3e:	59 e6 e4 9f 	st.w [%a14]-412,%d6
80002d42:	79 e7 c1 ff 	ld.b %d7,[%a14]-63
80002d46:	59 e7 e0 9f 	st.w [%a14]-416,%d7
80002d4a:	79 e0 c2 ff 	ld.b %d0,[%a14]-62
80002d4e:	59 e0 dc 9f 	st.w [%a14]-420,%d0
80002d52:	79 e1 c3 ff 	ld.b %d1,[%a14]-61
80002d56:	59 e1 d8 9f 	st.w [%a14]-424,%d1
80002d5a:	79 e8 c4 ff 	ld.b %d8,[%a14]-60
80002d5e:	59 e8 d4 9f 	st.w [%a14]-428,%d8
80002d62:	79 e9 c5 ff 	ld.b %d9,[%a14]-59
80002d66:	59 e9 d0 9f 	st.w [%a14]-432,%d9
80002d6a:	79 ea c6 ff 	ld.b %d10,[%a14]-58
80002d6e:	59 ea cc 9f 	st.w [%a14]-436,%d10
80002d72:	79 eb c7 ff 	ld.b %d11,[%a14]-57
80002d76:	59 eb c8 9f 	st.w [%a14]-440,%d11
80002d7a:	79 ec c8 ff 	ld.b %d12,[%a14]-56
80002d7e:	59 ec c4 9f 	st.w [%a14]-444,%d12
80002d82:	79 ed c9 ff 	ld.b %d13,[%a14]-55
80002d86:	59 ed c0 9f 	st.w [%a14]-448,%d13
80002d8a:	79 ee ca ff 	ld.b %d14,[%a14]-54
80002d8e:	59 ee fc 8f 	st.w [%a14]-452,%d14
80002d92:	79 ef cb ff 	ld.b %d15,[%a14]-53
80002d96:	59 ef f8 8f 	st.w [%a14]-456,%d15
80002d9a:	79 e2 cc ff 	ld.b %d2,[%a14]-52
80002d9e:	59 e2 f4 8f 	st.w [%a14]-460,%d2
80002da2:	79 e3 cd ff 	ld.b %d3,[%a14]-51
80002da6:	59 e3 f0 8f 	st.w [%a14]-464,%d3
80002daa:	79 e4 ce ff 	ld.b %d4,[%a14]-50
80002dae:	59 e4 ec 8f 	st.w [%a14]-468,%d4
80002db2:	79 e5 cf ff 	ld.b %d5,[%a14]-49
80002db6:	59 e5 e8 8f 	st.w [%a14]-472,%d5
80002dba:	79 e6 d0 ff 	ld.b %d6,[%a14]-48
80002dbe:	59 e6 e4 8f 	st.w [%a14]-476,%d6
80002dc2:	79 e7 d1 ff 	ld.b %d7,[%a14]-47
80002dc6:	59 e7 e0 8f 	st.w [%a14]-480,%d7
80002dca:	79 e0 d2 ff 	ld.b %d0,[%a14]-46
80002dce:	59 e0 dc 8f 	st.w [%a14]-484,%d0
80002dd2:	79 e1 d3 ff 	ld.b %d1,[%a14]-45
80002dd6:	59 e1 d8 8f 	st.w [%a14]-488,%d1
80002dda:	79 e8 d4 ff 	ld.b %d8,[%a14]-44
80002dde:	59 e8 d4 8f 	st.w [%a14]-492,%d8
80002de2:	79 e9 d5 ff 	ld.b %d9,[%a14]-43
80002de6:	59 e9 d0 8f 	st.w [%a14]-496,%d9
80002dea:	79 ea d6 ff 	ld.b %d10,[%a14]-42
80002dee:	59 ea cc 8f 	st.w [%a14]-500,%d10
80002df2:	79 eb d7 ff 	ld.b %d11,[%a14]-41
80002df6:	59 eb c8 8f 	st.w [%a14]-504,%d11
80002dfa:	79 ec d8 ff 	ld.b %d12,[%a14]-40
80002dfe:	59 ec c4 8f 	st.w [%a14]-508,%d12
80002e02:	79 ed d9 ff 	ld.b %d13,[%a14]-39
80002e06:	59 ed c0 8f 	st.w [%a14]-512,%d13
80002e0a:	79 ee da ff 	ld.b %d14,[%a14]-38
80002e0e:	59 ee fc 7f 	st.w [%a14]-516,%d14
80002e12:	79 ef db ff 	ld.b %d15,[%a14]-37
80002e16:	59 ef f8 7f 	st.w [%a14]-520,%d15
80002e1a:	79 e2 dc ff 	ld.b %d2,[%a14]-36
80002e1e:	59 e2 f4 7f 	st.w [%a14]-524,%d2
80002e22:	79 e3 dd ff 	ld.b %d3,[%a14]-35
80002e26:	59 e3 f0 7f 	st.w [%a14]-528,%d3
80002e2a:	79 e4 de ff 	ld.b %d4,[%a14]-34
80002e2e:	59 e4 ec 7f 	st.w [%a14]-532,%d4
80002e32:	79 e5 df ff 	ld.b %d5,[%a14]-33
80002e36:	59 e5 e8 7f 	st.w [%a14]-536,%d5
80002e3a:	79 e6 e0 ff 	ld.b %d6,[%a14]-32
80002e3e:	59 e6 e4 7f 	st.w [%a14]-540,%d6
80002e42:	79 e7 e1 ff 	ld.b %d7,[%a14]-31
80002e46:	59 e7 e0 7f 	st.w [%a14]-544,%d7
80002e4a:	79 e0 e2 ff 	ld.b %d0,[%a14]-30
80002e4e:	59 e0 dc 7f 	st.w [%a14]-548,%d0
80002e52:	79 e1 e3 ff 	ld.b %d1,[%a14]-29
80002e56:	59 e1 d8 7f 	st.w [%a14]-552,%d1
80002e5a:	79 e8 e4 ff 	ld.b %d8,[%a14]-28
80002e5e:	59 e8 d4 7f 	st.w [%a14]-556,%d8
80002e62:	79 e9 e5 ff 	ld.b %d9,[%a14]-27
80002e66:	60 9f       	mov.a %a15,%d9
80002e68:	79 e9 e6 ff 	ld.b %d9,[%a14]-26
80002e6c:	60 9d       	mov.a %a13,%d9
80002e6e:	79 e9 e7 ff 	ld.b %d9,[%a14]-25
80002e72:	60 9c       	mov.a %a12,%d9
80002e74:	79 e9 e8 ff 	ld.b %d9,[%a14]-24
80002e78:	60 97       	mov.a %a7,%d9
80002e7a:	79 e9 e9 ff 	ld.b %d9,[%a14]-23
80002e7e:	60 96       	mov.a %a6,%d9
80002e80:	79 e9 ea ff 	ld.b %d9,[%a14]-22
80002e84:	60 95       	mov.a %a5,%d9
80002e86:	79 e9 eb ff 	ld.b %d9,[%a14]-21
80002e8a:	60 94       	mov.a %a4,%d9
80002e8c:	79 e9 ec ff 	ld.b %d9,[%a14]-20
80002e90:	60 93       	mov.a %a3,%d9
80002e92:	79 e9 ed ff 	ld.b %d9,[%a14]-19
80002e96:	60 92       	mov.a %a2,%d9
80002e98:	79 ef ee ff 	ld.b %d15,[%a14]-18
80002e9c:	79 ee ef ff 	ld.b %d14,[%a14]-17
80002ea0:	79 ed f0 ff 	ld.b %d13,[%a14]-16
80002ea4:	79 ec f1 ff 	ld.b %d12,[%a14]-15
80002ea8:	79 eb f2 ff 	ld.b %d11,[%a14]-14
80002eac:	79 ea f3 ff 	ld.b %d10,[%a14]-13
80002eb0:	79 e9 f4 ff 	ld.b %d9,[%a14]-12
80002eb4:	79 e8 f5 ff 	ld.b %d8,[%a14]-11
80002eb8:	79 e1 f6 ff 	ld.b %d1,[%a14]-10
80002ebc:	79 e0 f7 ff 	ld.b %d0,[%a14]-9
80002ec0:	79 e7 f8 ff 	ld.b %d7,[%a14]-8
80002ec4:	79 e6 f9 ff 	ld.b %d6,[%a14]-7
80002ec8:	79 e5 fa ff 	ld.b %d5,[%a14]-6
80002ecc:	79 e4 fb ff 	ld.b %d4,[%a14]-5
80002ed0:	79 e3 fc ff 	ld.b %d3,[%a14]-4
80002ed4:	79 e2 fd ff 	ld.b %d2,[%a14]-3
80002ed8:	59 a2 04 80 	st.w [%sp]516,%d2
80002edc:	59 a3 00 80 	st.w [%sp]512,%d3
80002ee0:	59 a4 3c 70 	st.w [%sp]508,%d4
80002ee4:	59 a5 38 70 	st.w [%sp]504,%d5
80002ee8:	59 a6 34 70 	st.w [%sp]500,%d6
80002eec:	59 a7 30 70 	st.w [%sp]496,%d7
80002ef0:	59 a0 2c 70 	st.w [%sp]492,%d0
80002ef4:	59 a1 28 70 	st.w [%sp]488,%d1
80002ef8:	59 a8 24 70 	st.w [%sp]484,%d8
80002efc:	59 a9 20 70 	st.w [%sp]480,%d9
80002f00:	59 aa 1c 70 	st.w [%sp]476,%d10
80002f04:	59 ab 18 70 	st.w [%sp]472,%d11
80002f08:	59 ac 14 70 	st.w [%sp]468,%d12
80002f0c:	59 ad 10 70 	st.w [%sp]464,%d13
80002f10:	59 ae 0c 70 	st.w [%sp]460,%d14
80002f14:	78 72       	st.w [%sp]456,%d15
80002f16:	b5 a2 04 70 	st.a [%sp]452,%a2
80002f1a:	b5 a3 00 70 	st.a [%sp]448,%a3
80002f1e:	b5 a4 3c 60 	st.a [%sp]444,%a4
80002f22:	b5 a5 38 60 	st.a [%sp]440,%a5
80002f26:	b5 a6 34 60 	st.a [%sp]436,%a6
80002f2a:	b5 a7 30 60 	st.a [%sp]432,%a7
80002f2e:	b5 ac 2c 60 	st.a [%sp]428,%a12
80002f32:	b5 ad 28 60 	st.a [%sp]424,%a13
80002f36:	f8 69       	st.a [%sp]420,%a15
80002f38:	19 e8 d4 7f 	ld.w %d8,[%a14]-556
80002f3c:	59 a8 20 60 	st.w [%sp]416,%d8
80002f40:	19 e1 d8 7f 	ld.w %d1,[%a14]-552
80002f44:	59 a1 1c 60 	st.w [%sp]412,%d1
80002f48:	19 e0 dc 7f 	ld.w %d0,[%a14]-548
80002f4c:	59 a0 18 60 	st.w [%sp]408,%d0
80002f50:	19 e7 e0 7f 	ld.w %d7,[%a14]-544
80002f54:	59 a7 14 60 	st.w [%sp]404,%d7
80002f58:	19 e6 e4 7f 	ld.w %d6,[%a14]-540
80002f5c:	59 a6 10 60 	st.w [%sp]400,%d6
80002f60:	19 e5 e8 7f 	ld.w %d5,[%a14]-536
80002f64:	59 a5 0c 60 	st.w [%sp]396,%d5
80002f68:	19 e4 ec 7f 	ld.w %d4,[%a14]-532
80002f6c:	59 a4 08 60 	st.w [%sp]392,%d4
80002f70:	19 e3 f0 7f 	ld.w %d3,[%a14]-528
80002f74:	59 a3 04 60 	st.w [%sp]388,%d3
80002f78:	19 e2 f4 7f 	ld.w %d2,[%a14]-524
80002f7c:	59 a2 00 60 	st.w [%sp]384,%d2
80002f80:	19 ef f8 7f 	ld.w %d15,[%a14]-520
80002f84:	78 5f       	st.w [%sp]380,%d15
80002f86:	19 ee fc 7f 	ld.w %d14,[%a14]-516
80002f8a:	59 ae 38 50 	st.w [%sp]376,%d14
80002f8e:	19 ed c0 8f 	ld.w %d13,[%a14]-512
80002f92:	59 ad 34 50 	st.w [%sp]372,%d13
80002f96:	19 ec c4 8f 	ld.w %d12,[%a14]-508
80002f9a:	59 ac 30 50 	st.w [%sp]368,%d12
80002f9e:	19 eb c8 8f 	ld.w %d11,[%a14]-504
80002fa2:	59 ab 2c 50 	st.w [%sp]364,%d11
80002fa6:	19 ea cc 8f 	ld.w %d10,[%a14]-500
80002faa:	59 aa 28 50 	st.w [%sp]360,%d10
80002fae:	19 e9 d0 8f 	ld.w %d9,[%a14]-496
80002fb2:	59 a9 24 50 	st.w [%sp]356,%d9
80002fb6:	19 e8 d4 8f 	ld.w %d8,[%a14]-492
80002fba:	59 a8 20 50 	st.w [%sp]352,%d8
80002fbe:	19 e1 d8 8f 	ld.w %d1,[%a14]-488
80002fc2:	59 a1 1c 50 	st.w [%sp]348,%d1
80002fc6:	19 e0 dc 8f 	ld.w %d0,[%a14]-484
80002fca:	59 a0 18 50 	st.w [%sp]344,%d0
80002fce:	19 e7 e0 8f 	ld.w %d7,[%a14]-480
80002fd2:	59 a7 14 50 	st.w [%sp]340,%d7
80002fd6:	19 e6 e4 8f 	ld.w %d6,[%a14]-476
80002fda:	59 a6 10 50 	st.w [%sp]336,%d6
80002fde:	19 e5 e8 8f 	ld.w %d5,[%a14]-472
80002fe2:	59 a5 0c 50 	st.w [%sp]332,%d5
80002fe6:	19 e4 ec 8f 	ld.w %d4,[%a14]-468
80002fea:	59 a4 08 50 	st.w [%sp]328,%d4
80002fee:	19 e3 f0 8f 	ld.w %d3,[%a14]-464
80002ff2:	59 a3 04 50 	st.w [%sp]324,%d3
80002ff6:	19 e2 f4 8f 	ld.w %d2,[%a14]-460
80002ffa:	59 a2 00 50 	st.w [%sp]320,%d2
80002ffe:	19 ef f8 8f 	ld.w %d15,[%a14]-456
80003002:	78 4f       	st.w [%sp]316,%d15
80003004:	19 ee fc 8f 	ld.w %d14,[%a14]-452
80003008:	59 ae 38 40 	st.w [%sp]312,%d14
8000300c:	19 ed c0 9f 	ld.w %d13,[%a14]-448
80003010:	59 ad 34 40 	st.w [%sp]308,%d13
80003014:	19 ec c4 9f 	ld.w %d12,[%a14]-444
80003018:	59 ac 30 40 	st.w [%sp]304,%d12
8000301c:	19 eb c8 9f 	ld.w %d11,[%a14]-440
80003020:	59 ab 2c 40 	st.w [%sp]300,%d11
80003024:	19 ea cc 9f 	ld.w %d10,[%a14]-436
80003028:	59 aa 28 40 	st.w [%sp]296,%d10
8000302c:	19 e9 d0 9f 	ld.w %d9,[%a14]-432
80003030:	59 a9 24 40 	st.w [%sp]292,%d9
80003034:	19 e8 d4 9f 	ld.w %d8,[%a14]-428
80003038:	59 a8 20 40 	st.w [%sp]288,%d8
8000303c:	19 e1 d8 9f 	ld.w %d1,[%a14]-424
80003040:	59 a1 1c 40 	st.w [%sp]284,%d1
80003044:	19 e0 dc 9f 	ld.w %d0,[%a14]-420
80003048:	59 a0 18 40 	st.w [%sp]280,%d0
8000304c:	19 e7 e0 9f 	ld.w %d7,[%a14]-416
80003050:	59 a7 14 40 	st.w [%sp]276,%d7
80003054:	19 e6 e4 9f 	ld.w %d6,[%a14]-412
80003058:	59 a6 10 40 	st.w [%sp]272,%d6
8000305c:	19 e5 e8 9f 	ld.w %d5,[%a14]-408
80003060:	59 a5 0c 40 	st.w [%sp]268,%d5
80003064:	19 e4 ec 9f 	ld.w %d4,[%a14]-404
80003068:	59 a4 08 40 	st.w [%sp]264,%d4
8000306c:	19 e3 f0 9f 	ld.w %d3,[%a14]-400
80003070:	59 a3 04 40 	st.w [%sp]260,%d3
80003074:	19 e2 f4 9f 	ld.w %d2,[%a14]-396
80003078:	59 a2 00 40 	st.w [%sp]256,%d2
8000307c:	19 ef f8 9f 	ld.w %d15,[%a14]-392
80003080:	78 3f       	st.w [%sp]252,%d15
80003082:	19 ee fc 9f 	ld.w %d14,[%a14]-388
80003086:	59 ae 38 30 	st.w [%sp]248,%d14
8000308a:	19 ed c0 af 	ld.w %d13,[%a14]-384
8000308e:	59 ad 34 30 	st.w [%sp]244,%d13
80003092:	19 ec c4 af 	ld.w %d12,[%a14]-380
80003096:	59 ac 30 30 	st.w [%sp]240,%d12
8000309a:	19 eb c8 af 	ld.w %d11,[%a14]-376
8000309e:	59 ab 2c 30 	st.w [%sp]236,%d11
800030a2:	19 ea cc af 	ld.w %d10,[%a14]-372
800030a6:	59 aa 28 30 	st.w [%sp]232,%d10
800030aa:	19 e9 d0 af 	ld.w %d9,[%a14]-368
800030ae:	59 a9 24 30 	st.w [%sp]228,%d9
800030b2:	19 e8 d4 af 	ld.w %d8,[%a14]-364
800030b6:	59 a8 20 30 	st.w [%sp]224,%d8
800030ba:	19 e1 d8 af 	ld.w %d1,[%a14]-360
800030be:	59 a1 1c 30 	st.w [%sp]220,%d1
800030c2:	19 e0 dc af 	ld.w %d0,[%a14]-356
800030c6:	59 a0 18 30 	st.w [%sp]216,%d0
800030ca:	19 e7 e0 af 	ld.w %d7,[%a14]-352
800030ce:	59 a7 14 30 	st.w [%sp]212,%d7
800030d2:	19 e6 e4 af 	ld.w %d6,[%a14]-348
800030d6:	59 a6 10 30 	st.w [%sp]208,%d6
800030da:	19 e5 e8 af 	ld.w %d5,[%a14]-344
800030de:	59 a5 0c 30 	st.w [%sp]204,%d5
800030e2:	19 e4 ec af 	ld.w %d4,[%a14]-340
800030e6:	59 a4 08 30 	st.w [%sp]200,%d4
800030ea:	19 e3 f0 af 	ld.w %d3,[%a14]-336
800030ee:	59 a3 04 30 	st.w [%sp]196,%d3
800030f2:	19 e2 f4 af 	ld.w %d2,[%a14]-332
800030f6:	59 a2 00 30 	st.w [%sp]192,%d2
800030fa:	19 ef f8 af 	ld.w %d15,[%a14]-328
800030fe:	78 2f       	st.w [%sp]188,%d15
80003100:	19 ee fc af 	ld.w %d14,[%a14]-324
80003104:	59 ae 38 20 	st.w [%sp]184,%d14
80003108:	19 ed c0 bf 	ld.w %d13,[%a14]-320
8000310c:	59 ad 34 20 	st.w [%sp]180,%d13
80003110:	19 ec c4 bf 	ld.w %d12,[%a14]-316
80003114:	59 ac 30 20 	st.w [%sp]176,%d12
80003118:	19 eb c8 bf 	ld.w %d11,[%a14]-312
8000311c:	59 ab 2c 20 	st.w [%sp]172,%d11
80003120:	19 ea cc bf 	ld.w %d10,[%a14]-308
80003124:	59 aa 28 20 	st.w [%sp]168,%d10
80003128:	19 e9 d0 bf 	ld.w %d9,[%a14]-304
8000312c:	59 a9 24 20 	st.w [%sp]164,%d9
80003130:	19 e8 d4 bf 	ld.w %d8,[%a14]-300
80003134:	59 a8 20 20 	st.w [%sp]160,%d8
80003138:	19 e1 d8 bf 	ld.w %d1,[%a14]-296
8000313c:	59 a1 1c 20 	st.w [%sp]156,%d1
80003140:	19 e0 dc bf 	ld.w %d0,[%a14]-292
80003144:	59 a0 18 20 	st.w [%sp]152,%d0
80003148:	19 e7 e0 bf 	ld.w %d7,[%a14]-288
8000314c:	59 a7 14 20 	st.w [%sp]148,%d7
80003150:	19 e6 e4 bf 	ld.w %d6,[%a14]-284
80003154:	59 a6 10 20 	st.w [%sp]144,%d6
80003158:	19 e5 e8 bf 	ld.w %d5,[%a14]-280
8000315c:	59 a5 0c 20 	st.w [%sp]140,%d5
80003160:	19 e4 ec bf 	ld.w %d4,[%a14]-276
80003164:	59 a4 08 20 	st.w [%sp]136,%d4
80003168:	19 e3 f0 bf 	ld.w %d3,[%a14]-272
8000316c:	59 a3 04 20 	st.w [%sp]132,%d3
80003170:	19 e2 f4 bf 	ld.w %d2,[%a14]-268
80003174:	59 a2 00 20 	st.w [%sp]128,%d2
80003178:	19 ef f8 bf 	ld.w %d15,[%a14]-264
8000317c:	78 1f       	st.w [%sp]124,%d15
8000317e:	19 ee fc bf 	ld.w %d14,[%a14]-260
80003182:	59 ae 38 10 	st.w [%sp]120,%d14
80003186:	19 ed c0 cf 	ld.w %d13,[%a14]-256
8000318a:	59 ad 34 10 	st.w [%sp]116,%d13
8000318e:	19 ec c4 cf 	ld.w %d12,[%a14]-252
80003192:	59 ac 30 10 	st.w [%sp]112,%d12
80003196:	19 eb c8 cf 	ld.w %d11,[%a14]-248
8000319a:	59 ab 2c 10 	st.w [%sp]108,%d11
8000319e:	19 ea cc cf 	ld.w %d10,[%a14]-244
800031a2:	59 aa 28 10 	st.w [%sp]104,%d10
800031a6:	19 e9 d0 cf 	ld.w %d9,[%a14]-240
800031aa:	59 a9 24 10 	st.w [%sp]100,%d9
800031ae:	19 e8 d4 cf 	ld.w %d8,[%a14]-236
800031b2:	59 a8 20 10 	st.w [%sp]96,%d8
800031b6:	19 e1 d8 cf 	ld.w %d1,[%a14]-232
800031ba:	59 a1 1c 10 	st.w [%sp]92,%d1
800031be:	19 e0 dc cf 	ld.w %d0,[%a14]-228
800031c2:	59 a0 18 10 	st.w [%sp]88,%d0
800031c6:	19 e7 e0 cf 	ld.w %d7,[%a14]-224
800031ca:	59 a7 14 10 	st.w [%sp]84,%d7
800031ce:	19 e6 e4 cf 	ld.w %d6,[%a14]-220
800031d2:	59 a6 10 10 	st.w [%sp]80,%d6
800031d6:	19 e5 e8 cf 	ld.w %d5,[%a14]-216
800031da:	59 a5 0c 10 	st.w [%sp]76,%d5
800031de:	19 e4 ec cf 	ld.w %d4,[%a14]-212
800031e2:	59 a4 08 10 	st.w [%sp]72,%d4
800031e6:	19 e3 f0 cf 	ld.w %d3,[%a14]-208
800031ea:	59 a3 04 10 	st.w [%sp]68,%d3
800031ee:	19 e2 f4 cf 	ld.w %d2,[%a14]-204
800031f2:	59 a2 00 10 	st.w [%sp]64,%d2
800031f6:	19 ef f8 cf 	ld.w %d15,[%a14]-200
800031fa:	78 0f       	st.w [%sp]60,%d15
800031fc:	19 ee fc cf 	ld.w %d14,[%a14]-196
80003200:	59 ae 38 00 	st.w [%sp]56,%d14
80003204:	19 ed c0 df 	ld.w %d13,[%a14]-192
80003208:	59 ad 34 00 	st.w [%sp]52,%d13
8000320c:	19 ec c4 df 	ld.w %d12,[%a14]-188
80003210:	59 ac 30 00 	st.w [%sp]48,%d12
80003214:	19 eb c8 df 	ld.w %d11,[%a14]-184
80003218:	59 ab 2c 00 	st.w [%sp]44,%d11
8000321c:	19 ea cc df 	ld.w %d10,[%a14]-180
80003220:	59 aa 28 00 	st.w [%sp]40,%d10
80003224:	19 e9 d0 df 	ld.w %d9,[%a14]-176
80003228:	59 a9 24 00 	st.w [%sp]36,%d9
8000322c:	19 e8 d4 df 	ld.w %d8,[%a14]-172
80003230:	59 a8 20 00 	st.w [%sp]32,%d8
80003234:	19 e1 d8 df 	ld.w %d1,[%a14]-168
80003238:	59 a1 1c 00 	st.w [%sp]28,%d1
8000323c:	19 e0 dc df 	ld.w %d0,[%a14]-164
80003240:	59 a0 18 00 	st.w [%sp]24,%d0
80003244:	19 e7 e0 df 	ld.w %d7,[%a14]-160
80003248:	59 a7 14 00 	st.w [%sp]20,%d7
8000324c:	19 e6 e4 df 	ld.w %d6,[%a14]-156
80003250:	59 a6 10 00 	st.w [%sp]16,%d6
80003254:	19 e5 e8 df 	ld.w %d5,[%a14]-152
80003258:	59 a5 0c 00 	st.w [%sp]12,%d5
8000325c:	19 e4 ec df 	ld.w %d4,[%a14]-148
80003260:	59 a4 08 00 	st.w [%sp]8,%d4
80003264:	19 e3 f0 df 	ld.w %d3,[%a14]-144
80003268:	59 a3 04 00 	st.w [%sp]4,%d3
8000326c:	19 e2 f4 df 	ld.w %d2,[%a14]-140
80003270:	74 a2       	st.w [%sp],%d2
80003272:	91 00 00 58 	movh.a %a5,32768
80003276:	d9 55 61 30 	lea %a5,[%a5]1249 <800004e1 <IfxCpu_Trap_vectorTable0_end+0x2ed>>
8000327a:	91 00 00 46 	movh.a %a4,24576
8000327e:	d9 44 d4 30 	lea %a4,[%a4]3284 <60000cd4 <g_ascStandardInterface>>
80003282:	6d 00 c4 20 	call 8000740a <IfxStdIf_DPipe_print>
}
80003286:	00 90       	ret 

80003288 <i2cWrite>:
 i2cWrite 함수
 g_i2cSet i2c를 통해
 slave에 write
 */
IfxI2c_I2c_Status i2cWrite (uint8 slaveAddress, uint8 *data, Ifx_SizeT length)
{
80003288:	40 ae       	mov.aa %a14,%sp
8000328a:	40 45       	mov.aa %a5,%a4
8000328c:	8f f4 0f 21 	and %d2,%d4,255
    g_i2cSet.deviceAddress = slaveAddress << 1;
80003290:	06 12       	sh %d2,1
80003292:	91 00 00 46 	movh.a %a4,24576
80003296:	d9 44 e8 50 	lea %a4,[%a4]3432 <60000d68 <g_i2cSet>>
8000329a:	e9 42 04 00 	st.b [%a4]4 <60000004 <LCF_DSPR1_START+0x4>>,%d2
    IfxI2c_I2c_Status status = IfxI2c_I2c_write(&g_i2cSet, data, length);
8000329e:	37 05 50 40 	extr %d4,%d5,0,16
800032a2:	6d 00 b7 0e 	call 80005010 <IfxI2c_I2c_write>
800032a6:	02 28       	mov %d8,%d2
    delay(100);
800032a8:	3b 40 06 40 	mov %d4,100
800032ac:	6d 00 f0 0a 	call 8000488c <delay>
    return status;

}
800032b0:	02 82       	mov %d2,%d8
800032b2:	00 90       	ret 

800032b4 <initI2c>:
{
800032b4:	40 ae       	mov.aa %a14,%sp
800032b6:	20 50       	sub.a %sp,80
    IfxI2c_Pins i2cpinset = {&SCL_PIN, &SDA_PIN, IfxPort_PadDriver_cmosAutomotiveSpeed1};
800032b8:	d9 ec f4 ff 	lea %a12,[%a14]-12
800032bc:	91 00 00 26 	movh.a %a2,24576
800032c0:	d9 22 28 00 	lea %a2,[%a2]40 <60000028 <LCF_DSPR1_START+0x28>>
800032c4:	40 c3       	mov.aa %a3,%a12
800032c6:	09 24 48 01 	ld.d %e4,[%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>
800032ca:	89 34 48 01 	st.d [%a3+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
800032ce:	44 24       	ld.w %d4,[%a2+]
800032d0:	64 34       	st.w [%a3+],%d4
    IfxI2c_I2c_initConfig(&i2cConfig, &MODULE_I2C0);
800032d2:	91 c0 00 5f 	movh.a %a5,61452
800032d6:	d9 e4 c0 ff 	lea %a4,[%a14]-64
800032da:	6d 00 ac 0c 	call 80004c32 <IfxI2c_I2c_initConfig>
    i2cConfig.pins = &i2cpinset;
800032de:	b5 ec c8 ff 	st.a [%a14]-56,%a12
    i2cConfig.baudrate = 100000;   //통신 속도 100000;
800032e2:	7b 30 7c 24 	movh %d2,18371
800032e6:	1b 02 00 25 	addi %d2,%d2,20480
800032ea:	59 e2 c4 ff 	st.w [%a14]-60,%d2
    IfxI2c_I2c_initModule(&g_i2cMaster, &i2cConfig);
800032ee:	91 00 00 c6 	movh.a %a12,24576
800032f2:	d9 cc f0 40 	lea %a12,[%a12]3376 <60000d30 <g_i2cMaster>>
800032f6:	d9 e5 c0 ff 	lea %a5,[%a14]-64 <60000d30 <g_i2cMaster>>
800032fa:	40 c4       	mov.aa %a4,%a12
800032fc:	6d 00 c2 0c 	call 80004c80 <IfxI2c_I2c_initModule>
    g_i2cSet.i2c = &g_i2cMaster;
80003300:	91 00 00 26 	movh.a %a2,24576
80003304:	d9 23 e8 50 	lea %a3,[%a2]3432 <60000d68 <g_i2cSet>>
80003308:	b5 2c e8 50 	st.a [%a2]3432 <60000d68 <g_i2cSet>>,%a12
    g_i2cSet.deviceAddress = (MPU9250_ADDRESS << 1);
8000330c:	3b 00 fd 2f 	mov %d2,-48
80003310:	e9 32 04 00 	st.b [%a3]4,%d2
    uint8 initData[2] = {PWR_MGMT_1, 0x00}; //MPU전원
80003314:	3b b0 06 20 	mov %d2,107
80003318:	f9 e2 fc ef 	st.h [%a14]-68,%d2
    first = i2cWrite(MPU9250_ADDRESS, initData, 2); //Sleep에서 깨움
8000331c:	82 25       	mov %d5,2
8000331e:	d9 e4 fc ef 	lea %a4,[%a14]-68
80003322:	3b 80 06 40 	mov %d4,104
80003326:	6d ff b1 ff 	call 80003288 <i2cWrite>
8000332a:	91 00 00 26 	movh.a %a2,24576
8000332e:	59 22 50 d0 	st.w [%a2]1872 <60000750 <first>>,%d2
    now13=6;
80003332:	91 00 00 26 	movh.a %a2,24576
80003336:	82 62       	mov %d2,6
80003338:	e9 22 15 a1 	st.b [%a2]4757 <60001295 <now13>>,%d2
    delay(1000000);
8000333c:	7b f0 00 40 	movh %d4,15
80003340:	1b 04 24 44 	addi %d4,%d4,16960
80003344:	6d 00 a4 0a 	call 8000488c <delay>
    uint8 initAccelData[2] = {ACCEL_CONFIG_REG, 0x00}; //+-2g
80003348:	3b c0 01 20 	mov %d2,28
8000334c:	f9 e2 f8 ef 	st.h [%a14]-72,%d2
    second = i2cWrite(MPU9250_ADDRESS, initAccelData, 2);
80003350:	82 25       	mov %d5,2
80003352:	d9 e4 f8 ef 	lea %a4,[%a14]-72
80003356:	3b 80 06 40 	mov %d4,104
8000335a:	6d ff 97 ff 	call 80003288 <i2cWrite>
8000335e:	91 00 00 26 	movh.a %a2,24576
80003362:	59 22 4c d0 	st.w [%a2]1868 <6000074c <second>>,%d2
    uint8 initGyroData[2] = {GYRO_CONFIG_REG, 0x00};  //+-250
80003366:	3b b0 01 20 	mov %d2,27
8000336a:	f9 e2 f4 ef 	st.h [%a14]-76,%d2
    third = i2cWrite(MPU9250_ADDRESS, initGyroData, 2);
8000336e:	82 25       	mov %d5,2
80003370:	d9 e4 f4 ef 	lea %a4,[%a14]-76
80003374:	3b 80 06 40 	mov %d4,104
80003378:	6d ff 88 ff 	call 80003288 <i2cWrite>
8000337c:	91 00 00 26 	movh.a %a2,24576
80003380:	59 22 48 d0 	st.w [%a2]1864 <60000748 <third>>,%d2
}
80003384:	00 90       	ret 

80003386 <i2cRead>:
 i2cRead 함수
 g_i2cSet i2c를 통해
 length만큼 읽어 data에 저장
 */
void i2cRead (uint8 slaveAddress, uint8 *data, Ifx_SizeT length)
{
80003386:	40 ae       	mov.aa %a14,%sp
80003388:	40 45       	mov.aa %a5,%a4
8000338a:	8f f4 0f 21 	and %d2,%d4,255
    g_i2cSet.deviceAddress = (slaveAddress << 1) | 1;
8000338e:	0b 22 70 23 	sh.eq %d2,%d2,%d2
80003392:	91 00 00 46 	movh.a %a4,24576
80003396:	d9 44 e8 50 	lea %a4,[%a4]3432 <60000d68 <g_i2cSet>>
8000339a:	e9 42 04 00 	st.b [%a4]4 <60000004 <LCF_DSPR1_START+0x4>>,%d2
    IfxI2c_I2c_read(&g_i2cSet, data, length);
8000339e:	37 05 50 40 	extr %d4,%d5,0,16
800033a2:	6d 00 aa 0c 	call 80004cf6 <IfxI2c_I2c_read>
    delay(100);
800033a6:	3b 40 06 40 	mov %d4,100
800033aa:	6d 00 71 0a 	call 8000488c <delay>
}
800033ae:	00 90       	ret 

800033b0 <initimuRead>:
    now_imu.heading = heading;
    return now_imu;
}

IMU initimuRead ()
{
800033b0:	40 ae       	mov.aa %a14,%sp
800033b2:	20 10       	sub.a %sp,16
800033b4:	40 4c       	mov.aa %a12,%a4
    now13=9;
800033b6:	91 00 00 26 	movh.a %a2,24576
800033ba:	3b 90 00 20 	mov %d2,9
800033be:	e9 22 15 a1 	st.b [%a2]4757 <60001295 <now13>>,%d2
    IMU now_imu={0,0,0,0,0,0,0,0,0,0};
800033c2:	3b 80 02 50 	mov %d5,40
800033c6:	82 04       	mov %d4,0
800033c8:	6d 00 8e 21 	call 800076e4 <memset>
    // 가속도, 각속도, 지자기값 접근 레지스터
    uint8 accelAddr = ACCEL_REG;
800033cc:	3b b0 03 20 	mov %d2,59
800033d0:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    uint8 gyroAddr = GYRO_REG;
800033d4:	3b 30 04 20 	mov %d2,67
800033d8:	e9 e2 fe ff 	st.b [%a14]-2,%d2

    // 센서 데이터 버퍼
    uint8 accelData[6] = {0};      // 가속도 데이터 버퍼
800033dc:	82 02       	mov %d2,0
800033de:	59 e2 f8 ff 	st.w [%a14]-8,%d2
800033e2:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    uint8 gyroData[6] = {0};       // 자이로 데이터 버퍼
800033e6:	59 e2 f0 ff 	st.w [%a14]-16,%d2
800033ea:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    float accel_x, accel_y, accel_z;    // 가속도 값 (16비트)
    float gyro_x, gyro_y, gyro_z;       // 각속도 값 (16비트)


    // 가속도 데이터
    i2cWrite(MPU9250_ADDRESS, &accelAddr, 1);
800033ee:	82 15       	mov %d5,1
800033f0:	d9 e4 ff ff 	lea %a4,[%a14]-1
800033f4:	3b 80 06 40 	mov %d4,104
800033f8:	6d ff 48 ff 	call 80003288 <i2cWrite>
    i2cRead(MPU9250_ADDRESS, accelData, 6);
800033fc:	82 65       	mov %d5,6
800033fe:	d9 e4 f8 ff 	lea %a4,[%a14]-8
80003402:	3b 80 06 40 	mov %d4,104
80003406:	6d ff c0 ff 	call 80003386 <i2cRead>

    // 자이로 데이터
    i2cWrite(MPU9250_ADDRESS, &gyroAddr, 1);
8000340a:	82 15       	mov %d5,1
8000340c:	d9 e4 fe ff 	lea %a4,[%a14]-2
80003410:	3b 80 06 40 	mov %d4,104
80003414:	6d ff 3a ff 	call 80003288 <i2cWrite>
    i2cRead(MPU9250_ADDRESS, gyroData, 6);
80003418:	82 65       	mov %d5,6
8000341a:	d9 e4 f0 ff 	lea %a4,[%a14]-16
8000341e:	3b 80 06 40 	mov %d4,104
80003422:	6d ff b2 ff 	call 80003386 <i2cRead>

    // 가속도 데이터 변환
    accel_x_raw = (sint16) (accelData[0] << 8) | accelData[1];
80003426:	39 e2 f8 ff 	ld.bu %d2,[%a14]-8
8000342a:	8f 82 00 20 	sh %d2,%d2,8
8000342e:	37 02 50 20 	extr %d2,%d2,0,16
80003432:	39 e3 f9 ff 	ld.bu %d3,[%a14]-7
80003436:	a6 32       	or %d2,%d3
    accel_y_raw = (sint16) (accelData[2] << 8) | accelData[3];
80003438:	39 e3 fa ff 	ld.bu %d3,[%a14]-6
8000343c:	8f 83 00 30 	sh %d3,%d3,8
80003440:	37 03 50 30 	extr %d3,%d3,0,16
80003444:	39 e4 fb ff 	ld.bu %d4,[%a14]-5
80003448:	a6 34       	or %d4,%d3
    accel_z_raw = (sint16) (accelData[4] << 8) | accelData[5];
8000344a:	39 e3 fc ff 	ld.bu %d3,[%a14]-4
8000344e:	8f 83 00 30 	sh %d3,%d3,8
80003452:	37 03 50 30 	extr %d3,%d3,0,16
80003456:	39 e5 fd ff 	ld.bu %d5,[%a14]-3
8000345a:	a6 53       	or %d3,%d5

    //감도 조정 2g
    accel_x = (float) accel_x_raw / ACCEL_SEN;
8000345c:	4b 02 41 71 	itof %d7,%d2
80003460:	7b 00 88 23 	movh %d2,14464
80003464:	4b 27 41 70 	mul.f %d7,%d7,%d2
    accel_y = (float) accel_y_raw / ACCEL_SEN;
80003468:	4b 04 41 41 	itof %d4,%d4
8000346c:	4b 24 41 60 	mul.f %d6,%d4,%d2
    accel_z = (float) accel_z_raw / ACCEL_SEN;
80003470:	4b 03 41 31 	itof %d3,%d3
80003474:	4b 23 41 50 	mul.f %d5,%d3,%d2

    // 자이로 데이터 변환
    gyro_x_raw = (sint16) (gyroData[0] << 8) | gyroData[1];
80003478:	39 e2 f0 ff 	ld.bu %d2,[%a14]-16
8000347c:	8f 82 00 20 	sh %d2,%d2,8
80003480:	37 02 50 20 	extr %d2,%d2,0,16
80003484:	39 e3 f1 ff 	ld.bu %d3,[%a14]-15
80003488:	a6 32       	or %d2,%d3
    gyro_y_raw = (sint16) (gyroData[2] << 8) | gyroData[3];
8000348a:	39 e3 f2 ff 	ld.bu %d3,[%a14]-14
8000348e:	8f 83 00 30 	sh %d3,%d3,8
80003492:	37 03 50 30 	extr %d3,%d3,0,16
80003496:	39 e4 f3 ff 	ld.bu %d4,[%a14]-13
8000349a:	a6 43       	or %d3,%d4
    gyro_z_raw = (sint16) (gyroData[4] << 8) | gyroData[5];
8000349c:	39 e4 f4 ff 	ld.bu %d4,[%a14]-12
800034a0:	8f 84 00 40 	sh %d4,%d4,8
800034a4:	37 04 50 40 	extr %d4,%d4,0,16
800034a8:	39 e0 f5 ff 	ld.bu %d0,[%a14]-11
800034ac:	a6 40       	or %d0,%d4

    //감도 조정 250
    gyro_x = (float) gyro_x_raw / GYRO_SEN;
800034ae:	4b 02 41 41 	itof %d4,%d2
800034b2:	7b 30 30 24 	movh %d2,17155
800034b6:	4b 24 51 40 	div.f %d4,%d4,%d2
    gyro_y = (float) gyro_y_raw / GYRO_SEN;
800034ba:	4b 03 41 31 	itof %d3,%d3
800034be:	4b 23 51 30 	div.f %d3,%d3,%d2
    gyro_z = (float) gyro_z_raw / GYRO_SEN;
800034c2:	4b 00 41 01 	itof %d0,%d0
800034c6:	4b 20 51 20 	div.f %d2,%d0,%d2

    now_imu.accel_x = accel_x;
800034ca:	74 c7       	st.w [%a12],%d7
    now_imu.accel_y = accel_y;
800034cc:	59 c6 04 00 	st.w [%a12]4,%d6
    now_imu.accel_z = accel_z;
800034d0:	59 c5 08 00 	st.w [%a12]8,%d5

    now_imu.gyro_x = gyro_x;
800034d4:	59 c4 0c 00 	st.w [%a12]12,%d4
    now_imu.gyro_y = gyro_y;
800034d8:	59 c3 10 00 	st.w [%a12]16,%d3
    now_imu.gyro_z = gyro_z;
800034dc:	59 c2 14 00 	st.w [%a12]20,%d2

    return now_imu;
}
800034e0:	40 c2       	mov.aa %a2,%a12
800034e2:	00 90       	ret 

800034e4 <forceI2CBusReset>:
/*
 forceI2CBusReset 함수
 Bus 초기화
 */
void forceI2CBusReset (void)
{
800034e4:	40 ae       	mov.aa %a14,%sp
    // I2C 모듈 비활성화
    IfxI2c_disableModule(&MODULE_I2C0);
800034e6:	91 c0 00 4f 	movh.a %a4,61452
800034ea:	6d 00 2c 0a 	call 80004942 <IfxI2c_disableModule>

    // SDA와 SCL을 GPIO
    IfxPort_setPinMode(&MODULE_P13, 1, IfxPort_Mode_outputPushPullGeneral); // SDA
800034ee:	3b 00 08 50 	mov %d5,128
800034f2:	82 14       	mov %d4,1
800034f4:	91 40 00 4f 	movh.a %a4,61444
800034f8:	d9 44 00 cb 	lea %a4,[%a4]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
800034fc:	6d ff c6 f7 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinMode(&MODULE_P13, 2, IfxPort_Mode_outputPushPullGeneral); // SCL
80003500:	3b 00 08 50 	mov %d5,128
80003504:	82 24       	mov %d4,2
80003506:	91 40 00 4f 	movh.a %a4,61444
8000350a:	d9 44 00 cb 	lea %a4,[%a4]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
8000350e:	6d ff bd f7 	call 80002488 <IfxPort_setPinMode>
80003512:	91 40 00 2f 	movh.a %a2,61444
80003516:	d9 22 00 cb 	lea %a2,[%a2]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
8000351a:	82 22       	mov %d2,2
8000351c:	d9 23 04 00 	lea %a3,[%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>
80003520:	59 22 04 00 	st.w [%a2]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
80003524:	82 42       	mov %d2,4
80003526:	74 32       	st.w [%a3],%d2

    // 둘 다 high로 설정
    IfxPort_setPinHigh(&MODULE_P13, 1);
    IfxPort_setPinHigh(&MODULE_P13, 2);
    delay(10000);
80003528:	3b 00 71 42 	mov %d4,10000
8000352c:	6d 00 b0 09 	call 8000488c <delay>

    //
    for (int i = 0; i < 9; i++)
80003530:	82 08       	mov %d8,0
80003532:	1d 00 17 00 	j 80003560 <forceI2CBusReset+0x7c>
80003536:	91 40 00 cf 	movh.a %a12,61444
8000353a:	d9 cc 00 cb 	lea %a12,[%a12]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
8000353e:	7b 20 00 20 	movh %d2,2
80003542:	59 c2 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    {
        IfxPort_setPinLow(&MODULE_P13, 1);
        delay(1000);
80003546:	3b 80 3e 40 	mov %d4,1000
8000354a:	6d 00 a1 09 	call 8000488c <delay>
8000354e:	82 42       	mov %d2,4
80003550:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003554:	74 22       	st.w [%a2],%d2
        IfxPort_setPinHigh(&MODULE_P13, 2);
        delay(1000);
80003556:	3b 80 3e 40 	mov %d4,1000
8000355a:	6d 00 99 09 	call 8000488c <delay>
    for (int i = 0; i < 9; i++)
8000355e:	c2 18       	add %d8,1
80003560:	8b 98 40 22 	lt %d2,%d8,9
80003564:	df 02 e9 ff 	jne %d2,0,80003536 <forceI2CBusReset+0x52>
80003568:	91 40 00 cf 	movh.a %a12,61444
8000356c:	d9 cc 00 cb 	lea %a12,[%a12]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
80003570:	7b 20 00 20 	movh %d2,2
80003574:	59 c2 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    }

    // STOP condition -> scl이 high일 때 sda low에서 high
    IfxPort_setPinLow(&MODULE_P13, 1);   //sda
    delay(1000);
80003578:	3b 80 3e 40 	mov %d4,1000
8000357c:	6d 00 88 09 	call 8000488c <delay>
80003580:	82 42       	mov %d2,4
80003582:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003586:	74 22       	st.w [%a2],%d2
    IfxPort_setPinHigh(&MODULE_P13, 2);  //scl
    delay(1000);
80003588:	3b 80 3e 40 	mov %d4,1000
8000358c:	6d 00 80 09 	call 8000488c <delay>
80003590:	82 28       	mov %d8,2
80003592:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d8
    IfxPort_setPinHigh(&MODULE_P13, 1);  //sda
    delay(10000);
80003596:	3b 00 71 42 	mov %d4,10000
8000359a:	6d 00 79 09 	call 8000488c <delay>

    // 다시 I2C 핀으로 설정
    IfxPort_setPinMode(&MODULE_P13, 1, IfxPort_Mode_outputOpenDrainAlt6);
8000359e:	3b 00 0f 50 	mov %d5,240
800035a2:	82 14       	mov %d4,1
800035a4:	40 c4       	mov.aa %a4,%a12
800035a6:	6d ff 71 f7 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinMode(&MODULE_P13, 2, IfxPort_Mode_outputOpenDrainAlt6);
800035aa:	3b 00 0f 50 	mov %d5,240
800035ae:	02 84       	mov %d4,%d8
800035b0:	40 c4       	mov.aa %a4,%a12
800035b2:	6d ff 6b f7 	call 80002488 <IfxPort_setPinMode>
}
800035b6:	00 90       	ret 

800035b8 <i2cStopCondition>:
/*
 i2cStopCondition 함수
 i2c stop condition 생성
 */
void i2cStopCondition (void)
{
800035b8:	40 ae       	mov.aa %a14,%sp
    // I2C 핀을 GPIO 모드로
    IfxPort_setPinMode(&MODULE_P13, 1, IfxPort_Mode_outputPushPullGeneral); // SDA
800035ba:	3b 00 08 50 	mov %d5,128
800035be:	82 14       	mov %d4,1
800035c0:	91 40 00 4f 	movh.a %a4,61444
800035c4:	d9 44 00 cb 	lea %a4,[%a4]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
800035c8:	6d ff 60 f7 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinMode(&MODULE_P13, 2, IfxPort_Mode_outputPushPullGeneral); // SCL
800035cc:	3b 00 08 50 	mov %d5,128
800035d0:	82 24       	mov %d4,2
800035d2:	91 40 00 4f 	movh.a %a4,61444
800035d6:	d9 44 00 cb 	lea %a4,[%a4]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
800035da:	6d ff 57 f7 	call 80002488 <IfxPort_setPinMode>
800035de:	91 40 00 cf 	movh.a %a12,61444
800035e2:	d9 cc 00 cb 	lea %a12,[%a12]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
800035e6:	7b 20 00 20 	movh %d2,2
800035ea:	59 c2 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2

    // STOP condition -> scl이 high일 때 sda low에서 high
    IfxPort_setPinLow(&MODULE_P13, 1);  // SDA LOW
    delay(10);
800035ee:	3b a0 00 40 	mov %d4,10
800035f2:	6d 00 4d 09 	call 8000488c <delay>
800035f6:	82 42       	mov %d2,4
800035f8:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
800035fc:	74 22       	st.w [%a2],%d2
    IfxPort_setPinHigh(&MODULE_P13, 2); // SCL HIGH
    delay(10);
800035fe:	3b a0 00 40 	mov %d4,10
80003602:	6d 00 45 09 	call 8000488c <delay>
80003606:	82 28       	mov %d8,2
80003608:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d8
    IfxPort_setPinHigh(&MODULE_P13, 1); // SDA HIGH (STOP)
    delay(10);
8000360c:	3b a0 00 40 	mov %d4,10
80003610:	6d 00 3e 09 	call 8000488c <delay>

    // 다시 I2C 모드
    IfxPort_setPinMode(&MODULE_P13, 1, IfxPort_Mode_outputOpenDrainAlt6);
80003614:	3b 00 0f 50 	mov %d5,240
80003618:	82 14       	mov %d4,1
8000361a:	40 c4       	mov.aa %a4,%a12
8000361c:	6d ff 36 f7 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinMode(&MODULE_P13, 2, IfxPort_Mode_outputOpenDrainAlt6);
80003620:	3b 00 0f 50 	mov %d5,240
80003624:	02 84       	mov %d4,%d8
80003626:	40 c4       	mov.aa %a4,%a12
80003628:	6d ff 30 f7 	call 80002488 <IfxPort_setPinMode>
}
8000362c:	00 90       	ret 

8000362e <i2cStartCondition>:
/*
 i2cStartCondition 함수
 i2c start condition 생성
 */
void i2cStartCondition (void)
{
8000362e:	40 ae       	mov.aa %a14,%sp
    //  I2C 핀을 GPIO 모드로
    IfxPort_setPinMode(&MODULE_P13, 1, IfxPort_Mode_outputPushPullGeneral); // SDA
80003630:	3b 00 08 50 	mov %d5,128
80003634:	82 14       	mov %d4,1
80003636:	91 40 00 4f 	movh.a %a4,61444
8000363a:	d9 44 00 cb 	lea %a4,[%a4]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
8000363e:	6d ff 25 f7 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinMode(&MODULE_P13, 2, IfxPort_Mode_outputPushPullGeneral); // SCL
80003642:	3b 00 08 50 	mov %d5,128
80003646:	82 24       	mov %d4,2
80003648:	91 40 00 4f 	movh.a %a4,61444
8000364c:	d9 44 00 cb 	lea %a4,[%a4]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
80003650:	6d ff 1c f7 	call 80002488 <IfxPort_setPinMode>
80003654:	91 40 00 cf 	movh.a %a12,61444
80003658:	d9 cc 00 cb 	lea %a12,[%a12]-19712 <f003b300 <_SMALL_DATA4_+0x60033300>>
8000365c:	82 42       	mov %d2,4
8000365e:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80003662:	74 22       	st.w [%a2],%d2

    // Start Condition
    // SCL을 HIGH로 설정
    IfxPort_setPinHigh(&MODULE_P13, 2); // SCL HIGH
    delay(10);
80003664:	3b a0 00 40 	mov %d4,10
80003668:	6d 00 12 09 	call 8000488c <delay>
8000366c:	82 28       	mov %d8,2
8000366e:	59 c8 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d8
    IfxPort_setPinHigh(&MODULE_P13, 1); // SDA HIGH
    delay(10);
80003672:	3b a0 00 40 	mov %d4,10
80003676:	6d 00 0b 09 	call 8000488c <delay>
8000367a:	7b 20 00 20 	movh %d2,2
8000367e:	59 c2 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2
    IfxPort_setPinLow(&MODULE_P13, 1);  // SDA LOW
    delay(10);
80003682:	3b a0 00 40 	mov %d4,10
80003686:	6d 00 03 09 	call 8000488c <delay>
8000368a:	7b 40 00 20 	movh %d2,4
8000368e:	59 c2 04 00 	st.w [%a12]4 <f0040004 <_SMALL_DATA4_+0x60038004>>,%d2

    // SCL을 LOW로 설정 (클럭 시작)
    IfxPort_setPinLow(&MODULE_P13, 2);  // SCL LOW
    delay(10);
80003692:	3b a0 00 40 	mov %d4,10
80003696:	6d 00 fb 08 	call 8000488c <delay>
    // I2C 모드로 복구
    IfxPort_setPinMode(&MODULE_P13, 1, IfxPort_Mode_outputOpenDrainAlt6);
8000369a:	3b 00 0f 50 	mov %d5,240
8000369e:	82 14       	mov %d4,1
800036a0:	40 c4       	mov.aa %a4,%a12
800036a2:	6d ff f3 f6 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinMode(&MODULE_P13, 2, IfxPort_Mode_outputOpenDrainAlt6);
800036a6:	3b 00 0f 50 	mov %d5,240
800036aa:	02 84       	mov %d4,%d8
800036ac:	40 c4       	mov.aa %a4,%a12
800036ae:	6d ff ed f6 	call 80002488 <IfxPort_setPinMode>
}
800036b2:	00 90       	ret 

800036b4 <imuRead>:
{
800036b4:	40 ae       	mov.aa %a14,%sp
800036b6:	20 38       	sub.a %sp,56
800036b8:	40 4c       	mov.aa %a12,%a4
    IMU now_imu={0,0,0,0,0,0,0,0,0,0};
800036ba:	3b 80 02 50 	mov %d5,40
800036be:	82 04       	mov %d4,0
800036c0:	6d 00 12 20 	call 800076e4 <memset>
    uint8 accelAddr = ACCEL_REG;
800036c4:	3b b0 03 20 	mov %d2,59
800036c8:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    uint8 gyroAddr = GYRO_REG;
800036cc:	3b 30 04 20 	mov %d2,67
800036d0:	e9 e2 fe ff 	st.b [%a14]-2,%d2
    uint8 magAddr = MAG_REG;
800036d4:	82 32       	mov %d2,3
800036d6:	e9 e2 fd ff 	st.b [%a14]-3,%d2
    uint8 accelData[6] = {0};      // 가속도 데이터 버퍼
800036da:	82 02       	mov %d2,0
800036dc:	59 e2 f4 ff 	st.w [%a14]-12,%d2
800036e0:	f9 e2 f8 ff 	st.h [%a14]-8,%d2
    uint8 gyroData[6] = {0};       // 자이로 데이터 버퍼
800036e4:	59 e2 ec ff 	st.w [%a14]-20,%d2
800036e8:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    uint8 magData[6] = {0};        // 지자기 데이터 버퍼
800036ec:	59 e2 e4 ff 	st.w [%a14]-28,%d2
800036f0:	f9 e2 e8 ff 	st.h [%a14]-24,%d2
    i2cWrite(MPU9250_ADDRESS, &accelAddr, 1);
800036f4:	82 15       	mov %d5,1
800036f6:	d9 e4 ff ff 	lea %a4,[%a14]-1
800036fa:	3b 80 06 40 	mov %d4,104
800036fe:	6d ff c5 fd 	call 80003288 <i2cWrite>
    i2cRead(MPU9250_ADDRESS, accelData, 6);
80003702:	82 65       	mov %d5,6
80003704:	d9 e4 f4 ff 	lea %a4,[%a14]-12
80003708:	3b 80 06 40 	mov %d4,104
8000370c:	6d ff 3d fe 	call 80003386 <i2cRead>
    i2cWrite(MPU9250_ADDRESS, &gyroAddr, 1);
80003710:	82 15       	mov %d5,1
80003712:	d9 e4 fe ff 	lea %a4,[%a14]-2
80003716:	3b 80 06 40 	mov %d4,104
8000371a:	6d ff b7 fd 	call 80003288 <i2cWrite>
    i2cRead(MPU9250_ADDRESS, gyroData, 6);
8000371e:	82 65       	mov %d5,6
80003720:	d9 e4 ec ff 	lea %a4,[%a14]-20
80003724:	3b 80 06 40 	mov %d4,104
80003728:	6d ff 2f fe 	call 80003386 <i2cRead>
    now13=7;
8000372c:	91 00 00 d6 	movh.a %a13,24576
80003730:	82 72       	mov %d2,7
80003732:	e9 d2 15 a1 	st.b [%a13]4757 <60001295 <now13>>,%d2
    i2cStopCondition();
80003736:	6d ff 41 ff 	call 800035b8 <i2cStopCondition>
    delay(1000);
8000373a:	3b 80 3e 40 	mov %d4,1000
8000373e:	6d 00 a7 08 	call 8000488c <delay>
    i2cStartCondition();
80003742:	6d ff 76 ff 	call 8000362e <i2cStartCondition>
    uint8 status_reg = AK_UPDATE_REG;       //drdy확인 reg
80003746:	82 22       	mov %d2,2
80003748:	e9 e2 e3 ff 	st.b [%a14]-29,%d2
    i2cWrite(AK8963_ADDRESS, &status_reg, 1);
8000374c:	82 15       	mov %d5,1
8000374e:	d9 e4 e3 ff 	lea %a4,[%a14]-29
80003752:	3b c0 00 40 	mov %d4,12
80003756:	6d ff 99 fd 	call 80003288 <i2cWrite>
    delay(10);
8000375a:	3b a0 00 40 	mov %d4,10
8000375e:	6d 00 97 08 	call 8000488c <delay>
    i2cRead(AK8963_ADDRESS, &status1_val, 1);
80003762:	82 15       	mov %d5,1
80003764:	91 00 00 46 	movh.a %a4,24576
80003768:	d9 44 14 a1 	lea %a4,[%a4]4756 <60001294 <status1_val>>
8000376c:	3b c0 00 40 	mov %d4,12
80003770:	6d ff 0b fe 	call 80003386 <i2cRead>
    i2cStopCondition();
80003774:	6d ff 22 ff 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003778:	3b 80 3e 40 	mov %d4,1000
8000377c:	6d 00 88 08 	call 8000488c <delay>
    i2cStartCondition();
80003780:	6d ff 57 ff 	call 8000362e <i2cStartCondition>
    now13=8;
80003784:	3b 80 00 20 	mov %d2,8
80003788:	e9 d2 15 a1 	st.b [%a13]4757 <60001295 <now13>>,%d2
    i2cWrite(AK8963_ADDRESS, &magAddr, 1);  // AK8963 I2C 주소
8000378c:	82 15       	mov %d5,1
8000378e:	d9 e4 fd ff 	lea %a4,[%a14]-3
80003792:	3b c0 00 40 	mov %d4,12
80003796:	6d ff 79 fd 	call 80003288 <i2cWrite>
    delay(100);
8000379a:	3b 40 06 40 	mov %d4,100
8000379e:	6d 00 77 08 	call 8000488c <delay>
    i2cRead(AK8963_ADDRESS, magData, 6);
800037a2:	82 65       	mov %d5,6
800037a4:	d9 e4 e4 ff 	lea %a4,[%a14]-28
800037a8:	3b c0 00 40 	mov %d4,12
800037ac:	6d ff ed fd 	call 80003386 <i2cRead>
    now13=10;
800037b0:	3b a0 00 20 	mov %d2,10
800037b4:	e9 d2 15 a1 	st.b [%a13]4757 <60001295 <now13>>,%d2
    uint8 status2_reg = 0x09;
800037b8:	3b 90 00 20 	mov %d2,9
800037bc:	e9 e2 e2 ff 	st.b [%a14]-30,%d2
    i2cWrite(AK8963_ADDRESS, &status2_reg, 1);
800037c0:	82 15       	mov %d5,1
800037c2:	d9 e4 e2 ff 	lea %a4,[%a14]-30
800037c6:	3b c0 00 40 	mov %d4,12
800037ca:	6d ff 5f fd 	call 80003288 <i2cWrite>
    delay(10);
800037ce:	3b a0 00 40 	mov %d4,10
800037d2:	6d 00 5d 08 	call 8000488c <delay>
    i2cRead(AK8963_ADDRESS, &status2_val, 1);
800037d6:	82 15       	mov %d5,1
800037d8:	91 00 00 46 	movh.a %a4,24576
800037dc:	d9 44 64 c0 	lea %a4,[%a4]1828 <60000724 <status2_val>>
800037e0:	3b c0 00 40 	mov %d4,12
800037e4:	6d ff d1 fd 	call 80003386 <i2cRead>
    now13=11;
800037e8:	3b b0 00 20 	mov %d2,11
800037ec:	e9 d2 15 a1 	st.b [%a13]4757 <60001295 <now13>>,%d2
    accel_x_raw = (sint16) (accelData[0] << 8) | accelData[1];
800037f0:	39 e2 f4 ff 	ld.bu %d2,[%a14]-12 <60001295 <now13>>
800037f4:	8f 82 00 20 	sh %d2,%d2,8
800037f8:	37 02 50 20 	extr %d2,%d2,0,16
800037fc:	39 e3 f5 ff 	ld.bu %d3,[%a14]-11
80003800:	a6 32       	or %d2,%d3
    accel_y_raw = (sint16) (accelData[2] << 8) | accelData[3];
80003802:	39 e3 f6 ff 	ld.bu %d3,[%a14]-10
80003806:	8f 83 00 30 	sh %d3,%d3,8
8000380a:	37 03 50 30 	extr %d3,%d3,0,16
8000380e:	39 e4 f7 ff 	ld.bu %d4,[%a14]-9
80003812:	a6 34       	or %d4,%d3
    accel_z_raw = (sint16) (accelData[4] << 8) | accelData[5];
80003814:	39 e3 f8 ff 	ld.bu %d3,[%a14]-8
80003818:	8f 83 00 30 	sh %d3,%d3,8
8000381c:	37 03 50 30 	extr %d3,%d3,0,16
80003820:	39 e5 f9 ff 	ld.bu %d5,[%a14]-7
80003824:	a6 53       	or %d3,%d5
    accel_x = (float) accel_x_raw / ACCEL_SEN - imu_offset.accel_x;
80003826:	4b 02 41 61 	itof %d6,%d2
8000382a:	7b 00 88 23 	movh %d2,14464
8000382e:	4b 26 41 60 	mul.f %d6,%d6,%d2
80003832:	91 00 00 36 	movh.a %a3,24576
80003836:	d9 32 c0 50 	lea %a2,[%a3]3392 <60000d40 <imu_offset>>
8000383a:	54 25       	ld.w %d5,[%a2]
8000383c:	6b 05 31 56 	sub.f %d5,%d6,%d5
80003840:	59 e5 dc ff 	st.w [%a14]-36,%d5
    accel_y = (float) accel_y_raw / ACCEL_SEN - imu_offset.accel_y;
80003844:	4b 04 41 41 	itof %d4,%d4
80003848:	4b 24 41 40 	mul.f %d4,%d4,%d2
8000384c:	19 25 04 00 	ld.w %d5,[%a2]4
80003850:	6b 05 31 44 	sub.f %d4,%d4,%d5
80003854:	59 e4 d8 ff 	st.w [%a14]-40,%d4
    accel_z = (float) accel_z_raw / ACCEL_SEN - imu_offset.accel_z;
80003858:	4b 03 41 31 	itof %d3,%d3
8000385c:	4b 23 41 20 	mul.f %d2,%d3,%d2
80003860:	19 23 08 00 	ld.w %d3,[%a2]8
80003864:	6b 03 31 22 	sub.f %d2,%d2,%d3
80003868:	59 e2 d4 ff 	st.w [%a14]-44,%d2
    gyro_x_raw = (sint16) (gyroData[0] << 8) | gyroData[1];
8000386c:	39 e2 ec ff 	ld.bu %d2,[%a14]-20
80003870:	8f 82 00 20 	sh %d2,%d2,8
80003874:	37 02 50 20 	extr %d2,%d2,0,16
80003878:	39 e3 ed ff 	ld.bu %d3,[%a14]-19
8000387c:	a6 32       	or %d2,%d3
    gyro_y_raw = (sint16) (gyroData[2] << 8) | gyroData[3];
8000387e:	39 e3 ee ff 	ld.bu %d3,[%a14]-18
80003882:	8f 83 00 30 	sh %d3,%d3,8
80003886:	37 03 50 30 	extr %d3,%d3,0,16
8000388a:	39 e4 ef ff 	ld.bu %d4,[%a14]-17
8000388e:	a6 34       	or %d4,%d3
    gyro_z_raw = (sint16) (gyroData[4] << 8) | gyroData[5];
80003890:	39 e3 f0 ff 	ld.bu %d3,[%a14]-16
80003894:	8f 83 00 30 	sh %d3,%d3,8
80003898:	37 03 50 30 	extr %d3,%d3,0,16
8000389c:	39 e5 f1 ff 	ld.bu %d5,[%a14]-15
800038a0:	a6 53       	or %d3,%d5
    gyro_x = (float) gyro_x_raw / GYRO_SEN - imu_offset.gyro_x;
800038a2:	4b 02 41 51 	itof %d5,%d2
800038a6:	7b 30 30 24 	movh %d2,17155
800038aa:	4b 25 51 50 	div.f %d5,%d5,%d2
800038ae:	19 26 0c 00 	ld.w %d6,[%a2]12
800038b2:	6b 06 31 55 	sub.f %d5,%d5,%d6
800038b6:	59 e5 d0 ff 	st.w [%a14]-48,%d5
    gyro_y = (float) gyro_y_raw / GYRO_SEN - imu_offset.gyro_y;
800038ba:	4b 04 41 41 	itof %d4,%d4
800038be:	4b 24 51 40 	div.f %d4,%d4,%d2
800038c2:	19 25 10 00 	ld.w %d5,[%a2]16
800038c6:	6b 05 31 44 	sub.f %d4,%d4,%d5
800038ca:	60 4f       	mov.a %a15,%d4
    gyro_z = (float) gyro_z_raw / GYRO_SEN - imu_offset.gyro_z;
800038cc:	4b 03 41 31 	itof %d3,%d3
800038d0:	4b 23 51 30 	div.f %d3,%d3,%d2
800038d4:	19 22 14 00 	ld.w %d2,[%a2]20
800038d8:	6b 02 31 23 	sub.f %d2,%d3,%d2
800038dc:	60 2d       	mov.a %a13,%d2
    mag_x_raw = (sint16) (magData[1] << 8) | magData[0];
800038de:	39 e2 e5 ff 	ld.bu %d2,[%a14]-27
800038e2:	8f 82 00 20 	sh %d2,%d2,8
800038e6:	37 02 50 20 	extr %d2,%d2,0,16
800038ea:	39 e3 e4 ff 	ld.bu %d3,[%a14]-28
800038ee:	a6 32       	or %d2,%d3
    mag_y_raw = (sint16) (magData[3] << 8) | magData[2];
800038f0:	39 e3 e7 ff 	ld.bu %d3,[%a14]-25
800038f4:	8f 83 00 30 	sh %d3,%d3,8
800038f8:	37 03 50 30 	extr %d3,%d3,0,16
800038fc:	39 e4 e6 ff 	ld.bu %d4,[%a14]-26
80003900:	a6 34       	or %d4,%d3
    mag_z_raw = (sint16) (magData[5] << 8) | magData[4];
80003902:	39 e3 e9 ff 	ld.bu %d3,[%a14]-23
80003906:	8f 83 00 30 	sh %d3,%d3,8
8000390a:	37 03 50 30 	extr %d3,%d3,0,16
8000390e:	39 e5 e8 ff 	ld.bu %d5,[%a14]-24
80003912:	a6 53       	or %d3,%d5
    mag_x = (float) mag_x_raw * asa_x * MAG_SEN;
80003914:	4b 02 41 51 	itof %d5,%d2
80003918:	91 00 00 26 	movh.a %a2,24576
8000391c:	d9 22 10 a1 	lea %a2,[%a2]4752 <60001290 <asa_x>>
80003920:	54 22       	ld.w %d2,[%a2]
80003922:	4b 25 41 50 	mul.f %d5,%d5,%d2
80003926:	7b a0 f1 a3 	movh %d10,16154
8000392a:	1b aa 99 a9 	addi %d10,%d10,-26214
8000392e:	4b a5 41 90 	mul.f %d9,%d5,%d10
    mag_y = (float) mag_y_raw * asa_y * MAG_SEN;
80003932:	4b 04 41 51 	itof %d5,%d4
80003936:	91 00 00 26 	movh.a %a2,24576
8000393a:	d9 22 0c a1 	lea %a2,[%a2]4748 <6000128c <asa_y>>
8000393e:	54 24       	ld.w %d4,[%a2]
80003940:	4b 45 41 40 	mul.f %d4,%d5,%d4
80003944:	4b a4 41 80 	mul.f %d8,%d4,%d10
    mag_z = (float) mag_z_raw * asa_z * MAG_SEN;
80003948:	4b 03 41 41 	itof %d4,%d3
8000394c:	91 00 00 26 	movh.a %a2,24576
80003950:	d9 22 08 a1 	lea %a2,[%a2]4744 <60001288 <asa_z>>
80003954:	54 23       	ld.w %d3,[%a2]
80003956:	4b 34 41 30 	mul.f %d3,%d4,%d3
8000395a:	4b a3 41 a0 	mul.f %d10,%d3,%d10
    if(mag_x>magx_max)
8000395e:	91 00 00 26 	movh.a %a2,24576
80003962:	d9 22 58 c0 	lea %a2,[%a2]1816 <60000718 <magx_max>>
80003966:	54 22       	ld.w %d2,[%a2]
80003968:	4b 92 01 20 	cmp.f %d2,%d2,%d9
8000396c:	6f 02 07 00 	jz.t %d2,0,8000397a <imuRead+0x2c6>
        magx_max=mag_x;
80003970:	91 00 00 26 	movh.a %a2,24576
80003974:	d9 22 58 c0 	lea %a2,[%a2]1816 <60000718 <magx_max>>
80003978:	74 29       	st.w [%a2],%d9
    if(mag_x<magx_min)
8000397a:	91 00 00 26 	movh.a %a2,24576
8000397e:	d9 22 4c c0 	lea %a2,[%a2]1804 <6000070c <magx_min>>
80003982:	54 22       	ld.w %d2,[%a2]
80003984:	4b 92 01 20 	cmp.f %d2,%d2,%d9
80003988:	6f 22 07 00 	jz.t %d2,2,80003996 <imuRead+0x2e2>
        magx_min=mag_x;
8000398c:	91 00 00 26 	movh.a %a2,24576
80003990:	d9 22 4c c0 	lea %a2,[%a2]1804 <6000070c <magx_min>>
80003994:	74 29       	st.w [%a2],%d9
    if(mag_y>magy_max)
80003996:	91 00 00 26 	movh.a %a2,24576
8000399a:	d9 22 54 c0 	lea %a2,[%a2]1812 <60000714 <magy_max>>
8000399e:	54 22       	ld.w %d2,[%a2]
800039a0:	4b 82 01 20 	cmp.f %d2,%d2,%d8
800039a4:	6f 02 07 00 	jz.t %d2,0,800039b2 <imuRead+0x2fe>
        magy_max=mag_y;
800039a8:	91 00 00 26 	movh.a %a2,24576
800039ac:	d9 22 54 c0 	lea %a2,[%a2]1812 <60000714 <magy_max>>
800039b0:	74 28       	st.w [%a2],%d8
    if(mag_y<magy_min)
800039b2:	91 00 00 26 	movh.a %a2,24576
800039b6:	d9 22 48 c0 	lea %a2,[%a2]1800 <60000708 <magy_min>>
800039ba:	54 22       	ld.w %d2,[%a2]
800039bc:	4b 82 01 20 	cmp.f %d2,%d2,%d8
800039c0:	6f 22 07 00 	jz.t %d2,2,800039ce <imuRead+0x31a>
        magy_min=mag_y;
800039c4:	91 00 00 26 	movh.a %a2,24576
800039c8:	d9 22 48 c0 	lea %a2,[%a2]1800 <60000708 <magy_min>>
800039cc:	74 28       	st.w [%a2],%d8
    if(mag_z>magz_max)
800039ce:	91 00 00 26 	movh.a %a2,24576
800039d2:	d9 22 50 c0 	lea %a2,[%a2]1808 <60000710 <magz_max>>
800039d6:	54 22       	ld.w %d2,[%a2]
800039d8:	4b a2 01 20 	cmp.f %d2,%d2,%d10
800039dc:	6f 02 07 00 	jz.t %d2,0,800039ea <imuRead+0x336>
        magz_max=mag_z;
800039e0:	91 00 00 26 	movh.a %a2,24576
800039e4:	d9 22 50 c0 	lea %a2,[%a2]1808 <60000710 <magz_max>>
800039e8:	74 2a       	st.w [%a2],%d10
    if(mag_z<magz_min)
800039ea:	91 00 00 26 	movh.a %a2,24576
800039ee:	d9 22 44 c0 	lea %a2,[%a2]1796 <60000704 <magz_min>>
800039f2:	54 22       	ld.w %d2,[%a2]
800039f4:	4b a2 01 20 	cmp.f %d2,%d2,%d10
800039f8:	6f 22 07 00 	jz.t %d2,2,80003a06 <imuRead+0x352>
        magz_min=mag_z;
800039fc:	91 00 00 26 	movh.a %a2,24576
80003a00:	d9 22 44 c0 	lea %a2,[%a2]1796 <60000704 <magz_min>>
80003a04:	74 2a       	st.w [%a2],%d10
    float x_offset = (magx_max + magx_min) / 2;
80003a06:	91 00 00 26 	movh.a %a2,24576
80003a0a:	d9 22 58 c0 	lea %a2,[%a2]1816 <60000718 <magx_max>>
80003a0e:	54 20       	ld.w %d0,[%a2]
80003a10:	91 00 00 26 	movh.a %a2,24576
80003a14:	d9 22 4c c0 	lea %a2,[%a2]1804 <6000070c <magx_min>>
80003a18:	54 25       	ld.w %d5,[%a2]
80003a1a:	6b 05 21 f0 	add.f %d15,%d0,%d5
80003a1e:	7b 00 f0 d3 	movh %d13,16128
80003a22:	4b df 41 f0 	mul.f %d15,%d15,%d13
    float y_offset = (magy_max + magy_min) / 2;
80003a26:	91 00 00 26 	movh.a %a2,24576
80003a2a:	d9 22 54 c0 	lea %a2,[%a2]1812 <60000714 <magy_max>>
80003a2e:	54 27       	ld.w %d7,[%a2]
80003a30:	91 00 00 26 	movh.a %a2,24576
80003a34:	d9 22 48 c0 	lea %a2,[%a2]1800 <60000708 <magy_min>>
80003a38:	54 24       	ld.w %d4,[%a2]
80003a3a:	6b 04 21 e7 	add.f %d14,%d7,%d4
80003a3e:	4b de 41 e0 	mul.f %d14,%d14,%d13
    float z_offset = (magz_max + magz_min) / 2;
80003a42:	91 00 00 26 	movh.a %a2,24576
80003a46:	d9 22 50 c0 	lea %a2,[%a2]1808 <60000710 <magz_max>>
80003a4a:	54 26       	ld.w %d6,[%a2]
80003a4c:	91 00 00 26 	movh.a %a2,24576
80003a50:	d9 22 44 c0 	lea %a2,[%a2]1796 <60000704 <magz_min>>
80003a54:	54 23       	ld.w %d3,[%a2]
80003a56:	6b 03 21 16 	add.f %d1,%d6,%d3
80003a5a:	4b d1 41 d0 	mul.f %d13,%d1,%d13
    float scale_x_diff = magx_max - magx_min;
80003a5e:	6b 05 31 50 	sub.f %d5,%d0,%d5
    float scale_y_diff = magy_max - magy_min;
80003a62:	6b 04 31 47 	sub.f %d4,%d7,%d4
    float scale_z_diff = magz_max - magz_min;
80003a66:	6b 03 31 36 	sub.f %d3,%d6,%d3
    avg_rad = (scale_x_diff + scale_y_diff + scale_z_diff)/ 3.0f;
80003a6a:	6b 04 21 25 	add.f %d2,%d5,%d4
80003a6e:	6b 03 21 22 	add.f %d2,%d2,%d3
80003a72:	7b 00 04 64 	movh %d6,16448
80003a76:	4b 62 51 20 	div.f %d2,%d2,%d6
80003a7a:	91 00 00 26 	movh.a %a2,24576
80003a7e:	d9 22 ec 40 	lea %a2,[%a2]3372 <60000d2c <avg_rad>>
80003a82:	74 22       	st.w [%a2],%d2
    scale_x = avg_rad / scale_x_diff;
80003a84:	4b 52 51 c0 	div.f %d12,%d2,%d5
80003a88:	91 00 00 26 	movh.a %a2,24576
80003a8c:	d9 22 e8 40 	lea %a2,[%a2]3368 <60000d28 <scale_x>>
80003a90:	74 2c       	st.w [%a2],%d12
    scale_y = avg_rad / scale_y_diff;
80003a92:	4b 42 51 b0 	div.f %d11,%d2,%d4
80003a96:	91 00 00 26 	movh.a %a2,24576
80003a9a:	d9 22 e4 40 	lea %a2,[%a2]3364 <60000d24 <scale_y>>
80003a9e:	74 2b       	st.w [%a2],%d11
    scale_z = avg_rad / scale_z_diff;
80003aa0:	4b 32 51 20 	div.f %d2,%d2,%d3
80003aa4:	91 00 00 26 	movh.a %a2,24576
80003aa8:	d9 22 e0 40 	lea %a2,[%a2]3360 <60000d20 <scale_z>>
80003aac:	74 22       	st.w [%a2],%d2
    heading = atan2(mag_x, mag_y) * 180 / M_PI;
80003aae:	02 84       	mov %d4,%d8
80003ab0:	6d 00 23 1e 	call 800076f6 <__extendsfdf2>
80003ab4:	59 e2 cc ff 	st.w [%a14]-52,%d2
80003ab8:	59 e3 c8 ff 	st.w [%a14]-56,%d3
80003abc:	02 94       	mov %d4,%d9
80003abe:	6d 00 1c 1e 	call 800076f6 <__extendsfdf2>
80003ac2:	0b 23 10 48 	mov %e4,%d3,%d2
80003ac6:	19 e6 cc ff 	ld.w %d6,[%a14]-52
80003aca:	19 e7 c8 ff 	ld.w %d7,[%a14]-56
80003ace:	6d 00 8a 60 	call 8000fbe2 <atan2>
    now_imu.accel_x = accel_x;
80003ad2:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80003ad6:	74 c2       	st.w [%a12],%d2
    now_imu.accel_y = accel_y;
80003ad8:	19 e2 d8 ff 	ld.w %d2,[%a14]-40
80003adc:	59 c2 04 00 	st.w [%a12]4,%d2
    now_imu.accel_z = accel_z;
80003ae0:	19 e2 d4 ff 	ld.w %d2,[%a14]-44
80003ae4:	59 c2 08 00 	st.w [%a12]8,%d2
    now_imu.gyro_x = gyro_x;
80003ae8:	19 e2 d0 ff 	ld.w %d2,[%a14]-48
80003aec:	59 c2 0c 00 	st.w [%a12]12,%d2
    now_imu.gyro_y = gyro_y;
80003af0:	ec c4       	st.a [%a12]16,%a15
    now_imu.gyro_z = gyro_z;
80003af2:	b5 cd 14 00 	st.a [%a12]20,%a13
    now_imu.mag_x = (mag_x - x_offset)*scale_x;
80003af6:	6b 0f 31 99 	sub.f %d9,%d9,%d15
80003afa:	4b 9c 41 c0 	mul.f %d12,%d12,%d9
80003afe:	59 cc 18 00 	st.w [%a12]24,%d12
    now_imu.mag_y = (mag_y - y_offset)*scale_y;
80003b02:	6b 0e 31 48 	sub.f %d4,%d8,%d14
80003b06:	4b 4b 41 40 	mul.f %d4,%d11,%d4
80003b0a:	59 c4 1c 00 	st.w [%a12]28,%d4
    now_imu.mag_z = (mag_z - z_offset)*scale_y;
80003b0e:	6b 0d 31 2a 	sub.f %d2,%d10,%d13
80003b12:	4b 2b 41 20 	mul.f %d2,%d11,%d2
80003b16:	59 c2 20 00 	st.w [%a12]32,%d2
    heading = atan2(now_imu.mag_x, now_imu.mag_y) * 180 / M_PI;
80003b1a:	6d 00 ee 1d 	call 800076f6 <__extendsfdf2>
80003b1e:	02 2a       	mov %d10,%d2
80003b20:	02 38       	mov %d8,%d3
80003b22:	02 c4       	mov %d4,%d12
80003b24:	6d 00 e9 1d 	call 800076f6 <__extendsfdf2>
80003b28:	0b 23 10 48 	mov %e4,%d3,%d2
80003b2c:	02 a6       	mov %d6,%d10
80003b2e:	02 87       	mov %d7,%d8
80003b30:	6d 00 59 60 	call 8000fbe2 <atan2>
80003b34:	82 06       	mov %d6,0
80003b36:	7b 70 06 74 	movh %d7,16487
80003b3a:	1b 07 00 78 	addi %d7,%d7,-32768
80003b3e:	0b 23 10 48 	mov %e4,%d3,%d2
80003b42:	6d 00 5f 1f 	call 80007a00 <__muldf3>
80003b46:	7b 40 44 65 	movh %d6,21572
80003b4a:	1b 86 d1 62 	addi %d6,%d6,11544
80003b4e:	7b 90 00 74 	movh %d7,16393
80003b52:	1b b7 1f 72 	addi %d7,%d7,8699
80003b56:	0b 23 10 48 	mov %e4,%d3,%d2
80003b5a:	6d 00 65 20 	call 80007c24 <__divdf3>
80003b5e:	0b 23 10 48 	mov %e4,%d3,%d2
80003b62:	6d 00 94 21 	call 80007e8a <__truncdfsf2>
    if (heading < 0)
80003b66:	82 03       	mov %d3,0
80003b68:	4b 32 01 30 	cmp.f %d3,%d2,%d3
80003b6c:	6f 03 06 80 	jnz.t %d3,0,80003b78 <imuRead+0x4c4>
    now_imu.heading = heading;
80003b70:	59 c2 24 00 	st.w [%a12]36,%d2
}
80003b74:	40 c2       	mov.aa %a2,%a12
80003b76:	00 90       	ret 
        heading += 360;
80003b78:	7b 40 3b 34 	movh %d3,17332
80003b7c:	6b 03 21 22 	add.f %d2,%d2,%d3
80003b80:	1d ff f8 ff 	j 80003b70 <imuRead+0x4bc>

80003b84 <initAK8963>:
{
80003b84:	40 ae       	mov.aa %a14,%sp
80003b86:	20 20       	sub.a %sp,32
    uint8 mag_mode_value = 0;
80003b88:	82 02       	mov %d2,0
80003b8a:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    uint8 mag_mode_valueoff = 1;
80003b8e:	82 13       	mov %d3,1
80003b90:	e9 e3 fe ff 	st.b [%a14]-2,%d3
    uint8 status_valfir = 0;
80003b94:	e9 e2 fd ff 	st.b [%a14]-3,%d2
    uint8 bypass_reg1[2] = {0x6A, 0x00};
80003b98:	3b a0 06 20 	mov %d2,106
80003b9c:	f9 e2 f4 ff 	st.h [%a14]-12,%d2
    test1=i2cWrite(MPU9250_ADDRESS, bypass_reg1, 2);
80003ba0:	82 25       	mov %d5,2
80003ba2:	d9 e4 f4 ff 	lea %a4,[%a14]-12
80003ba6:	3b 80 06 40 	mov %d4,104
80003baa:	6d ff 6f fb 	call 80003288 <i2cWrite>
80003bae:	91 00 00 26 	movh.a %a2,24576
80003bb2:	59 22 44 d0 	st.w [%a2]1860 <60000744 <test1>>,%d2
    delay(10000);
80003bb6:	3b 00 71 42 	mov %d4,10000
80003bba:	6d 00 69 06 	call 8000488c <delay>
    uint8 bypass_reg2[2] = {0x37, 0x02};
80003bbe:	3b 70 23 20 	mov %d2,567
80003bc2:	f9 e2 f0 ff 	st.h [%a14]-16,%d2
    test2=i2cWrite(MPU9250_ADDRESS, bypass_reg2, 2);
80003bc6:	82 25       	mov %d5,2
80003bc8:	d9 e4 f0 ff 	lea %a4,[%a14]-16
80003bcc:	3b 80 06 40 	mov %d4,104
80003bd0:	6d ff 5c fb 	call 80003288 <i2cWrite>
80003bd4:	91 00 00 26 	movh.a %a2,24576
80003bd8:	59 22 40 d0 	st.w [%a2]1856 <60000740 <test2>>,%d2
    delay(10000);
80003bdc:	3b 00 71 42 	mov %d4,10000
80003be0:	6d 00 56 06 	call 8000488c <delay>
    i2cStopCondition();
80003be4:	6d ff ea fc 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003be8:	3b 80 3e 40 	mov %d4,1000
80003bec:	6d 00 50 06 	call 8000488c <delay>
    i2cStartCondition();
80003bf0:	6d ff 1f fd 	call 8000362e <i2cStartCondition>
    uint8 mag_power_down[2] = {AK_CNTL1_REG, 0x00};     // CNTL1 레지스터
80003bf4:	3b a0 00 80 	mov %d8,10
80003bf8:	f9 e8 ec ff 	st.h [%a14]-20,%d8
    test3=i2cWrite(AK8963_ADDRESS, mag_power_down, 2);
80003bfc:	82 25       	mov %d5,2
80003bfe:	d9 e4 ec ff 	lea %a4,[%a14]-20
80003c02:	3b c0 00 40 	mov %d4,12
80003c06:	6d ff 41 fb 	call 80003288 <i2cWrite>
80003c0a:	91 00 00 26 	movh.a %a2,24576
80003c0e:	59 22 7c c0 	st.w [%a2]1852 <6000073c <test3>>,%d2
    delay(10000);
80003c12:	3b 00 71 42 	mov %d4,10000
80003c16:	6d 00 3b 06 	call 8000488c <delay>
    i2cStopCondition();
80003c1a:	6d ff cf fc 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003c1e:	3b 80 3e 40 	mov %d4,1000
80003c22:	6d 00 35 06 	call 8000488c <delay>
    i2cStartCondition();
80003c26:	6d ff 04 fd 	call 8000362e <i2cStartCondition>
    uint8 mag_mode_check = AK_CNTL1_REG;                   //offmode 잘 들어갔는지
80003c2a:	e9 e8 eb ff 	st.b [%a14]-21,%d8
    test4=i2cWrite(AK8963_ADDRESS, &mag_mode_check, 1);
80003c2e:	82 15       	mov %d5,1
80003c30:	d9 e4 eb ff 	lea %a4,[%a14]-21
80003c34:	3b c0 00 40 	mov %d4,12
80003c38:	6d ff 28 fb 	call 80003288 <i2cWrite>
80003c3c:	91 00 00 26 	movh.a %a2,24576
80003c40:	59 22 78 c0 	st.w [%a2]1848 <60000738 <test4>>,%d2
    i2cRead(AK8963_ADDRESS, &mag_mode_valueoff, 1);
80003c44:	82 15       	mov %d5,1
80003c46:	d9 e4 fe ff 	lea %a4,[%a14]-2
80003c4a:	3b c0 00 40 	mov %d4,12
80003c4e:	6d ff 9c fb 	call 80003386 <i2cRead>
    i2cStopCondition();
80003c52:	6d ff b3 fc 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003c56:	3b 80 3e 40 	mov %d4,1000
80003c5a:	6d 00 19 06 	call 8000488c <delay>
    i2cStartCondition();
80003c5e:	6d ff e8 fc 	call 8000362e <i2cStartCondition>
    uint8 mag_rom_access[2] = {AK_CNTL1_REG, 0x0F};
80003c62:	3b a0 f0 20 	mov %d2,3850
80003c66:	f9 e2 e8 ff 	st.h [%a14]-24,%d2
    test5=i2cWrite(AK8963_ADDRESS, mag_rom_access, 2);
80003c6a:	82 25       	mov %d5,2
80003c6c:	d9 e4 e8 ff 	lea %a4,[%a14]-24
80003c70:	3b c0 00 40 	mov %d4,12
80003c74:	6d ff 0a fb 	call 80003288 <i2cWrite>
80003c78:	91 00 00 26 	movh.a %a2,24576
80003c7c:	59 22 74 c0 	st.w [%a2]1844 <60000734 <test5>>,%d2
    delay(10000);
80003c80:	3b 00 71 42 	mov %d4,10000
80003c84:	6d 00 04 06 	call 8000488c <delay>
    i2cStopCondition();
80003c88:	6d ff 98 fc 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003c8c:	3b 80 3e 40 	mov %d4,1000
80003c90:	6d 00 fe 05 	call 8000488c <delay>
    i2cStartCondition();
80003c94:	6d ff cd fc 	call 8000362e <i2cStartCondition>
    uint8 asa_reg = 0x10;  //감도 저장된거 시작 주소
80003c98:	3b 00 01 20 	mov %d2,16
80003c9c:	e9 e2 e7 ff 	st.b [%a14]-25,%d2
    test6=i2cWrite(AK8963_ADDRESS, &asa_reg, 1);
80003ca0:	82 15       	mov %d5,1
80003ca2:	d9 e4 e7 ff 	lea %a4,[%a14]-25
80003ca6:	3b c0 00 40 	mov %d4,12
80003caa:	6d ff ef fa 	call 80003288 <i2cWrite>
80003cae:	91 00 00 26 	movh.a %a2,24576
80003cb2:	59 22 70 c0 	st.w [%a2]1840 <60000730 <test6>>,%d2
    delay(100);
80003cb6:	3b 40 06 40 	mov %d4,100
80003cba:	6d 00 e9 05 	call 8000488c <delay>
    i2cRead(AK8963_ADDRESS, data, 3);
80003cbe:	82 35       	mov %d5,3
80003cc0:	d9 e4 f8 ff 	lea %a4,[%a14]-8
80003cc4:	3b c0 00 40 	mov %d4,12
80003cc8:	6d ff 5f fb 	call 80003386 <i2cRead>
    asa_x = (float) (data[0] - 128) / 256.0f + 1.0f;
80003ccc:	39 e2 f8 ff 	ld.bu %d2,[%a14]-8
80003cd0:	1b 02 f8 2f 	addi %d2,%d2,-128
80003cd4:	4b 02 41 21 	itof %d2,%d2
80003cd8:	7b 00 b8 33 	movh %d3,15232
80003cdc:	4b 32 41 40 	mul.f %d4,%d2,%d3
80003ce0:	7b 00 f8 23 	movh %d2,16256
80003ce4:	6b 02 21 44 	add.f %d4,%d4,%d2
80003ce8:	91 00 00 26 	movh.a %a2,24576
80003cec:	d9 22 10 a1 	lea %a2,[%a2]4752 <60001290 <asa_x>>
80003cf0:	74 24       	st.w [%a2],%d4
    asa_y = (float) (data[1] - 128) / 256.0f + 1.0f;
80003cf2:	39 e4 f9 ff 	ld.bu %d4,[%a14]-7 <60001290 <asa_x>>
80003cf6:	1b 04 f8 4f 	addi %d4,%d4,-128
80003cfa:	4b 04 41 41 	itof %d4,%d4
80003cfe:	4b 34 41 40 	mul.f %d4,%d4,%d3
80003d02:	6b 02 21 44 	add.f %d4,%d4,%d2
80003d06:	91 00 00 26 	movh.a %a2,24576
80003d0a:	d9 22 0c a1 	lea %a2,[%a2]4748 <6000128c <asa_y>>
80003d0e:	74 24       	st.w [%a2],%d4
    asa_z = (float) (data[2] - 128) / 256.0f + 1.0f;
80003d10:	39 e4 fa ff 	ld.bu %d4,[%a14]-6 <6000128c <asa_y>>
80003d14:	1b 04 f8 4f 	addi %d4,%d4,-128
80003d18:	4b 04 41 41 	itof %d4,%d4
80003d1c:	4b 34 41 30 	mul.f %d3,%d4,%d3
80003d20:	6b 02 21 23 	add.f %d2,%d3,%d2
80003d24:	91 00 00 26 	movh.a %a2,24576
80003d28:	d9 22 08 a1 	lea %a2,[%a2]4744 <60001288 <asa_z>>
80003d2c:	74 22       	st.w [%a2],%d2
    i2cStopCondition();
80003d2e:	6d ff 45 fc 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003d32:	3b 80 3e 40 	mov %d4,1000
80003d36:	6d 00 ab 05 	call 8000488c <delay>
    i2cStartCondition();
80003d3a:	6d ff 7a fc 	call 8000362e <i2cStartCondition>
    test7=i2cWrite(AK8963_ADDRESS, mag_power_down, 2);
80003d3e:	82 25       	mov %d5,2
80003d40:	d9 e4 ec ff 	lea %a4,[%a14]-20
80003d44:	3b c0 00 40 	mov %d4,12
80003d48:	6d ff a0 fa 	call 80003288 <i2cWrite>
80003d4c:	91 00 00 26 	movh.a %a2,24576
80003d50:	59 22 6c c0 	st.w [%a2]1836 <6000072c <test7>>,%d2
    delay(10000);
80003d54:	3b 00 71 42 	mov %d4,10000
80003d58:	6d 00 9a 05 	call 8000488c <delay>
    i2cStopCondition();
80003d5c:	6d ff 2e fc 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003d60:	3b 80 3e 40 	mov %d4,1000
80003d64:	6d 00 94 05 	call 8000488c <delay>
    i2cStartCondition();
80003d68:	6d ff 63 fc 	call 8000362e <i2cStartCondition>
    uint8 mag_continuous[2] = {AK_CNTL1_REG, 0x06};  //
80003d6c:	3b a0 60 20 	mov %d2,1546
80003d70:	f9 e2 e4 ff 	st.h [%a14]-28,%d2
    test8=i2cWrite(AK8963_ADDRESS, mag_continuous, 2);
80003d74:	82 25       	mov %d5,2
80003d76:	d9 e4 e4 ff 	lea %a4,[%a14]-28
80003d7a:	3b c0 00 40 	mov %d4,12
80003d7e:	6d ff 85 fa 	call 80003288 <i2cWrite>
80003d82:	91 00 00 26 	movh.a %a2,24576
80003d86:	59 22 68 c0 	st.w [%a2]1832 <60000728 <test8>>,%d2
    i2cStopCondition();
80003d8a:	6d ff 17 fc 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003d8e:	3b 80 3e 40 	mov %d4,1000
80003d92:	6d 00 7d 05 	call 8000488c <delay>
    i2cStartCondition();
80003d96:	6d ff 4c fc 	call 8000362e <i2cStartCondition>
    i2cWrite(AK8963_ADDRESS, &mag_mode_check, 1);
80003d9a:	82 15       	mov %d5,1
80003d9c:	d9 e4 eb ff 	lea %a4,[%a14]-21
80003da0:	3b c0 00 40 	mov %d4,12
80003da4:	6d ff 72 fa 	call 80003288 <i2cWrite>
    i2cRead(AK8963_ADDRESS, &mag_mode_value, 1);
80003da8:	82 15       	mov %d5,1
80003daa:	d9 e4 ff ff 	lea %a4,[%a14]-1
80003dae:	3b c0 00 40 	mov %d4,12
80003db2:	6d ff ea fa 	call 80003386 <i2cRead>
    delay(10000);
80003db6:	3b 00 71 42 	mov %d4,10000
80003dba:	6d 00 69 05 	call 8000488c <delay>
    i2cStopCondition();
80003dbe:	6d ff fd fb 	call 800035b8 <i2cStopCondition>
    delay(1000);
80003dc2:	3b 80 3e 40 	mov %d4,1000
80003dc6:	6d 00 63 05 	call 8000488c <delay>
    i2cStartCondition();
80003dca:	6d ff 32 fc 	call 8000362e <i2cStartCondition>
    uint8 status_reg = 0x02;
80003dce:	82 22       	mov %d2,2
80003dd0:	e9 e2 e3 ff 	st.b [%a14]-29,%d2
    i2cWrite(AK8963_ADDRESS, &status_reg, 1);
80003dd4:	82 15       	mov %d5,1
80003dd6:	d9 e4 e3 ff 	lea %a4,[%a14]-29
80003dda:	3b c0 00 40 	mov %d4,12
80003dde:	6d ff 55 fa 	call 80003288 <i2cWrite>
    delay(10);
80003de2:	3b a0 00 40 	mov %d4,10
80003de6:	6d 00 53 05 	call 8000488c <delay>
    i2cRead(AK8963_ADDRESS, &status_valfir, 1);
80003dea:	82 15       	mov %d5,1
80003dec:	d9 e4 fd ff 	lea %a4,[%a14]-3
80003df0:	3b c0 00 40 	mov %d4,12
80003df4:	6d ff c9 fa 	call 80003386 <i2cRead>
}
80003df8:	00 90       	ret 

80003dfa <setDLPF>:
 setDLPF 함수
 low pass filter 설정
 -> 수정해야함
 */
void setDLPF (void)
{
80003dfa:	40 ae       	mov.aa %a14,%sp
80003dfc:	20 08       	sub.a %sp,8
    uint8 gyro_dlpf[2] = {0x1A, 0x03};  // 자이로 DLPF 41Hz 설정
80003dfe:	3b a0 31 20 	mov %d2,794
80003e02:	f9 e2 fc ff 	st.h [%a14]-4,%d2
    i2cWrite(MPU9250_ADDRESS, gyro_dlpf, 2);
80003e06:	82 25       	mov %d5,2
80003e08:	d9 e4 fc ff 	lea %a4,[%a14]-4
80003e0c:	3b 80 06 40 	mov %d4,104
80003e10:	6d ff 3c fa 	call 80003288 <i2cWrite>
    delay(10);
80003e14:	3b a0 00 40 	mov %d4,10
80003e18:	6d 00 3a 05 	call 8000488c <delay>

    uint8 accel_dlpf[2] = {0x1D, 0x03};  // 가속도 DLPF 21.2Hz 설정
80003e1c:	3b d0 31 20 	mov %d2,797
80003e20:	f9 e2 f8 ff 	st.h [%a14]-8,%d2
    i2cWrite(MPU9250_ADDRESS, accel_dlpf, 2);
80003e24:	82 25       	mov %d5,2
80003e26:	d9 e4 f8 ff 	lea %a4,[%a14]-8
80003e2a:	3b 80 06 40 	mov %d4,104
80003e2e:	6d ff 2d fa 	call 80003288 <i2cWrite>
    delay(10);
80003e32:	3b a0 00 40 	mov %d4,10
80003e36:	6d 00 2b 05 	call 8000488c <delay>
}
80003e3a:	00 90       	ret 

80003e3c <checkoffset>:
 checkoffset 함수
 초기 오류 보정
 -> 수정해야함
 */
void checkoffset(void)
{
80003e3c:	40 ae       	mov.aa %a14,%sp
80003e3e:	20 50       	sub.a %sp,80
    IMU now_status={0,0,0,0,0,0,0,0,0,0};
80003e40:	3b 80 02 80 	mov %d8,40
80003e44:	02 85       	mov %d5,%d8
80003e46:	82 04       	mov %d4,0
80003e48:	d9 e4 d8 ff 	lea %a4,[%a14]-40
80003e4c:	6d 00 4c 1c 	call 800076e4 <memset>
    IMU now_statussum={0,0,0,0,0,0,0,0,0,0};
80003e50:	02 85       	mov %d5,%d8
80003e52:	82 04       	mov %d4,0
80003e54:	d9 e4 f0 ef 	lea %a4,[%a14]-80
80003e58:	6d 00 46 1c 	call 800076e4 <memset>
    uint8 sampling = 100;
    for(int i=0;i<sampling;i++)
80003e5c:	82 08       	mov %d8,0
80003e5e:	1d 00 37 00 	j 80003ecc <checkoffset+0x90>
    {
        now_status=initimuRead();
80003e62:	d9 e4 d8 ff 	lea %a4,[%a14]-40
80003e66:	6d ff a5 fa 	call 800033b0 <initimuRead>

        now_statussum.accel_x += now_status.accel_x;
80003e6a:	19 e2 d8 ff 	ld.w %d2,[%a14]-40
80003e6e:	19 e3 f0 ef 	ld.w %d3,[%a14]-80
80003e72:	6b 02 21 23 	add.f %d2,%d3,%d2
80003e76:	59 e2 f0 ef 	st.w [%a14]-80,%d2
        now_statussum.accel_y += now_status.accel_y;
80003e7a:	19 e2 dc ff 	ld.w %d2,[%a14]-36
80003e7e:	19 e3 f4 ef 	ld.w %d3,[%a14]-76
80003e82:	6b 02 21 23 	add.f %d2,%d3,%d2
80003e86:	59 e2 f4 ef 	st.w [%a14]-76,%d2
        now_statussum.accel_z += now_status.accel_z;
80003e8a:	19 e2 e0 ff 	ld.w %d2,[%a14]-32
80003e8e:	19 e3 f8 ef 	ld.w %d3,[%a14]-72
80003e92:	6b 02 21 23 	add.f %d2,%d3,%d2
80003e96:	59 e2 f8 ef 	st.w [%a14]-72,%d2

        now_statussum.gyro_x += now_status.gyro_x;
80003e9a:	19 e2 e4 ff 	ld.w %d2,[%a14]-28
80003e9e:	19 e3 fc ef 	ld.w %d3,[%a14]-68
80003ea2:	6b 02 21 23 	add.f %d2,%d3,%d2
80003ea6:	59 e2 fc ef 	st.w [%a14]-68,%d2
        now_statussum.gyro_y += now_status.gyro_y;
80003eaa:	19 e2 e8 ff 	ld.w %d2,[%a14]-24
80003eae:	19 e3 c0 ff 	ld.w %d3,[%a14]-64
80003eb2:	6b 02 21 23 	add.f %d2,%d3,%d2
80003eb6:	59 e2 c0 ff 	st.w [%a14]-64,%d2
        now_statussum.gyro_z += now_status.gyro_z;
80003eba:	19 e2 ec ff 	ld.w %d2,[%a14]-20
80003ebe:	19 e3 c4 ff 	ld.w %d3,[%a14]-60
80003ec2:	6b 02 21 23 	add.f %d2,%d3,%d2
80003ec6:	59 e2 c4 ff 	st.w [%a14]-60,%d2
    for(int i=0;i<sampling;i++)
80003eca:	c2 18       	add %d8,1
80003ecc:	8b 48 46 22 	lt %d2,%d8,100
80003ed0:	df 02 c9 ff 	jne %d2,0,80003e62 <checkoffset+0x26>
    }

    imu_offset.accel_x = now_statussum.accel_x/100;
80003ed4:	7b 80 2c 24 	movh %d2,17096
80003ed8:	19 e3 f0 ef 	ld.w %d3,[%a14]-80
80003edc:	4b 23 51 30 	div.f %d3,%d3,%d2
80003ee0:	91 00 00 36 	movh.a %a3,24576
80003ee4:	d9 32 c0 50 	lea %a2,[%a3]3392 <60000d40 <imu_offset>>
80003ee8:	74 23       	st.w [%a2],%d3
    imu_offset.accel_y = now_statussum.accel_y/100;
80003eea:	19 e3 f4 ef 	ld.w %d3,[%a14]-76 <60000d40 <imu_offset>>
80003eee:	4b 23 51 30 	div.f %d3,%d3,%d2
80003ef2:	59 23 04 00 	st.w [%a2]4,%d3
    imu_offset.accel_z = now_statussum.accel_z/100-1;
80003ef6:	19 e3 f8 ef 	ld.w %d3,[%a14]-72
80003efa:	4b 23 51 30 	div.f %d3,%d3,%d2
80003efe:	7b 00 f8 43 	movh %d4,16256
80003f02:	6b 04 31 33 	sub.f %d3,%d3,%d4
80003f06:	59 23 08 00 	st.w [%a2]8,%d3

    imu_offset.gyro_x = now_statussum.gyro_x/100;
80003f0a:	19 e3 fc ef 	ld.w %d3,[%a14]-68
80003f0e:	4b 23 51 30 	div.f %d3,%d3,%d2
80003f12:	59 23 0c 00 	st.w [%a2]12,%d3
    imu_offset.gyro_y = now_statussum.gyro_y/100;
80003f16:	19 e3 c0 ff 	ld.w %d3,[%a14]-64
80003f1a:	4b 23 51 30 	div.f %d3,%d3,%d2
80003f1e:	59 23 10 00 	st.w [%a2]16,%d3
    imu_offset.gyro_z = now_statussum.gyro_z/100;
80003f22:	19 e3 c4 ff 	ld.w %d3,[%a14]-60
80003f26:	4b 23 51 20 	div.f %d2,%d3,%d2
80003f2a:	59 22 14 00 	st.w [%a2]20,%d2
}
80003f2e:	00 90       	ret 

80003f30 <initIMU>:
{
80003f30:	40 ae       	mov.aa %a14,%sp
80003f32:	20 08       	sub.a %sp,8
    uint8 readData = 0;
80003f34:	82 02       	mov %d2,0
80003f36:	e9 e2 ff ff 	st.b [%a14]-1,%d2
    forceI2CBusReset();   // 버스 강제 리셋
80003f3a:	6d ff d5 fa 	call 800034e4 <forceI2CBusReset>
    uint8 trycnt = 0;
80003f3e:	82 08       	mov %d8,0
        delay(100000);
80003f40:	7b 20 00 40 	movh %d4,2
80003f44:	1b 04 6a 48 	addi %d4,%d4,-31072
80003f48:	6d 00 a2 04 	call 8000488c <delay>
        delay(100000);
80003f4c:	7b 20 00 40 	movh %d4,2
80003f50:	1b 04 6a 48 	addi %d4,%d4,-31072
80003f54:	6d 00 9c 04 	call 8000488c <delay>
        initI2c();// I2C 초기화
80003f58:	6d ff ae f9 	call 800032b4 <initI2c>
        delay(1000000);
80003f5c:	7b f0 00 40 	movh %d4,15
80003f60:	1b 04 24 44 	addi %d4,%d4,16960
80003f64:	6d 00 94 04 	call 8000488c <delay>
        initAK8963();// AK8963(지자기)초기화
80003f68:	6d ff 0e fe 	call 80003b84 <initAK8963>
        uint8 whoAmI = WHOAMI_REG;
80003f6c:	3b 50 07 20 	mov %d2,117
80003f70:	e9 e2 fe ff 	st.b [%a14]-2,%d2
        i2cWrite(MPU9250_ADDRESS, &whoAmI, 1);
80003f74:	82 15       	mov %d5,1
80003f76:	d9 e4 fe ff 	lea %a4,[%a14]-2
80003f7a:	3b 80 06 40 	mov %d4,104
80003f7e:	6d ff 85 f9 	call 80003288 <i2cWrite>
        delay(10000);
80003f82:	3b 00 71 42 	mov %d4,10000
80003f86:	6d 00 83 04 	call 8000488c <delay>
        i2cRead(MPU9250_ADDRESS, &readData, 1);
80003f8a:	82 15       	mov %d5,1
80003f8c:	d9 e4 ff ff 	lea %a4,[%a14]-1
80003f90:	3b 80 06 40 	mov %d4,104
80003f94:	6d ff f9 f9 	call 80003386 <i2cRead>
        trycnt++;
80003f98:	c2 18       	add %d8,1
80003f9a:	8f f8 0f 81 	and %d8,%d8,255
        now13=5;
80003f9e:	91 00 00 26 	movh.a %a2,24576
80003fa2:	82 52       	mov %d2,5
80003fa4:	e9 22 15 a1 	st.b [%a2]4757 <60001295 <now13>>,%d2
    }while (readData != 0x71 && (trycnt < 5));
80003fa8:	39 e2 ff ff 	ld.bu %d2,[%a14]-1 <60001295 <now13>>
80003fac:	3b 10 07 30 	mov %d3,113
80003fb0:	5f 32 04 00 	jeq %d2,%d3,80003fb8 <initIMU+0x88>
80003fb4:	bf 58 c6 ff 	jlt.u %d8,5,80003f40 <initIMU+0x10>
    setDLPF();
80003fb8:	6d ff 21 ff 	call 80003dfa <setDLPF>
    delay(1000000);
80003fbc:	7b f0 00 40 	movh %d4,15
80003fc0:	1b 04 24 44 	addi %d4,%d4,16960
80003fc4:	6d 00 64 04 	call 8000488c <delay>
    checkoffset();
80003fc8:	6d ff 3a ff 	call 80003e3c <checkoffset>
}
80003fcc:	00 90       	ret 

80003fce <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
80003fce:	40 ae       	mov.aa %a14,%sp
	float halfx = 0.5f * x;
80003fd0:	7b 00 f0 23 	movh %d2,16128
80003fd4:	4b 24 41 20 	mul.f %d2,%d4,%d2
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
80003fd8:	8f f4 3f 30 	sha %d3,%d4,-1
80003fdc:	7b 70 f3 45 	movh %d4,24375
80003fe0:	1b f4 9d 45 	addi %d4,%d4,23007
80003fe4:	a2 34       	sub %d4,%d3
	y = *(float*)&i;
	y = y * (1.5f - (halfx * y * y));
80003fe6:	4b 42 41 20 	mul.f %d2,%d2,%d4
80003fea:	4b 42 41 20 	mul.f %d2,%d2,%d4
80003fee:	7b 00 fc 33 	movh %d3,16320
80003ff2:	6b 02 31 23 	sub.f %d2,%d3,%d2
	return y;
}
80003ff6:	4b 42 41 20 	mul.f %d2,%d2,%d4
80003ffa:	00 90       	ret 

80003ffc <MadgwickAHRSupdate>:
Euler MadgwickAHRSupdate(IMU now_status) {
80003ffc:	40 ae       	mov.aa %a14,%sp
80003ffe:	20 88       	sub.a %sp,136
80004000:	b5 e4 fc ef 	st.a [%a14]-68,%a4
80004004:	d9 e3 d8 ff 	lea %a3,[%a14]-40
80004008:	09 54 48 01 	ld.d %e4,[%a5+]8
8000400c:	89 34 48 01 	st.d [%a3+]8,%e4
80004010:	09 54 48 01 	ld.d %e4,[%a5+]8
80004014:	89 34 48 01 	st.d [%a3+]8,%e4
80004018:	09 54 48 01 	ld.d %e4,[%a5+]8
8000401c:	89 34 48 01 	st.d [%a3+]8,%e4
80004020:	09 54 48 01 	ld.d %e4,[%a5+]8
80004024:	89 34 48 01 	st.d [%a3+]8,%e4
80004028:	09 54 48 01 	ld.d %e4,[%a5+]8
8000402c:	89 34 48 01 	st.d [%a3+]8,%e4
    float ax=now_status.accel_x;
80004030:	19 e9 d8 ff 	ld.w %d9,[%a14]-40
    float ay=now_status.accel_y;
80004034:	19 e8 dc ff 	ld.w %d8,[%a14]-36
    float az=now_status.accel_z;
80004038:	19 ea e0 ff 	ld.w %d10,[%a14]-32
    float gx=now_status.gyro_x;
8000403c:	19 e3 e4 ff 	ld.w %d3,[%a14]-28
    float gy=now_status.gyro_y;
80004040:	19 e4 e8 ff 	ld.w %d4,[%a14]-24
    float gz=now_status.gyro_z;
80004044:	19 e5 ec ff 	ld.w %d5,[%a14]-20
    float mx=now_status.mag_x;
80004048:	19 ed f0 ff 	ld.w %d13,[%a14]-16
    float my=now_status.mag_y;
8000404c:	19 ec f4 ff 	ld.w %d12,[%a14]-12
    float mz=now_status.mag_z;
80004050:	19 eb f8 ff 	ld.w %d11,[%a14]-8
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
80004054:	91 00 00 56 	movh.a %a5,24576
80004058:	d9 52 f8 50 	lea %a2,[%a5]3448 <60000d78 <q1>>
8000405c:	54 22       	ld.w %d2,[%a2]
8000405e:	9b 02 00 28 	addih %d2,%d2,32768
80004062:	4b 32 41 60 	mul.f %d6,%d2,%d3
80004066:	91 00 00 36 	movh.a %a3,24576
8000406a:	d9 32 f4 50 	lea %a2,[%a3]3444 <60000d74 <q2>>
8000406e:	54 22       	ld.w %d2,[%a2]
80004070:	4b 42 41 20 	mul.f %d2,%d2,%d4
80004074:	6b 02 31 66 	sub.f %d6,%d6,%d2
80004078:	91 00 00 76 	movh.a %a7,24576
8000407c:	d9 72 f0 50 	lea %a2,[%a7]3440 <60000d70 <q3>>
80004080:	54 22       	ld.w %d2,[%a2]
80004082:	4b 52 41 20 	mul.f %d2,%d2,%d5
80004086:	6b 02 31 66 	sub.f %d6,%d6,%d2
8000408a:	7b 00 f0 23 	movh %d2,16128
8000408e:	4b 26 41 60 	mul.f %d6,%d6,%d2
80004092:	59 e6 d4 ff 	st.w [%a14]-44,%d6
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
80004096:	91 00 00 66 	movh.a %a6,24576
8000409a:	d9 62 5c c0 	lea %a2,[%a6]1820 <6000071c <q0>>
8000409e:	54 27       	ld.w %d7,[%a2]
800040a0:	4b 37 41 70 	mul.f %d7,%d7,%d3
800040a4:	d9 32 f4 50 	lea %a2,[%a3]3444 <60000d74 <q2>>
800040a8:	54 26       	ld.w %d6,[%a2]
800040aa:	4b 56 41 60 	mul.f %d6,%d6,%d5
800040ae:	6b 06 21 77 	add.f %d7,%d7,%d6
800040b2:	d9 72 f0 50 	lea %a2,[%a7]3440 <60000d70 <q3>>
800040b6:	54 26       	ld.w %d6,[%a2]
800040b8:	4b 46 41 60 	mul.f %d6,%d6,%d4
800040bc:	6b 06 31 67 	sub.f %d6,%d7,%d6
800040c0:	4b 26 41 60 	mul.f %d6,%d6,%d2
800040c4:	59 e6 d0 ff 	st.w [%a14]-48,%d6
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
800040c8:	d9 62 5c c0 	lea %a2,[%a6]1820 <6000071c <q0>>
800040cc:	54 27       	ld.w %d7,[%a2]
800040ce:	4b 47 41 70 	mul.f %d7,%d7,%d4
800040d2:	d9 52 f8 50 	lea %a2,[%a5]3448 <60000d78 <q1>>
800040d6:	54 26       	ld.w %d6,[%a2]
800040d8:	4b 56 41 60 	mul.f %d6,%d6,%d5
800040dc:	6b 06 31 77 	sub.f %d7,%d7,%d6
800040e0:	d9 72 f0 50 	lea %a2,[%a7]3440 <60000d70 <q3>>
800040e4:	54 26       	ld.w %d6,[%a2]
800040e6:	4b 36 41 60 	mul.f %d6,%d6,%d3
800040ea:	6b 06 21 67 	add.f %d6,%d7,%d6
800040ee:	4b 26 41 60 	mul.f %d6,%d6,%d2
800040f2:	59 e6 cc ff 	st.w [%a14]-52,%d6
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
800040f6:	d9 62 5c c0 	lea %a2,[%a6]1820 <6000071c <q0>>
800040fa:	54 26       	ld.w %d6,[%a2]
800040fc:	4b 56 41 50 	mul.f %d5,%d6,%d5
80004100:	d9 52 f8 50 	lea %a2,[%a5]3448 <60000d78 <q1>>
80004104:	54 26       	ld.w %d6,[%a2]
80004106:	4b 46 41 40 	mul.f %d4,%d6,%d4
8000410a:	6b 04 21 45 	add.f %d4,%d5,%d4
8000410e:	d9 32 f4 50 	lea %a2,[%a3]3444 <60000d74 <q2>>
80004112:	54 25       	ld.w %d5,[%a2]
80004114:	4b 35 41 30 	mul.f %d3,%d5,%d3
80004118:	6b 03 31 34 	sub.f %d3,%d4,%d3
8000411c:	4b 23 41 20 	mul.f %d2,%d3,%d2
80004120:	59 e2 c8 ff 	st.w [%a14]-56,%d2
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
80004124:	82 13       	mov %d3,1
80004126:	82 02       	mov %d2,0
80004128:	4b 29 01 20 	cmp.f %d2,%d9,%d2
8000412c:	8f d2 00 21 	and %d2,%d2,13
80004130:	df 02 03 80 	jne %d2,0,80004136 <MadgwickAHRSupdate+0x13a>
80004134:	82 03       	mov %d3,0
80004136:	8f f3 0f 31 	and %d3,%d3,255
8000413a:	82 14       	mov %d4,1
8000413c:	82 02       	mov %d2,0
8000413e:	4b 28 01 20 	cmp.f %d2,%d8,%d2
80004142:	8f d2 00 21 	and %d2,%d2,13
80004146:	df 02 03 80 	jne %d2,0,8000414c <MadgwickAHRSupdate+0x150>
8000414a:	82 04       	mov %d4,0
8000414c:	8f f4 0f 21 	and %d2,%d4,255
80004150:	a6 32       	or %d2,%d3
80004152:	df 02 07 80 	jne %d2,0,80004160 <MadgwickAHRSupdate+0x164>
80004156:	82 02       	mov %d2,0
80004158:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
8000415c:	6f 12 06 83 	jnz.t %d2,1,80004768 <MadgwickAHRSupdate+0x76c>
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
80004160:	4b 99 41 30 	mul.f %d3,%d9,%d9
80004164:	4b 88 41 40 	mul.f %d4,%d8,%d8
80004168:	6b 04 21 43 	add.f %d4,%d3,%d4
8000416c:	4b aa 41 20 	mul.f %d2,%d10,%d10
80004170:	6b 02 21 44 	add.f %d4,%d4,%d2
80004174:	6d ff 2d ff 	call 80003fce <invSqrt>
		ax *= recipNorm;
80004178:	4b 29 41 30 	mul.f %d3,%d9,%d2
8000417c:	59 e3 e4 ef 	st.w [%a14]-92,%d3
		ay *= recipNorm;
80004180:	4b 28 41 40 	mul.f %d4,%d8,%d2
80004184:	59 e4 e0 ef 	st.w [%a14]-96,%d4
		az *= recipNorm;   
80004188:	4b 2a 41 20 	mul.f %d2,%d10,%d2
8000418c:	59 e2 dc ef 	st.w [%a14]-100,%d2
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
80004190:	4b dd 41 30 	mul.f %d3,%d13,%d13
80004194:	4b cc 41 40 	mul.f %d4,%d12,%d12
80004198:	6b 04 21 43 	add.f %d4,%d3,%d4
8000419c:	4b bb 41 20 	mul.f %d2,%d11,%d11
800041a0:	6b 02 21 44 	add.f %d4,%d4,%d2
800041a4:	6d ff 15 ff 	call 80003fce <invSqrt>
		mx *= recipNorm;
800041a8:	4b 2d 41 a0 	mul.f %d10,%d13,%d2
		my *= recipNorm;
800041ac:	4b 2c 41 90 	mul.f %d9,%d12,%d2
		mz *= recipNorm;
800041b0:	4b 2b 41 b0 	mul.f %d11,%d11,%d2
		_2q0mx = 2.0f * q0 * mx;
800041b4:	7b 00 00 86 	movh %d8,24576
800041b8:	60 82       	mov.a %a2,%d8
800041ba:	d9 22 5c c0 	lea %a2,[%a2]1820
800041be:	54 22       	ld.w %d2,[%a2]
800041c0:	6b 02 21 22 	add.f %d2,%d2,%d2
800041c4:	4b a2 41 f0 	mul.f %d15,%d2,%d10
		_2q0my = 2.0f * q0 * my;
800041c8:	60 82       	mov.a %a2,%d8
800041ca:	d9 22 5c c0 	lea %a2,[%a2]1820
800041ce:	54 22       	ld.w %d2,[%a2]
800041d0:	6b 02 21 22 	add.f %d2,%d2,%d2
800041d4:	4b 92 41 40 	mul.f %d4,%d2,%d9
		_2q0mz = 2.0f * q0 * mz;
800041d8:	60 82       	mov.a %a2,%d8
800041da:	d9 22 5c c0 	lea %a2,[%a2]1820
800041de:	54 22       	ld.w %d2,[%a2]
800041e0:	6b 02 21 22 	add.f %d2,%d2,%d2
800041e4:	4b b2 41 60 	mul.f %d6,%d2,%d11
		_2q1mx = 2.0f * q1 * mx;
800041e8:	91 00 00 f6 	movh.a %a15,24576
800041ec:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
800041f0:	54 22       	ld.w %d2,[%a2]
800041f2:	6b 02 21 22 	add.f %d2,%d2,%d2
800041f6:	4b a2 41 00 	mul.f %d0,%d2,%d10
		_2q0 = 2.0f * q0;
800041fa:	60 82       	mov.a %a2,%d8
800041fc:	d9 22 5c c0 	lea %a2,[%a2]1820
80004200:	54 22       	ld.w %d2,[%a2]
80004202:	6b 02 21 22 	add.f %d2,%d2,%d2
80004206:	59 e2 f8 ef 	st.w [%a14]-72,%d2
		_2q1 = 2.0f * q1;
8000420a:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
8000420e:	54 22       	ld.w %d2,[%a2]
80004210:	6b 02 21 52 	add.f %d5,%d2,%d2
		_2q2 = 2.0f * q2;
80004214:	91 00 00 c6 	movh.a %a12,24576
80004218:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
8000421c:	54 22       	ld.w %d2,[%a2]
8000421e:	6b 02 21 72 	add.f %d7,%d2,%d2
		_2q3 = 2.0f * q3;
80004222:	91 00 00 d6 	movh.a %a13,24576
80004226:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
8000422a:	54 22       	ld.w %d2,[%a2]
8000422c:	6b 02 21 12 	add.f %d1,%d2,%d2
80004230:	59 e1 f0 ef 	st.w [%a14]-80,%d1
		_2q0q2 = 2.0f * q0 * q2;
80004234:	60 82       	mov.a %a2,%d8
80004236:	d9 22 5c c0 	lea %a2,[%a2]1820
8000423a:	54 23       	ld.w %d3,[%a2]
8000423c:	6b 03 21 33 	add.f %d3,%d3,%d3
80004240:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
80004244:	54 22       	ld.w %d2,[%a2]
80004246:	4b 23 41 c0 	mul.f %d12,%d3,%d2
8000424a:	59 ec d0 ef 	st.w [%a14]-112,%d12
		_2q2q3 = 2.0f * q2 * q3;
8000424e:	54 23       	ld.w %d3,[%a2]
80004250:	6b 03 21 33 	add.f %d3,%d3,%d3
80004254:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
80004258:	54 22       	ld.w %d2,[%a2]
8000425a:	4b 23 41 d0 	mul.f %d13,%d3,%d2
8000425e:	59 ed cc ef 	st.w [%a14]-116,%d13
		q0q0 = q0 * q0;
80004262:	60 82       	mov.a %a2,%d8
80004264:	d9 22 5c c0 	lea %a2,[%a2]1820
80004268:	54 23       	ld.w %d3,[%a2]
8000426a:	60 82       	mov.a %a2,%d8
8000426c:	d9 22 5c c0 	lea %a2,[%a2]1820
80004270:	54 2e       	ld.w %d14,[%a2]
80004272:	4b e3 41 e0 	mul.f %d14,%d3,%d14
		q0q1 = q0 * q1;
80004276:	60 82       	mov.a %a2,%d8
80004278:	d9 22 5c c0 	lea %a2,[%a2]1820
8000427c:	54 23       	ld.w %d3,[%a2]
8000427e:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
80004282:	54 22       	ld.w %d2,[%a2]
80004284:	4b 23 41 c0 	mul.f %d12,%d3,%d2
80004288:	59 ec ec ef 	st.w [%a14]-84,%d12
		q0q2 = q0 * q2;
8000428c:	60 82       	mov.a %a2,%d8
8000428e:	d9 22 5c c0 	lea %a2,[%a2]1820
80004292:	54 23       	ld.w %d3,[%a2]
80004294:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
80004298:	54 22       	ld.w %d2,[%a2]
8000429a:	4b 23 41 d0 	mul.f %d13,%d3,%d2
8000429e:	59 ed e8 ef 	st.w [%a14]-88,%d13
		q0q3 = q0 * q3;
800042a2:	60 82       	mov.a %a2,%d8
800042a4:	d9 22 5c c0 	lea %a2,[%a2]1820
800042a8:	54 23       	ld.w %d3,[%a2]
800042aa:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
800042ae:	54 22       	ld.w %d2,[%a2]
800042b0:	4b 23 41 10 	mul.f %d1,%d3,%d2
800042b4:	59 e1 c8 ef 	st.w [%a14]-120,%d1
		q1q1 = q1 * q1;
800042b8:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
800042bc:	54 23       	ld.w %d3,[%a2]
800042be:	54 22       	ld.w %d2,[%a2]
800042c0:	4b 23 41 10 	mul.f %d1,%d3,%d2
		q1q2 = q1 * q2;
800042c4:	54 23       	ld.w %d3,[%a2]
800042c6:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
800042ca:	54 22       	ld.w %d2,[%a2]
800042cc:	4b 23 41 30 	mul.f %d3,%d3,%d2
800042d0:	59 e3 c0 ef 	st.w [%a14]-128,%d3
		q1q3 = q1 * q3;
800042d4:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
800042d8:	54 23       	ld.w %d3,[%a2]
800042da:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
800042de:	54 22       	ld.w %d2,[%a2]
800042e0:	4b 23 41 20 	mul.f %d2,%d3,%d2
800042e4:	59 e2 c0 ff 	st.w [%a14]-64,%d2
		q2q2 = q2 * q2;
800042e8:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
800042ec:	54 23       	ld.w %d3,[%a2]
800042ee:	54 2d       	ld.w %d13,[%a2]
800042f0:	4b d3 41 d0 	mul.f %d13,%d3,%d13
		q2q3 = q2 * q3;
800042f4:	54 23       	ld.w %d3,[%a2]
800042f6:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
800042fa:	54 22       	ld.w %d2,[%a2]
800042fc:	4b 23 41 20 	mul.f %d2,%d3,%d2
80004300:	59 e2 fc df 	st.w [%a14]-132,%d2
		q3q3 = q3 * q3;
80004304:	54 23       	ld.w %d3,[%a2]
80004306:	54 2c       	ld.w %d12,[%a2]
80004308:	4b c3 41 c0 	mul.f %d12,%d3,%d12
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
8000430c:	4b ea 41 30 	mul.f %d3,%d10,%d14
80004310:	54 22       	ld.w %d2,[%a2]
80004312:	59 e4 d8 ef 	st.w [%a14]-104,%d4
80004316:	4b 42 41 20 	mul.f %d2,%d2,%d4
8000431a:	6b 02 31 33 	sub.f %d3,%d3,%d2
8000431e:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
80004322:	54 22       	ld.w %d2,[%a2]
80004324:	4b 62 41 20 	mul.f %d2,%d2,%d6
80004328:	6b 02 21 33 	add.f %d3,%d3,%d2
8000432c:	4b 1a 41 40 	mul.f %d4,%d10,%d1
80004330:	6b 04 21 43 	add.f %d4,%d3,%d4
80004334:	4b 59 41 30 	mul.f %d3,%d9,%d5
80004338:	54 22       	ld.w %d2,[%a2]
8000433a:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000433e:	6b 02 21 44 	add.f %d4,%d4,%d2
80004342:	59 e5 f4 ef 	st.w [%a14]-76,%d5
80004346:	4b 5b 41 30 	mul.f %d3,%d11,%d5
8000434a:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
8000434e:	54 22       	ld.w %d2,[%a2]
80004350:	4b 23 41 30 	mul.f %d3,%d3,%d2
80004354:	6b 03 21 34 	add.f %d3,%d4,%d3
80004358:	4b da 41 20 	mul.f %d2,%d10,%d13
8000435c:	6b 02 31 33 	sub.f %d3,%d3,%d2
80004360:	4b ca 41 50 	mul.f %d5,%d10,%d12
80004364:	6b 05 31 53 	sub.f %d5,%d3,%d5
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
80004368:	54 23       	ld.w %d3,[%a2]
8000436a:	4b f3 41 30 	mul.f %d3,%d3,%d15
8000436e:	4b e9 41 20 	mul.f %d2,%d9,%d14
80004372:	6b 02 21 33 	add.f %d3,%d3,%d2
80004376:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
8000437a:	54 22       	ld.w %d2,[%a2]
8000437c:	4b 62 41 20 	mul.f %d2,%d2,%d6
80004380:	6b 02 31 33 	sub.f %d3,%d3,%d2
80004384:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
80004388:	54 22       	ld.w %d2,[%a2]
8000438a:	59 e0 d4 ef 	st.w [%a14]-108 <60000d74 <q2>>,%d0
8000438e:	4b 02 41 20 	mul.f %d2,%d2,%d0
80004392:	6b 02 21 33 	add.f %d3,%d3,%d2
80004396:	59 e1 c4 ef 	st.w [%a14]-124,%d1
8000439a:	4b 19 41 20 	mul.f %d2,%d9,%d1
8000439e:	6b 02 31 33 	sub.f %d3,%d3,%d2
800043a2:	4b d9 41 40 	mul.f %d4,%d9,%d13
800043a6:	6b 04 21 43 	add.f %d4,%d3,%d4
800043aa:	59 e7 c4 ff 	st.w [%a14]-60,%d7
800043ae:	4b 7b 41 30 	mul.f %d3,%d11,%d7
800043b2:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
800043b6:	54 22       	ld.w %d2,[%a2]
800043b8:	4b 23 41 20 	mul.f %d2,%d3,%d2
800043bc:	6b 02 21 44 	add.f %d4,%d4,%d2
800043c0:	4b c9 41 20 	mul.f %d2,%d9,%d12
800043c4:	6b 02 31 24 	sub.f %d2,%d4,%d2
		_2bx = sqrt(hx * hx + hy * hy);
800043c8:	4b 55 41 50 	mul.f %d5,%d5,%d5
800043cc:	4b 22 41 20 	mul.f %d2,%d2,%d2
800043d0:	6b 02 21 45 	add.f %d4,%d5,%d2
800043d4:	6d 00 0a 5c 	call 8000fbe8 <sqrtf>
800043d8:	02 20       	mov %d0,%d2
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
800043da:	9b 0f 00 28 	addih %d2,%d15,32768
800043de:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
800043e2:	54 23       	ld.w %d3,[%a2]
800043e4:	4b 32 41 20 	mul.f %d2,%d2,%d3
800043e8:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
800043ec:	54 23       	ld.w %d3,[%a2]
800043ee:	19 e4 d8 ef 	ld.w %d4,[%a14]-104 <60000d78 <q1>>
800043f2:	4b 43 41 30 	mul.f %d3,%d3,%d4
800043f6:	6b 03 21 22 	add.f %d2,%d2,%d3
800043fa:	4b eb 41 e0 	mul.f %d14,%d11,%d14
800043fe:	6b 0e 21 22 	add.f %d2,%d2,%d14
80004402:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
80004406:	54 23       	ld.w %d3,[%a2]
80004408:	19 e4 d4 ef 	ld.w %d4,[%a14]-108 <60000d70 <q3>>
8000440c:	4b 43 41 30 	mul.f %d3,%d3,%d4
80004410:	6b 03 21 22 	add.f %d2,%d2,%d3
80004414:	19 e1 c4 ef 	ld.w %d1,[%a14]-124
80004418:	4b 1b 41 40 	mul.f %d4,%d11,%d1
8000441c:	6b 04 31 42 	sub.f %d4,%d2,%d4
80004420:	19 e6 c4 ff 	ld.w %d6,[%a14]-60
80004424:	4b 69 41 20 	mul.f %d2,%d9,%d6
80004428:	54 23       	ld.w %d3,[%a2]
8000442a:	4b 32 41 20 	mul.f %d2,%d2,%d3
8000442e:	6b 02 21 24 	add.f %d2,%d4,%d2
80004432:	4b db 41 30 	mul.f %d3,%d11,%d13
80004436:	6b 03 31 22 	sub.f %d2,%d2,%d3
8000443a:	4b cb 41 70 	mul.f %d7,%d11,%d12
8000443e:	6b 07 21 72 	add.f %d7,%d2,%d7
		_4bx = 2.0f * _2bx;
80004442:	6b 00 21 e0 	add.f %d14,%d0,%d0
80004446:	60 e5       	mov.a %a5,%d14
		_4bz = 2.0f * _2bz;
80004448:	6b 07 21 e7 	add.f %d14,%d7,%d7
8000444c:	60 e4       	mov.a %a4,%d14
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
8000444e:	9b 06 00 28 	addih %d2,%d6,32768
80004452:	19 ee c0 ff 	ld.w %d14,[%a14]-64
80004456:	6b 0e 21 3e 	add.f %d3,%d14,%d14
8000445a:	19 ef d0 ef 	ld.w %d15,[%a14]-112
8000445e:	6b 0f 31 33 	sub.f %d3,%d3,%d15
80004462:	19 ef e4 ef 	ld.w %d15,[%a14]-92
80004466:	6b 0f 31 f3 	sub.f %d15,%d3,%d15
8000446a:	60 f2       	mov.a %a2,%d15
8000446c:	4b f2 41 20 	mul.f %d2,%d2,%d15
80004470:	19 ef ec ef 	ld.w %d15,[%a14]-84
80004474:	6b 0f 21 3f 	add.f %d3,%d15,%d15
80004478:	19 ef cc ef 	ld.w %d15,[%a14]-116
8000447c:	6b 0f 21 33 	add.f %d3,%d3,%d15
80004480:	19 e4 e0 ef 	ld.w %d4,[%a14]-96
80004484:	6b 04 31 f3 	sub.f %d15,%d3,%d4
80004488:	19 e5 f4 ef 	ld.w %d5,[%a14]-76
8000448c:	4b 5f 41 50 	mul.f %d5,%d15,%d5
80004490:	6b 05 21 52 	add.f %d5,%d2,%d5
80004494:	d9 c3 f4 50 	lea %a3,[%a12]3444 <60000d74 <q2>>
80004498:	54 34       	ld.w %d4,[%a3]
8000449a:	4b 74 41 40 	mul.f %d4,%d4,%d7
8000449e:	7b 00 f0 63 	movh %d6,16128
800044a2:	6b 0d 31 36 	sub.f %d3,%d6,%d13
800044a6:	6b 0c 31 33 	sub.f %d3,%d3,%d12
800044aa:	4b 03 41 20 	mul.f %d2,%d3,%d0
800044ae:	19 ec e8 ef 	ld.w %d12,[%a14]-88
800044b2:	6b 0c 31 3e 	sub.f %d3,%d14,%d12
800044b6:	4b 73 41 30 	mul.f %d3,%d3,%d7
800044ba:	6b 03 21 32 	add.f %d3,%d2,%d3
800044be:	6b 0a 31 e3 	sub.f %d14,%d3,%d10
800044c2:	4b e4 41 40 	mul.f %d4,%d4,%d14
800044c6:	6b 04 31 55 	sub.f %d5,%d5,%d4
800044ca:	9b 00 00 48 	addih %d4,%d0,32768
800044ce:	60 43       	mov.a %a3,%d4
800044d0:	d9 d6 f0 50 	lea %a6,[%a13]3440 <60000d70 <q3>>
800044d4:	54 64       	ld.w %d4,[%a6]
800044d6:	80 3a       	mov.d %d10,%a3
800044d8:	4b 4a 41 40 	mul.f %d4,%d10,%d4
800044dc:	d9 f6 f8 50 	lea %a6,[%a15]3448 <60000d78 <q1>>
800044e0:	54 63       	ld.w %d3,[%a6]
800044e2:	4b 73 41 30 	mul.f %d3,%d3,%d7
800044e6:	6b 03 21 44 	add.f %d4,%d4,%d3
800044ea:	19 e3 c0 ef 	ld.w %d3,[%a14]-128
800044ee:	19 ec c8 ef 	ld.w %d12,[%a14]-120
800044f2:	6b 0c 31 23 	sub.f %d2,%d3,%d12
800044f6:	4b 02 41 20 	mul.f %d2,%d2,%d0
800044fa:	19 ea ec ef 	ld.w %d10,[%a14]-84
800044fe:	19 ec fc df 	ld.w %d12,[%a14]-132
80004502:	6b 0c 21 3a 	add.f %d3,%d10,%d12
80004506:	4b 73 41 30 	mul.f %d3,%d3,%d7
8000450a:	6b 03 21 32 	add.f %d3,%d2,%d3
8000450e:	6b 09 31 c3 	sub.f %d12,%d3,%d9
80004512:	4b c4 41 40 	mul.f %d4,%d4,%d12
80004516:	6b 04 21 55 	add.f %d5,%d5,%d4
8000451a:	d9 c6 f4 50 	lea %a6,[%a12]3444 <60000d74 <q2>>
8000451e:	54 64       	ld.w %d4,[%a6]
80004520:	4b 04 41 40 	mul.f %d4,%d4,%d0
80004524:	19 e9 e8 ef 	ld.w %d9,[%a14]-88
80004528:	19 e3 c0 ff 	ld.w %d3,[%a14]-64
8000452c:	6b 03 21 29 	add.f %d2,%d9,%d3
80004530:	4b 02 41 20 	mul.f %d2,%d2,%d0
80004534:	02 1a       	mov %d10,%d1
80004536:	6b 01 31 36 	sub.f %d3,%d6,%d1
8000453a:	6b 0d 31 33 	sub.f %d3,%d3,%d13
8000453e:	4b 73 41 30 	mul.f %d3,%d3,%d7
80004542:	6b 03 21 32 	add.f %d3,%d2,%d3
80004546:	6b 0b 31 13 	sub.f %d1,%d3,%d11
8000454a:	4b 14 41 40 	mul.f %d4,%d4,%d1
8000454e:	6b 04 21 b5 	add.f %d11,%d5,%d4
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
80004552:	80 29       	mov.d %d9,%a2
80004554:	19 e4 f0 ef 	ld.w %d4,[%a14]-80
80004558:	4b 49 41 20 	mul.f %d2,%d9,%d4
8000455c:	19 e3 f8 ef 	ld.w %d3,[%a14]-72
80004560:	4b 3f 41 50 	mul.f %d5,%d15,%d3
80004564:	6b 05 21 52 	add.f %d5,%d2,%d5
80004568:	d9 f6 f8 50 	lea %a6,[%a15]3448 <60000d78 <q1>>
8000456c:	54 64       	ld.w %d4,[%a6]
8000456e:	7b 00 08 94 	movh %d9,16512
80004572:	4b 94 41 40 	mul.f %d4,%d4,%d9
80004576:	6b 0a 21 2a 	add.f %d2,%d10,%d10
8000457a:	7b 00 f8 33 	movh %d3,16256
8000457e:	6b 02 31 33 	sub.f %d3,%d3,%d2
80004582:	6b 0d 21 dd 	add.f %d13,%d13,%d13
80004586:	6b 0d 31 33 	sub.f %d3,%d3,%d13
8000458a:	19 ea dc ef 	ld.w %d10,[%a14]-100
8000458e:	6b 0a 31 63 	sub.f %d6,%d3,%d10
80004592:	4b 64 41 40 	mul.f %d4,%d4,%d6
80004596:	6b 04 31 45 	sub.f %d4,%d5,%d4
8000459a:	d9 d6 f0 50 	lea %a6,[%a13]3440 <60000d70 <q3>>
8000459e:	54 63       	ld.w %d3,[%a6]
800045a0:	4b 73 41 30 	mul.f %d3,%d3,%d7
800045a4:	4b 3e 41 30 	mul.f %d3,%d14,%d3
800045a8:	6b 03 21 44 	add.f %d4,%d4,%d3
800045ac:	d9 c6 f4 50 	lea %a6,[%a12]3444 <60000d74 <q2>>
800045b0:	54 62       	ld.w %d2,[%a6]
800045b2:	4b 02 41 20 	mul.f %d2,%d2,%d0
800045b6:	60 86       	mov.a %a6,%d8
800045b8:	d9 66 5c c0 	lea %a6,[%a6]1820
800045bc:	54 63       	ld.w %d3,[%a6]
800045be:	4b 73 41 30 	mul.f %d3,%d3,%d7
800045c2:	6b 03 21 32 	add.f %d3,%d2,%d3
800045c6:	4b 3c 41 30 	mul.f %d3,%d12,%d3
800045ca:	6b 03 21 44 	add.f %d4,%d4,%d3
800045ce:	d9 d6 f0 50 	lea %a6,[%a13]3440 <60000d70 <q3>>
800045d2:	54 62       	ld.w %d2,[%a6]
800045d4:	4b 02 41 20 	mul.f %d2,%d2,%d0
800045d8:	d9 f6 f8 50 	lea %a6,[%a15]3448 <60000d78 <q1>>
800045dc:	54 63       	ld.w %d3,[%a6]
800045de:	80 4a       	mov.d %d10,%a4
800045e0:	4b a3 41 30 	mul.f %d3,%d3,%d10
800045e4:	6b 03 31 32 	sub.f %d3,%d2,%d3
800045e8:	4b 31 41 30 	mul.f %d3,%d1,%d3
800045ec:	6b 03 21 a4 	add.f %d10,%d4,%d3
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
800045f0:	19 e3 f8 ef 	ld.w %d3,[%a14]-72
800045f4:	9b 03 00 28 	addih %d2,%d3,32768
800045f8:	80 23       	mov.d %d3,%a2
800045fa:	4b 23 41 20 	mul.f %d2,%d3,%d2
800045fe:	19 e4 f0 ef 	ld.w %d4,[%a14]-80
80004602:	4b 4f 41 30 	mul.f %d3,%d15,%d4
80004606:	6b 03 21 22 	add.f %d2,%d2,%d3
8000460a:	d9 c6 f4 50 	lea %a6,[%a12]3444 <60000d74 <q2>>
8000460e:	54 63       	ld.w %d3,[%a6]
80004610:	4b 93 41 30 	mul.f %d3,%d3,%d9
80004614:	4b 36 41 30 	mul.f %d3,%d6,%d3
80004618:	6b 03 31 22 	sub.f %d2,%d2,%d3
8000461c:	80 53       	mov.d %d3,%a5
8000461e:	9b 03 00 68 	addih %d6,%d3,32768
80004622:	54 64       	ld.w %d4,[%a6]
80004624:	4b 46 41 40 	mul.f %d4,%d6,%d4
80004628:	60 85       	mov.a %a5,%d8
8000462a:	d9 55 5c c0 	lea %a5,[%a5]1820
8000462e:	54 53       	ld.w %d3,[%a5]
80004630:	4b 73 41 30 	mul.f %d3,%d3,%d7
80004634:	6b 03 31 34 	sub.f %d3,%d4,%d3
80004638:	4b 3e 41 30 	mul.f %d3,%d14,%d3
8000463c:	6b 03 21 22 	add.f %d2,%d2,%d3
80004640:	d9 f5 f8 50 	lea %a5,[%a15]3448 <60000d78 <q1>>
80004644:	54 54       	ld.w %d4,[%a5]
80004646:	4b 04 41 40 	mul.f %d4,%d4,%d0
8000464a:	d9 d5 f0 50 	lea %a5,[%a13]3440 <60000d70 <q3>>
8000464e:	54 53       	ld.w %d3,[%a5]
80004650:	4b 73 41 30 	mul.f %d3,%d3,%d7
80004654:	6b 03 21 34 	add.f %d3,%d4,%d3
80004658:	4b 3c 41 30 	mul.f %d3,%d12,%d3
8000465c:	6b 03 21 22 	add.f %d2,%d2,%d3
80004660:	60 85       	mov.a %a5,%d8
80004662:	d9 55 5c c0 	lea %a5,[%a5]1820
80004666:	54 55       	ld.w %d5,[%a5]
80004668:	4b 05 41 50 	mul.f %d5,%d5,%d0
8000466c:	54 63       	ld.w %d3,[%a6]
8000466e:	80 44       	mov.d %d4,%a4
80004670:	4b 43 41 30 	mul.f %d3,%d3,%d4
80004674:	6b 03 31 35 	sub.f %d3,%d5,%d3
80004678:	4b 31 41 30 	mul.f %d3,%d1,%d3
8000467c:	6b 03 21 92 	add.f %d9,%d2,%d3
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
80004680:	80 23       	mov.d %d3,%a2
80004682:	19 e5 f4 ef 	ld.w %d5,[%a14]-76
80004686:	4b 53 41 40 	mul.f %d4,%d3,%d5
8000468a:	19 e2 c4 ff 	ld.w %d2,[%a14]-60
8000468e:	4b 2f 41 f0 	mul.f %d15,%d15,%d2
80004692:	6b 0f 21 44 	add.f %d4,%d4,%d15
80004696:	d9 d2 f0 50 	lea %a2,[%a13]3440 <60000d70 <q3>>
8000469a:	54 23       	ld.w %d3,[%a2]
8000469c:	4b 36 41 60 	mul.f %d6,%d6,%d3
800046a0:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
800046a4:	54 23       	ld.w %d3,[%a2]
800046a6:	4b 73 41 30 	mul.f %d3,%d3,%d7
800046aa:	6b 03 21 36 	add.f %d3,%d6,%d3
800046ae:	4b 3e 41 30 	mul.f %d3,%d14,%d3
800046b2:	6b 03 21 44 	add.f %d4,%d4,%d3
800046b6:	60 82       	mov.a %a2,%d8
800046b8:	d9 22 5c c0 	lea %a2,[%a2]1820
800046bc:	54 25       	ld.w %d5,[%a2]
800046be:	80 32       	mov.d %d2,%a3
800046c0:	4b 52 41 50 	mul.f %d5,%d2,%d5
800046c4:	54 63       	ld.w %d3,[%a6]
800046c6:	4b 73 41 30 	mul.f %d3,%d3,%d7
800046ca:	6b 03 21 35 	add.f %d3,%d5,%d3
800046ce:	4b 3c 41 30 	mul.f %d3,%d12,%d3
800046d2:	6b 03 21 34 	add.f %d3,%d4,%d3
800046d6:	d9 f2 f8 50 	lea %a2,[%a15]3448 <60000d78 <q1>>
800046da:	54 22       	ld.w %d2,[%a2]
800046dc:	4b 02 41 20 	mul.f %d2,%d2,%d0
800046e0:	4b 21 41 20 	mul.f %d2,%d1,%d2
800046e4:	6b 02 21 83 	add.f %d8,%d3,%d2
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
800046e8:	4b bb 41 30 	mul.f %d3,%d11,%d11
800046ec:	4b aa 41 20 	mul.f %d2,%d10,%d10
800046f0:	6b 02 21 33 	add.f %d3,%d3,%d2
800046f4:	4b 99 41 40 	mul.f %d4,%d9,%d9
800046f8:	6b 04 21 43 	add.f %d4,%d3,%d4
800046fc:	4b 88 41 20 	mul.f %d2,%d8,%d8
80004700:	6b 02 21 44 	add.f %d4,%d4,%d2
80004704:	6d ff 65 fc 	call 80003fce <invSqrt>
		s0 *= recipNorm;
80004708:	4b 2b 41 50 	mul.f %d5,%d11,%d2
		s1 *= recipNorm;
8000470c:	4b 2a 41 40 	mul.f %d4,%d10,%d2
		s2 *= recipNorm;
80004710:	4b 29 41 30 	mul.f %d3,%d9,%d2
		s3 *= recipNorm;
80004714:	4b 28 41 20 	mul.f %d2,%d8,%d2
		qDot1 -= beta * s0;
80004718:	91 00 00 36 	movh.a %a3,24576
8000471c:	d9 32 60 c0 	lea %a2,[%a3]1824 <60000720 <beta>>
80004720:	54 26       	ld.w %d6,[%a2]
80004722:	4b 56 41 50 	mul.f %d5,%d6,%d5
80004726:	19 e6 d4 ff 	ld.w %d6,[%a14]-44
8000472a:	6b 05 31 56 	sub.f %d5,%d6,%d5
8000472e:	59 e5 d4 ff 	st.w [%a14]-44,%d5
		qDot2 -= beta * s1;
80004732:	54 25       	ld.w %d5,[%a2]
80004734:	4b 45 41 40 	mul.f %d4,%d5,%d4
80004738:	19 e5 d0 ff 	ld.w %d5,[%a14]-48
8000473c:	6b 04 31 45 	sub.f %d4,%d5,%d4
80004740:	59 e4 d0 ff 	st.w [%a14]-48,%d4
		qDot3 -= beta * s2;
80004744:	54 24       	ld.w %d4,[%a2]
80004746:	4b 34 41 30 	mul.f %d3,%d4,%d3
8000474a:	19 e4 cc ff 	ld.w %d4,[%a14]-52
8000474e:	6b 03 31 34 	sub.f %d3,%d4,%d3
80004752:	59 e3 cc ff 	st.w [%a14]-52,%d3
		qDot4 -= beta * s3;
80004756:	54 23       	ld.w %d3,[%a2]
80004758:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000475c:	19 e3 c8 ff 	ld.w %d3,[%a14]-56
80004760:	6b 02 31 23 	sub.f %d2,%d3,%d2
80004764:	59 e2 c8 ff 	st.w [%a14]-56,%d2
	q0 += qDot1 * (1.0f / sampleFreq);
80004768:	7b 00 b0 23 	movh %d2,15104
8000476c:	19 e3 d4 ff 	ld.w %d3,[%a14]-44
80004770:	4b 23 41 40 	mul.f %d4,%d3,%d2
80004774:	91 00 00 f6 	movh.a %a15,24576
80004778:	d9 f2 5c c0 	lea %a2,[%a15]1820 <6000071c <q0>>
8000477c:	54 23       	ld.w %d3,[%a2]
8000477e:	6b 03 21 34 	add.f %d3,%d4,%d3
80004782:	74 23       	st.w [%a2],%d3
	q1 += qDot2 * (1.0f / sampleFreq);
80004784:	19 e3 d0 ff 	ld.w %d3,[%a14]-48
80004788:	4b 23 41 40 	mul.f %d4,%d3,%d2
8000478c:	91 00 00 d6 	movh.a %a13,24576
80004790:	d9 d2 f8 50 	lea %a2,[%a13]3448 <60000d78 <q1>>
80004794:	54 23       	ld.w %d3,[%a2]
80004796:	6b 03 21 34 	add.f %d3,%d4,%d3
8000479a:	74 23       	st.w [%a2],%d3
	q2 += qDot3 * (1.0f / sampleFreq);
8000479c:	19 e3 cc ff 	ld.w %d3,[%a14]-52
800047a0:	4b 23 41 40 	mul.f %d4,%d3,%d2
800047a4:	91 00 00 c6 	movh.a %a12,24576
800047a8:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
800047ac:	54 23       	ld.w %d3,[%a2]
800047ae:	6b 03 21 34 	add.f %d3,%d4,%d3
800047b2:	74 23       	st.w [%a2],%d3
	q3 += qDot4 * (1.0f / sampleFreq);
800047b4:	19 e3 c8 ff 	ld.w %d3,[%a14]-56
800047b8:	4b 23 41 30 	mul.f %d3,%d3,%d2
800047bc:	7b 00 00 86 	movh %d8,24576
800047c0:	60 82       	mov.a %a2,%d8
800047c2:	d9 22 f0 50 	lea %a2,[%a2]3440
800047c6:	54 22       	ld.w %d2,[%a2]
800047c8:	6b 02 21 23 	add.f %d2,%d3,%d2
800047cc:	60 82       	mov.a %a2,%d8
800047ce:	d9 22 f0 50 	lea %a2,[%a2]3440
800047d2:	74 22       	st.w [%a2],%d2
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
800047d4:	d9 f2 5c c0 	lea %a2,[%a15]1820 <6000071c <q0>>
800047d8:	54 23       	ld.w %d3,[%a2]
800047da:	54 22       	ld.w %d2,[%a2]
800047dc:	4b 23 41 30 	mul.f %d3,%d3,%d2
800047e0:	d9 d2 f8 50 	lea %a2,[%a13]3448 <60000d78 <q1>>
800047e4:	54 24       	ld.w %d4,[%a2]
800047e6:	54 22       	ld.w %d2,[%a2]
800047e8:	4b 24 41 20 	mul.f %d2,%d4,%d2
800047ec:	6b 02 21 33 	add.f %d3,%d3,%d2
800047f0:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
800047f4:	54 24       	ld.w %d4,[%a2]
800047f6:	54 22       	ld.w %d2,[%a2]
800047f8:	4b 24 41 40 	mul.f %d4,%d4,%d2
800047fc:	6b 04 21 43 	add.f %d4,%d3,%d4
80004800:	60 82       	mov.a %a2,%d8
80004802:	d9 22 f0 50 	lea %a2,[%a2]3440
80004806:	54 23       	ld.w %d3,[%a2]
80004808:	60 82       	mov.a %a2,%d8
8000480a:	d9 22 f0 50 	lea %a2,[%a2]3440
8000480e:	54 22       	ld.w %d2,[%a2]
80004810:	4b 23 41 20 	mul.f %d2,%d3,%d2
80004814:	6b 02 21 44 	add.f %d4,%d4,%d2
80004818:	6d ff db fb 	call 80003fce <invSqrt>
	q0 *= recipNorm;
8000481c:	d9 f2 5c c0 	lea %a2,[%a15]1820 <6000071c <q0>>
80004820:	54 23       	ld.w %d3,[%a2]
80004822:	4b 23 41 30 	mul.f %d3,%d3,%d2
80004826:	74 23       	st.w [%a2],%d3
	q1 *= recipNorm;
80004828:	d9 d2 f8 50 	lea %a2,[%a13]3448 <60000d78 <q1>>
8000482c:	54 23       	ld.w %d3,[%a2]
8000482e:	4b 23 41 30 	mul.f %d3,%d3,%d2
80004832:	74 23       	st.w [%a2],%d3
	q2 *= recipNorm;
80004834:	d9 c2 f4 50 	lea %a2,[%a12]3444 <60000d74 <q2>>
80004838:	54 23       	ld.w %d3,[%a2]
8000483a:	4b 23 41 30 	mul.f %d3,%d3,%d2
8000483e:	74 23       	st.w [%a2],%d3
	q3 *= recipNorm;
80004840:	60 82       	mov.a %a2,%d8
80004842:	d9 22 f0 50 	lea %a2,[%a2]3440
80004846:	54 23       	ld.w %d3,[%a2]
80004848:	4b 23 41 20 	mul.f %d2,%d3,%d2
8000484c:	60 82       	mov.a %a2,%d8
8000484e:	d9 22 f0 50 	lea %a2,[%a2]3440
80004852:	74 22       	st.w [%a2],%d2
	Euler noweuler={3,3,3};
80004854:	91 00 00 36 	movh.a %a3,24576
80004858:	d9 33 38 00 	lea %a3,[%a3]56 <60000038 <LCF_DSPR1_START+0x38>>
8000485c:	99 e2 fc ef 	ld.a %a2,[%a14]-68 <60000038 <LCF_DSPR1_START+0x38>>
80004860:	40 25       	mov.aa %a5,%a2
80004862:	09 34 48 01 	ld.d %e4,[%a3+]8 <60000008 <LCF_DSPR1_START+0x8>>
80004866:	89 54 48 01 	st.d [%a5+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
8000486a:	44 34       	ld.w %d4,[%a3+]
8000486c:	64 54       	st.w [%a5+],%d4
	noweuler.roll = q0;//GetEulerAngles();
8000486e:	d9 f3 5c c0 	lea %a3,[%a15]1820 <6000071c <q0>>
80004872:	54 32       	ld.w %d2,[%a3]
80004874:	74 22       	st.w [%a2],%d2
	noweuler.pitch = q1;
80004876:	d9 d3 f8 50 	lea %a3,[%a13]3448 <60000d78 <q1>>
8000487a:	54 32       	ld.w %d2,[%a3]
8000487c:	59 22 04 00 	st.w [%a2]4 <60000d78 <q1>>,%d2
	noweuler.yaw = q2;
80004880:	d9 c3 f4 50 	lea %a3,[%a12]3444 <60000d74 <q2>>
80004884:	54 32       	ld.w %d2,[%a3]
80004886:	59 22 08 00 	st.w [%a2]8 <60000d74 <q2>>,%d2
}
8000488a:	00 90       	ret 

8000488c <delay>:
    endTime =  MODULE_STM0.TIM0.U;
    pulseDuration= endTime - startTime;
    distance = (pulseDuration * 0.0343) /100/ 2;
    return distance;
}
void delay(uint32 us){
8000488c:	40 ae       	mov.aa %a14,%sp
8000488e:	02 4a       	mov %d10,%d4
    uint32 startTime = MODULE_STM0.TIM0.U;
80004890:	85 f9 10 00 	ld.w %d9,f0000010 <_SMALL_DATA4_+0x5fff8010>
    while((MODULE_STM0.TIM0.U - startTime) < (us * (IfxStm_getFrequency(&MODULE_STM0) / 1000000)));
80004894:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80004898:	0b 92 80 80 	sub %d8,%d2,%d9
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
8000489c:	6d ff 93 e9 	call 80001bc2 <IfxScuCcu_getSourceFrequency>
800048a0:	91 30 00 2f 	movh.a %a2,61443
800048a4:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800048a8:	54 23       	ld.w %d3,[%a2]
800048aa:	37 03 64 34 	extr.u %d3,%d3,8,4
800048ae:	4b 03 41 31 	itof %d3,%d3
800048b2:	4b 32 51 20 	div.f %d2,%d2,%d3
800048b6:	7b 40 97 34 	movh %d3,18804
800048ba:	1b 03 40 32 	addi %d3,%d3,9216
800048be:	4b 32 51 20 	div.f %d2,%d2,%d3
800048c2:	4b 0a 61 31 	utof %d3,%d10
800048c6:	4b 23 41 30 	mul.f %d3,%d3,%d2
800048ca:	4b 08 61 21 	utof %d2,%d8
800048ce:	4b 32 01 20 	cmp.f %d2,%d2,%d3
800048d2:	6f 02 e1 ff 	jnz.t %d2,0,80004894 <delay+0x8>
}
800048d6:	00 90       	ret 

800048d8 <IfxI2c_configureAsMaster>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxI2c_configureAsMaster(Ifx_I2C *i2c)
{
800048d8:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
{
    i2c->RUNCTRL.U = 0;
800048da:	82 03       	mov %d3,0
800048dc:	59 43 10 00 	st.w [%a4]16,%d3
    // enter config Mode
    IfxI2c_stop(i2c);

    i2c->ADDRCFG.U      = 0;
800048e0:	d9 42 20 00 	lea %a2,[%a4]32
800048e4:	59 43 20 00 	st.w [%a4]32,%d3
    i2c->ADDRCFG.B.MnS  = 1; // master mode
800048e8:	54 22       	ld.w %d2,[%a2]
800048ea:	b7 12 81 29 	insert %d2,%d2,1,19,1
800048ee:	74 22       	st.w [%a2],%d2
    i2c->ADDRCFG.B.SONA = 0; // don't release the bus on NACK
800048f0:	54 22       	ld.w %d2,[%a2]
800048f2:	b7 02 01 2a 	insert %d2,%d2,0,20,1
800048f6:	74 22       	st.w [%a2],%d2
    i2c->ADDRCFG.B.SOPE = 0; // after transfer go into master restart state
800048f8:	54 22       	ld.w %d2,[%a2]
800048fa:	b7 02 81 2a 	insert %d2,%d2,0,21,1
800048fe:	74 22       	st.w [%a2],%d2
    i2c->ADDRCFG.B.TBAM = 0; // 7 bit address mode
80004900:	54 22       	ld.w %d2,[%a2]
80004902:	b7 02 01 28 	insert %d2,%d2,0,16,1
80004906:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.U      = 0;
80004908:	d9 42 28 00 	lea %a2,[%a4]40
8000490c:	59 43 28 00 	st.w [%a4]40,%d3
    i2c->FIFOCFG.B.TXFC = 1; // FIFO as flow controller
80004910:	54 22       	ld.w %d2,[%a2]
80004912:	b7 12 81 28 	insert %d2,%d2,1,17,1
80004916:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.RXFC = 1; // FIFO as flow controller
80004918:	54 22       	ld.w %d2,[%a2]
8000491a:	b7 12 01 28 	insert %d2,%d2,1,16,1
8000491e:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.TXBS = 0; // Burst size 1 word
80004920:	54 22       	ld.w %d2,[%a2]
80004922:	8f 02 c3 21 	andn %d2,%d2,48
80004926:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.RXBS = 0; // Burst size 1 word
80004928:	54 22       	ld.w %d2,[%a2]
8000492a:	8f 32 c0 21 	andn %d2,%d2,3
8000492e:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.TXFA = 0; // fifo is byte aligned
80004930:	54 22       	ld.w %d2,[%a2]
80004932:	b7 02 02 26 	insert %d2,%d2,0,12,2
80004936:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.RXFA = 0; // fifo is byte aligned
80004938:	54 22       	ld.w %d2,[%a2]
8000493a:	b7 02 02 24 	insert %d2,%d2,0,8,2
8000493e:	74 22       	st.w [%a2],%d2
}
80004940:	00 90       	ret 

80004942 <IfxI2c_disableModule>:


void IfxI2c_disableModule(Ifx_I2C *i2c)
{
80004942:	40 ae       	mov.aa %a14,%sp
80004944:	80 48       	mov.d %d8,%a4
    uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
80004946:	6d ff 37 ed 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
8000494a:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(pwd);
8000494c:	02 24       	mov %d4,%d2
8000494e:	6d ff ca eb 	call 800020e2 <IfxScuWdt_clearCpuEndinit>

    i2c->CLC.B.DISR = 1;
80004952:	60 82       	mov.a %a2,%d8
80004954:	11 12 00 20 	addih.a %a2,%a2,1
80004958:	54 23       	ld.w %d3,[%a2]
8000495a:	b7 13 01 30 	insert %d3,%d3,1,0,1
8000495e:	74 23       	st.w [%a2],%d3

    while (i2c->CLC.B.DISS == 0)
80004960:	60 82       	mov.a %a2,%d8
80004962:	11 12 00 20 	addih.a %a2,%a2,1
80004966:	54 23       	ld.w %d3,[%a2]
80004968:	6f 13 fc 7f 	jz.t %d3,1,80004960 <IfxI2c_disableModule+0x1e>
    {}

    IfxScuWdt_setCpuEndinit(pwd);
8000496c:	02 94       	mov %d4,%d9
8000496e:	6d ff 40 ed 	call 800023ee <IfxScuWdt_setCpuEndinit>
}
80004972:	00 90       	ret 

80004974 <IfxI2c_enableModule>:
    IfxSrc_enable(src);
}


void IfxI2c_enableModule(Ifx_I2C *i2c)
{
80004974:	40 ae       	mov.aa %a14,%sp
80004976:	40 4c       	mov.aa %a12,%a4
    uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
80004978:	6d ff 1e ed 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
8000497c:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(pwd);
8000497e:	02 24       	mov %d4,%d2
80004980:	6d ff b1 eb 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
    i2c->CLC.B.DISR = 0U;
80004984:	11 1c 00 20 	addih.a %a2,%a12,1
80004988:	54 23       	ld.w %d3,[%a2]
8000498a:	8f 13 c0 31 	andn %d3,%d3,1
8000498e:	74 23       	st.w [%a2],%d3

    while (i2c->CLC.B.DISS == 1U)
80004990:	11 1c 00 20 	addih.a %a2,%a12,1
80004994:	54 23       	ld.w %d3,[%a2]
80004996:	6f 13 fd ff 	jnz.t %d3,1,80004990 <IfxI2c_enableModule+0x1c>
    {}

    i2c->CLC1.B.RMC = 1U;
8000499a:	54 c3       	ld.w %d3,[%a12]
8000499c:	b7 13 08 34 	insert %d3,%d3,1,8,8
800049a0:	74 c3       	st.w [%a12],%d3

    while (i2c->CLC1.B.RMC != 1U)
800049a2:	54 c3       	ld.w %d3,[%a12]
800049a4:	37 03 68 34 	extr.u %d3,%d3,8,8
800049a8:	df 13 fd ff 	jne %d3,1,800049a2 <IfxI2c_enableModule+0x2e>
    {}

    i2c->CLC1.B.DISR = 0U;
800049ac:	54 c3       	ld.w %d3,[%a12]
800049ae:	8f 13 c0 31 	andn %d3,%d3,1
800049b2:	74 c3       	st.w [%a12],%d3

    while (i2c->CLC1.B.DISS == 1U)
800049b4:	54 c3       	ld.w %d3,[%a12]
800049b6:	6f 13 ff ff 	jnz.t %d3,1,800049b4 <IfxI2c_enableModule+0x40>
    {}

    // disable all interrupts
    i2c->ERRIRQSM.U = 0x00;
800049ba:	82 02       	mov %d2,0
800049bc:	59 c2 20 10 	st.w [%a12]96,%d2
    i2c->PIRQSM.U   = 0x00;
800049c0:	59 c2 30 10 	st.w [%a12]112,%d2
    i2c->IMSC.U     = 0x00;
800049c4:	59 c2 04 20 	st.w [%a12]132,%d2

    IfxScuWdt_setCpuEndinit(pwd);
800049c8:	02 84       	mov %d4,%d8
800049ca:	6d ff 12 ed 	call 800023ee <IfxScuWdt_setCpuEndinit>
}
800049ce:	00 90       	ret 

800049d0 <IfxI2c_getBaudrate>:
    return module;
}


float32 IfxI2c_getBaudrate(Ifx_I2C *i2c)
{
800049d0:	40 ae       	mov.aa %a14,%sp
    uint8   inc     = i2c->FDIVCFG.B.INC;
800049d2:	d9 42 18 00 	lea %a2,[%a4]24
800049d6:	19 48 18 00 	ld.w %d8,[%a4]24
800049da:	37 08 68 88 	extr.u %d8,%d8,16,8
    uint16  dec     = i2c->FDIVCFG.B.DEC;
800049de:	54 29       	ld.w %d9,[%a2]
800049e0:	b7 09 95 95 	insert %d9,%d9,0,11,21
    uint8   rmc     = i2c->CLC1.B.RMC;
800049e4:	54 4a       	ld.w %d10,[%a4]
800049e6:	37 0a 68 a4 	extr.u %d10,%d10,8,8
    float32 fKernel = IfxScuCcu_getBaud1Frequency();
800049ea:	6d ff 63 e9 	call 80001cb0 <IfxScuCcu_getBaud1Frequency>

    return (fKernel / rmc) / ((2 * dec / inc) + 3);
800049ee:	4b 0a 41 31 	itof %d3,%d10
800049f2:	4b 32 51 30 	div.f %d3,%d2,%d3
800049f6:	06 19       	sh %d9,1
800049f8:	4b 89 01 82 	div %e8,%d9,%d8
800049fc:	1b 38 00 20 	addi %d2,%d8,3
80004a00:	4b 02 41 21 	itof %d2,%d2
}
80004a04:	4b 23 51 20 	div.f %d2,%d3,%d2
80004a08:	00 90       	ret 

80004a0a <IfxI2c_initSclSdaPin>:
    return result;
}


void IfxI2c_initSclSdaPin(const IfxI2c_Scl_InOut *scl, const IfxI2c_Sda_InOut *sda, IfxPort_PadDriver padDriver)
{
80004a0a:	40 ae       	mov.aa %a14,%sp
80004a0c:	40 4c       	mov.aa %a12,%a4
80004a0e:	40 5d       	mov.aa %a13,%a5
80004a10:	02 48       	mov %d8,%d4
    IfxPort_OutputMode mode = (IfxPort_OutputMode)IfxPort_Mode_outputOpenDrainGeneral;
    IfxPort_setPinModeOutput(scl->pin.port, scl->pin.pinIndex, mode, scl->outSelect);
80004a12:	19 45 10 00 	ld.w %d5,[%a4]16
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80004a16:	8f 05 4c 51 	or %d5,%d5,192
80004a1a:	39 44 08 00 	ld.bu %d4,[%a4]8
80004a1e:	99 44 04 00 	ld.a %a4,[%a4]4
80004a22:	6d ff 33 ed 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(sda->pin.port, sda->pin.pinIndex, mode, sda->outSelect);
80004a26:	19 d5 10 00 	ld.w %d5,[%a13]16
80004a2a:	8f 05 4c 51 	or %d5,%d5,192
80004a2e:	39 d4 08 00 	ld.bu %d4,[%a13]8
80004a32:	99 d4 04 00 	ld.a %a4,[%a13]4
80004a36:	6d ff 29 ed 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(scl->pin.port, scl->pin.pinIndex, padDriver);
80004a3a:	02 85       	mov %d5,%d8
80004a3c:	39 c4 08 00 	ld.bu %d4,[%a12]8
80004a40:	99 c4 04 00 	ld.a %a4,[%a12]4
80004a44:	6d ff 59 ed 	call 800024f6 <IfxPort_setPinPadDriver>
    IfxPort_setPinPadDriver(sda->pin.port, sda->pin.pinIndex, padDriver);
80004a48:	02 85       	mov %d5,%d8
80004a4a:	39 d4 08 00 	ld.bu %d4,[%a13]8
80004a4e:	99 d4 04 00 	ld.a %a4,[%a13]4
80004a52:	6d ff 52 ed 	call 800024f6 <IfxPort_setPinPadDriver>
    IfxI2c_setPinSelection(scl->module, (IfxI2c_PinSelect)scl->inSelect); // note: uses the same PISEL register like SDA
80004a56:	54 c2       	ld.w %d2,[%a12]
80004a58:	19 c3 0c 00 	ld.w %d3,[%a12]12
    i2c->GPCTL.B.PISEL = pisel;
80004a5c:	7b 10 00 40 	movh %d4,1
80004a60:	1b 84 00 40 	addi %d4,%d4,8
80004a64:	60 22       	mov.a %a2,%d2
80004a66:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80004a6a:	54 22       	ld.w %d2,[%a2]
80004a6c:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80004a70:	74 22       	st.w [%a2],%d2
}
80004a72:	00 90       	ret 

80004a74 <IfxI2c_releaseBus>:


void IfxI2c_releaseBus(Ifx_I2C *i2c)
{
80004a74:	40 ae       	mov.aa %a14,%sp
    // only set the set end of transmisson bit if bus is not free
    if (i2c->BUSSTAT.B.BS != IfxI2c_BusStatus_idle)
80004a76:	19 42 24 00 	ld.w %d2,[%a4]36
80004a7a:	8f 32 00 21 	and %d2,%d2,3
80004a7e:	df 02 11 00 	jeq %d2,0,80004aa0 <IfxI2c_releaseBus+0x2c>
    {
        i2c->ENDDCTRL.B.SETEND = 1;
80004a82:	d9 42 14 00 	lea %a2,[%a4]20
80004a86:	19 42 14 00 	ld.w %d2,[%a4]20
80004a8a:	b7 12 81 20 	insert %d2,%d2,1,1,1
80004a8e:	74 22       	st.w [%a2],%d2
    return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
80004a90:	19 42 34 10 	ld.w %d2,[%a4]116
80004a94:	6f 52 fe 7f 	jz.t %d2,5,80004a90 <IfxI2c_releaseBus+0x1c>
    i2c->PIRQSC.U = (1 << source);
80004a98:	3b 00 02 20 	mov %d2,32
80004a9c:	59 42 38 10 	st.w [%a4]120,%d2
        while (IfxI2c_getProtocolInterruptSourceStatus(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd) == FALSE)
        {}

        IfxI2c_clearProtocolInterruptSource(i2c, IfxI2c_ProtocolInterruptSource_transmissionEnd);
    }
}
80004aa0:	00 90       	ret 

80004aa2 <IfxI2c_setBaudrate>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxI2c_setBaudrate(Ifx_I2C *i2c, float32 baudrate)
{
80004aa2:	40 ae       	mov.aa %a14,%sp
80004aa4:	40 4c       	mov.aa %a12,%a4
80004aa6:	02 48       	mov %d8,%d4
    float32 fKernel = IfxScuCcu_getBaud1Frequency();
80004aa8:	6d ff 04 e9 	call 80001cb0 <IfxScuCcu_getBaud1Frequency>
    uint8   rmc     = i2c->CLC1.B.RMC;
80004aac:	54 c3       	ld.w %d3,[%a12]
80004aae:	37 03 68 34 	extr.u %d3,%d3,8,8
    float32 dec;
    dec = (((fKernel / rmc) / baudrate) - 3) / 2;     // always: Inc = 1
80004ab2:	4b 03 41 31 	itof %d3,%d3
80004ab6:	4b 32 51 20 	div.f %d2,%d2,%d3
80004aba:	4b 82 51 40 	div.f %d4,%d2,%d8
80004abe:	7b 00 04 24 	movh %d2,16448
80004ac2:	6b 02 31 44 	sub.f %d4,%d4,%d2
80004ac6:	7b 00 f0 83 	movh %d8,16128
80004aca:	4b 84 41 80 	mul.f %d8,%d4,%d8

    // dec:inc must be at least 6
    if (dec < 6)
80004ace:	7b 00 0c 24 	movh %d2,16576
80004ad2:	4b 28 01 20 	cmp.f %d2,%d8,%d2
80004ad6:	6f 02 10 80 	jnz.t %d2,0,80004af6 <IfxI2c_setBaudrate+0x54>
    {
        dec = 6;
    }
    else if (dec > (1 << IFX_I2C_FDIVCFG_DEC_LEN) - 1)
80004ada:	7b 00 50 24 	movh %d2,17664
80004ade:	1b 02 00 2e 	addi %d2,%d2,-8192
80004ae2:	4b 28 01 20 	cmp.f %d2,%d8,%d2
80004ae6:	6f 22 0a 00 	jz.t %d2,2,80004afa <IfxI2c_setBaudrate+0x58>
    {
        dec = (1 << IFX_I2C_FDIVCFG_DEC_LEN) - 1;
80004aea:	7b 00 50 84 	movh %d8,17664
80004aee:	1b 08 00 8e 	addi %d8,%d8,-8192
80004af2:	1d 00 04 00 	j 80004afa <IfxI2c_setBaudrate+0x58>
        dec = 6;
80004af6:	7b 00 0c 84 	movh %d8,16576
    }

    uint16 pwd = IfxScuWdt_getCpuWatchdogPassword();
80004afa:	6d ff 5d ec 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
80004afe:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(pwd);
80004b00:	02 24       	mov %d4,%d2
80004b02:	6d ff f0 ea 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
    /* Baudrate configuration */
    i2c->FDIVCFG.B.INC           = 1;
80004b06:	d9 c2 18 00 	lea %a2,[%a12]24
80004b0a:	19 c3 18 00 	ld.w %d3,[%a12]24
80004b0e:	b7 13 08 38 	insert %d3,%d3,1,16,8
80004b12:	74 23       	st.w [%a2],%d3
    i2c->FDIVCFG.B.DEC           = (uint16)(dec + 0.5f);
80004b14:	7b 00 f0 23 	movh %d2,16128
80004b18:	6b 02 21 28 	add.f %d2,%d8,%d2
80004b1c:	4b 02 71 51 	ftouz %d5,%d2
80004b20:	54 23       	ld.w %d3,[%a2]
80004b22:	37 53 0b 30 	insert %d3,%d3,%d5,0,11
80004b26:	74 23       	st.w [%a2],%d3
    i2c->TIMCFG.B.SDA_DEL_HD_DAT = 0x3F;
80004b28:	d9 c2 00 10 	lea %a2,[%a12]64
80004b2c:	19 c3 00 10 	ld.w %d3,[%a12]64
80004b30:	3b f0 03 20 	mov %d2,63
80004b34:	37 23 06 30 	insert %d3,%d3,%d2,0,6
80004b38:	74 23       	st.w [%a2],%d3
    i2c->TIMCFG.B.FS_SCL_LOW     = 1;
80004b3a:	54 23       	ld.w %d3,[%a2]
80004b3c:	b7 13 81 37 	insert %d3,%d3,1,15,1
80004b40:	74 23       	st.w [%a2],%d3
    i2c->TIMCFG.B.EN_SCL_LOW_LEN = 1;
80004b42:	54 23       	ld.w %d3,[%a2]
80004b44:	b7 13 01 37 	insert %d3,%d3,1,14,1
80004b48:	74 23       	st.w [%a2],%d3
    i2c->TIMCFG.B.SCL_LOW_LEN    = 0x20;
80004b4a:	54 23       	ld.w %d3,[%a2]
80004b4c:	3b 00 02 20 	mov %d2,32
80004b50:	37 23 08 3c 	insert %d3,%d3,%d2,24,8
80004b54:	74 23       	st.w [%a2],%d3

    IfxScuWdt_setCpuEndinit(pwd);
80004b56:	02 94       	mov %d4,%d9
80004b58:	6d ff 4b ec 	call 800023ee <IfxScuWdt_setCpuEndinit>
}
80004b5c:	00 90       	ret 

80004b5e <IfxI2c_configureAsSlave>:


void IfxI2c_configureAsSlave(Ifx_I2C *i2c)
{
80004b5e:	40 ae       	mov.aa %a14,%sp
    i2c->ADDRCFG.B.MnS = 1; // master mode
80004b60:	d9 42 20 00 	lea %a2,[%a4]32
80004b64:	19 42 20 00 	ld.w %d2,[%a4]32
80004b68:	b7 12 81 29 	insert %d2,%d2,1,19,1
80004b6c:	74 22       	st.w [%a2],%d2
}
80004b6e:	00 90       	ret 

80004b70 <IfxI2c_configureAddrFifo>:


void IfxI2c_configureAddrFifo(Ifx_I2C *i2c, const IfxI2c_Config *config)
{
80004b70:	40 ae       	mov.aa %a14,%sp
    // Note: I2C should not be running. Use IfxI2c_stop() before calling this api.

    i2c->ADDRCFG.B.ADR  = config->addressConfig.slaveAddress;
80004b72:	54 53       	ld.w %d3,[%a5]
80004b74:	d9 42 20 00 	lea %a2,[%a4]32
80004b78:	19 42 20 00 	ld.w %d2,[%a4]32
80004b7c:	37 32 0a 20 	insert %d2,%d2,%d3,0,10
80004b80:	74 22       	st.w [%a2],%d2
    i2c->ADDRCFG.B.GCE  = config->addressConfig.generalCallEnable;
80004b82:	39 53 08 00 	ld.bu %d3,[%a5]8
80004b86:	54 22       	ld.w %d2,[%a2]
80004b88:	67 32 11 20 	ins.t %d2,%d2,17,%d3,0
80004b8c:	74 22       	st.w [%a2],%d2
    i2c->ADDRCFG.B.MCE  = config->addressConfig.masterCodeEnable;
80004b8e:	39 53 09 00 	ld.bu %d3,[%a5]9
80004b92:	54 22       	ld.w %d2,[%a2]
80004b94:	67 32 12 20 	ins.t %d2,%d2,18,%d3,0
80004b98:	74 22       	st.w [%a2],%d2
    i2c->ADDRCFG.B.SONA = config->addressConfig.stopOnNotAcknowledge;
80004b9a:	39 53 0a 00 	ld.bu %d3,[%a5]10
80004b9e:	54 22       	ld.w %d2,[%a2]
80004ba0:	67 32 14 20 	ins.t %d2,%d2,20,%d3,0
80004ba4:	74 22       	st.w [%a2],%d2
    i2c->ADDRCFG.B.SOPE = config->addressConfig.stopOnPacketEnd;
80004ba6:	39 53 0b 00 	ld.bu %d3,[%a5]11
80004baa:	54 22       	ld.w %d2,[%a2]
80004bac:	67 32 15 20 	ins.t %d2,%d2,21,%d3,0
80004bb0:	74 22       	st.w [%a2],%d2
    i2c->ADDRCFG.B.TBAM = config->addressConfig.addressMode;
80004bb2:	19 53 04 00 	ld.w %d3,[%a5]4
80004bb6:	d9 42 20 00 	lea %a2,[%a4]32
80004bba:	19 42 20 00 	ld.w %d2,[%a4]32
80004bbe:	67 32 10 20 	ins.t %d2,%d2,16,%d3,0
80004bc2:	74 22       	st.w [%a2],%d2

    i2c->FIFOCFG.B.TXFC = config->fifoConfig.txFifoFlowControl;
80004bc4:	19 53 20 00 	ld.w %d3,[%a5]32
80004bc8:	d9 42 28 00 	lea %a2,[%a4]40
80004bcc:	19 42 28 00 	ld.w %d2,[%a4]40
80004bd0:	67 32 11 20 	ins.t %d2,%d2,17,%d3,0
80004bd4:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.RXFC = config->fifoConfig.rxFifoFlowControl;
80004bd6:	19 53 1c 00 	ld.w %d3,[%a5]28
80004bda:	d9 42 28 00 	lea %a2,[%a4]40
80004bde:	19 42 28 00 	ld.w %d2,[%a4]40
80004be2:	67 32 10 20 	ins.t %d2,%d2,16,%d3,0
80004be6:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.TXBS = config->fifoConfig.txBurstSize;
80004be8:	19 53 10 00 	ld.w %d3,[%a5]16
80004bec:	d9 42 28 00 	lea %a2,[%a4]40
80004bf0:	19 42 28 00 	ld.w %d2,[%a4]40
80004bf4:	37 32 02 22 	insert %d2,%d2,%d3,4,2
80004bf8:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.RXBS = config->fifoConfig.rxBurstSize;
80004bfa:	19 53 0c 00 	ld.w %d3,[%a5]12
80004bfe:	d9 42 28 00 	lea %a2,[%a4]40
80004c02:	19 42 28 00 	ld.w %d2,[%a4]40
80004c06:	37 32 02 20 	insert %d2,%d2,%d3,0,2
80004c0a:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.TXFA = config->fifoConfig.txFifoAlignment;
80004c0c:	19 53 18 00 	ld.w %d3,[%a5]24
80004c10:	d9 42 28 00 	lea %a2,[%a4]40
80004c14:	19 42 28 00 	ld.w %d2,[%a4]40
80004c18:	37 32 02 26 	insert %d2,%d2,%d3,12,2
80004c1c:	74 22       	st.w [%a2],%d2
    i2c->FIFOCFG.B.RXFA = config->fifoConfig.rxFifoAlignment;
80004c1e:	19 53 14 00 	ld.w %d3,[%a5]20
80004c22:	d9 42 28 00 	lea %a2,[%a4]40
80004c26:	19 42 28 00 	ld.w %d2,[%a4]40
80004c2a:	37 32 02 24 	insert %d2,%d2,%d3,8,2
80004c2e:	74 22       	st.w [%a2],%d2
}
80004c30:	00 90       	ret 

80004c32 <IfxI2c_I2c_initConfig>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxI2c_I2c_initConfig(IfxI2c_I2c_Config *config, Ifx_I2C *i2c)
{
80004c32:	40 ae       	mov.aa %a14,%sp
    config->i2c                                            = i2c;
80004c34:	f4 45       	st.a [%a4],%a5
    config->baudrate                                       = 400000;
80004c36:	7b 30 8c 24 	movh %d2,18627
80004c3a:	1b 02 00 25 	addi %d2,%d2,20480
80004c3e:	59 42 04 00 	st.w [%a4]4,%d2
    config->pins                                           = NULL_PTR;
80004c42:	82 02       	mov %d2,0
80004c44:	59 42 08 00 	st.w [%a4]8,%d2

    config->peripheralMode                                 = IfxI2c_MasterNotSlave_master;
80004c48:	82 13       	mov %d3,1
80004c4a:	59 43 0c 00 	st.w [%a4]12,%d3

    config->addrFifoCfg.addressConfig.slaveAddress         = 0;
80004c4e:	59 42 10 00 	st.w [%a4]16,%d2
    config->addrFifoCfg.addressConfig.addressMode          = IfxI2c_AddressMode_7Bit;
80004c52:	59 42 14 00 	st.w [%a4]20,%d2
    config->addrFifoCfg.addressConfig.generalCallEnable    = 0;
80004c56:	e9 42 18 00 	st.b [%a4]24,%d2
    config->addrFifoCfg.addressConfig.masterCodeEnable     = 0;
80004c5a:	e9 42 19 00 	st.b [%a4]25,%d2
    config->addrFifoCfg.addressConfig.stopOnNotAcknowledge = 0;
80004c5e:	e9 42 1a 00 	st.b [%a4]26,%d2
    config->addrFifoCfg.addressConfig.stopOnPacketEnd      = 0;
80004c62:	e9 42 1b 00 	st.b [%a4]27,%d2

    config->addrFifoCfg.fifoConfig.rxBurstSize             = IfxI2c_RxBurstSize_1Word;
80004c66:	59 42 1c 00 	st.w [%a4]28,%d2
    config->addrFifoCfg.fifoConfig.txBurstSize             = IfxI2c_TxBurstSize_1Word;
80004c6a:	59 42 20 00 	st.w [%a4]32,%d2
    config->addrFifoCfg.fifoConfig.rxFifoAlignment         = IfxI2c_RxFifoAlignment_byte;
80004c6e:	59 42 24 00 	st.w [%a4]36,%d2
    config->addrFifoCfg.fifoConfig.txFifoAlignment         = IfxI2c_TxFifoAlignment_byte;
80004c72:	59 42 28 00 	st.w [%a4]40,%d2
    config->addrFifoCfg.fifoConfig.rxFifoFlowControl       = IfxI2c_RxFifoFlowControl_enable;
80004c76:	59 43 2c 00 	st.w [%a4]44,%d3
    config->addrFifoCfg.fifoConfig.txFifoFlowControl       = IfxI2c_TxFifoFlowControl_enable;
80004c7a:	59 43 30 00 	st.w [%a4]48,%d3
}
80004c7e:	00 90       	ret 

80004c80 <IfxI2c_I2c_initModule>:
    i2cDeviceConfig->deviceAddress = 0xff;
}


void IfxI2c_I2c_initModule(IfxI2c_I2c *i2c, const IfxI2c_I2c_Config *config)
{
80004c80:	40 ae       	mov.aa %a14,%sp
80004c82:	40 4f       	mov.aa %a15,%a4
80004c84:	40 5d       	mov.aa %a13,%a5
    Ifx_I2C *i2cSFR = config->i2c;
80004c86:	d4 5c       	ld.a %a12,[%a5]
    i2c->i2c = i2cSFR;
80004c88:	f4 4c       	st.a [%a4],%a12

    IfxI2c_enableModule(i2cSFR);
80004c8a:	40 c4       	mov.aa %a4,%a12
80004c8c:	6d ff 74 fe 	call 80004974 <IfxI2c_enableModule>
}


IFX_INLINE void IfxI2c_stop(Ifx_I2C *i2c)
{
    i2c->RUNCTRL.U = 0;
80004c90:	82 02       	mov %d2,0
80004c92:	59 c2 10 00 	st.w [%a12]16,%d2
    IfxI2c_stop(i2cSFR);                                                                   // enter config Mode
    IfxI2c_configureAsMaster(i2cSFR);
80004c96:	40 c4       	mov.aa %a4,%a12
80004c98:	6d ff 20 fe 	call 800048d8 <IfxI2c_configureAsMaster>

    if (config->peripheralMode == IfxI2c_MasterNotSlave_slave)
80004c9c:	19 d2 0c 00 	ld.w %d2,[%a13]12
80004ca0:	df 02 26 00 	jeq %d2,0,80004cec <IfxI2c_I2c_initModule+0x6c>
    {
        IfxI2c_configureAsSlave(i2cSFR);
    }

    IfxI2c_configureAddrFifo(i2cSFR, &config->addrFifoCfg);
80004ca4:	d9 d5 10 00 	lea %a5,[%a13]16
80004ca8:	40 c4       	mov.aa %a4,%a12
80004caa:	6d ff 63 ff 	call 80004b70 <IfxI2c_configureAddrFifo>

    IfxI2c_setBaudrate(i2cSFR, config->baudrate);  /*In high speed mode the baud rate must be higher then 400kHz */
80004cae:	19 d4 04 00 	ld.w %d4,[%a13]4
80004cb2:	40 c4       	mov.aa %a4,%a12
80004cb4:	6d ff f7 fe 	call 80004aa2 <IfxI2c_setBaudrate>

    if (config->pins != NULL_PTR)
80004cb8:	99 d2 08 00 	ld.a %a2,[%a13]8
80004cbc:	bd 02 09 00 	jz.a %a2,80004cce <IfxI2c_I2c_initModule+0x4e>
    {
        IfxI2c_initSclSdaPin(config->pins->scl, config->pins->sda, config->pins->padDriver);
80004cc0:	19 24 08 00 	ld.w %d4,[%a2]8
80004cc4:	99 25 04 00 	ld.a %a5,[%a2]4
80004cc8:	d4 24       	ld.a %a4,[%a2]
80004cca:	6d ff a0 fe 	call 80004a0a <IfxI2c_initSclSdaPin>
    i2c->RUNCTRL.U = 1;
80004cce:	82 12       	mov %d2,1
80004cd0:	59 c2 10 00 	st.w [%a12]16,%d2
    }

    IfxI2c_run(i2cSFR);

    i2c->baudrate  = IfxI2c_getBaudrate(i2cSFR);
80004cd4:	40 c4       	mov.aa %a4,%a12
80004cd6:	6d ff 7d fe 	call 800049d0 <IfxI2c_getBaudrate>
80004cda:	68 32       	st.w [%a15]12,%d2
    return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
80004cdc:	19 c2 24 00 	ld.w %d2,[%a12]36
80004ce0:	8f 32 00 21 	and %d2,%d2,3
    i2c->busStatus = IfxI2c_getBusStatus(i2cSFR);
80004ce4:	68 12       	st.w [%a15]4,%d2
    i2c->status    = IfxI2c_I2c_Status_ok;
80004ce6:	82 02       	mov %d2,0
80004ce8:	68 22       	st.w [%a15]8,%d2
}
80004cea:	00 90       	ret 
        IfxI2c_configureAsSlave(i2cSFR);
80004cec:	40 c4       	mov.aa %a4,%a12
80004cee:	6d ff 38 ff 	call 80004b5e <IfxI2c_configureAsSlave>
80004cf2:	1d ff d9 ff 	j 80004ca4 <IfxI2c_I2c_initModule+0x24>

80004cf6 <IfxI2c_I2c_read>:


IfxI2c_I2c_Status IfxI2c_I2c_read(IfxI2c_I2c_Device *i2cDevice, volatile uint8 *data, Ifx_SizeT size)
{
80004cf6:	40 ae       	mov.aa %a14,%sp
80004cf8:	20 08       	sub.a %sp,8
80004cfa:	40 4d       	mov.aa %a13,%a4
80004cfc:	80 51       	mov.d %d1,%a5
    IfxI2c_I2c_Status status = IfxI2c_I2c_Status_ok;
    Ifx_I2C          *i2c    = i2cDevice->i2c->i2c;
80004cfe:	d4 42       	ld.a %a2,[%a4]
80004d00:	d4 2c       	ld.a %a12,[%a2]
    uint32            packet;
    uint8             slAddr = i2cDevice->deviceAddress;
80004d02:	39 43 04 00 	ld.bu %d3,[%a4]4
    {
        uint32 packet;
        uint8  packetbyte[4];
    }      rxdata;

    rxdata.packet = 0;
80004d06:	82 02       	mov %d2,0
80004d08:	59 e2 fc ff 	st.w [%a14]-4,%d2

    sint32 bytesToReceive = size;
80004d0c:	02 45       	mov %d5,%d4
    if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
80004d0e:	d9 c3 24 00 	lea %a3,[%a12]36
80004d12:	19 c2 24 00 	ld.w %d2,[%a12]36
80004d16:	8f 32 00 21 	and %d2,%d2,3
80004d1a:	df 02 0e 00 	jeq %d2,0,80004d36 <IfxI2c_I2c_read+0x40>
    return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
80004d1e:	54 32       	ld.w %d2,[%a3]
80004d20:	8f 32 00 21 	and %d2,%d2,3

    // bus free?
    if (IfxI2c_busIsFree(i2c) == FALSE)
    {
        status                    = IfxI2c_I2c_Status_busNotFree;
        i2cDevice->i2c->busStatus = IfxI2c_getBusStatus(i2c);
80004d24:	59 22 04 00 	st.w [%a2]4,%d2
        i2cDevice->i2c->status    = status;
80004d28:	d4 42       	ld.a %a2,[%a4]
80004d2a:	82 32       	mov %d2,3
80004d2c:	59 22 08 00 	st.w [%a2]8,%d2
        return status;
80004d30:	02 28       	mov %d8,%d2
    IfxI2c_clearAllProtocolInterruptSources(i2c);
    IfxI2c_releaseBus(i2c);
    i2cDevice->i2c->busStatus = IfxI2c_getBusStatus(i2c);
    i2cDevice->i2c->status    = status;
    return status;
}
80004d32:	02 82       	mov %d2,%d8
80004d34:	00 90       	ret 
    i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
80004d36:	3b f0 07 20 	mov %d2,127
80004d3a:	59 c2 38 10 	st.w [%a12]120,%d2
    i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
80004d3e:	3b f0 00 20 	mov %d2,15
80004d42:	59 c2 28 10 	st.w [%a12]104,%d2
    packet = slAddr | 1;                    // set read bit
80004d46:	8f 13 40 31 	or %d3,%d3,1
    i2c->TPSCTRL.B.TPS = size;
80004d4a:	d9 c2 34 00 	lea %a2,[%a12]52
80004d4e:	19 c2 34 00 	ld.w %d2,[%a12]52
80004d52:	b7 12 0e 20 	insert %d2,%d2,1,0,14
80004d56:	74 22       	st.w [%a2],%d2
    i2c->MRPSCTRL.B.MRPS = size;
80004d58:	d9 c2 2c 00 	lea %a2,[%a12]44
80004d5c:	19 c2 2c 00 	ld.w %d2,[%a12]44
80004d60:	37 42 0e 20 	insert %d2,%d2,%d4,0,14
80004d64:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxI2c_writeFifo(Ifx_I2C *i2c, uint32 packet)
{
    i2c->TXD.U = packet;
80004d66:	bb 00 00 28 	mov.u %d2,32768
80004d6a:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80004d6e:	74 23       	st.w [%a2],%d3
    while ((i2c->PIRQSS.U & ((1 << IFX_I2C_PIRQSS_AL_OFF) | (1 << IFX_I2C_PIRQSM_TX_END_OFF) | (1 << IFX_I2C_PIRQSS_RX_OFF))) == FALSE)
80004d70:	19 c2 34 10 	ld.w %d2,[%a12]116
80004d74:	8f 82 06 21 	and %d2,%d2,104
80004d78:	df 02 fc 7f 	jeq %d2,0,80004d70 <IfxI2c_I2c_read+0x7a>
    i2c->ICR.U = (1 << IFX_I2C_ICR_LSREQ_INT_OFF) | (1 << IFX_I2C_ICR_SREQ_INT_OFF) | (1 << IFX_I2C_ICR_LBREQ_INT_OFF) | (1 << IFX_I2C_ICR_BREQ_INT_OFF);
80004d7c:	3b f0 00 20 	mov %d2,15
80004d80:	59 c2 0c 20 	st.w [%a12]140,%d2
    if (i2c->ERRIRQSS.U)
80004d84:	19 c2 24 10 	ld.w %d2,[%a12]100
80004d88:	df 02 1e 00 	jeq %d2,0,80004dc4 <IfxI2c_I2c_read+0xce>
    i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
80004d8c:	3b f0 00 20 	mov %d2,15
80004d90:	59 c2 28 10 	st.w [%a12]104,%d2
        status = IfxI2c_I2c_Status_error;
80004d94:	82 48       	mov %d8,4
80004d96:	3b f0 00 20 	mov %d2,15
80004d9a:	59 c2 28 10 	st.w [%a12]104,%d2
    i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
80004d9e:	3b f0 07 20 	mov %d2,127
80004da2:	59 c2 38 10 	st.w [%a12]120,%d2
    IfxI2c_releaseBus(i2c);
80004da6:	40 c4       	mov.aa %a4,%a12
80004da8:	6d ff 66 fe 	call 80004a74 <IfxI2c_releaseBus>
    i2cDevice->i2c->busStatus = IfxI2c_getBusStatus(i2c);
80004dac:	d4 d2       	ld.a %a2,[%a13]
    return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
80004dae:	19 c2 24 00 	ld.w %d2,[%a12]36
80004db2:	8f 32 00 21 	and %d2,%d2,3
80004db6:	59 22 04 00 	st.w [%a2]4,%d2
    i2cDevice->i2c->status    = status;
80004dba:	d4 d2       	ld.a %a2,[%a13]
80004dbc:	59 28 08 00 	st.w [%a2]8,%d8
    return status;
80004dc0:	1d ff b9 ff 	j 80004d32 <IfxI2c_I2c_read+0x3c>
    else if (i2c->PIRQSS.U & (1 << IFX_I2C_PIRQSS_AL_OFF))
80004dc4:	19 c2 34 10 	ld.w %d2,[%a12]116
80004dc8:	6f 32 09 00 	jz.t %d2,3,80004dda <IfxI2c_I2c_read+0xe4>
        i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSS_AL_OFF);
80004dcc:	3b 80 00 20 	mov %d2,8
80004dd0:	59 c2 38 10 	st.w [%a12]120,%d2
        status        = IfxI2c_I2c_Status_al;
80004dd4:	82 28       	mov %d8,2
80004dd6:	1d ff e0 ff 	j 80004d96 <IfxI2c_I2c_read+0xa0>
    else if (i2c->PIRQSS.U & (1 << IFX_I2C_PIRQSS_NACK_OFF))
80004dda:	19 c2 34 10 	ld.w %d2,[%a12]116
80004dde:	8f 02 01 81 	and %d8,%d2,16
80004de2:	6f 42 09 00 	jz.t %d2,4,80004df4 <IfxI2c_I2c_read+0xfe>
        i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSS_NACK_OFF);
80004de6:	3b 00 01 20 	mov %d2,16
80004dea:	59 c2 38 10 	st.w [%a12]120,%d2
        status        = IfxI2c_I2c_Status_nak;
80004dee:	82 18       	mov %d8,1
80004df0:	1d ff d3 ff 	j 80004d96 <IfxI2c_I2c_read+0xa0>
    else if (size > 0)                                       // required to poll for nak
80004df4:	bf 14 d1 7f 	jlt %d4,1,80004d96 <IfxI2c_I2c_read+0xa0>
        if (size > 32)                                       // if fifo is too small => disable global interrupts!
80004df8:	3b 00 02 20 	mov %d2,32
80004dfc:	7f 42 88 00 	jge %d2,%d4,80004f0c <IfxI2c_I2c_read+0x216>
    reg.U = __mfcr(CPU_ICR);
80004e00:	4d c0 e2 9f 	mfcr %d9,$icr
    return reg.B.IE != 0;
80004e04:	37 09 e1 97 	extr.u %d9,%d9,15,1
    __disable();
80004e08:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
80004e0c:	00 00       	nop 
            for (i = 0; i < (uint32)size; i += 4)
80004e0e:	02 87       	mov %d7,%d8
80004e10:	1d 00 55 00 	j 80004eba <IfxI2c_I2c_read+0x1c4>
                    bytes          = bytesToReceive;
80004e14:	02 50       	mov %d0,%d5
                    bytesToReceive = 0;
80004e16:	82 05       	mov %d5,0
                while (!(ris = i2c->RIS.U)) // wait for fifo request or error
80004e18:	1d 00 57 00 	j 80004ec6 <IfxI2c_I2c_read+0x1d0>
                    rxdata.packet = i2c->RXD.U;
80004e1c:	bb 00 00 2c 	mov.u %d2,49152
80004e20:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80004e24:	54 22       	ld.w %d2,[%a2]
80004e26:	59 e2 fc ff 	st.w [%a14]-4,%d2
                    for (k = 0; k < bytes; k++)
80004e2a:	02 82       	mov %d2,%d8
80004e2c:	1d 00 0e 00 	j 80004e48 <IfxI2c_I2c_read+0x152>
                        data[i + k] = rxdata.packetbyte[k];
80004e30:	0b 27 00 60 	add %d6,%d7,%d2
80004e34:	60 12       	mov.a %a2,%d1
80004e36:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80004e3a:	d9 e3 fc ff 	lea %a3,[%a14]-4
80004e3e:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
80004e42:	14 36       	ld.bu %d6,[%a3]
80004e44:	34 26       	st.b [%a2],%d6
                    for (k = 0; k < bytes; k++)
80004e46:	c2 12       	add %d2,1
80004e48:	3f 02 f4 ff 	jlt.u %d2,%d0,80004e30 <IfxI2c_I2c_read+0x13a>
    i2c->ICR.B.LSREQ_INT = 1;
80004e4c:	d9 c2 0c 20 	lea %a2,[%a12]140
80004e50:	19 c2 0c 20 	ld.w %d2,[%a12]140
80004e54:	b7 12 01 20 	insert %d2,%d2,1,0,1
80004e58:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.SREQ_INT = 1;
80004e5a:	54 22       	ld.w %d2,[%a2]
80004e5c:	b7 12 81 20 	insert %d2,%d2,1,1,1
80004e60:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.LBREQ_INT = 1;
80004e62:	54 22       	ld.w %d2,[%a2]
80004e64:	b7 12 01 21 	insert %d2,%d2,1,2,1
80004e68:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.BREQ_INT = 1;
80004e6a:	54 22       	ld.w %d2,[%a2]
80004e6c:	b7 12 81 21 	insert %d2,%d2,1,3,1
80004e70:	74 22       	st.w [%a2],%d2
}
80004e72:	1d 00 32 00 	j 80004ed6 <IfxI2c_I2c_read+0x1e0>
    i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
80004e76:	3b f0 00 20 	mov %d2,15
80004e7a:	59 c2 28 10 	st.w [%a12]104,%d2
                    status = IfxI2c_I2c_Status_error;
80004e7e:	82 48       	mov %d8,4
    if (enabled != FALSE)
80004e80:	df 09 04 00 	jeq %d9,0,80004e88 <IfxI2c_I2c_read+0x192>
        __enable();
80004e84:	0d 00 00 03 	enable 
    return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
80004e88:	19 c2 34 10 	ld.w %d2,[%a12]116
80004e8c:	6f 52 fe 7f 	jz.t %d2,5,80004e88 <IfxI2c_I2c_read+0x192>
    i2c->PIRQSC.U = (1 << source);
80004e90:	3b 00 02 20 	mov %d2,32
80004e94:	59 c2 38 10 	st.w [%a12]120,%d2
}
80004e98:	1d ff 7f ff 	j 80004d96 <IfxI2c_I2c_read+0xa0>
                        i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSS_AL_OFF);
80004e9c:	3b 80 00 20 	mov %d2,8
80004ea0:	59 c2 38 10 	st.w [%a12]120,%d2
                        status        = IfxI2c_I2c_Status_al;
80004ea4:	82 28       	mov %d8,2
                        break;
80004ea6:	1d ff ed ff 	j 80004e80 <IfxI2c_I2c_read+0x18a>
                        i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSS_NACK_OFF);
80004eaa:	3b 00 01 20 	mov %d2,16
80004eae:	59 c2 38 10 	st.w [%a12]120,%d2
                        status        = IfxI2c_I2c_Status_nak;
80004eb2:	82 18       	mov %d8,1
                        break;
80004eb4:	1d ff e6 ff 	j 80004e80 <IfxI2c_I2c_read+0x18a>
            for (i = 0; i < (uint32)size; i += 4)
80004eb8:	c2 47       	add %d7,4
80004eba:	7f 47 e3 ff 	jge.u %d7,%d4,80004e80 <IfxI2c_I2c_read+0x18a>
                if (bytesToReceive >= 4)
80004ebe:	bf 45 ab 7f 	jlt %d5,4,80004e14 <IfxI2c_I2c_read+0x11e>
                    bytesToReceive -= 4;
80004ec2:	c2 c5       	add %d5,-4
                    bytes           = 4;
80004ec4:	82 40       	mov %d0,4
                while (!(ris = i2c->RIS.U)) // wait for fifo request or error
80004ec6:	19 c3 00 20 	ld.w %d3,[%a12]128
80004eca:	df 03 fe 7f 	jeq %d3,0,80004ec6 <IfxI2c_I2c_read+0x1d0>
                if (ris & ((1 << IFX_I2C_RIS_LSREQ_INT_OFF) | (1 << IFX_I2C_RIS_SREQ_INT_OFF) | (1 << IFX_I2C_RIS_LBREQ_INT_OFF) | (1 << IFX_I2C_RIS_BREQ_INT_OFF)))
80004ece:	8f f3 00 21 	and %d2,%d3,15
80004ed2:	df 02 a5 ff 	jne %d2,0,80004e1c <IfxI2c_I2c_read+0x126>
                if (ris & (1 << IFX_I2C_RIS_I2C_ERR_INT_OFF)) // error flags
80004ed6:	6f 43 d0 ff 	jnz.t %d3,4,80004e76 <IfxI2c_I2c_read+0x180>
                if (ris & (1 << IFX_I2C_RIS_I2C_P_INT_OFF)) // check protocol flags
80004eda:	6f 53 ef 7f 	jz.t %d3,5,80004eb8 <IfxI2c_I2c_read+0x1c2>
                    if (i2c->PIRQSS.U & (1 << IFX_I2C_PIRQSS_AL_OFF))
80004ede:	19 c2 34 10 	ld.w %d2,[%a12]116
80004ee2:	6f 32 dd ff 	jnz.t %d2,3,80004e9c <IfxI2c_I2c_read+0x1a6>
                    else if (i2c->PIRQSS.U & (1 << IFX_I2C_PIRQSS_NACK_OFF))
80004ee6:	19 c2 34 10 	ld.w %d2,[%a12]116
80004eea:	6f 42 e0 ff 	jnz.t %d2,4,80004eaa <IfxI2c_I2c_read+0x1b4>
                    if (i2c->PIRQSS.U & (1 << IFX_I2C_PIRQSS_TX_END_OFF))
80004eee:	d9 c2 34 10 	lea %a2,[%a12]116
80004ef2:	19 c2 34 10 	ld.w %d2,[%a12]116
                    if (i2c->PIRQSS.U & ((1 << IFX_I2C_PIRQSS_AM_OFF) | (1 << IFX_I2C_PIRQSS_GC_OFF) | (1 << IFX_I2C_PIRQSS_MC_OFF) | (1 << IFX_I2C_PIRQSS_RX_OFF)))
80004ef6:	54 22       	ld.w %d2,[%a2]
80004ef8:	8f 72 04 21 	and %d2,%d2,71
80004efc:	df 02 de 7f 	jeq %d2,0,80004eb8 <IfxI2c_I2c_read+0x1c2>
                        i2c->PIRQSC.U = ((1 << IFX_I2C_PIRQSS_AM_OFF) | (1 << IFX_I2C_PIRQSS_GC_OFF) | (1 << IFX_I2C_PIRQSS_MC_OFF) | (1 << IFX_I2C_PIRQSS_RX_OFF));
80004f00:	3b 70 04 20 	mov %d2,71
80004f04:	59 c2 38 10 	st.w [%a12]120,%d2
80004f08:	1d ff d8 ff 	j 80004eb8 <IfxI2c_I2c_read+0x1c2>
    return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
80004f0c:	19 c2 34 10 	ld.w %d2,[%a12]116
80004f10:	6f 52 fe 7f 	jz.t %d2,5,80004f0c <IfxI2c_I2c_read+0x216>
    i2c->PIRQSC.U = (1 << source);
80004f14:	3b 00 02 20 	mov %d2,32
80004f18:	59 c2 38 10 	st.w [%a12]120,%d2
            ris = i2c->RIS.U;
80004f1c:	19 c2 00 20 	ld.w %d2,[%a12]128
            if (ris & (1 << IFX_I2C_RIS_I2C_ERR_INT_OFF)) // error flags
80004f20:	6f 42 13 00 	jz.t %d2,4,80004f46 <IfxI2c_I2c_read+0x250>
    i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
80004f24:	3b f0 00 20 	mov %d2,15
80004f28:	59 c2 28 10 	st.w [%a12]104,%d2
                status = IfxI2c_I2c_Status_error;
80004f2c:	82 40       	mov %d0,4
            if ((status != IfxI2c_I2c_Status_error) && (status != IfxI2c_I2c_Status_al) && (status != IfxI2c_I2c_Status_nak))
80004f2e:	8b 40 20 32 	ne %d3,%d0,4
80004f32:	8b 20 20 22 	ne %d2,%d0,2
80004f36:	26 32       	and %d2,%d3
80004f38:	df 02 69 00 	jeq %d2,0,8000500a <IfxI2c_I2c_read+0x314>
80004f3c:	df 10 2b 00 	jeq %d0,1,80004f92 <IfxI2c_I2c_read+0x29c>
                for (i = 0; i < (uint32)size; i += 4)
80004f40:	02 87       	mov %d7,%d8
80004f42:	1d 00 3e 00 	j 80004fbe <IfxI2c_I2c_read+0x2c8>
            else if (ris & (1 << IFX_I2C_RIS_I2C_P_INT_OFF)) // check protocol flags
80004f46:	8f 02 02 01 	and %d0,%d2,32
80004f4a:	6f 52 f2 7f 	jz.t %d2,5,80004f2e <IfxI2c_I2c_read+0x238>
                if (i2c->PIRQSS.U & (1 << IFX_I2C_PIRQSS_AL_OFF))
80004f4e:	19 c2 34 10 	ld.w %d2,[%a12]116
80004f52:	6f 32 13 00 	jz.t %d2,3,80004f78 <IfxI2c_I2c_read+0x282>
                    i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSS_AL_OFF);
80004f56:	3b 80 00 20 	mov %d2,8
80004f5a:	59 c2 38 10 	st.w [%a12]120,%d2
                    status        = IfxI2c_I2c_Status_al;
80004f5e:	82 20       	mov %d0,2
                if (i2c->PIRQSS.U & ((1 << IFX_I2C_PIRQSS_AM_OFF) | (1 << IFX_I2C_PIRQSS_GC_OFF) | (1 << IFX_I2C_PIRQSS_MC_OFF) | (1 << IFX_I2C_PIRQSS_TX_END_OFF) | (1 << IFX_I2C_PIRQSS_RX_OFF)))
80004f60:	19 c2 34 10 	ld.w %d2,[%a12]116
80004f64:	8f 72 06 21 	and %d2,%d2,103
80004f68:	df 02 e3 7f 	jeq %d2,0,80004f2e <IfxI2c_I2c_read+0x238>
                    i2c->PIRQSC.U = ((1 << IFX_I2C_PIRQSS_AM_OFF) | (1 << IFX_I2C_PIRQSS_GC_OFF) | (1 << IFX_I2C_PIRQSS_MC_OFF) | (1 << IFX_I2C_PIRQSS_TX_END_OFF) | (1 << IFX_I2C_PIRQSS_RX_OFF));
80004f6c:	3b 70 06 20 	mov %d2,103
80004f70:	59 c2 38 10 	st.w [%a12]120,%d2
80004f74:	1d ff dd ff 	j 80004f2e <IfxI2c_I2c_read+0x238>
                else if (i2c->PIRQSS.U & (1 << IFX_I2C_PIRQSS_NACK_OFF))
80004f78:	19 c2 34 10 	ld.w %d2,[%a12]116
80004f7c:	8f 02 01 01 	and %d0,%d2,16
80004f80:	6f 42 f0 7f 	jz.t %d2,4,80004f60 <IfxI2c_I2c_read+0x26a>
                    i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSS_NACK_OFF);
80004f84:	3b 00 01 20 	mov %d2,16
80004f88:	59 c2 38 10 	st.w [%a12]120,%d2
                    status        = IfxI2c_I2c_Status_nak;
80004f8c:	82 10       	mov %d0,1
80004f8e:	1d ff e9 ff 	j 80004f60 <IfxI2c_I2c_read+0x26a>
80004f92:	02 08       	mov %d8,%d0
80004f94:	1d ff 01 ff 	j 80004d96 <IfxI2c_I2c_read+0xa0>
                        bytes          = bytesToReceive;
80004f98:	02 56       	mov %d6,%d5
                        bytesToReceive = 0;
80004f9a:	82 05       	mov %d5,0
80004f9c:	1d 00 17 00 	j 80004fca <IfxI2c_I2c_read+0x2d4>
                        data[i + k] = rxdata.packetbyte[k];
80004fa0:	0b 27 00 30 	add %d3,%d7,%d2
80004fa4:	60 12       	mov.a %a2,%d1
80004fa6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80004faa:	d9 e3 fc ff 	lea %a3,[%a14]-4
80004fae:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
80004fb2:	14 33       	ld.bu %d3,[%a3]
80004fb4:	34 23       	st.b [%a2],%d3
                    for (k = 0; k < bytes; k++)
80004fb6:	c2 12       	add %d2,1
80004fb8:	3f 62 f4 ff 	jlt.u %d2,%d6,80004fa0 <IfxI2c_I2c_read+0x2aa>
                for (i = 0; i < (uint32)size; i += 4)
80004fbc:	c2 47       	add %d7,4
80004fbe:	7f 47 23 80 	jge.u %d7,%d4,80005004 <IfxI2c_I2c_read+0x30e>
                    if (bytesToReceive >= 4)
80004fc2:	bf 45 eb 7f 	jlt %d5,4,80004f98 <IfxI2c_I2c_read+0x2a2>
                        bytesToReceive -= 4;
80004fc6:	c2 c5       	add %d5,-4
                        bytes           = 4;
80004fc8:	82 46       	mov %d6,4
                    rxdata.packet = i2c->RXD.U;
80004fca:	bb 00 00 2c 	mov.u %d2,49152
80004fce:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80004fd2:	54 22       	ld.w %d2,[%a2]
80004fd4:	59 e2 fc ff 	st.w [%a14]-4,%d2
    i2c->ICR.B.LSREQ_INT = 1;
80004fd8:	d9 c2 0c 20 	lea %a2,[%a12]140
80004fdc:	19 c2 0c 20 	ld.w %d2,[%a12]140
80004fe0:	b7 12 01 20 	insert %d2,%d2,1,0,1
80004fe4:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.SREQ_INT = 1;
80004fe6:	54 22       	ld.w %d2,[%a2]
80004fe8:	b7 12 81 20 	insert %d2,%d2,1,1,1
80004fec:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.LBREQ_INT = 1;
80004fee:	54 22       	ld.w %d2,[%a2]
80004ff0:	b7 12 01 21 	insert %d2,%d2,1,2,1
80004ff4:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.BREQ_INT = 1;
80004ff6:	54 22       	ld.w %d2,[%a2]
80004ff8:	b7 12 81 21 	insert %d2,%d2,1,3,1
80004ffc:	74 22       	st.w [%a2],%d2
                    for (k = 0; k < bytes; k++)
80004ffe:	02 82       	mov %d2,%d8
80005000:	1d ff dc ff 	j 80004fb8 <IfxI2c_I2c_read+0x2c2>
80005004:	02 08       	mov %d8,%d0
80005006:	1d ff c8 fe 	j 80004d96 <IfxI2c_I2c_read+0xa0>
8000500a:	02 08       	mov %d8,%d0
8000500c:	1d ff c5 fe 	j 80004d96 <IfxI2c_I2c_read+0xa0>

80005010 <IfxI2c_I2c_write>:


IfxI2c_I2c_Status IfxI2c_I2c_write(IfxI2c_I2c_Device *i2cDevice, volatile uint8 *data, Ifx_SizeT size)
{
80005010:	40 ae       	mov.aa %a14,%sp
80005012:	20 08       	sub.a %sp,8
80005014:	40 4d       	mov.aa %a13,%a4
80005016:	80 5a       	mov.d %d10,%a5
    IfxI2c_I2c_Status status = IfxI2c_I2c_Status_ok;
    Ifx_I2C          *i2c    = i2cDevice->i2c->i2c;
80005018:	d4 42       	ld.a %a2,[%a4]
8000501a:	d4 2c       	ld.a %a12,[%a2]
    uint8             slAddr = i2cDevice->deviceAddress;
8000501c:	39 40 04 00 	ld.bu %d0,[%a4]4
    {
        uint32 packet;
        uint8  packetbyte[4];
    }      txdata;

    sint32 bytesToSend = size + 1; // +1 slave device address
80005020:	1b 14 00 90 	addi %d9,%d4,1
    if (i2c->BUSSTAT.B.BS == IfxI2c_BusStatus_idle)
80005024:	d9 c3 24 00 	lea %a3,[%a12]36
80005028:	19 c2 24 00 	ld.w %d2,[%a12]36
8000502c:	8f 32 00 21 	and %d2,%d2,3
80005030:	df 02 0e 00 	jeq %d2,0,8000504c <IfxI2c_I2c_write+0x3c>
    return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
80005034:	54 32       	ld.w %d2,[%a3]
80005036:	8f 32 00 21 	and %d2,%d2,3
    uint32 bytes;

    if (IfxI2c_busIsFree(i2c) == FALSE)
    {
        status                    = IfxI2c_I2c_Status_busNotFree;
        i2cDevice->i2c->busStatus = IfxI2c_getBusStatus(i2c);
8000503a:	59 22 04 00 	st.w [%a2]4,%d2
        i2cDevice->i2c->status    = status;
8000503e:	d4 42       	ld.a %a2,[%a4]
80005040:	82 32       	mov %d2,3
80005042:	59 22 08 00 	st.w [%a2]8,%d2
        return status;
80005046:	02 28       	mov %d8,%d2
80005048:	1d 00 64 00 	j 80005110 <IfxI2c_I2c_write+0x100>
    i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
8000504c:	3b f0 07 20 	mov %d2,127
80005050:	59 c2 38 10 	st.w [%a12]120,%d2
    i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
80005054:	3b f0 00 20 	mov %d2,15
80005058:	59 c2 28 10 	st.w [%a12]104,%d2
    i2c->TPSCTRL.B.TPS = size;
8000505c:	d9 c2 34 00 	lea %a2,[%a12]52
80005060:	19 c2 34 00 	ld.w %d2,[%a12]52
80005064:	b7 12 0e 20 	insert %d2,%d2,1,0,14
80005068:	74 22       	st.w [%a2],%d2
    i2c->TXD.U = packet;
8000506a:	bb 00 00 28 	mov.u %d2,32768
8000506e:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
80005072:	74 20       	st.w [%a2],%d0
    i2c->ICR.B.LSREQ_INT = 1;
80005074:	d9 c2 0c 20 	lea %a2,[%a12]140
80005078:	19 c2 0c 20 	ld.w %d2,[%a12]140
8000507c:	b7 12 01 20 	insert %d2,%d2,1,0,1
80005080:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.SREQ_INT = 1;
80005082:	54 22       	ld.w %d2,[%a2]
80005084:	b7 12 81 20 	insert %d2,%d2,1,1,1
80005088:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.LBREQ_INT = 1;
8000508a:	54 22       	ld.w %d2,[%a2]
8000508c:	b7 12 01 21 	insert %d2,%d2,1,2,1
80005090:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.BREQ_INT = 1;
80005092:	54 22       	ld.w %d2,[%a2]
80005094:	b7 12 81 21 	insert %d2,%d2,1,3,1
80005098:	74 22       	st.w [%a2],%d2
    return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
8000509a:	19 c2 34 10 	ld.w %d2,[%a12]116
8000509e:	6f 52 fe 7f 	jz.t %d2,5,8000509a <IfxI2c_I2c_write+0x8a>
    i2c->PIRQSC.U = (1 << source);
800050a2:	3b 00 02 20 	mov %d2,32
800050a6:	59 c2 38 10 	st.w [%a12]120,%d2
    return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
800050aa:	d9 c2 34 10 	lea %a2,[%a12]116
800050ae:	19 c2 34 10 	ld.w %d2,[%a12]116
800050b2:	6f 32 1d 80 	jnz.t %d2,3,800050ec <IfxI2c_I2c_write+0xdc>
800050b6:	54 22       	ld.w %d2,[%a2]
800050b8:	8f 02 01 81 	and %d8,%d2,16
800050bc:	6f 42 2c 80 	jnz.t %d2,4,80005114 <IfxI2c_I2c_write+0x104>
    else if (IfxI2c_getProtocolInterruptSourceStatus(i2c, IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived) == TRUE)
    {
        IfxI2c_clearProtocolInterruptSource(i2c, IfxI2c_ProtocolInterruptSource_notAcknowledgeReceived);
        status = IfxI2c_I2c_Status_nak;
    }
    else if (size > 0)   // write i2c device
800050c0:	bf 14 1b 00 	jlt %d4,1,800050f6 <IfxI2c_I2c_write+0xe6>
    reg.U = __mfcr(CPU_ICR);
800050c4:	4d c0 e2 bf 	mfcr %d11,$icr
    return reg.B.IE != 0;
800050c8:	37 0b e1 b7 	extr.u %d11,%d11,15,1
    __disable();
800050cc:	0d 00 40 03 	disable 
800050d0:	00 00       	nop 
    {
        uint32  i, j = 0;

        // assumes TC is faster then i2c and therefor a fifo underflow is not possible
        boolean intEnabled = IfxCpu_disableInterrupts(); // disable global interrupts to prevent FIFO underflow
        IfxI2c_setTransmitPacketSize(i2c, size + 1);
800050d2:	c2 14       	add %d4,1
    i2c->TPSCTRL.B.TPS = size;
800050d4:	d9 c2 34 00 	lea %a2,[%a12]52
800050d8:	19 c2 34 00 	ld.w %d2,[%a12]52
800050dc:	37 42 0e 20 	insert %d2,%d2,%d4,0,14
800050e0:	74 22       	st.w [%a2],%d2

        for (i = 0; i < (uint32)(size + 1); i += 4)
800050e2:	02 86       	mov %d6,%d8
    sint32 bytesToSend = size + 1; // +1 slave device address
800050e4:	02 91       	mov %d1,%d9
    IfxI2c_I2c_Status status = IfxI2c_I2c_Status_ok;
800050e6:	02 84       	mov %d4,%d8
        for (i = 0; i < (uint32)(size + 1); i += 4)
800050e8:	1d 00 78 00 	j 800051d8 <IfxI2c_I2c_write+0x1c8>
    i2c->PIRQSC.U = (1 << source);
800050ec:	3b 80 00 20 	mov %d2,8
800050f0:	59 c2 38 10 	st.w [%a12]120,%d2
        status = IfxI2c_I2c_Status_al;
800050f4:	82 28       	mov %d8,2
            IfxI2c_clearAllErrorInterruptSources(i2c);
            status = IfxI2c_I2c_Status_error;
        }
    }

    IfxI2c_releaseBus(i2c);
800050f6:	40 c4       	mov.aa %a4,%a12
800050f8:	6d ff be fc 	call 80004a74 <IfxI2c_releaseBus>
    i2cDevice->i2c->busStatus = IfxI2c_getBusStatus(i2c);
800050fc:	d4 d2       	ld.a %a2,[%a13]
    return (IfxI2c_BusStatus)i2c->BUSSTAT.B.BS;
800050fe:	19 c2 24 00 	ld.w %d2,[%a12]36
80005102:	8f 32 00 21 	and %d2,%d2,3
80005106:	59 22 04 00 	st.w [%a2]4,%d2
    i2cDevice->i2c->status    = status;
8000510a:	d4 d2       	ld.a %a2,[%a13]
8000510c:	59 28 08 00 	st.w [%a2]8,%d8
    return status;
}
80005110:	02 82       	mov %d2,%d8
80005112:	00 90       	ret 
    i2c->PIRQSC.U = (1 << source);
80005114:	3b 00 01 20 	mov %d2,16
80005118:	59 c2 38 10 	st.w [%a12]120,%d2
        status = IfxI2c_I2c_Status_nak;
8000511c:	82 18       	mov %d8,1
8000511e:	1d ff ec ff 	j 800050f6 <IfxI2c_I2c_write+0xe6>
                bytes       = bytesToSend;
80005122:	02 17       	mov %d7,%d1
                bytesToSend = 0;
80005124:	82 01       	mov %d1,0
80005126:	1d 00 5f 00 	j 800051e4 <IfxI2c_I2c_write+0x1d4>
                    txdata.packetbyte[j] = (uint8)data[i + j - 1];
8000512a:	0b 36 00 20 	add %d2,%d6,%d3
8000512e:	c2 f2       	add %d2,-1
80005130:	60 a2       	mov.a %a2,%d10
80005132:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80005136:	14 25       	ld.bu %d5,[%a2]
80005138:	d9 e2 fc ff 	lea %a2,[%a14]-4
8000513c:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80005140:	34 25       	st.b [%a2],%d5
            for (j = 0; j < bytes; j++)
80005142:	c2 13       	add %d3,1
80005144:	7f 73 1c 80 	jge.u %d3,%d7,8000517c <IfxI2c_I2c_write+0x16c>
                if ((i == 0) && (j == 0))
80005148:	0f 36 a0 50 	or %d5,%d6,%d3
8000514c:	df 05 ef ff 	jne %d5,0,8000512a <IfxI2c_I2c_write+0x11a>
                    txdata.packetbyte[j] = (uint8)slAddr;
80005150:	d9 e2 fc ff 	lea %a2,[%a14]-4
80005154:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80005158:	34 20       	st.b [%a2],%d0
8000515a:	1d ff f4 ff 	j 80005142 <IfxI2c_I2c_write+0x132>
    i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
8000515e:	3b f0 00 20 	mov %d2,15
80005162:	59 c2 28 10 	st.w [%a12]104,%d2
                    status = IfxI2c_I2c_Status_error;
80005166:	82 44       	mov %d4,4
            } while (i2c->FFSSTAT.B.FFS == 8 && status != IfxI2c_I2c_Status_error); // wait to prevent FIFO overflow
80005168:	19 c3 38 00 	ld.w %d3,[%a12]56
8000516c:	8f f3 03 31 	and %d3,%d3,63
80005170:	3b 80 00 50 	mov %d5,8
80005174:	5f 53 11 80 	jne %d3,%d5,80005196 <IfxI2c_I2c_write+0x186>
80005178:	df 44 0f 00 	jeq %d4,4,80005196 <IfxI2c_I2c_write+0x186>
                ris = i2c->RIS.U;
8000517c:	19 c3 00 20 	ld.w %d3,[%a12]128
                if (ris & (1 << IFX_I2C_RIS_I2C_P_INT_OFF)) // check protocol flags
80005180:	6f 53 07 00 	jz.t %d3,5,8000518e <IfxI2c_I2c_write+0x17e>
    i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
80005184:	3b f0 07 20 	mov %d2,127
80005188:	59 c2 38 10 	st.w [%a12]120,%d2
                    status = IfxI2c_I2c_Status_error;
8000518c:	82 44       	mov %d4,4
                if (ris & (1 << IFX_I2C_RIS_I2C_ERR_INT_OFF)) // error flags
8000518e:	6f 43 ed 7f 	jz.t %d3,4,80005168 <IfxI2c_I2c_write+0x158>
80005192:	1d ff e6 ff 	j 8000515e <IfxI2c_I2c_write+0x14e>
            if (status == IfxI2c_I2c_Status_error)
80005196:	df 44 2d 00 	jeq %d4,4,800051f0 <IfxI2c_I2c_write+0x1e0>
    i2c->TXD.U = packet;
8000519a:	bb 00 00 28 	mov.u %d2,32768
8000519e:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
800051a2:	19 e2 fc ff 	ld.w %d2,[%a14]-4
800051a6:	74 22       	st.w [%a2],%d2
            while (!(i2c->RIS.U)) // wait for fifo request or error
800051a8:	19 c3 00 20 	ld.w %d3,[%a12]128
800051ac:	df 03 fe 7f 	jeq %d3,0,800051a8 <IfxI2c_I2c_write+0x198>
    i2c->ICR.B.LSREQ_INT = 1;
800051b0:	d9 c2 0c 20 	lea %a2,[%a12]140
800051b4:	19 c2 0c 20 	ld.w %d2,[%a12]140
800051b8:	b7 12 01 20 	insert %d2,%d2,1,0,1
800051bc:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.SREQ_INT = 1;
800051be:	54 22       	ld.w %d2,[%a2]
800051c0:	b7 12 81 20 	insert %d2,%d2,1,1,1
800051c4:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.LBREQ_INT = 1;
800051c6:	54 22       	ld.w %d2,[%a2]
800051c8:	b7 12 01 21 	insert %d2,%d2,1,2,1
800051cc:	74 22       	st.w [%a2],%d2
    i2c->ICR.B.BREQ_INT = 1;
800051ce:	54 22       	ld.w %d2,[%a2]
800051d0:	b7 12 81 21 	insert %d2,%d2,1,3,1
800051d4:	74 22       	st.w [%a2],%d2
        for (i = 0; i < (uint32)(size + 1); i += 4)
800051d6:	c2 46       	add %d6,4
800051d8:	7f 96 0c 80 	jge.u %d6,%d9,800051f0 <IfxI2c_I2c_write+0x1e0>
            if (bytesToSend >= 4)
800051dc:	bf 41 a3 7f 	jlt %d1,4,80005122 <IfxI2c_I2c_write+0x112>
                bytesToSend -= 4;
800051e0:	c2 c1       	add %d1,-4
                bytes        = 4;
800051e2:	82 47       	mov %d7,4
            txdata.packet = 0;
800051e4:	82 02       	mov %d2,0
800051e6:	59 e2 fc ff 	st.w [%a14]-4,%d2
            for (j = 0; j < bytes; j++)
800051ea:	02 83       	mov %d3,%d8
800051ec:	1d ff ac ff 	j 80005144 <IfxI2c_I2c_write+0x134>
    if (enabled != FALSE)
800051f0:	df 0b 04 00 	jeq %d11,0,800051f8 <IfxI2c_I2c_write+0x1e8>
        __enable();
800051f4:	0d 00 00 03 	enable 
    return (i2c->PIRQSS.U & (1 << source)) ? TRUE : FALSE;
800051f8:	19 c2 34 10 	ld.w %d2,[%a12]116
800051fc:	6f 52 fe 7f 	jz.t %d2,5,800051f8 <IfxI2c_I2c_write+0x1e8>
    i2c->PIRQSC.U = (1 << source);
80005200:	3b 00 02 20 	mov %d2,32
80005204:	59 c2 38 10 	st.w [%a12]120,%d2
        ris = i2c->RIS.U;
80005208:	19 c2 00 20 	ld.w %d2,[%a12]128
        if (ris & (1 << IFX_I2C_RIS_I2C_P_INT_OFF)) // check protocol flags
8000520c:	6f 52 07 00 	jz.t %d2,5,8000521a <IfxI2c_I2c_write+0x20a>
    i2c->PIRQSC.U = (1 << IFX_I2C_PIRQSC_AM_OFF) | (1 << IFX_I2C_PIRQSC_GC_OFF) | (1 << IFX_I2C_PIRQSC_MC_OFF) | (1 << IFX_I2C_PIRQSC_AL_OFF) | (1 << IFX_I2C_PIRQSC_NACK_OFF) | (1 << IFX_I2C_PIRQSC_TX_END_OFF) | (1 << IFX_I2C_PIRQSC_RX_OFF);
80005210:	3b f0 07 30 	mov %d3,127
80005214:	59 c3 38 10 	st.w [%a12]120,%d3
            status = IfxI2c_I2c_Status_error;
80005218:	82 44       	mov %d4,4
        if (ris & (1 << IFX_I2C_RIS_I2C_ERR_INT_OFF)) // error flags
8000521a:	6f 42 09 00 	jz.t %d2,4,8000522c <IfxI2c_I2c_write+0x21c>
    i2c->ERRIRQSC.U = (1 << IFX_I2C_ERRIRQSC_RXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_RXF_OFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_UFL_OFF) | (1 << IFX_I2C_ERRIRQSC_TXF_OFL_OFF);
8000521e:	3b f0 00 20 	mov %d2,15
80005222:	59 c2 28 10 	st.w [%a12]104,%d2
            status = IfxI2c_I2c_Status_error;
80005226:	82 48       	mov %d8,4
80005228:	1d ff 67 ff 	j 800050f6 <IfxI2c_I2c_write+0xe6>
8000522c:	02 48       	mov %d8,%d4
8000522e:	1d ff 64 ff 	j 800050f6 <IfxI2c_I2c_write+0xe6>

80005232 <IfxCpu_Trap_memoryManagementError>:
{
80005232:	40 ae       	mov.aa %a14,%sp
80005234:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80005236:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80005238:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
8000523c:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80005240:	8f 72 00 21 	and %d2,%d2,7
80005244:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80005248:	80 22       	mov.d %d2,%a2
8000524a:	0f 54 a0 30 	or %d3,%d4,%d5
8000524e:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80005252:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80005256:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80005258:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000525c:	00 80       	rfe 
}
8000525e:	00 90       	ret 

80005260 <IfxCpu_Trap_internalProtectionError>:
{
80005260:	40 ae       	mov.aa %a14,%sp
80005262:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80005264:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80005266:	b7 14 18 44 	insert %d4,%d4,1,8,24
8000526a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000526e:	8f 72 00 21 	and %d2,%d2,7
80005272:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80005276:	80 22       	mov.d %d2,%a2
80005278:	0f 54 a0 30 	or %d3,%d4,%d5
8000527c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
80005280:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80005284:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80005286:	0d 00 40 02 	rslcx 
    __asm("rfe");
8000528a:	00 80       	rfe 
}
8000528c:	00 90       	ret 

8000528e <IfxCpu_Trap_instructionError>:
{
8000528e:	40 ae       	mov.aa %a14,%sp
80005290:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80005292:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80005294:	b7 24 18 44 	insert %d4,%d4,2,8,24
80005298:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000529c:	8f 72 00 21 	and %d2,%d2,7
800052a0:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800052a4:	80 22       	mov.d %d2,%a2
800052a6:	0f 54 a0 30 	or %d3,%d4,%d5
800052aa:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
800052ae:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800052b2:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800052b4:	0d 00 40 02 	rslcx 
    __asm("rfe");
800052b8:	00 80       	rfe 
}
800052ba:	00 90       	ret 

800052bc <IfxCpu_Trap_contextManagementError>:
{
800052bc:	40 ae       	mov.aa %a14,%sp
800052be:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800052c0:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800052c2:	b7 34 18 44 	insert %d4,%d4,3,8,24
800052c6:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800052ca:	8f 72 00 21 	and %d2,%d2,7
800052ce:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800052d2:	80 22       	mov.d %d2,%a2
800052d4:	0f 54 a0 30 	or %d3,%d4,%d5
800052d8:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
800052dc:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
800052e0:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800052e2:	0d 00 40 02 	rslcx 
    __asm("rfe");
800052e6:	00 80       	rfe 
}
800052e8:	00 90       	ret 

800052ea <IfxCpu_Trap_busError>:
{
800052ea:	40 ae       	mov.aa %a14,%sp
800052ec:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
800052ee:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800052f0:	b7 44 18 44 	insert %d4,%d4,4,8,24
800052f4:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800052f8:	8f 72 00 21 	and %d2,%d2,7
800052fc:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80005300:	80 22       	mov.d %d2,%a2
80005302:	0f 54 a0 30 	or %d3,%d4,%d5
80005306:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
8000530a:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
8000530e:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80005310:	0d 00 40 02 	rslcx 
    __asm("rfe");
80005314:	00 80       	rfe 
}
80005316:	00 90       	ret 

80005318 <IfxCpu_Trap_assertion>:
{
80005318:	40 ae       	mov.aa %a14,%sp
8000531a:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
8000531c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000531e:	8f f4 0f 41 	and %d4,%d4,255
80005322:	3b 00 50 20 	mov %d2,1280
80005326:	a6 24       	or %d4,%d2
80005328:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000532c:	8f 72 00 21 	and %d2,%d2,7
80005330:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80005334:	80 22       	mov.d %d2,%a2
80005336:	0f 54 a0 30 	or %d3,%d4,%d5
8000533a:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
8000533e:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80005342:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80005344:	0d 00 40 02 	rslcx 
    __asm("rfe");
80005348:	00 80       	rfe 
}
8000534a:	00 90       	ret 

8000534c <IfxCpu_Trap_systemCall_Cpu0>:
{
8000534c:	40 ae       	mov.aa %a14,%sp
8000534e:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80005350:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80005352:	b7 64 18 44 	insert %d4,%d4,6,8,24
80005356:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
8000535a:	8f 72 00 21 	and %d2,%d2,7
8000535e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80005362:	80 22       	mov.d %d2,%a2
80005364:	0f 54 a0 30 	or %d3,%d4,%d5
80005368:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
8000536c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80005370:	0d 00 40 02 	rslcx 
    __asm("rfe");
80005374:	00 80       	rfe 
}
80005376:	00 90       	ret 

80005378 <IfxCpu_Trap_systemCall_Cpu1>:
{
80005378:	40 ae       	mov.aa %a14,%sp
8000537a:	20 08       	sub.a %sp,8
8000537c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
8000537e:	b7 64 18 44 	insert %d4,%d4,6,8,24
80005382:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80005386:	8f 72 00 21 	and %d2,%d2,7
8000538a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
8000538e:	80 22       	mov.d %d2,%a2
80005390:	0f 54 a0 30 	or %d3,%d4,%d5
80005394:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80005398:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
8000539c:	0d 00 40 02 	rslcx 
    __asm("rfe");
800053a0:	00 80       	rfe 
}
800053a2:	00 90       	ret 

800053a4 <IfxCpu_Trap_systemCall_Cpu2>:
{
800053a4:	40 ae       	mov.aa %a14,%sp
800053a6:	20 08       	sub.a %sp,8
800053a8:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800053aa:	b7 64 18 44 	insert %d4,%d4,6,8,24
800053ae:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800053b2:	8f 72 00 21 	and %d2,%d2,7
800053b6:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800053ba:	80 22       	mov.d %d2,%a2
800053bc:	0f 54 a0 30 	or %d3,%d4,%d5
800053c0:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
800053c4:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800053c8:	0d 00 40 02 	rslcx 
    __asm("rfe");
800053cc:	00 80       	rfe 
}
800053ce:	00 90       	ret 

800053d0 <IfxCpu_Trap_nonMaskableInterrupt>:
{
800053d0:	40 ae       	mov.aa %a14,%sp
800053d2:	20 08       	sub.a %sp,8
800053d4:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
800053d6:	b7 74 18 44 	insert %d4,%d4,7,8,24
800053da:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
800053de:	8f 72 00 21 	and %d2,%d2,7
800053e2:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
800053e6:	80 22       	mov.d %d2,%a2
800053e8:	0f 54 a0 30 	or %d3,%d4,%d5
800053ec:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
800053f0:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
800053f4:	0d 00 40 02 	rslcx 
    __asm("rfe");
800053f8:	00 80       	rfe 
}
800053fa:	00 90       	ret 

800053fc <IfxCpu_getIndex>:
    return cpuMode;
}


IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu)
{
800053fc:	40 ae       	mov.aa %a14,%sp
    IfxCpu_ResourceCpu result;
    uint32             index;
    result = IfxCpu_ResourceCpu_none;

    for (index = 0; index < IFXCPU_NUM_MODULES; index++)
800053fe:	82 02       	mov %d2,0
80005400:	1d 00 03 00 	j 80005406 <IfxCpu_getIndex+0xa>
80005404:	c2 12       	add %d2,1
80005406:	ff 32 18 80 	jge.u %d2,3,80005436 <IfxCpu_getIndex+0x3a>
    {
        if (IfxCpu_cfg_indexMap[index].module == cpu)
8000540a:	8f 32 00 30 	sh %d3,%d2,3
8000540e:	91 00 00 28 	movh.a %a2,32768
80005412:	d9 22 f4 b0 	lea %a2,[%a2]3828 <80000ef4 <IfxCpu_cfg_indexMap>>
80005416:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000541a:	54 23       	ld.w %d3,[%a2]
8000541c:	80 44       	mov.d %d4,%a4
8000541e:	5f 43 f3 ff 	jne %d3,%d4,80005404 <IfxCpu_getIndex+0x8>
        {
            result = (IfxCpu_ResourceCpu)IfxCpu_cfg_indexMap[index].index;
80005422:	06 32       	sh %d2,3
80005424:	91 00 00 28 	movh.a %a2,32768
80005428:	d9 22 f4 b0 	lea %a2,[%a2]3828 <80000ef4 <IfxCpu_cfg_indexMap>>
8000542c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80005430:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80005434:	00 90       	ret 
    result = IfxCpu_ResourceCpu_none;
80005436:	82 32       	mov %d2,3
        }
    }

    return result;
}
80005438:	00 90       	ret 

8000543a <IfxCpu_getCoreMode>:
{
8000543a:	40 ae       	mov.aa %a14,%sp
8000543c:	80 48       	mov.d %d8,%a4
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
8000543e:	6d ff df ff 	call 800053fc <IfxCpu_getIndex>


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80005442:	4d c0 e1 3f 	mfcr %d3,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80005446:	8f 73 00 31 	and %d3,%d3,7
    if (IfxCpu_getCoreIndex() != index)
8000544a:	5f 32 22 00 	jeq %d2,%d3,8000548e <IfxCpu_getCoreMode+0x54>
        dbgsr = cpu->DBGSR;
8000544e:	bb 00 d0 3f 	mov.u %d3,64768
80005452:	60 82       	mov.a %a2,%d8
80005454:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80005458:	54 23       	ld.w %d3,[%a2]
    if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_halt)
8000545a:	37 03 e2 40 	extr.u %d4,%d3,1,2
8000545e:	df 14 1c 00 	jeq %d4,1,80005496 <IfxCpu_getCoreMode+0x5c>
        if (dbgsr.B.HALT == (uint32)IfxCpu_DBGST_HALT_run)
80005462:	df 04 1c 80 	jne %d4,0,8000549a <IfxCpu_getCoreMode+0x60>
            pmcsr_val = &MODULE_SCU.PMCSR[index];
80005466:	06 22       	sh %d2,2
80005468:	7b 30 00 3f 	movh %d3,61443
8000546c:	1b 43 0d 36 	addi %d3,%d3,24788
80005470:	60 32       	mov.a %a2,%d3
80005472:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
            if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_normalMode)
80005476:	54 22       	ld.w %d2,[%a2]
80005478:	37 02 63 24 	extr.u %d2,%d2,8,3
8000547c:	df 12 11 00 	jeq %d2,1,8000549e <IfxCpu_getCoreMode+0x64>
                if (pmcsr_val->B.PMST == (uint32)IfxCpu_PMCSR_PMST_idleMode)
80005480:	54 22       	ld.w %d2,[%a2]
80005482:	37 02 63 24 	extr.u %d2,%d2,8,3
80005486:	df 32 0e 00 	jeq %d2,3,800054a2 <IfxCpu_getCoreMode+0x68>
    cpuMode = IfxCpu_CoreMode_unknown;
8000548a:	82 52       	mov %d2,5
8000548c:	00 90       	ret 
        dbgsr.U = __mfcr(CPU_DBGSR);
8000548e:	4d 00 d0 3f 	mfcr %d3,$dbgsr
80005492:	1d ff e4 ff 	j 8000545a <IfxCpu_getCoreMode+0x20>
        cpuMode = IfxCpu_CoreMode_halt;
80005496:	82 02       	mov %d2,0
80005498:	00 90       	ret 
            cpuMode = IfxCpu_CoreMode_unknown;
8000549a:	82 52       	mov %d2,5
8000549c:	00 90       	ret 
                cpuMode = IfxCpu_CoreMode_run;
8000549e:	82 12       	mov %d2,1
800054a0:	00 90       	ret 
                    cpuMode = IfxCpu_CoreMode_idle;
800054a2:	82 22       	mov %d2,2
}
800054a4:	00 90       	ret 

800054a6 <IfxCpu_setCoreMode>:
    *lock = 0;
}


boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode)
{
800054a6:	40 ae       	mov.aa %a14,%sp
800054a8:	80 4c       	mov.d %d12,%a4
800054aa:	02 48       	mov %d8,%d4
    uint8              reqslp;
    boolean            retValue;
    IfxCpu_ResourceCpu index = IfxCpu_getIndex(cpu);
800054ac:	6d ff a8 ff 	call 800053fc <IfxCpu_getIndex>
800054b0:	02 2a       	mov %d10,%d2

    /*Modes such as HALT, SLEEP and STBY are not handled at CPU level */
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
800054b2:	8b 08 20 42 	ne %d4,%d8,0
800054b6:	8b 38 20 32 	ne %d3,%d8,3
800054ba:	26 43       	and %d3,%d4
                || (mode == IfxCpu_CoreMode_stby)) ? FALSE : TRUE;
800054bc:	df 03 0a 00 	jeq %d3,0,800054d0 <IfxCpu_setCoreMode+0x2a>
800054c0:	df 48 05 00 	jeq %d8,4,800054ca <IfxCpu_setCoreMode+0x24>
800054c4:	82 19       	mov %d9,1
800054c6:	1d 00 06 00 	j 800054d2 <IfxCpu_setCoreMode+0x2c>
800054ca:	82 09       	mov %d9,0
800054cc:	1d 00 03 00 	j 800054d2 <IfxCpu_setCoreMode+0x2c>
800054d0:	82 09       	mov %d9,0
    retValue = ((mode == IfxCpu_CoreMode_halt) || (mode == IfxCpu_CoreMode_sleep)
800054d2:	8f f9 0f 91 	and %d9,%d9,255

    reqslp = (mode == IfxCpu_CoreMode_idle) ? IfxScu_PMCSR_REQSLP_Idle : IfxScu_PMCSR_REQSLP_Run;
800054d6:	8b 28 00 82 	eq %d8,%d8,2

    if (retValue == TRUE)
800054da:	df 09 04 80 	jne %d9,0,800054e2 <IfxCpu_setCoreMode+0x3c>
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
        }
    }

    return retValue;
}
800054de:	02 92       	mov %d2,%d9
800054e0:	00 90       	ret 
    reg.U = __mfcr(CPU_CORE_ID);
800054e2:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800054e6:	8f 72 00 21 	and %d2,%d2,7
        if (IfxCpu_getCoreIndex() != index)
800054ea:	5f 2a 24 00 	jeq %d10,%d2,80005532 <IfxCpu_setCoreMode+0x8c>
            uint16 safetyWdtPw = IfxScuWdt_getSafetyWatchdogPassword();
800054ee:	6d ff 75 e7 	call 800023d8 <IfxScuWdt_getSafetyWatchdogPassword>
800054f2:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearSafetyEndinit(safetyWdtPw);
800054f4:	02 24       	mov %d4,%d2
800054f6:	6d ff 1b e6 	call 8000212c <IfxScuWdt_clearSafetyEndinit>
            MODULE_SCU.PMCSR[(uint32)IfxCpu_getIndex(cpu)].B.REQSLP = reqslp;
800054fa:	1b 5a 03 20 	addi %d2,%d10,53
800054fe:	06 22       	sh %d2,2
80005500:	7b 30 00 3f 	movh %d3,61443
80005504:	1b 03 00 36 	addi %d3,%d3,24576
80005508:	60 32       	mov.a %a2,%d3
8000550a:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000550e:	54 23       	ld.w %d3,[%a2]
80005510:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80005514:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setSafetyEndinit(safetyWdtPw);
80005516:	02 b4       	mov %d4,%d11
80005518:	6d ff 90 e7 	call 80002438 <IfxScuWdt_setSafetyEndinit>
            cpu->DBGSR.B.HALT = 2; /*reset the HALT bit, if it is already done it is no harm in writing again */
8000551c:	bb 00 d0 2f 	mov.u %d2,64768
80005520:	60 c2       	mov.a %a2,%d12
80005522:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80005526:	54 22       	ld.w %d2,[%a2]
80005528:	b7 22 82 20 	insert %d2,%d2,2,1,2
8000552c:	74 22       	st.w [%a2],%d2
8000552e:	1d ff d8 ff 	j 800054de <IfxCpu_setCoreMode+0x38>
            uint16 cpuWdtPw = IfxScuWdt_getCpuWatchdogPassword();
80005532:	6d ff 41 e7 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
80005536:	02 2b       	mov %d11,%d2
            IfxScuWdt_clearCpuEndinit(cpuWdtPw);
80005538:	02 24       	mov %d4,%d2
8000553a:	6d ff d4 e5 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
            MODULE_SCU.PMCSR[(uint32)index].B.REQSLP = reqslp;
8000553e:	1b 5a 03 20 	addi %d2,%d10,53
80005542:	06 22       	sh %d2,2
80005544:	7b 30 00 3f 	movh %d3,61443
80005548:	1b 03 00 36 	addi %d3,%d3,24576
8000554c:	60 32       	mov.a %a2,%d3
8000554e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80005552:	54 23       	ld.w %d3,[%a2]
80005554:	37 83 02 30 	insert %d3,%d3,%d8,0,2
80005558:	74 23       	st.w [%a2],%d3
            IfxScuWdt_setCpuEndinit(cpuWdtPw);
8000555a:	02 b4       	mov %d4,%d11
8000555c:	6d ff 49 e7 	call 800023ee <IfxScuWdt_setCpuEndinit>
80005560:	1d ff bf ff 	j 800054de <IfxCpu_setCoreMode+0x38>

80005564 <IfxCpu_setProgramCounter>:


boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter)
{
80005564:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80005566:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000556a:	8f 72 00 21 	and %d2,%d2,7
    if (cpu < IfxCpu_ResourceCpu_none)
8000556e:	ff 32 17 80 	jge.u %d2,3,8000559c <IfxCpu_setProgramCounter+0x38>
        module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
80005572:	06 32       	sh %d2,3
80005574:	91 00 00 28 	movh.a %a2,32768
80005578:	d9 22 f4 b0 	lea %a2,[%a2]3828 <80000ef4 <IfxCpu_cfg_indexMap>>
8000557c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80005580:	54 22       	ld.w %d2,[%a2]
    boolean retVal = TRUE;

    if (cpu == IfxCpu_getAddress(IfxCpu_getCoreIndex()))
80005582:	80 43       	mov.d %d3,%a4
80005584:	5f 23 0f 00 	jeq %d3,%d2,800055a2 <IfxCpu_setProgramCounter+0x3e>
    {
        retVal = FALSE;
    }
    else
    {
        cpu->PC.B.PC = programCounter >> 1;
80005588:	bb 80 e0 2f 	mov.u %d2,65032
8000558c:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
80005590:	54 42       	ld.w %d2,[%a4]
80005592:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80005596:	74 42       	st.w [%a4],%d2
    boolean retVal = TRUE;
80005598:	82 12       	mov %d2,1
8000559a:	00 90       	ret 
        module = NULL_PTR;
8000559c:	82 02       	mov %d2,0
8000559e:	1d ff f2 ff 	j 80005582 <IfxCpu_setProgramCounter+0x1e>
        retVal = FALSE;
800055a2:	82 02       	mov %d2,0
    }

    return retVal;
}
800055a4:	00 90       	ret 

800055a6 <IfxCpu_startCore>:
    return retVal;
}


boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter)
{
800055a6:	40 ae       	mov.aa %a14,%sp
800055a8:	80 49       	mov.d %d9,%a4
    boolean retVal = TRUE;

    /* Set the PC for Core 1 */
    retVal &= IfxCpu_setProgramCounter(cpu, programCounter);
800055aa:	6d ff dd ff 	call 80005564 <IfxCpu_setProgramCounter>
800055ae:	8f 12 00 81 	and %d8,%d2,1
    /* Get the mode for Core 1 and set it to RUNNING */

    /* Core not running already */
    if (IfxCpu_getCoreMode(cpu) == IfxCpu_CoreMode_halt)
800055b2:	60 94       	mov.a %a4,%d9
800055b4:	6d ff 43 ff 	call 8000543a <IfxCpu_getCoreMode>
800055b8:	df 02 04 00 	jeq %d2,0,800055c0 <IfxCpu_startCore+0x1a>
    {
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
    }

    return retVal;
}
800055bc:	02 82       	mov %d2,%d8
800055be:	00 90       	ret 
        retVal &= IfxCpu_setCoreMode(cpu, IfxCpu_CoreMode_run);
800055c0:	82 14       	mov %d4,1
800055c2:	60 94       	mov.a %a4,%d9
800055c4:	6d ff 71 ff 	call 800054a6 <IfxCpu_setCoreMode>
800055c8:	26 28       	and %d8,%d2
800055ca:	1d ff f9 ff 	j 800055bc <IfxCpu_startCore+0x16>

800055ce <IfxCpu_waitEvent>:


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
800055ce:	40 ae       	mov.aa %a14,%sp
800055d0:	40 4c       	mov.aa %a12,%a4
800055d2:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
800055d4:	80 42       	mov.d %d2,%a4
800055d6:	b7 02 1c 20 	insert %d2,%d2,0,0,28
800055da:	7b 00 00 3d 	movh %d3,53248
800055de:	5f 32 28 00 	jeq %d2,%d3,8000562e <IfxCpu_waitEvent+0x60>
800055e2:	6d ff f0 e2 	call 80001bc2 <IfxScuCcu_getSourceFrequency>
800055e6:	91 30 00 2f 	movh.a %a2,61443
800055ea:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x6002e034>>
800055ee:	54 23       	ld.w %d3,[%a2]
800055f0:	37 03 64 34 	extr.u %d3,%d3,8,4
800055f4:	4b 03 41 31 	itof %d3,%d3
800055f8:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
800055fc:	7b a0 47 34 	movh %d3,17530
80005600:	4b 32 51 20 	div.f %d2,%d2,%d3
80005604:	4b 08 61 41 	utof %d4,%d8
80005608:	4b 24 41 40 	mul.f %d4,%d4,%d2
8000560c:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
80005610:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x5fff8010>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80005614:	54 c2       	ld.w %d2,[%a12]
80005616:	8f 72 00 21 	and %d2,%d2,7
8000561a:	df 72 18 00 	jeq %d2,7,8000564a <IfxCpu_waitEvent+0x7c>
    __asm__ volatile ("nop" : : : "memory");
8000561e:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80005620:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x5fff8010>
80005624:	a2 42       	sub %d2,%d4
80005626:	3f 32 f7 ff 	jlt.u %d2,%d3,80005614 <IfxCpu_waitEvent+0x46>
        {
            errorcnt = 1;
8000562a:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
8000562c:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
8000562e:	80 42       	mov.d %d2,%a4
80005630:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
80005634:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
80005638:	4d c0 e1 2f 	mfcr %d2,$core_id
8000563c:	8f c2 01 20 	sh %d2,%d2,28
80005640:	0b 23 80 20 	sub %d2,%d3,%d2
80005644:	60 2c       	mov.a %a12,%d2
80005646:	1d ff ce ff 	j 800055e2 <IfxCpu_waitEvent+0x14>
    boolean          errorcnt      = 0U;
8000564a:	82 02       	mov %d2,0
8000564c:	00 90       	ret 

8000564e <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
8000564e:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
80005650:	4d c0 e1 2f 	mfcr %d2,$core_id
80005654:	82 13       	mov %d3,1
80005656:	57 30 21 22 	imask %e2,%d3,%d2,1
8000565a:	49 42 40 08 	ldmst [%a4]0,%e2
}
8000565e:	00 90       	ret 

80005660 <Ifx_Cpp_Init>:
#pragma section
#elif defined(__DCC__)
#pragma section CONST
#endif
static void Ifx_Cpp_Init(void)
{
80005660:	40 ae       	mov.aa %a14,%sp
    Ifx_C_Init();           /*Initialization of C runtime variables */
80005662:	6d 00 f6 0e 	call 8000744e <Ifx_C_Init>
#elif defined (__HIGHTEC__)
extern void _init(void); /* cpp initialization */
    _init();
#elif defined (__GNUC__) && !defined(__HIGHTEC__)
    extern void _init(void); /* cpp initialization */
    _init();
80005666:	6d 00 f5 56 	call 80010450 <_init>
#endif
}
8000566a:	00 90       	ret 

8000566c <hardware_init_hook>:
{}
8000566c:	00 90       	ret 

8000566e <software_init_hook>:
{}
8000566e:	00 90       	ret 

80005670 <_Core0_start>:
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80005670:	91 30 00 2f 	movh.a %a2,61443
80005674:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
    __setareg(sp, __USTACK(0));
80005678:	91 20 00 37 	movh.a %a3,28674
8000567c:	37 02 6e 21 	extr.u %d2,%d2,2,14
80005680:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80005684:	8f f2 83 81 	xor %d8,%d2,63
80005688:	80 32       	mov.d %d2,%a3
8000568a:	1b 02 60 29 	addi %d2,%d2,-27136
8000568e:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80005690:	0d 00 80 04 	dsync 
    __mtcr(CPU_PSW, IFXCSTART0_PSW_DEFAULT);
80005694:	3b 00 98 20 	mov %d2,2432
80005698:	cd 42 e0 0f 	mtcr $psw,%d2
    pcxi  = __mfcr(CPU_PCXI);
8000569c:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART0_PCX_O_S_DEFAULT; /*0xfff00000; */
800056a0:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
800056a4:	cd 02 e0 0f 	mtcr $pcxi,%d2
    if (enable)
    {                           /* Step 3: Initiate invalidation of current cache contents if any */
        Ifx_CPU_PCON1 pcon1;
        pcon1.U       = 0;
        pcon1.B.PCINV = 1;
        __mtcr(CPU_PCON1, pcon1.U);
800056a8:	82 12       	mov %d2,1
800056aa:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800056ae:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800056b2:	8f 72 00 21 	and %d2,%d2,7
    }

    uint32 coreIndex   = IfxCpu_getCoreIndex();
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800056b6:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
800056ba:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
800056be:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800056c0:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800056c2:	37 02 6e 21 	extr.u %d2,%d2,2,14
    /*PCACHE enable steps */
    {                           /* Step 1: Set PCBYP to 0 if cache is enabled */
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800056c6:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800056ca:	6f 13 41 81 	jnz.t %d3,1,8000594c <_Core0_start+0x2dc>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800056ce:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800056d2:	54 22       	ld.w %d2,[%a2]
800056d4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800056d8:	a6 32       	or %d2,%d3
800056da:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800056de:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800056e0:	54 22       	ld.w %d2,[%a2]
800056e2:	6f 02 ff ff 	jnz.t %d2,0,800056e0 <_Core0_start+0x70>
        Ifx_CPU_PCON0 pcon0;
        pcon0.U       = 0;
        pcon0.B.PCBYP = enable ? 0 : 1; /*depending on the enable bypass bit is reset/set */
        __mtcr(CPU_PCON0, pcon0.U);
800056e6:	82 02       	mov %d2,0
800056e8:	cd c2 20 09 	mtcr $pcon0,%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800056ec:	54 22       	ld.w %d2,[%a2]
800056ee:	6f 12 09 00 	jz.t %d2,1,80005700 <_Core0_start+0x90>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800056f2:	54 22       	ld.w %d2,[%a2]
800056f4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800056f8:	a6 32       	or %d2,%d3
800056fa:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800056fe:	74 22       	st.w [%a2],%d2

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005700:	54 22       	ld.w %d2,[%a2]
80005702:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005706:	a6 32       	or %d2,%d3
80005708:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000570c:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
8000570e:	54 22       	ld.w %d2,[%a2]
80005710:	6f 02 ff 7f 	jz.t %d2,0,8000570e <_Core0_start+0x9e>
    __asm__ volatile ("isync" : : : "memory");
80005714:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80005718:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
8000571c:	7b 30 00 3f 	movh %d3,61443
80005720:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80005724:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80005728:	13 c2 20 23 	madd %d2,%d3,%d2,12
8000572c:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
8000572e:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80005730:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80005732:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80005736:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
8000573a:	6f 13 fd 80 	jnz.t %d3,1,80005934 <_Core0_start+0x2c4>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000573e:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005742:	54 22       	ld.w %d2,[%a2]
80005744:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005748:	a6 32       	or %d2,%d3
8000574a:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000574e:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80005750:	54 22       	ld.w %d2,[%a2]
80005752:	6f 02 ff ff 	jnz.t %d2,0,80005750 <_Core0_start+0xe0>
        __mtcr(CPU_DCON0, dcon0.U);
80005756:	82 22       	mov %d2,2
80005758:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
8000575c:	54 22       	ld.w %d2,[%a2]
8000575e:	6f 12 09 00 	jz.t %d2,1,80005770 <_Core0_start+0x100>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005762:	54 22       	ld.w %d2,[%a2]
80005764:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005768:	a6 32       	or %d2,%d3
8000576a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000576e:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005770:	54 22       	ld.w %d2,[%a2]
80005772:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005776:	a6 32       	or %d2,%d3
80005778:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000577c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8000577e:	54 22       	ld.w %d2,[%a2]
80005780:	6f 02 ff 7f 	jz.t %d2,0,8000577e <_Core0_start+0x10e>
80005784:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80005788:	91 30 00 2f 	movh.a %a2,61443
8000578c:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80005790:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005794:	8f 28 00 30 	sh %d3,%d8,2
    if (watchdog->CON0.B.LCK)
80005798:	6f 12 09 00 	jz.t %d2,1,800057aa <_Core0_start+0x13a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000579c:	54 22       	ld.w %d2,[%a2]
8000579e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800057a2:	a6 32       	or %d2,%d3
800057a4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800057a8:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800057aa:	91 30 00 2f 	movh.a %a2,61443
800057ae:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800057b2:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
800057b6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800057ba:	a6 32       	or %d2,%d3
800057bc:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800057c0:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800057c2:	54 22       	ld.w %d2,[%a2]
800057c4:	6f 02 ff ff 	jnz.t %d2,0,800057c2 <_Core0_start+0x152>
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(0));
800057c8:	91 00 00 38 	movh.a %a3,32768
800057cc:	80 32       	mov.d %d2,%a3
800057ce:	1b 02 10 20 	addi %d2,%d2,256
800057d2:	cd 42 e2 0f 	mtcr $btv,%d2
    __mtcr(CPU_BIV, (uint32)__INTTAB(0));
800057d6:	91 f0 01 38 	movh.a %a3,32799
800057da:	80 32       	mov.d %d2,%a3
800057dc:	1b 02 00 24 	addi %d2,%d2,16384
800057e0:	cd 02 e2 0f 	mtcr $biv,%d2
    __mtcr(CPU_ISP, (uint32)__ISTACK(0));
800057e4:	91 20 00 37 	movh.a %a3,28674
800057e8:	80 32       	mov.d %d2,%a3
800057ea:	1b 02 b0 29 	addi %d2,%d2,-25856
800057ee:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
800057f2:	54 22       	ld.w %d2,[%a2]
800057f4:	6f 12 09 00 	jz.t %d2,1,80005806 <_Core0_start+0x196>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800057f8:	54 22       	ld.w %d2,[%a2]
800057fa:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800057fe:	a6 32       	or %d2,%d3
80005800:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005804:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005806:	91 30 00 2f 	movh.a %a2,61443
8000580a:	19 22 00 46 	ld.w %d2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
8000580e:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x6002e100>>
80005812:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005816:	a6 32       	or %d2,%d3
80005818:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000581c:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
8000581e:	54 22       	ld.w %d2,[%a2]
80005820:	6f 02 ff 7f 	jz.t %d2,0,8000581e <_Core0_start+0x1ae>
    __setareg(a0, __SDATA1(0));
80005824:	91 10 00 26 	movh.a %a2,24577
80005828:	80 22       	mov.d %d2,%a2
8000582a:	1b 02 00 28 	addi %d2,%d2,-32768
8000582e:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(0));
80005830:	91 10 00 28 	movh.a %a2,32769
80005834:	80 22       	mov.d %d2,%a2
80005836:	1b 02 00 28 	addi %d2,%d2,-32768
8000583a:	60 21       	mov.a %a1,%d2
    __setareg(a8, __SDATA3(0));
8000583c:	91 10 00 28 	movh.a %a2,32769
80005840:	80 22       	mov.d %d2,%a2
80005842:	1b 02 00 28 	addi %d2,%d2,-32768
80005846:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(0));
80005848:	91 10 00 29 	movh.a %a2,36865
8000584c:	80 22       	mov.d %d2,%a2
8000584e:	1b 02 00 28 	addi %d2,%d2,-32768
80005852:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80005854:	91 20 00 37 	movh.a %a3,28674
80005858:	91 20 00 27 	movh.a %a2,28674
8000585c:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70019c00 <__CSA0>>
80005860:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7001bc00 <__CSA0_END>>
80005864:	01 32 20 20 	sub.a %a2,%a2,%a3
80005868:	80 22       	mov.d %d2,%a2
8000586a:	8f a2 1f 70 	sh %d7,%d2,-6
    uint32 *prvCsa      = csaBegin;
8000586e:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80005870:	1b d7 ff 0f 	addi %d0,%d7,-3
    for (k = 0U; k < numOfCsa; k++)
80005874:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80005876:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80005878:	7b f0 00 40 	movh %d4,15
    for (k = 0U; k < numOfCsa; k++)
8000587c:	df 07 27 00 	jeq %d7,0,800058ca <_Core0_start+0x25a>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80005880:	37 02 70 53 	extr.u %d5,%d2,6,16
80005884:	8f 42 1f 60 	sh %d6,%d2,-12
80005888:	26 46       	and %d6,%d4
8000588a:	a6 65       	or %d5,%d6
        if (k == 0U)
8000588c:	df 03 16 00 	jeq %d3,0,800058b8 <_Core0_start+0x248>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80005890:	74 25       	st.w [%a2],%d5
        if (k == (numOfCsa - 3U))
80005892:	5f 03 04 80 	jne %d3,%d0,8000589a <_Core0_start+0x22a>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80005896:	cd c5 e3 0f 	mtcr $lcx,%d5
    for (k = 0U; k < numOfCsa; k++)
8000589a:	c2 13       	add %d3,1
8000589c:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
8000589e:	1b 02 04 50 	addi %d5,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800058a2:	5f 37 0f 00 	jeq %d7,%d3,800058c0 <_Core0_start+0x250>
        nxtCsa += 16U;           /* next CSA */
800058a6:	02 52       	mov %d2,%d5
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
800058a8:	37 02 70 53 	extr.u %d5,%d2,6,16
800058ac:	8f 42 1f 60 	sh %d6,%d2,-12
800058b0:	26 46       	and %d6,%d4
800058b2:	a6 65       	or %d5,%d6
        if (k == 0U)
800058b4:	df 03 ee ff 	jne %d3,0,80005890 <_Core0_start+0x220>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
800058b8:	cd 85 e3 0f 	mtcr $fcx,%d5
800058bc:	1d ff eb ff 	j 80005892 <_Core0_start+0x222>
800058c0:	1b f7 ff 2f 	addi %d2,%d7,-1
800058c4:	06 62       	sh %d2,6
800058c6:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
800058ca:	82 02       	mov %d2,0
800058cc:	74 22       	st.w [%a2],%d2
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
800058ce:	6d ff 85 e5 	call 800023d8 <IfxScuWdt_getSafetyWatchdogPassword>
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
800058d2:	02 84       	mov %d4,%d8
        uint16 safetyWdtPassword = IfxScuWdt_getSafetyWatchdogPassword();
800058d4:	02 29       	mov %d9,%d2
        IfxScuWdt_disableCpuWatchdog(cpuWdtPassword);
800058d6:	6d ff 53 e4 	call 8000217c <IfxScuWdt_disableCpuWatchdog>
        IfxScuWdt_disableSafetyWatchdog(safetyWdtPassword);
800058da:	02 94       	mov %d4,%d9
800058dc:	6d ff 8f e4 	call 800021fa <IfxScuWdt_disableSafetyWatchdog>
       	hardware_init_hook();
800058e0:	6d ff c6 fe 	call 8000566c <hardware_init_hook>
        Ifx_Cpp_Init();
800058e4:	6d ff be fe 	call 80005660 <Ifx_Cpp_Init>
       	software_init_hook();
800058e8:	6d ff c3 fe 	call 8000566e <software_init_hook>
        IfxScuWdt_enableCpuWatchdog(cpuWdtPassword);
800058ec:	02 84       	mov %d4,%d8
800058ee:	6d ff d5 e4 	call 80002298 <IfxScuWdt_enableCpuWatchdog>
        IfxScuWdt_enableSafetyWatchdog(safetyWdtPassword);
800058f2:	02 94       	mov %d4,%d9
800058f4:	6d ff 11 e5 	call 80002316 <IfxScuWdt_enableSafetyWatchdog>
    IFXCPU_CSTART_CCU_INIT_HOOK();
800058f8:	91 00 00 48 	movh.a %a4,32768
800058fc:	d9 44 cc c0 	lea %a4,[%a4]3852 <80000f0c <IfxScuCcu_defaultClockConfig>>
80005900:	6d ff 50 e2 	call 80001da0 <IfxScuCcu_init>
    (void)IfxCpu_startCore(&MODULE_CPU1, (uint32)&_Core1_start);       /*The status returned by function call is ignored */
80005904:	91 00 00 28 	movh.a %a2,32768
80005908:	80 22       	mov.d %d2,%a2
8000590a:	1b 42 96 45 	addi %d4,%d2,22884
8000590e:	91 30 88 4f 	movh.a %a4,63619
80005912:	6d ff 4a fe 	call 800055a6 <IfxCpu_startCore>
    (void)IfxCpu_startCore(&MODULE_CPU2, (uint32)&_Core2_start);       /*The status returned by function call is ignored */
80005916:	91 00 00 28 	movh.a %a2,32768
8000591a:	80 22       	mov.d %d2,%a2
8000591c:	1b 22 c0 45 	addi %d4,%d2,23554
80005920:	91 50 88 4f 	movh.a %a4,63621
80005924:	6d ff 41 fe 	call 800055a6 <IfxCpu_startCore>
    __non_return_call(core0_main);
80005928:	91 00 00 28 	movh.a %a2,32768
8000592c:	d9 22 48 67 	lea %a2,[%a2]30088 <80007588 <core0_main>>
80005930:	dc 02       	ji %a2
}
80005932:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005934:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005936:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000593a:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000593e:	0f 34 a0 20 	or %d2,%d4,%d3
80005942:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005946:	74 22       	st.w [%a2],%d2
80005948:	1d ff fd fe 	j 80005742 <_Core0_start+0xd2>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000594c:	54 24       	ld.w %d4,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000594e:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005952:	b7 04 10 40 	insert %d4,%d4,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005956:	0f 34 a0 20 	or %d2,%d4,%d3
8000595a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000595e:	74 22       	st.w [%a2],%d2
80005960:	1d ff b9 fe 	j 800056d2 <_Core0_start+0x62>

80005964 <_Core1_start>:
    password  = watchdog->CON0.B.PW;
80005964:	91 30 00 2f 	movh.a %a2,61443
80005968:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
8000596c:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80005970:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[1]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(1);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(1));
80005974:	91 20 00 26 	movh.a %a2,24578
80005978:	8f f2 83 41 	xor %d4,%d2,63
8000597c:	80 22       	mov.d %d2,%a2
8000597e:	1b 02 60 2b 	addi %d2,%d2,-18944
80005982:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80005984:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART1_PSW_DEFAULT);    /* 0x00000980 */
80005988:	3b 00 98 20 	mov %d2,2432
8000598c:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
80005990:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART1_PCX_O_S_DEFAULT; /*0xfff00000; */
80005994:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80005998:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
8000599c:	82 12       	mov %d2,1
8000599e:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
800059a2:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800059a6:	7b 30 00 3f 	movh %d3,61443
800059aa:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800059ae:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
800059b2:	13 c2 20 23 	madd %d2,%d3,%d2,12
800059b6:	60 22       	mov.a %a2,%d2
800059b8:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
800059ba:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
800059bc:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
800059c0:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
800059c4:	6f 13 13 81 	jnz.t %d3,1,80005bea <_Core1_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800059c8:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800059cc:	54 22       	ld.w %d2,[%a2]
800059ce:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800059d2:	a6 32       	or %d2,%d3
800059d4:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800059d8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800059da:	54 22       	ld.w %d2,[%a2]
800059dc:	6f 02 ff ff 	jnz.t %d2,0,800059da <_Core1_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
800059e0:	82 02       	mov %d2,0
800059e2:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
800059e6:	54 22       	ld.w %d2,[%a2]
800059e8:	6f 12 09 00 	jz.t %d2,1,800059fa <_Core1_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800059ec:	54 22       	ld.w %d2,[%a2]
800059ee:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800059f2:	a6 32       	or %d2,%d3
800059f4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800059f8:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800059fa:	54 22       	ld.w %d2,[%a2]
800059fc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005a00:	a6 32       	or %d2,%d3
80005a02:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005a06:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80005a08:	54 22       	ld.w %d2,[%a2]
80005a0a:	6f 02 ff 7f 	jz.t %d2,0,80005a08 <_Core1_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
80005a0e:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80005a12:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80005a16:	7b 30 00 3f 	movh %d3,61443
80005a1a:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80005a1e:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80005a22:	13 c2 20 23 	madd %d2,%d3,%d2,12
80005a26:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80005a28:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80005a2a:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80005a2c:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80005a30:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80005a34:	6f 13 cf 80 	jnz.t %d3,1,80005bd2 <_Core1_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005a38:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005a3c:	54 22       	ld.w %d2,[%a2]
80005a3e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005a42:	a6 32       	or %d2,%d3
80005a44:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005a48:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80005a4a:	54 22       	ld.w %d2,[%a2]
80005a4c:	6f 02 ff ff 	jnz.t %d2,0,80005a4a <_Core1_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
80005a50:	82 02       	mov %d2,0
80005a52:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80005a56:	54 22       	ld.w %d2,[%a2]
80005a58:	6f 12 09 00 	jz.t %d2,1,80005a6a <_Core1_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005a5c:	54 22       	ld.w %d2,[%a2]
80005a5e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005a62:	a6 32       	or %d2,%d3
80005a64:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005a68:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005a6a:	54 22       	ld.w %d2,[%a2]
80005a6c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005a70:	a6 32       	or %d2,%d3
80005a72:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005a76:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80005a78:	54 22       	ld.w %d2,[%a2]
80005a7a:	6f 02 ff 7f 	jz.t %d2,0,80005a78 <_Core1_start+0x114>
80005a7e:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80005a82:	91 30 00 2f 	movh.a %a2,61443
80005a86:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80005a8a:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005a8e:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
80005a90:	6f 12 09 00 	jz.t %d2,1,80005aa2 <_Core1_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005a94:	54 22       	ld.w %d2,[%a2]
80005a96:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005a9a:	a6 42       	or %d2,%d4
80005a9c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005aa0:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005aa2:	91 30 00 2f 	movh.a %a2,61443
80005aa6:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80005aaa:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80005aae:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005ab2:	a6 42       	or %d2,%d4
80005ab4:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005ab8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80005aba:	54 22       	ld.w %d2,[%a2]
80005abc:	6f 02 ff ff 	jnz.t %d2,0,80005aba <_Core1_start+0x156>

    /* Clear the ENDINIT bit in the WDT_CON1 register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(1));
80005ac0:	91 f0 01 38 	movh.a %a3,32799
80005ac4:	80 32       	mov.d %d2,%a3
80005ac6:	1b 02 20 26 	addi %d2,%d2,25088
80005aca:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(1));
80005ace:	91 f0 01 38 	movh.a %a3,32799
80005ad2:	80 32       	mov.d %d2,%a3
80005ad4:	1b 02 00 24 	addi %d2,%d2,16384
80005ad8:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(1));
80005adc:	91 20 00 36 	movh.a %a3,24578
80005ae0:	80 32       	mov.d %d2,%a3
80005ae2:	1b 02 b0 2b 	addi %d2,%d2,-17664
80005ae6:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80005aea:	54 22       	ld.w %d2,[%a2]
80005aec:	6f 12 09 00 	jz.t %d2,1,80005afe <_Core1_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005af0:	54 22       	ld.w %d2,[%a2]
80005af2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005af6:	a6 42       	or %d2,%d4
80005af8:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005afc:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005afe:	91 30 00 2f 	movh.a %a2,61443
80005b02:	19 22 0c 46 	ld.w %d2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80005b06:	d9 22 0c 46 	lea %a2,[%a2]24844 <f003610c <_SMALL_DATA4_+0x6002e10c>>
80005b0a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005b0e:	a6 42       	or %d2,%d4
80005b10:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005b14:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80005b16:	54 22       	ld.w %d2,[%a2]
80005b18:	6f 02 ff 7f 	jz.t %d2,0,80005b16 <_Core1_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[1], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(1));
80005b1c:	91 10 00 26 	movh.a %a2,24577
80005b20:	80 22       	mov.d %d2,%a2
80005b22:	1b 02 00 28 	addi %d2,%d2,-32768
80005b26:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(1));
80005b28:	91 10 00 28 	movh.a %a2,32769
80005b2c:	80 22       	mov.d %d2,%a2
80005b2e:	1b 02 00 28 	addi %d2,%d2,-32768
80005b32:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialised */
    __setareg(a8, __SDATA3(1));
80005b34:	91 10 00 28 	movh.a %a2,32769
80005b38:	80 22       	mov.d %d2,%a2
80005b3a:	1b 02 00 28 	addi %d2,%d2,-32768
80005b3e:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(1));
80005b40:	91 10 00 29 	movh.a %a2,36865
80005b44:	80 22       	mov.d %d2,%a2
80005b46:	1b 02 00 28 	addi %d2,%d2,-32768
80005b4a:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80005b4c:	91 20 00 36 	movh.a %a3,24578
80005b50:	91 20 00 26 	movh.a %a2,24578
80005b54:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <6001bc00 <__CSA1>>
80005b58:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <6001dc00 <__CSA1_END>>
80005b5c:	01 32 20 20 	sub.a %a2,%a2,%a3
80005b60:	80 22       	mov.d %d2,%a2
80005b62:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80005b66:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80005b68:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80005b6c:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80005b6e:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80005b70:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80005b74:	df 06 27 00 	jeq %d6,0,80005bc2 <_Core1_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80005b78:	37 02 70 43 	extr.u %d4,%d2,6,16
80005b7c:	8f 42 1f 50 	sh %d5,%d2,-12
80005b80:	26 75       	and %d5,%d7
80005b82:	a6 54       	or %d4,%d5
        if (k == 0U)
80005b84:	df 03 16 00 	jeq %d3,0,80005bb0 <_Core1_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80005b88:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80005b8a:	5f 03 04 80 	jne %d3,%d0,80005b92 <_Core1_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80005b8e:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80005b92:	c2 13       	add %d3,1
80005b94:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80005b96:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80005b9a:	5f 36 0f 00 	jeq %d6,%d3,80005bb8 <_Core1_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80005b9e:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80005ba0:	37 02 70 43 	extr.u %d4,%d2,6,16
80005ba4:	8f 42 1f 50 	sh %d5,%d2,-12
80005ba8:	26 75       	and %d5,%d7
80005baa:	a6 54       	or %d4,%d5
        if (k == 0U)
80005bac:	df 03 ee ff 	jne %d3,0,80005b88 <_Core1_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80005bb0:	cd 84 e3 0f 	mtcr $fcx,%d4
80005bb4:	1d ff eb ff 	j 80005b8a <_Core1_start+0x226>
80005bb8:	1b f6 ff 2f 	addi %d2,%d6,-1
80005bbc:	06 62       	sh %d2,6
80005bbe:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80005bc2:	82 02       	mov %d2,0
80005bc4:	74 22       	st.w [%a2],%d2

    IfxCpu_initCSA((uint32 *)__CSA(1), (uint32 *)__CSA_END(1));

    /*Call main function of Cpu0 */
    __non_return_call(core1_main);
80005bc6:	91 00 00 28 	movh.a %a2,32768
80005bca:	d9 22 50 a7 	lea %a2,[%a2]30352 <80007690 <core1_main>>
80005bce:	dc 02       	ji %a2
}
80005bd0:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005bd2:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005bd4:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005bd8:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005bdc:	0f 35 a0 20 	or %d2,%d5,%d3
80005be0:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005be4:	74 22       	st.w [%a2],%d2
80005be6:	1d ff 2b ff 	j 80005a3c <_Core1_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005bea:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005bec:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005bf0:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005bf4:	0f 35 a0 20 	or %d2,%d5,%d3
80005bf8:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005bfc:	74 22       	st.w [%a2],%d2
80005bfe:	1d ff e7 fe 	j 800059cc <_Core1_start+0x68>

80005c02 <_Core2_start>:
    password  = watchdog->CON0.B.PW;
80005c02:	91 30 00 2f 	movh.a %a2,61443
80005c06:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80005c0a:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80005c0e:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[2]);

    IFX_CFG_CPU_CSTART_PRE_C_INIT_HOOK(2);  /*Test Stack, CSA and Cache */

    /* Load user stack pointer */
    __setareg(sp, __USTACK(2));
80005c12:	91 20 00 25 	movh.a %a2,20482
80005c16:	8f f2 83 41 	xor %d4,%d2,63
80005c1a:	80 22       	mov.d %d2,%a2
80005c1c:	1b 02 60 2b 	addi %d2,%d2,-18944
80005c20:	60 2a       	mov.a %sp,%d2
    __asm__ volatile ("dsync" : : : "memory");
80005c22:	0d 00 80 04 	dsync 
    __dsync();

    /* Set the PSW to its reset value in case of a warm start,clear PSW.IS */
    __mtcr(CPU_PSW, IFXCSTART2_PSW_DEFAULT);    /* 0x00000980 */
80005c26:	3b 00 98 20 	mov %d2,2432
80005c2a:	cd 42 e0 0f 	mtcr $psw,%d2

    /* Set the PCXS and PCXO to its reset value in case of a warm start */
    pcxi  = __mfcr(CPU_PCXI);
80005c2e:	4d 00 e0 2f 	mfcr %d2,$pcxi
    pcxi &= IFXCSTART2_PCX_O_S_DEFAULT; /*0xfff00000; */
80005c32:	b7 02 14 20 	insert %d2,%d2,0,0,20
    __mtcr(CPU_PCXI, pcxi);
80005c36:	cd 02 e0 0f 	mtcr $pcxi,%d2
        __mtcr(CPU_PCON1, pcon1.U);
80005c3a:	82 12       	mov %d2,1
80005c3c:	cd 42 20 09 	mtcr $pcon1,%d2
    reg.U = __mfcr(CPU_CORE_ID);
80005c40:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80005c44:	7b 30 00 3f 	movh %d3,61443
80005c48:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80005c4c:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80005c50:	13 c2 20 23 	madd %d2,%d3,%d2,12
80005c54:	60 22       	mov.a %a2,%d2
80005c56:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80005c58:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80005c5a:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80005c5e:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80005c62:	6f 13 13 81 	jnz.t %d3,1,80005e88 <_Core2_start+0x286>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005c66:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005c6a:	54 22       	ld.w %d2,[%a2]
80005c6c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005c70:	a6 32       	or %d2,%d3
80005c72:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005c76:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80005c78:	54 22       	ld.w %d2,[%a2]
80005c7a:	6f 02 ff ff 	jnz.t %d2,0,80005c78 <_Core2_start+0x76>
        __mtcr(CPU_PCON0, pcon0.U);
80005c7e:	82 02       	mov %d2,0
80005c80:	cd c2 20 09 	mtcr $pcon0,%d2
    if (watchdog->CON0.B.LCK)
80005c84:	54 22       	ld.w %d2,[%a2]
80005c86:	6f 12 09 00 	jz.t %d2,1,80005c98 <_Core2_start+0x96>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005c8a:	54 22       	ld.w %d2,[%a2]
80005c8c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005c90:	a6 32       	or %d2,%d3
80005c92:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005c96:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005c98:	54 22       	ld.w %d2,[%a2]
80005c9a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005c9e:	a6 32       	or %d2,%d3
80005ca0:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005ca4:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80005ca6:	54 22       	ld.w %d2,[%a2]
80005ca8:	6f 02 ff 7f 	jz.t %d2,0,80005ca6 <_Core2_start+0xa4>
    __asm__ volatile ("isync" : : : "memory");
80005cac:	0d 00 c0 04 	isync 
    reg.U = __mfcr(CPU_CORE_ID);
80005cb0:	4d c0 e1 2f 	mfcr %d2,$core_id
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80005cb4:	7b 30 00 3f 	movh %d3,61443
80005cb8:	1b 03 10 36 	addi %d3,%d3,24832
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80005cbc:	8f 72 00 21 	and %d2,%d2,7
    uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
80005cc0:	13 c2 20 23 	madd %d2,%d3,%d2,12
80005cc4:	60 22       	mov.a %a2,%d2
    password  = watchdog->CON0.B.PW;
80005cc6:	54 22       	ld.w %d2,[%a2]
    if (watchdog->CON0.B.LCK)
80005cc8:	54 23       	ld.w %d3,[%a2]
    password  = watchdog->CON0.B.PW;
80005cca:	37 02 6e 21 	extr.u %d2,%d2,2,14
        IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
80005cce:	8f f2 83 21 	xor %d2,%d2,63
    if (watchdog->CON0.B.LCK)
80005cd2:	6f 13 cf 80 	jnz.t %d3,1,80005e70 <_Core2_start+0x26e>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005cd6:	8f 22 00 30 	sh %d3,%d2,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005cda:	54 22       	ld.w %d2,[%a2]
80005cdc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005ce0:	a6 32       	or %d2,%d3
80005ce2:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005ce6:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80005ce8:	54 22       	ld.w %d2,[%a2]
80005cea:	6f 02 ff ff 	jnz.t %d2,0,80005ce8 <_Core2_start+0xe6>
        __mtcr(CPU_DCON0, dcon0.U);
80005cee:	82 02       	mov %d2,0
80005cf0:	cd 02 04 09 	mtcr $dcon0,%d2
    if (watchdog->CON0.B.LCK)
80005cf4:	54 22       	ld.w %d2,[%a2]
80005cf6:	6f 12 09 00 	jz.t %d2,1,80005d08 <_Core2_start+0x106>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005cfa:	54 22       	ld.w %d2,[%a2]
80005cfc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005d00:	a6 32       	or %d2,%d3
80005d02:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005d06:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005d08:	54 22       	ld.w %d2,[%a2]
80005d0a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005d0e:	a6 32       	or %d2,%d3
80005d10:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005d14:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80005d16:	54 22       	ld.w %d2,[%a2]
80005d18:	6f 02 ff 7f 	jz.t %d2,0,80005d16 <_Core2_start+0x114>
80005d1c:	0d 00 c0 04 	isync 
    if (watchdog->CON0.B.LCK)
80005d20:	91 30 00 2f 	movh.a %a2,61443
80005d24:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80005d28:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005d2c:	06 24       	sh %d4,2
    if (watchdog->CON0.B.LCK)
80005d2e:	6f 12 09 00 	jz.t %d2,1,80005d40 <_Core2_start+0x13e>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005d32:	54 22       	ld.w %d2,[%a2]
80005d34:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005d38:	a6 42       	or %d2,%d4
80005d3a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005d3e:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005d40:	91 30 00 2f 	movh.a %a2,61443
80005d44:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80005d48:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80005d4c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005d50:	a6 42       	or %d2,%d4
80005d52:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005d56:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80005d58:	54 22       	ld.w %d2,[%a2]
80005d5a:	6f 02 ff ff 	jnz.t %d2,0,80005d58 <_Core2_start+0x156>

    /* Clear the ENDINIT bit in the Password register, inline funtion */
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* Load Base Address of Trap Vector Table. */
    __mtcr(CPU_BTV, (uint32)__TRAPTAB(2));
80005d5e:	91 f0 01 38 	movh.a %a3,32799
80005d62:	80 32       	mov.d %d2,%a3
80005d64:	1b 02 10 26 	addi %d2,%d2,24832
80005d68:	cd 42 e2 0f 	mtcr $btv,%d2

    /* Load Base Address of Interrupt Vector Table. we will do this later in the program */
    __mtcr(CPU_BIV, (uint32)__INTTAB(2));
80005d6c:	91 f0 01 38 	movh.a %a3,32799
80005d70:	80 32       	mov.d %d2,%a3
80005d72:	1b 02 00 24 	addi %d2,%d2,16384
80005d76:	cd 02 e2 0f 	mtcr $biv,%d2

    /* Load interupt stack pointer. */
    __mtcr(CPU_ISP, (uint32)__ISTACK(2));
80005d7a:	91 20 00 35 	movh.a %a3,20482
80005d7e:	80 32       	mov.d %d2,%a3
80005d80:	1b 02 b0 2b 	addi %d2,%d2,-17664
80005d84:	cd 82 e2 0f 	mtcr $isp,%d2
    if (watchdog->CON0.B.LCK)
80005d88:	54 22       	ld.w %d2,[%a2]
80005d8a:	6f 12 09 00 	jz.t %d2,1,80005d9c <_Core2_start+0x19a>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005d8e:	54 22       	ld.w %d2,[%a2]
80005d90:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005d94:	a6 42       	or %d2,%d4
80005d96:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005d9a:	74 22       	st.w [%a2],%d2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005d9c:	91 30 00 2f 	movh.a %a2,61443
80005da0:	19 22 18 46 	ld.w %d2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80005da4:	d9 22 18 46 	lea %a2,[%a2]24856 <f0036118 <_SMALL_DATA4_+0x6002e118>>
80005da8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005dac:	a6 42       	or %d2,%d4
80005dae:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005db2:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80005db4:	54 22       	ld.w %d2,[%a2]
80005db6:	6f 02 ff 7f 	jz.t %d2,0,80005db4 <_Core2_start+0x1b2>

    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[2], wdtPassword);

    /* initialize SDA base pointers */
    __setareg(a0, __SDATA1(2));
80005dba:	91 10 00 26 	movh.a %a2,24577
80005dbe:	80 22       	mov.d %d2,%a2
80005dc0:	1b 02 00 28 	addi %d2,%d2,-32768
80005dc4:	60 20       	mov.a %a0,%d2
    __setareg(a1, __SDATA2(2));
80005dc6:	91 10 00 28 	movh.a %a2,32769
80005dca:	80 22       	mov.d %d2,%a2
80005dcc:	1b 02 00 28 	addi %d2,%d2,-32768
80005dd0:	60 21       	mov.a %a1,%d2

    /* These to be un commented if A8 and A9 are required to be initialized */
    __setareg(a8, __SDATA3(2));
80005dd2:	91 10 00 28 	movh.a %a2,32769
80005dd6:	80 22       	mov.d %d2,%a2
80005dd8:	1b 02 00 28 	addi %d2,%d2,-32768
80005ddc:	60 28       	mov.a %a8,%d2
    __setareg(a9, __SDATA4(2));
80005dde:	91 10 00 29 	movh.a %a2,36865
80005de2:	80 22       	mov.d %d2,%a2
80005de4:	1b 02 00 28 	addi %d2,%d2,-32768
80005de8:	60 29       	mov.a %a9,%d2
    uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
80005dea:	91 20 00 35 	movh.a %a3,20482
80005dee:	91 20 00 25 	movh.a %a2,20482
80005df2:	d9 33 c0 0b 	lea %a3,[%a3]-17408 <5001bc00 <__CSA2>>
80005df6:	d9 22 c0 0d 	lea %a2,[%a2]-9216 <5001dc00 <__CSA2_END>>
80005dfa:	01 32 20 20 	sub.a %a2,%a2,%a3
80005dfe:	80 22       	mov.d %d2,%a2
80005e00:	8f a2 1f 60 	sh %d6,%d2,-6
    uint32 *prvCsa      = csaBegin;
80005e04:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80005e06:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80005e0a:	82 03       	mov %d3,0
    uint32 *nxtCsa      = csaBegin;
80005e0c:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80005e0e:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80005e12:	df 06 27 00 	jeq %d6,0,80005e60 <_Core2_start+0x25e>
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80005e16:	37 02 70 43 	extr.u %d4,%d2,6,16
80005e1a:	8f 42 1f 50 	sh %d5,%d2,-12
80005e1e:	26 75       	and %d5,%d7
80005e20:	a6 54       	or %d4,%d5
        if (k == 0U)
80005e22:	df 03 16 00 	jeq %d3,0,80005e4e <_Core2_start+0x24c>
            *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
80005e26:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80005e28:	5f 03 04 80 	jne %d3,%d0,80005e30 <_Core2_start+0x22e>
            __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80005e2c:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80005e30:	c2 13       	add %d3,1
80005e32:	60 22       	mov.a %a2,%d2
        nxtCsa += 16U;           /* next CSA */
80005e34:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80005e38:	5f 36 0f 00 	jeq %d6,%d3,80005e56 <_Core2_start+0x254>
        nxtCsa += 16U;           /* next CSA */
80005e3c:	02 42       	mov %d2,%d4
        nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28U)) >> 12U | ((uint32)nxtCsa & (0XFFFFU << 6U)) >> 6U;
80005e3e:	37 02 70 43 	extr.u %d4,%d2,6,16
80005e42:	8f 42 1f 50 	sh %d5,%d2,-12
80005e46:	26 75       	and %d5,%d7
80005e48:	a6 54       	or %d4,%d5
        if (k == 0U)
80005e4a:	df 03 ee ff 	jne %d3,0,80005e26 <_Core2_start+0x224>
            __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80005e4e:	cd 84 e3 0f 	mtcr $fcx,%d4
80005e52:	1d ff eb ff 	j 80005e28 <_Core2_start+0x226>
80005e56:	1b f6 ff 2f 	addi %d2,%d6,-1
80005e5a:	06 62       	sh %d2,6
80005e5c:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;
80005e60:	82 02       	mov %d2,0
80005e62:	74 22       	st.w [%a2],%d2
    /* Setup the context save area linked list. */

    IfxCpu_initCSA((uint32 *)__CSA(2), (uint32 *)__CSA_END(2));

    /*Call main function of Cpu0 */
    __non_return_call(core2_main);
80005e64:	91 00 00 28 	movh.a %a2,32768
80005e68:	d9 22 7a a7 	lea %a2,[%a2]30394 <800076ba <core2_main>>
80005e6c:	dc 02       	ji %a2
}
80005e6e:	00 90       	ret 
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005e70:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005e72:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005e76:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005e7a:	0f 35 a0 20 	or %d2,%d5,%d3
80005e7e:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005e82:	74 22       	st.w [%a2],%d2
80005e84:	1d ff 2b ff 	j 80005cda <_Core2_start+0xd8>
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005e88:	54 25       	ld.w %d5,[%a2]
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005e8a:	8f 22 00 30 	sh %d3,%d2,2
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80005e8e:	b7 05 10 50 	insert %d5,%d5,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80005e92:	0f 35 a0 20 	or %d2,%d5,%d3
80005e96:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80005e9a:	74 22       	st.w [%a2],%d2
80005e9c:	1d ff e7 fe 	j 80005c6a <_Core2_start+0x68>

80005ea0 <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80005ea0:	40 ae       	mov.aa %a14,%sp
80005ea2:	40 4c       	mov.aa %a12,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80005ea4:	6d ff 88 e2 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
80005ea8:	02 28       	mov %d8,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80005eaa:	02 24       	mov %d4,%d2
80005eac:	6d ff 1b e1 	call 800020e2 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80005eb0:	54 c3       	ld.w %d3,[%a12]
80005eb2:	8f 13 c0 31 	andn %d3,%d3,1
80005eb6:	74 c3       	st.w [%a12],%d3
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80005eb8:	02 84       	mov %d4,%d8
80005eba:	6d ff 9a e2 	call 800023ee <IfxScuWdt_setCpuEndinit>
}
80005ebe:	00 90       	ret 

80005ec0 <IfxAsclin_getFaFrequency>:
    return module;
}


float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
80005ec0:	40 ae       	mov.aa %a14,%sp
    return asclin->CSR.B.CLKSEL;
80005ec2:	19 42 0c 10 	ld.w %d2,[%a4]76
80005ec6:	8f f2 01 21 	and %d2,%d2,31
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80005eca:	1b f2 ff 3f 	addi %d3,%d2,-1
80005ece:	8b 03 a1 22 	ge.u %d2,%d3,16
80005ed2:	df 02 38 80 	jne %d2,0,80005f42 <IfxAsclin_getFaFrequency+0x82>
80005ed6:	91 00 00 28 	movh.a %a2,32768
80005eda:	d9 22 e4 b5 	lea %a2,[%a2]24292 <80005ee4 <IfxAsclin_getFaFrequency+0x24>>
80005ede:	01 23 02 26 	addsc.a %a2,%a2,%d3,2
80005ee2:	dc 02       	ji %a2
80005ee4:	1d 00 20 00 	j 80005f24 <IfxAsclin_getFaFrequency+0x64>
80005ee8:	1d 00 21 00 	j 80005f2a <IfxAsclin_getFaFrequency+0x6a>
80005eec:	1d 00 2b 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005ef0:	1d 00 20 00 	j 80005f30 <IfxAsclin_getFaFrequency+0x70>
80005ef4:	1d 00 27 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005ef8:	1d 00 25 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005efc:	1d 00 23 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005f00:	1d 00 1b 00 	j 80005f36 <IfxAsclin_getFaFrequency+0x76>
80005f04:	1d 00 1f 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005f08:	1d 00 1d 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005f0c:	1d 00 1b 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005f10:	1d 00 19 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005f14:	1d 00 17 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005f18:	1d 00 15 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005f1c:	1d 00 13 00 	j 80005f42 <IfxAsclin_getFaFrequency+0x82>
80005f20:	1d 00 0e 00 	j 80005f3c <IfxAsclin_getFaFrequency+0x7c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0f;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80005f24:	6d ff f6 de 	call 80001d10 <IfxScuCcu_getSpbFrequency>
        break;
80005f28:	00 90       	ret 
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80005f2a:	6d ff 7d dd 	call 80001a24 <IfxScuCcu_getOsc0Frequency>
        break;
80005f2e:	00 90       	ret 
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80005f30:	6d ff 9f dd 	call 80001a6e <IfxScuCcu_getPllErayFrequency>
        break;
80005f34:	00 90       	ret 
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80005f36:	6d ff d5 de 	call 80001ce0 <IfxScuCcu_getBaud2Frequency>
        break;
80005f3a:	00 90       	ret 
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80005f3c:	6d ff ba de 	call 80001cb0 <IfxScuCcu_getBaud1Frequency>
        break;
80005f40:	00 90       	ret 
    switch (clockSource)
80005f42:	82 02       	mov %d2,0
        frequency = 0.0f;
        break;
    }

    return frequency;
}
80005f44:	00 90       	ret 

80005f46 <IfxAsclin_getFaFrequency_end>:
	...

80005f48 <IfxAsclin_getIndex>:


IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
80005f48:	40 ae       	mov.aa %a14,%sp
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80005f4a:	82 02       	mov %d2,0
80005f4c:	ff 42 1b 80 	jge.u %d2,4,80005f82 <IfxAsclin_getIndex+0x3a>
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80005f50:	8f 32 00 30 	sh %d3,%d2,3
80005f54:	91 00 00 28 	movh.a %a2,32768
80005f58:	d9 22 d4 b0 	lea %a2,[%a2]3796 <80000ed4 <IfxAsclin_cfg_indexMap>>
80005f5c:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80005f60:	54 23       	ld.w %d3,[%a2]
80005f62:	80 44       	mov.d %d4,%a4
80005f64:	5f 43 05 00 	jeq %d3,%d4,80005f6e <IfxAsclin_getIndex+0x26>
    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80005f68:	c2 12       	add %d2,1
80005f6a:	1d ff f1 ff 	j 80005f4c <IfxAsclin_getIndex+0x4>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80005f6e:	06 32       	sh %d2,3
80005f70:	91 00 00 28 	movh.a %a2,32768
80005f74:	d9 22 d4 b0 	lea %a2,[%a2]3796 <80000ed4 <IfxAsclin_cfg_indexMap>>
80005f78:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80005f7c:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
80005f80:	00 90       	ret 
    result = IfxAsclin_Index_none;
80005f82:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
80005f84:	00 90       	ret 

80005f86 <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80005f86:	40 ae       	mov.aa %a14,%sp
80005f88:	40 4c       	mov.aa %a12,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80005f8a:	6d ff 9b ff 	call 80005ec0 <IfxAsclin_getFaFrequency>
80005f8e:	19 c3 14 00 	ld.w %d3,[%a12]20
80005f92:	b7 03 14 36 	insert %d3,%d3,0,12,20
80005f96:	c2 13       	add %d3,1
80005f98:	4b 03 41 31 	itof %d3,%d3
}
80005f9c:	4b 32 51 20 	div.f %d2,%d2,%d3
80005fa0:	00 90       	ret 

80005fa2 <IfxAsclin_getSrcPointerEr>:
    return IfxAsclin_getOvsFrequency(asclin) / (asclin->BITCON.B.OVERSAMPLING + 1);
}


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
80005fa2:	40 ae       	mov.aa %a14,%sp
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80005fa4:	6d ff d2 ff 	call 80005f48 <IfxAsclin_getIndex>
80005fa8:	53 c2 20 20 	mul %d2,%d2,12
80005fac:	1b 82 00 20 	addi %d2,%d2,8
}
80005fb0:	91 40 00 2f 	movh.a %a2,61444
80005fb4:	d9 22 00 28 	lea %a2,[%a2]-32640 <f0038080 <_SMALL_DATA4_+0x60030080>>
80005fb8:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80005fbc:	00 90       	ret 

80005fbe <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
80005fbe:	40 ae       	mov.aa %a14,%sp
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80005fc0:	6d ff c4 ff 	call 80005f48 <IfxAsclin_getIndex>
80005fc4:	53 c2 20 20 	mul %d2,%d2,12
80005fc8:	c2 42       	add %d2,4
}
80005fca:	91 40 00 2f 	movh.a %a2,61444
80005fce:	d9 22 00 28 	lea %a2,[%a2]-32640 <f0038080 <_SMALL_DATA4_+0x60030080>>
80005fd2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80005fd6:	00 90       	ret 

80005fd8 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
80005fd8:	40 ae       	mov.aa %a14,%sp
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80005fda:	6d ff b7 ff 	call 80005f48 <IfxAsclin_getIndex>
}
80005fde:	91 40 00 2f 	movh.a %a2,61444
80005fe2:	d9 22 00 28 	lea %a2,[%a2]-32640 <f0038080 <_SMALL_DATA4_+0x60030080>>
80005fe6:	01 22 03 26 	addsc.a %a2,%a2,%d2,3
80005fea:	01 22 02 26 	addsc.a %a2,%a2,%d2,2
80005fee:	00 90       	ret 

80005ff0 <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80005ff0:	40 ae       	mov.aa %a14,%sp
80005ff2:	80 55       	mov.d %d5,%a5
80005ff4:	02 42       	mov %d2,%d4
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
80005ff6:	1d 00 08 00 	j 80006006 <IfxAsclin_read8+0x16>
    {
        *data++ = (uint8)rxData->U;
80005ffa:	19 43 08 10 	ld.w %d3,[%a4]72
80005ffe:	60 55       	mov.a %a5,%d5
80006000:	24 53       	st.b [%a5+],%d3
        count--;
80006002:	c2 f2       	add %d2,-1
        *data++ = (uint8)rxData->U;
80006004:	80 55       	mov.d %d5,%a5
    while (count > 0)
80006006:	df 02 fa ff 	jne %d2,0,80005ffa <IfxAsclin_read8+0xa>
    }

    return count;
}
8000600a:	00 90       	ret 

8000600c <IfxAsclin_setClockSource>:
    return TRUE;
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
8000600c:	40 ae       	mov.aa %a14,%sp
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
8000600e:	d9 42 0c 10 	lea %a2,[%a4]76
80006012:	19 42 0c 10 	ld.w %d2,[%a4]76
80006016:	37 42 05 20 	insert %d2,%d2,%d4,0,5
8000601a:	74 22       	st.w [%a2],%d2

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
8000601c:	df 04 07 80 	jne %d4,0,8000602a <IfxAsclin_setClockSource+0x1e>
    return asclin->CSR.B.CON;
80006020:	19 42 0c 10 	ld.w %d2,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80006024:	bf 02 fe 7f 	jlt %d2,0,80006020 <IfxAsclin_setClockSource+0x14>
80006028:	00 90       	ret 
8000602a:	19 42 0c 10 	ld.w %d2,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
8000602e:	ff 02 fe 7f 	jge %d2,0,8000602a <IfxAsclin_setClockSource+0x1e>
        {}
    }
}
80006032:	00 90       	ret 

80006034 <IfxAsclin_setBitTiming>:
{
80006034:	40 ae       	mov.aa %a14,%sp
80006036:	20 10       	sub.a %sp,16
80006038:	40 4c       	mov.aa %a12,%a4
8000603a:	02 48       	mov %d8,%d4
8000603c:	02 5a       	mov %d10,%d5
8000603e:	02 69       	mov %d9,%d6
80006040:	59 e7 f4 ff 	st.w [%a14]-12,%d7
    return asclin->CSR.B.CLKSEL;
80006044:	19 42 0c 10 	ld.w %d2,[%a4]76
80006048:	8f f2 01 21 	and %d2,%d2,31
8000604c:	60 2f       	mov.a %a15,%d2
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
8000604e:	6d ff 9c ff 	call 80005f86 <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80006052:	c2 1a       	add %d10,1
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80006054:	82 43       	mov %d3,4
80006056:	0b 3a b0 31 	max.u %d3,%d10,%d3
8000605a:	60 3d       	mov.a %a13,%d3
8000605c:	82 13       	mov %d3,1
8000605e:	0b 39 b0 31 	max.u %d3,%d9,%d3
80006062:	59 e3 f8 ff 	st.w [%a14]-8,%d3
    fOvs         = baudrate * oversampling;
80006066:	80 d3       	mov.d %d3,%a13
80006068:	4b 03 61 41 	utof %d4,%d3
8000606c:	4b 84 41 40 	mul.f %d4,%d4,%d8
    float32               limit      = 0.001f * fOvs;                    // save the error limit
80006070:	7b 30 a8 e3 	movh %d14,14979
80006074:	1b fe 26 e1 	addi %d14,%d14,4719
80006078:	4b e4 41 e0 	mul.f %d14,%d4,%d14
    d = (uint32)(fpd / fOvs);
8000607c:	4b 42 51 c0 	div.f %d12,%d2,%d4
80006080:	4b 0c 71 c1 	ftouz %d12,%d12
    f              = (fpd * n) / d;
80006084:	4b 0c 61 31 	utof %d3,%d12
80006088:	4b 32 51 30 	div.f %d3,%d2,%d3
    relError       = __absf(fOvs - f);
8000608c:	6b 03 31 14 	sub.f %d1,%d4,%d3
80006090:	82 03       	mov %d3,0
80006092:	4b 31 01 30 	cmp.f %d3,%d1,%d3
80006096:	6f 03 10 80 	jnz.t %d3,0,800060b6 <IfxAsclin_setBitTiming+0x82>
    if (relError <= limit)
8000609a:	4b e1 01 30 	cmp.f %d3,%d1,%d14
8000609e:	87 33 a0 30 	or.t %d3,%d3,0,%d3,1
800060a2:	df 03 0e 80 	jne %d3,0,800060be <IfxAsclin_setBitTiming+0x8a>
    boolean               terminated = FALSE;
800060a6:	82 0f       	mov %d15,0
    dBest          = d;
800060a8:	59 ec fc ff 	st.w [%a14]-4,%d12
    adder_facL_min = 0;
800060ac:	82 06       	mov %d6,0
    nBest          = n;
800060ae:	82 1d       	mov %d13,1
    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
800060b0:	82 20       	mov %d0,2
800060b2:	1d 00 37 00 	j 80006120 <IfxAsclin_setBitTiming+0xec>
    relError       = __absf(fOvs - f);
800060b6:	9b 01 00 18 	addih %d1,%d1,32768
800060ba:	1d ff f0 ff 	j 8000609a <IfxAsclin_setBitTiming+0x66>
        terminated = TRUE;
800060be:	82 1f       	mov %d15,1
800060c0:	1d ff f4 ff 	j 800060a8 <IfxAsclin_setBitTiming+0x74>
            adder_facH = 1;
800060c4:	82 19       	mov %d9,1
            adder_facL = 1;
800060c6:	02 95       	mov %d5,%d9
        for (count = adder_facL; count <= adder_facH; count++)
800060c8:	1d 00 07 00 	j 800060d6 <IfxAsclin_setBitTiming+0xa2>
            newRelError = __absf(fOvs - f);
800060cc:	9b 03 00 38 	addih %d3,%d3,32768
800060d0:	1d 00 16 00 	j 800060fc <IfxAsclin_setBitTiming+0xc8>
        for (count = adder_facL; count <= adder_facH; count++)
800060d4:	c2 15       	add %d5,1
800060d6:	3f 59 1e 80 	jlt.u %d9,%d5,80006112 <IfxAsclin_setBitTiming+0xde>
            f           = (fpd * n) / (n * d + count);
800060da:	4b 00 61 81 	utof %d8,%d0
800060de:	4b 28 41 80 	mul.f %d8,%d8,%d2
800060e2:	0b 5b 00 a0 	add %d10,%d11,%d5
800060e6:	4b 0a 61 31 	utof %d3,%d10
800060ea:	4b 38 51 30 	div.f %d3,%d8,%d3
            newRelError = __absf(fOvs - f);
800060ee:	6b 03 31 34 	sub.f %d3,%d4,%d3
800060f2:	82 08       	mov %d8,0
800060f4:	4b 83 01 80 	cmp.f %d8,%d3,%d8
800060f8:	6f 08 ea ff 	jnz.t %d8,0,800060cc <IfxAsclin_setBitTiming+0x98>
            if (relError > (newRelError))
800060fc:	4b 31 01 80 	cmp.f %d8,%d1,%d3
80006100:	6f 28 ea 7f 	jz.t %d8,2,800060d4 <IfxAsclin_setBitTiming+0xa0>
                adder_facL_min = count;
80006104:	02 56       	mov %d6,%d5
                relError       = newRelError;
80006106:	02 31       	mov %d1,%d3
                nBest          = n;
80006108:	02 0d       	mov %d13,%d0
                dBest          = (n * d + count);
8000610a:	59 ea fc ff 	st.w [%a14]-4,%d10
8000610e:	1d ff e3 ff 	j 800060d4 <IfxAsclin_setBitTiming+0xa0>
        if (relError <= limit)
80006112:	4b e1 01 30 	cmp.f %d3,%d1,%d14
80006116:	87 33 a0 30 	or.t %d3,%d3,0,%d3,1
8000611a:	df 03 16 80 	jne %d3,0,80006146 <IfxAsclin_setBitTiming+0x112>
    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
8000611e:	c2 10       	add %d0,1
80006120:	df 0f 13 80 	jne %d15,0,80006146 <IfxAsclin_setBitTiming+0x112>
80006124:	73 c0 0a b0 	mul %d11,%d0,%d12
80006128:	3b 00 00 31 	mov %d3,4096
8000612c:	7f 3b 0d 80 	jge.u %d11,%d3,80006146 <IfxAsclin_setBitTiming+0x112>
        if (n == 2)
80006130:	df 20 ca 7f 	jeq %d0,2,800060c4 <IfxAsclin_setBitTiming+0x90>
            adder_facL = (adder_facL_min * n) / nBest;
80006134:	73 60 0a 80 	mul %d8,%d0,%d6
80006138:	4b d8 11 82 	div.u %e8,%d8,%d13
8000613c:	02 85       	mov %d5,%d8
            adder_facH = adder_facL + 1;
8000613e:	1b 18 00 90 	addi %d9,%d8,1
80006142:	1d ff ca ff 	j 800060d6 <IfxAsclin_setBitTiming+0xa2>
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
80006146:	82 04       	mov %d4,0
80006148:	40 c4       	mov.aa %a4,%a12
8000614a:	6d ff 61 ff 	call 8000600c <IfxAsclin_setClockSource>
    asclin->BRG.B.DENOMINATOR = dBest;
8000614e:	d9 c2 20 00 	lea %a2,[%a12]32
80006152:	19 c2 20 00 	ld.w %d2,[%a12]32
80006156:	19 e3 fc ff 	ld.w %d3,[%a14]-4
8000615a:	37 32 0c 20 	insert %d2,%d2,%d3,0,12
8000615e:	74 22       	st.w [%a2],%d2
    asclin->BRG.B.NUMERATOR   = nBest;
80006160:	54 22       	ld.w %d2,[%a2]
80006162:	37 d2 0c 28 	insert %d2,%d2,%d13,16,12
80006166:	74 22       	st.w [%a2],%d2
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80006168:	80 d3       	mov.d %d3,%a13
8000616a:	c2 f3       	add %d3,-1
8000616c:	d9 c2 14 00 	lea %a2,[%a12]20
80006170:	19 c2 14 00 	ld.w %d2,[%a12]20
80006174:	37 32 04 28 	insert %d2,%d2,%d3,16,4
80006178:	74 22       	st.w [%a2],%d2
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
8000617a:	54 22       	ld.w %d2,[%a2]
8000617c:	19 e3 f8 ff 	ld.w %d3,[%a14]-8
80006180:	37 32 04 2c 	insert %d2,%d2,%d3,24,4
80006184:	74 22       	st.w [%a2],%d2
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80006186:	19 e2 f4 ff 	ld.w %d2,[%a14]-12
8000618a:	8b 02 20 72 	ne %d7,%d2,0
8000618e:	54 22       	ld.w %d2,[%a2]
80006190:	67 72 1f 20 	ins.t %d2,%d2,31,%d7,0
80006194:	74 22       	st.w [%a2],%d2
    IfxAsclin_setClockSource(asclin, source);
80006196:	80 f4       	mov.d %d4,%a15
80006198:	40 c4       	mov.aa %a4,%a12
8000619a:	6d ff 39 ff 	call 8000600c <IfxAsclin_setClockSource>
}
8000619e:	82 12       	mov %d2,1
800061a0:	00 90       	ret 

800061a2 <IfxAsclin_write8>:
    return count;
}


uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
800061a2:	40 ae       	mov.aa %a14,%sp
800061a4:	80 53       	mov.d %d3,%a5
800061a6:	02 42       	mov %d2,%d4
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
800061a8:	1d 00 08 00 	j 800061b8 <IfxAsclin_write8+0x16>
    {
        txData->U = *data++;
800061ac:	60 35       	mov.a %a5,%d3
800061ae:	04 53       	ld.bu %d3,[%a5+]
800061b0:	59 43 04 10 	st.w [%a4]68,%d3
        count--;
800061b4:	c2 f2       	add %d2,-1
        txData->U = *data++;
800061b6:	80 53       	mov.d %d3,%a5
    while ((count > 0))
800061b8:	df 02 fa ff 	jne %d2,0,800061ac <IfxAsclin_write8+0xa>
    }

    return count;
}
800061bc:	00 90       	ret 

800061be <IfxAsclin_Asc_getReadCount>:
    return result;
}


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
800061be:	40 ae       	mov.aa %a14,%sp
    return Ifx_Fifo_readCount(asclin->rx);
800061c0:	99 42 08 00 	ld.a %a2,[%a4]8
}
800061c4:	c9 22 04 00 	ld.h %d2,[%a2]4
800061c8:	00 90       	ret 

800061ca <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
800061ca:	40 ae       	mov.aa %a14,%sp
    return &asclin->rx->eventWriter;
800061cc:	99 42 08 00 	ld.a %a2,[%a4]8
}
800061d0:	d9 22 1d 00 	lea %a2,[%a2]29
800061d4:	00 90       	ret 

800061d6 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
800061d6:	40 ae       	mov.aa %a14,%sp
    return asclin->sendCount;
800061d8:	19 42 14 00 	ld.w %d2,[%a4]20
}
800061dc:	00 90       	ret 

800061de <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
800061de:	40 ae       	mov.aa %a14,%sp
    return asclin->txTimestamp;
800061e0:	09 42 58 09 	ld.d %e2,[%a4]24
}
800061e4:	00 90       	ret 

800061e6 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
800061e6:	40 ae       	mov.aa %a14,%sp
    return Ifx_Fifo_writeCount(asclin->tx);
800061e8:	99 42 04 00 	ld.a %a2,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
800061ec:	b9 23 18 00 	ld.hu %d3,[%a2]24
800061f0:	b9 22 04 00 	ld.hu %d2,[%a2]4
800061f4:	0b 23 80 20 	sub %d2,%d3,%d2
}
800061f8:	37 02 50 20 	extr %d2,%d2,0,16
800061fc:	00 90       	ret 

800061fe <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
800061fe:	40 ae       	mov.aa %a14,%sp
    return &asclin->tx->eventWriter;
80006200:	99 42 04 00 	ld.a %a2,[%a4]4
}
80006204:	d9 22 1d 00 	lea %a2,[%a2]29
80006208:	00 90       	ret 

8000620a <IfxAsclin_Asc_isrError>:
    }
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
8000620a:	40 ae       	mov.aa %a14,%sp
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
8000620c:	d4 42       	ld.a %a2,[%a4]
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
8000620e:	19 22 34 00 	ld.w %d2,[%a2]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
80006212:	ef 02 0f 00 	jz.t %d2,16,80006230 <IfxAsclin_Asc_isrError+0x26>
    asclin->FLAGSCLEAR.B.PEC = 1;
80006216:	d9 23 3c 00 	lea %a3,[%a2]60
8000621a:	19 22 3c 00 	ld.w %d2,[%a2]60
8000621e:	b7 12 01 28 	insert %d2,%d2,1,16,1
80006222:	74 32       	st.w [%a3],%d2
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
80006224:	39 42 0e 00 	ld.bu %d2,[%a4]14
80006228:	b7 12 01 20 	insert %d2,%d2,1,0,1
8000622c:	e9 42 0e 00 	st.b [%a4]14,%d2
    return asclin->FLAGS.B.FE;
80006230:	19 22 34 00 	ld.w %d2,[%a2]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80006234:	ef 22 0f 00 	jz.t %d2,18,80006252 <IfxAsclin_Asc_isrError+0x48>
    asclin->FLAGSCLEAR.B.FEC = 1;
80006238:	d9 23 3c 00 	lea %a3,[%a2]60
8000623c:	19 22 3c 00 	ld.w %d2,[%a2]60
80006240:	b7 12 01 29 	insert %d2,%d2,1,18,1
80006244:	74 32       	st.w [%a3],%d2
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
80006246:	39 42 0e 00 	ld.bu %d2,[%a4]14
8000624a:	b7 12 81 20 	insert %d2,%d2,1,1,1
8000624e:	e9 42 0e 00 	st.b [%a4]14,%d2
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
80006252:	19 22 34 00 	ld.w %d2,[%a2]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
80006256:	ef a2 0f 00 	jz.t %d2,26,80006274 <IfxAsclin_Asc_isrError+0x6a>
    asclin->FLAGSCLEAR.B.RFOC = 1;
8000625a:	d9 23 3c 00 	lea %a3,[%a2]60
8000625e:	19 22 3c 00 	ld.w %d2,[%a2]60
80006262:	b7 12 01 2d 	insert %d2,%d2,1,26,1
80006266:	74 32       	st.w [%a3],%d2
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80006268:	39 42 0e 00 	ld.bu %d2,[%a4]14
8000626c:	b7 12 01 21 	insert %d2,%d2,1,2,1
80006270:	e9 42 0e 00 	st.b [%a4]14,%d2
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
80006274:	19 22 34 00 	ld.w %d2,[%a2]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
80006278:	ef b2 0f 00 	jz.t %d2,27,80006296 <IfxAsclin_Asc_isrError+0x8c>
    asclin->FLAGSCLEAR.B.RFUC = 1;
8000627c:	d9 23 3c 00 	lea %a3,[%a2]60
80006280:	19 22 3c 00 	ld.w %d2,[%a2]60
80006284:	b7 12 81 2d 	insert %d2,%d2,1,27,1
80006288:	74 32       	st.w [%a3],%d2
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
8000628a:	39 42 0e 00 	ld.bu %d2,[%a4]14
8000628e:	b7 12 81 21 	insert %d2,%d2,1,3,1
80006292:	e9 42 0e 00 	st.b [%a4]14,%d2
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
80006296:	19 22 34 00 	ld.w %d2,[%a2]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
8000629a:	ef e2 0f 00 	jz.t %d2,30,800062b8 <IfxAsclin_Asc_isrError+0xae>
    asclin->FLAGSCLEAR.B.TFOC = 1;
8000629e:	d9 23 3c 00 	lea %a3,[%a2]60
800062a2:	19 22 3c 00 	ld.w %d2,[%a2]60
800062a6:	b7 12 01 2f 	insert %d2,%d2,1,30,1
800062aa:	74 32       	st.w [%a3],%d2
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
800062ac:	39 42 0e 00 	ld.bu %d2,[%a4]14
800062b0:	b7 12 01 22 	insert %d2,%d2,1,4,1
800062b4:	e9 42 0e 00 	st.b [%a4]14,%d2
    }
}
800062b8:	00 90       	ret 

800062ba <IfxAsclin_Asc_resetSendCount>:
    return left == 0;
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
800062ba:	40 ae       	mov.aa %a14,%sp
    asclin->sendCount = 0;
800062bc:	82 02       	mov %d2,0
800062be:	59 42 14 00 	st.w [%a4]20,%d2
}
800062c2:	00 90       	ret 

800062c4 <IfxAsclin_Asc_canReadCount>:
{
800062c4:	40 ae       	mov.aa %a14,%sp
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
800062c6:	37 04 50 40 	extr %d4,%d4,0,16
800062ca:	99 44 08 00 	ld.a %a4,[%a4]8
800062ce:	6d ff a6 d8 	call 8000141a <Ifx_Fifo_canReadCount>
}
800062d2:	00 90       	ret 

800062d4 <IfxAsclin_Asc_flushTx>:
{
800062d4:	40 ae       	mov.aa %a14,%sp
800062d6:	40 4c       	mov.aa %a12,%a4
800062d8:	02 46       	mov %d6,%d4
800062da:	02 57       	mov %d7,%d5
    if (timeout == TIME_INFINITE)
800062dc:	82 f2       	mov %d2,-1
800062de:	06 f2       	sh %d2,-1
800062e0:	0b 25 00 21 	eq %d2,%d5,%d2
800062e4:	8b f4 1f 24 	and.eq %d2,%d4,-1
800062e8:	df 02 23 80 	jne %d2,0,8000632e <IfxAsclin_Asc_flushTx+0x5a>
    reg.U = __mfcr(CPU_ICR);
800062ec:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
800062f0:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
800062f4:	0d 00 40 03 	disable 
    __asm__ volatile ("nop" : : : "memory");
800062f8:	00 00       	nop 
    result  = stm->TIM0.U;
800062fa:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
800062fe:	19 20 10 00 	ld.w %d0,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
80006302:	19 22 2c 00 	ld.w %d2,[%a2]44
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80006306:	02 09       	mov %d9,%d0
80006308:	b7 02 81 8f 	insert %d8,%d2,0,31,1
    if (enabled != FALSE)
8000630c:	df 04 04 00 	jeq %d4,0,80006314 <IfxAsclin_Asc_flushTx+0x40>
        __enable();
80006310:	0d 00 00 03 	enable 
        deadLine = IfxStm_now() + timeout;
80006314:	0b 96 40 90 	addx %d9,%d6,%d9
80006318:	0b 87 50 80 	addc %d8,%d7,%d8
    result = Ifx_Fifo_flush(asclin->tx, timeout);
8000631c:	99 c4 04 00 	ld.a %a4,[%a12]4
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
80006320:	c9 44 18 00 	ld.h %d4,[%a4]24
80006324:	6d ff e3 d9 	call 800016ea <Ifx_Fifo_canWriteCount>
    if (result)
80006328:	df 02 11 80 	jne %d2,0,8000634a <IfxAsclin_Asc_flushTx+0x76>
}
8000632c:	00 90       	ret 
        deadLine = TIME_INFINITE;
8000632e:	02 49       	mov %d9,%d4
80006330:	02 58       	mov %d8,%d5
80006332:	1d ff f5 ff 	j 8000631c <IfxAsclin_Asc_flushTx+0x48>
        result = IfxStm_now() >= deadLine;
80006336:	0b 48 00 31 	eq %d3,%d8,%d4
8000633a:	0b 96 50 32 	and.ge.u %d3,%d6,%d9
8000633e:	0b 48 90 32 	or.lt %d3,%d8,%d4
80006342:	8f f3 0f 31 	and %d3,%d3,255
        } while (!result && !IfxStm_isDeadLine(deadline));
80006346:	df 03 f3 ff 	jne %d3,0,8000632c <IfxAsclin_Asc_flushTx+0x58>
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
8000634a:	d4 c2       	ld.a %a2,[%a12]
    return asclin->TXFIFOCON.B.FILL;
8000634c:	19 23 0c 00 	ld.w %d3,[%a2]12
80006350:	37 03 65 38 	extr.u %d3,%d3,16,5
80006354:	8b 03 00 22 	eq %d2,%d3,0
        } while (!result && !IfxStm_isDeadLine(deadline));
80006358:	df 03 ea 7f 	jeq %d3,0,8000632c <IfxAsclin_Asc_flushTx+0x58>
    if (deadLine == TIME_INFINITE)
8000635c:	82 f3       	mov %d3,-1
8000635e:	06 f3       	sh %d3,-1
80006360:	0b 38 00 31 	eq %d3,%d8,%d3
80006364:	8b f9 1f 34 	and.eq %d3,%d9,-1
80006368:	df 03 f1 ff 	jne %d3,0,8000634a <IfxAsclin_Asc_flushTx+0x76>
    reg.U = __mfcr(CPU_ICR);
8000636c:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80006370:	37 03 e1 37 	extr.u %d3,%d3,15,1
    __disable();
80006374:	0d 00 40 03 	disable 
80006378:	00 00       	nop 
    result  = stm->TIM0.U;
8000637a:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000637e:	19 26 10 00 	ld.w %d6,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
80006382:	19 24 2c 00 	ld.w %d4,[%a2]44
80006386:	8f 06 40 61 	or %d6,%d6,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000638a:	b7 04 81 4f 	insert %d4,%d4,0,31,1
    if (enabled != FALSE)
8000638e:	df 03 d4 7f 	jeq %d3,0,80006336 <IfxAsclin_Asc_flushTx+0x62>
        __enable();
80006392:	0d 00 00 03 	enable 
80006396:	1d ff d0 ff 	j 80006336 <IfxAsclin_Asc_flushTx+0x62>

8000639a <IfxAsclin_Asc_canWriteCount>:
{
8000639a:	40 ae       	mov.aa %a14,%sp
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
8000639c:	37 04 50 40 	extr %d4,%d4,0,16
800063a0:	99 44 04 00 	ld.a %a4,[%a4]4
800063a4:	6d ff a3 d9 	call 800016ea <Ifx_Fifo_canWriteCount>
}
800063a8:	00 90       	ret 

800063aa <IfxAsclin_Asc_clearRx>:
{
800063aa:	40 ae       	mov.aa %a14,%sp
    IfxAsclin_flushRxFifo(asclin->asclin);
800063ac:	d4 42       	ld.a %a2,[%a4]
    asclin->RXFIFOCON.B.FLUSH = 1;
800063ae:	d9 23 10 00 	lea %a3,[%a2]16
800063b2:	19 22 10 00 	ld.w %d2,[%a2]16
800063b6:	b7 12 01 20 	insert %d2,%d2,1,0,1
800063ba:	74 32       	st.w [%a3],%d2
    Ifx_Fifo_clear(asclin->rx);
800063bc:	99 44 08 00 	ld.a %a4,[%a4]8
800063c0:	6d ff 6f d9 	call 8000169e <Ifx_Fifo_clear>
}
800063c4:	00 90       	ret 

800063c6 <IfxAsclin_Asc_clearTx>:
{
800063c6:	40 ae       	mov.aa %a14,%sp
800063c8:	40 4c       	mov.aa %a12,%a4
    Ifx_Fifo_clear(asclin->tx);
800063ca:	99 44 04 00 	ld.a %a4,[%a4]4
800063ce:	6d ff 68 d9 	call 8000169e <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
800063d2:	d4 c2       	ld.a %a2,[%a12]
    asclin->TXFIFOCON.B.FLUSH = 1;
800063d4:	d9 23 0c 00 	lea %a3,[%a2]12
800063d8:	19 22 0c 00 	ld.w %d2,[%a2]12
800063dc:	b7 12 01 20 	insert %d2,%d2,1,0,1
800063e0:	74 32       	st.w [%a3],%d2
}
800063e2:	00 90       	ret 

800063e4 <IfxAsclin_Asc_read>:
{
800063e4:	40 ae       	mov.aa %a14,%sp
800063e6:	40 6c       	mov.aa %a12,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
800063e8:	0b 45 10 68 	mov %e6,%d5,%d4
800063ec:	94 64       	ld.h %d4,[%a6]
800063ee:	99 44 08 00 	ld.a %a4,[%a4]8
800063f2:	6d ff 9d d8 	call 8000152c <Ifx_Fifo_read>
    *count -= left;
800063f6:	94 c3       	ld.h %d3,[%a12]
800063f8:	a2 23       	sub %d3,%d2
800063fa:	b4 c3       	st.h [%a12],%d3
}
800063fc:	8b 02 00 22 	eq %d2,%d2,0
80006400:	00 90       	ret 

80006402 <IfxAsclin_Asc_isrTransmit>:
{
80006402:	40 ae       	mov.aa %a14,%sp
80006404:	20 18       	sub.a %sp,24
80006406:	40 4c       	mov.aa %a12,%a4
    reg.U = __mfcr(CPU_ICR);
80006408:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
8000640c:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
80006410:	0d 00 40 03 	disable 
80006414:	00 00       	nop 
    result  = stm->TIM0.U;
80006416:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
8000641a:	19 26 10 00 	ld.w %d6,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
8000641e:	19 22 2c 00 	ld.w %d2,[%a2]44
80006422:	02 25       	mov %d5,%d2
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80006424:	02 62       	mov %d2,%d6
80006426:	b7 05 81 3f 	insert %d3,%d5,0,31,1
    if (enabled != FALSE)
8000642a:	df 04 04 00 	jeq %d4,0,80006432 <IfxAsclin_Asc_isrTransmit+0x30>
        __enable();
8000642e:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80006432:	89 c2 58 09 	st.d [%a12]24,%e2
    asclin->sendCount++;
80006436:	d9 c2 14 00 	lea %a2,[%a12]20
8000643a:	19 c2 14 00 	ld.w %d2,[%a12]20
8000643e:	c2 12       	add %d2,1
80006440:	74 22       	st.w [%a2],%d2
    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80006442:	99 c4 04 00 	ld.a %a4,[%a12]4
    return fifo->shared.count;
80006446:	c9 48 04 00 	ld.h %d8,[%a4]4
8000644a:	df 08 3e 00 	jeq %d8,0,800064c6 <IfxAsclin_Asc_isrTransmit+0xc4>
        switch (asclin->dataBufferMode)
8000644e:	19 c2 10 00 	ld.w %d2,[%a12]16
80006452:	df 02 05 00 	jeq %d2,0,8000645c <IfxAsclin_Asc_isrTransmit+0x5a>
80006456:	df 12 26 00 	jeq %d2,1,800064a2 <IfxAsclin_Asc_isrTransmit+0xa0>
8000645a:	00 90       	ret 
            volatile uint8 hw_tx_fill_level = 0;
8000645c:	82 02       	mov %d2,0
8000645e:	e9 e2 ef ff 	st.b [%a14]-17,%d2
            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80006462:	37 08 70 80 	extr.u %d8,%d8,0,16
            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
80006466:	d4 c2       	ld.a %a2,[%a12]
    return asclin->TXFIFOCON.B.FILL;
80006468:	19 22 0c 00 	ld.w %d2,[%a2]12
8000646c:	37 02 65 28 	extr.u %d2,%d2,16,5
80006470:	e9 e2 ef ff 	st.b [%a14]-17,%d2
            i_count          = (16 - hw_tx_fill_level);
80006474:	39 e2 ef ff 	ld.bu %d2,[%a14]-17
80006478:	8b 02 01 21 	rsub %d2,%d2,16
8000647c:	37 02 70 20 	extr.u %d2,%d2,0,16
            if (i_count > count)
80006480:	3f 28 03 80 	jlt.u %d8,%d2,80006486 <IfxAsclin_Asc_isrTransmit+0x84>
            i_count          = (16 - hw_tx_fill_level);
80006484:	02 28       	mov %d8,%d2
            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
80006486:	d2 06       	mov %e6,0
80006488:	37 08 50 40 	extr %d4,%d8,0,16
8000648c:	d9 e5 f0 ff 	lea %a5,[%a14]-16
80006490:	6d ff 4e d8 	call 8000152c <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
80006494:	02 84       	mov %d4,%d8
80006496:	d9 e5 f0 ff 	lea %a5,[%a14]-16
8000649a:	d4 c4       	ld.a %a4,[%a12]
8000649c:	6d ff 83 fe 	call 800061a2 <IfxAsclin_write8>
        break;
800064a0:	00 90       	ret 
            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
800064a2:	d2 06       	mov %e6,0
800064a4:	3b c0 00 40 	mov %d4,12
800064a8:	d9 e5 f0 ff 	lea %a5,[%a14]-16
800064ac:	6d ff 40 d8 	call 8000152c <Ifx_Fifo_read>
            ascData = packedData.data;
800064b0:	39 e2 f8 ff 	ld.bu %d2,[%a14]-8
800064b4:	e9 e2 ef ff 	st.b [%a14]-17,%d2
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800064b8:	82 14       	mov %d4,1
800064ba:	d9 e5 ef ff 	lea %a5,[%a14]-17
800064be:	d4 c4       	ld.a %a4,[%a12]
800064c0:	6d ff 71 fe 	call 800061a2 <IfxAsclin_write8>
        break;
800064c4:	00 90       	ret 
        asclin->txInProgress = FALSE;
800064c6:	82 02       	mov %d2,0
800064c8:	e9 c2 0c 00 	st.b [%a12]12,%d2
}
800064cc:	00 90       	ret 

800064ce <IfxAsclin_Asc_isrReceive>:
{
800064ce:	40 ae       	mov.aa %a14,%sp
800064d0:	20 20       	sub.a %sp,32
800064d2:	40 4c       	mov.aa %a12,%a4
    switch (asclin->dataBufferMode)
800064d4:	19 42 10 00 	ld.w %d2,[%a4]16
800064d8:	df 02 05 00 	jeq %d2,0,800064e2 <IfxAsclin_Asc_isrReceive+0x14>
800064dc:	df 12 34 00 	jeq %d2,1,80006544 <IfxAsclin_Asc_isrReceive+0x76>
800064e0:	00 90       	ret 
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
800064e2:	d4 44       	ld.a %a4,[%a4]
    return asclin->RXFIFOCON.B.FILL;
800064e4:	19 48 10 00 	ld.w %d8,[%a4]16
800064e8:	37 08 65 88 	extr.u %d8,%d8,16,5
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
800064ec:	02 84       	mov %d4,%d8
800064ee:	d9 e5 f0 ff 	lea %a5,[%a14]-16
800064f2:	6d ff 7f fd 	call 80005ff0 <IfxAsclin_read8>
        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
800064f6:	d2 06       	mov %e6,0
800064f8:	02 84       	mov %d4,%d8
800064fa:	d9 e5 f0 ff 	lea %a5,[%a14]-16
800064fe:	99 c4 08 00 	ld.a %a4,[%a12]8
80006502:	6d ff 8a d9 	call 80001816 <Ifx_Fifo_write>
80006506:	df 02 42 00 	jeq %d2,0,8000658a <IfxAsclin_Asc_isrReceive+0xbc>
            asclin->rxSwFifoOverflow = TRUE;
8000650a:	82 12       	mov %d2,1
8000650c:	e9 c2 0d 00 	st.b [%a12]13,%d2
80006510:	00 90       	ret 
            packedData.timestamp = IfxStm_now();
80006512:	59 e5 e4 ff 	st.w [%a14]-28,%d5
80006516:	59 e2 e8 ff 	st.w [%a14]-24,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
8000651a:	82 14       	mov %d4,1
8000651c:	d9 e5 f0 ff 	lea %a5,[%a14]-16
80006520:	d4 c4       	ld.a %a4,[%a12]
80006522:	6d ff 67 fd 	call 80005ff0 <IfxAsclin_read8>
            packedData.data      = ascData[0];
80006526:	39 e2 f0 ff 	ld.bu %d2,[%a14]-16
8000652a:	e9 e2 ec ff 	st.b [%a14]-20,%d2
            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000652e:	d2 06       	mov %e6,0
80006530:	3b c0 00 40 	mov %d4,12
80006534:	d9 e5 e4 ff 	lea %a5,[%a14]-28
80006538:	99 c4 08 00 	ld.a %a4,[%a12]8
8000653c:	6d ff 6d d9 	call 80001816 <Ifx_Fifo_write>
80006540:	df 02 20 80 	jne %d2,0,80006580 <IfxAsclin_Asc_isrReceive+0xb2>
        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
80006544:	d4 c2       	ld.a %a2,[%a12]
80006546:	19 22 10 00 	ld.w %d2,[%a2]16
8000654a:	37 02 65 28 	extr.u %d2,%d2,16,5
8000654e:	df 02 1e 00 	jeq %d2,0,8000658a <IfxAsclin_Asc_isrReceive+0xbc>
    reg.U = __mfcr(CPU_ICR);
80006552:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80006556:	37 04 e1 47 	extr.u %d4,%d4,15,1
    __disable();
8000655a:	0d 00 40 03 	disable 
8000655e:	00 00       	nop 
    result  = stm->TIM0.U;
80006560:	c5 f2 00 00 	lea %a2,f0000000 <_SMALL_DATA4_+0x5fff8000>
80006564:	19 25 10 00 	ld.w %d5,[%a2]16
    result |= ((uint64)stm->CAP.U) << 32;
80006568:	19 22 2c 00 	ld.w %d2,[%a2]44
8000656c:	8f 05 40 51 	or %d5,%d5,0
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80006570:	b7 02 81 2f 	insert %d2,%d2,0,31,1
    if (enabled != FALSE)
80006574:	df 04 cf 7f 	jeq %d4,0,80006512 <IfxAsclin_Asc_isrReceive+0x44>
        __enable();
80006578:	0d 00 00 03 	enable 
8000657c:	1d ff cb ff 	j 80006512 <IfxAsclin_Asc_isrReceive+0x44>
                asclin->rxSwFifoOverflow = TRUE;
80006580:	82 12       	mov %d2,1
80006582:	e9 c2 0d 00 	st.b [%a12]13,%d2
80006586:	1d ff df ff 	j 80006544 <IfxAsclin_Asc_isrReceive+0x76>
}
8000658a:	00 90       	ret 

8000658c <IfxAsclin_Asc_initModule>:
{
8000658c:	40 ae       	mov.aa %a14,%sp
8000658e:	40 4f       	mov.aa %a15,%a4
80006590:	40 5d       	mov.aa %a13,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
80006592:	d4 5c       	ld.a %a12,[%a5]
    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
80006594:	f4 4c       	st.a [%a4],%a12
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
80006596:	40 c4       	mov.aa %a4,%a12
80006598:	6d ff 84 fc 	call 80005ea0 <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
8000659c:	82 04       	mov %d4,0
8000659e:	40 c4       	mov.aa %a4,%a12
800065a0:	6d ff 36 fd 	call 8000600c <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800065a4:	d9 c2 18 00 	lea %a2,[%a12]24
800065a8:	19 c2 18 00 	ld.w %d2,[%a12]24
800065ac:	b7 02 02 28 	insert %d2,%d2,0,16,2
800065b0:	74 22       	st.w [%a2],%d2
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
800065b2:	b9 d3 08 00 	ld.hu %d3,[%a13]8
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
800065b6:	c2 f3       	add %d3,-1
800065b8:	d9 c2 14 00 	lea %a2,[%a12]20
800065bc:	19 c2 14 00 	ld.w %d2,[%a12]20
800065c0:	37 32 0c 20 	insert %d2,%d2,%d3,0,12
800065c4:	74 22       	st.w [%a2],%d2
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
800065c6:	19 d4 18 10 	ld.w %d4,[%a13]88
800065ca:	40 c4       	mov.aa %a4,%a12
800065cc:	6d ff 20 fd 	call 8000600c <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
800065d0:	19 d7 10 00 	ld.w %d7,[%a13]16
800065d4:	19 d6 14 00 	ld.w %d6,[%a13]20
800065d8:	19 d5 0c 00 	ld.w %d5,[%a13]12
800065dc:	19 d4 04 00 	ld.w %d4,[%a13]4
800065e0:	40 c4       	mov.aa %a4,%a12
800065e2:	6d ff 29 fd 	call 80006034 <IfxAsclin_setBitTiming>
800065e6:	02 2a       	mov %d10,%d2
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
800065e8:	82 04       	mov %d4,0
800065ea:	40 c4       	mov.aa %a4,%a12
800065ec:	6d ff 10 fd 	call 8000600c <IfxAsclin_setClockSource>
    IfxAsclin_enableLoopBackMode(asclinSFR, config->loopBack);                       /* selecting the loopback mode */
800065f0:	39 d4 2c 10 	ld.bu %d4,[%a13]108
    asclin->IOCR.B.LB = enable ? 1 : 0;
800065f4:	8b 04 20 42 	ne %d4,%d4,0
800065f8:	d9 c2 04 00 	lea %a2,[%a12]4
800065fc:	19 c3 04 00 	ld.w %d3,[%a12]4
80006600:	67 43 1c 30 	ins.t %d3,%d3,28,%d4,0
80006604:	74 23       	st.w [%a2],%d3
    IfxAsclin_enableParity(asclinSFR, config->frame.parityBit);                      /* setting parity enable */
80006606:	39 d4 30 00 	ld.bu %d4,[%a13]48
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
8000660a:	8b 04 20 42 	ne %d4,%d4,0
8000660e:	d9 c2 18 00 	lea %a2,[%a12]24
80006612:	19 c3 18 00 	ld.w %d3,[%a12]24
80006616:	67 43 1e 30 	ins.t %d3,%d3,30,%d4,0
8000661a:	74 23       	st.w [%a2],%d3
    IfxAsclin_setParityType(asclinSFR, config->frame.parityType);                    /* setting parity type (odd/even)*/
8000661c:	19 d2 28 00 	ld.w %d2,[%a13]40
    asclin->FRAMECON.B.ODD = type;
80006620:	d9 c2 18 00 	lea %a2,[%a12]24
80006624:	19 c3 18 00 	ld.w %d3,[%a12]24
80006628:	67 23 1f 30 	ins.t %d3,%d3,31,%d2,0
8000662c:	74 23       	st.w [%a2],%d3
    IfxAsclin_setStopBit(asclinSFR, config->frame.stopBit);                          /* setting the stop bit */
8000662e:	19 d2 1c 00 	ld.w %d2,[%a13]28
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
80006632:	d9 c2 18 00 	lea %a2,[%a12]24
80006636:	19 c3 18 00 	ld.w %d3,[%a12]24
8000663a:	37 23 83 34 	insert %d3,%d3,%d2,9,3
8000663e:	74 23       	st.w [%a2],%d3
    IfxAsclin_setShiftDirection(asclinSFR, config->frame.shiftDir);                  /* setting the shift direction */
80006640:	19 d2 24 00 	ld.w %d2,[%a13]36
    asclin->FRAMECON.B.MSB = dir;
80006644:	d9 c2 18 00 	lea %a2,[%a12]24
80006648:	19 c3 18 00 	ld.w %d3,[%a12]24
8000664c:	67 23 1c 30 	ins.t %d3,%d3,28,%d2,0
80006650:	74 23       	st.w [%a2],%d3
    IfxAsclin_setDataLength(asclinSFR, config->frame.dataLength);                    /* setting the data length */
80006652:	19 d2 2c 00 	ld.w %d2,[%a13]44
    asclin->DATCON.B.DATLEN = length;
80006656:	d9 c2 1c 00 	lea %a2,[%a12]28
8000665a:	19 c3 1c 00 	ld.w %d3,[%a12]28
8000665e:	37 23 04 30 	insert %d3,%d3,%d2,0,4
80006662:	74 23       	st.w [%a2],%d3
    IfxAsclin_setTxFifoInletWidth(asclinSFR, config->fifo.inWidth);                  /* setting Tx FIFO inlet width */
80006664:	19 d2 34 00 	ld.w %d2,[%a13]52
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
80006668:	d9 c2 0c 00 	lea %a2,[%a12]12
8000666c:	19 c3 0c 00 	ld.w %d3,[%a12]12
80006670:	37 23 02 33 	insert %d3,%d3,%d2,6,2
80006674:	74 23       	st.w [%a2],%d3
    IfxAsclin_setRxFifoOutletWidth(asclinSFR, config->fifo.outWidth);                /* setting Rx FIFO outlet width */
80006676:	19 d2 38 00 	ld.w %d2,[%a13]56
    asclin->RXFIFOCON.B.OUTW = width;
8000667a:	d9 c2 10 00 	lea %a2,[%a12]16
8000667e:	19 c3 10 00 	ld.w %d3,[%a12]16
80006682:	37 23 02 33 	insert %d3,%d3,%d2,6,2
80006686:	74 23       	st.w [%a2],%d3
    IfxAsclin_setIdleDelay(asclinSFR, config->frame.idleDelay);                      /* setting idle delay */
80006688:	19 d2 18 00 	ld.w %d2,[%a13]24
    asclin->FRAMECON.B.IDLE = delay;
8000668c:	d9 c2 18 00 	lea %a2,[%a12]24
80006690:	19 c3 18 00 	ld.w %d3,[%a12]24
80006694:	37 23 03 33 	insert %d3,%d3,%d2,6,3
80006698:	74 23       	st.w [%a2],%d3
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
8000669a:	19 d2 3c 00 	ld.w %d2,[%a13]60
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000669e:	3b f0 00 40 	mov %d4,15
800066a2:	0b 42 90 21 	min.u %d2,%d2,%d4
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
800066a6:	d9 c2 0c 00 	lea %a2,[%a12]12
800066aa:	19 c3 0c 00 	ld.w %d3,[%a12]12
800066ae:	37 23 04 34 	insert %d3,%d3,%d2,8,4
800066b2:	74 23       	st.w [%a2],%d3
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
800066b4:	19 d2 00 10 	ld.w %d2,[%a13]64
800066b8:	0b 42 90 41 	min.u %d4,%d2,%d4
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
800066bc:	d9 c2 10 00 	lea %a2,[%a12]16
800066c0:	19 c3 10 00 	ld.w %d3,[%a12]16
800066c4:	37 43 04 34 	insert %d3,%d3,%d4,8,4
800066c8:	74 23       	st.w [%a2],%d3
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/
800066ca:	19 d2 20 00 	ld.w %d2,[%a13]32
    asclin->FRAMECON.B.MODE = mode;
800066ce:	d9 c2 18 00 	lea %a2,[%a12]24
800066d2:	19 c3 18 00 	ld.w %d3,[%a12]24
800066d6:	37 23 02 38 	insert %d3,%d3,%d2,16,2
800066da:	74 23       	st.w [%a2],%d3
    const IfxAsclin_Asc_Pins *pins = config->pins;
800066dc:	19 d8 14 10 	ld.w %d8,[%a13]84
    if (pins != NULL_PTR)
800066e0:	df 08 8c 00 	jeq %d8,0,800067f8 <IfxAsclin_Asc_initModule+0x26c>
        IfxAsclin_Cts_In *cts = pins->cts;
800066e4:	60 82       	mov.a %a2,%d8
800066e6:	54 29       	ld.w %d9,[%a2]
        if (cts != NULL_PTR)
800066e8:	df 09 2c 00 	jeq %d9,0,80006740 <IfxAsclin_Asc_initModule+0x1b4>
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
800066ec:	19 25 04 00 	ld.w %d5,[%a2]4
800066f0:	19 2b 20 00 	ld.w %d11,[%a2]32
    if (cts->pin.port != NULL_PTR)
800066f4:	60 92       	mov.a %a2,%d9
800066f6:	99 24 04 00 	ld.a %a4,[%a2]4
800066fa:	bd 04 23 00 	jz.a %a4,80006740 <IfxAsclin_Asc_initModule+0x1b4>
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
800066fe:	39 24 08 00 	ld.bu %d4,[%a2]8
80006702:	6d ff c3 de 	call 80002488 <IfxPort_setPinMode>
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
80006706:	02 b5       	mov %d5,%d11
80006708:	60 92       	mov.a %a2,%d9
8000670a:	39 24 08 00 	ld.bu %d4,[%a2]8
8000670e:	99 24 04 00 	ld.a %a4,[%a2]4
80006712:	6d ff f2 de 	call 800024f6 <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
80006716:	60 92       	mov.a %a2,%d9
80006718:	d4 22       	ld.a %a2,[%a2]
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
8000671a:	d9 23 04 00 	lea %a3,[%a2]4
8000671e:	19 23 04 00 	ld.w %d3,[%a2]4
80006722:	b7 13 81 3e 	insert %d3,%d3,1,29,1
80006726:	74 33       	st.w [%a3],%d3
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
80006728:	60 92       	mov.a %a2,%d9
8000672a:	d4 22       	ld.a %a2,[%a2]
8000672c:	60 93       	mov.a %a3,%d9
8000672e:	19 32 0c 00 	ld.w %d2,[%a3]12
    asclin->IOCR.B.CTS = ctsi;
80006732:	d9 23 04 00 	lea %a3,[%a2]4
80006736:	19 23 04 00 	ld.w %d3,[%a2]4
8000673a:	37 23 02 38 	insert %d3,%d3,%d2,16,2
8000673e:	74 33       	st.w [%a3],%d3
        IfxAsclin_Rx_In *rx = pins->rx;
80006740:	60 82       	mov.a %a2,%d8
80006742:	19 29 08 00 	ld.w %d9,[%a2]8
        if (rx != NULL_PTR)
80006746:	df 09 23 00 	jeq %d9,0,8000678c <IfxAsclin_Asc_initModule+0x200>
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
8000674a:	19 25 0c 00 	ld.w %d5,[%a2]12
8000674e:	19 2b 20 00 	ld.w %d11,[%a2]32
    if (rx->pin.port != NULL_PTR)
80006752:	60 92       	mov.a %a2,%d9
80006754:	99 24 04 00 	ld.a %a4,[%a2]4
80006758:	bd 04 1a 00 	jz.a %a4,8000678c <IfxAsclin_Asc_initModule+0x200>
8000675c:	39 24 08 00 	ld.bu %d4,[%a2]8
80006760:	6d ff 94 de 	call 80002488 <IfxPort_setPinMode>
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
80006764:	02 b5       	mov %d5,%d11
80006766:	60 92       	mov.a %a2,%d9
80006768:	39 24 08 00 	ld.bu %d4,[%a2]8
8000676c:	99 24 04 00 	ld.a %a4,[%a2]4
80006770:	6d ff c3 de 	call 800024f6 <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
80006774:	60 92       	mov.a %a2,%d9
80006776:	d4 22       	ld.a %a2,[%a2]
80006778:	60 93       	mov.a %a3,%d9
8000677a:	19 32 0c 00 	ld.w %d2,[%a3]12
    asclin->IOCR.B.ALTI = alti;
8000677e:	d9 23 04 00 	lea %a3,[%a2]4
80006782:	19 23 04 00 	ld.w %d3,[%a2]4
80006786:	37 23 03 30 	insert %d3,%d3,%d2,0,3
8000678a:	74 33       	st.w [%a3],%d3
        IfxAsclin_Rts_Out *rts = pins->rts;
8000678c:	60 82       	mov.a %a2,%d8
8000678e:	19 29 10 00 	ld.w %d9,[%a2]16
        if (rts != NULL_PTR)
80006792:	df 09 18 00 	jeq %d9,0,800067c2 <IfxAsclin_Asc_initModule+0x236>
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
80006796:	19 25 14 00 	ld.w %d5,[%a2]20
8000679a:	19 2b 20 00 	ld.w %d11,[%a2]32
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
8000679e:	60 92       	mov.a %a2,%d9
800067a0:	19 22 0c 00 	ld.w %d2,[%a2]12
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800067a4:	a6 25       	or %d5,%d2
800067a6:	39 24 08 00 	ld.bu %d4,[%a2]8
800067aa:	99 24 04 00 	ld.a %a4,[%a2]4
800067ae:	6d ff 6d de 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
800067b2:	02 b5       	mov %d5,%d11
800067b4:	60 92       	mov.a %a2,%d9
800067b6:	39 24 08 00 	ld.bu %d4,[%a2]8
800067ba:	99 24 04 00 	ld.a %a4,[%a2]4
800067be:	6d ff 9c de 	call 800024f6 <IfxPort_setPinPadDriver>
        IfxAsclin_Tx_Out *tx = pins->tx;
800067c2:	60 82       	mov.a %a2,%d8
800067c4:	19 29 18 00 	ld.w %d9,[%a2]24
        if (tx != NULL_PTR)
800067c8:	df 09 18 00 	jeq %d9,0,800067f8 <IfxAsclin_Asc_initModule+0x26c>
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800067cc:	19 22 1c 00 	ld.w %d2,[%a2]28
800067d0:	19 28 20 00 	ld.w %d8,[%a2]32
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
800067d4:	60 92       	mov.a %a2,%d9
800067d6:	19 25 0c 00 	ld.w %d5,[%a2]12
800067da:	a6 25       	or %d5,%d2
800067dc:	39 24 08 00 	ld.bu %d4,[%a2]8
800067e0:	99 24 04 00 	ld.a %a4,[%a2]4
800067e4:	6d ff 52 de 	call 80002488 <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
800067e8:	02 85       	mov %d5,%d8
800067ea:	60 92       	mov.a %a2,%d9
800067ec:	39 24 08 00 	ld.bu %d4,[%a2]8
800067f0:	99 24 04 00 	ld.a %a4,[%a2]4
800067f4:	6d ff 81 de 	call 800024f6 <IfxPort_setPinPadDriver>
    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
800067f8:	19 d4 18 10 	ld.w %d4,[%a13]88
800067fc:	40 c4       	mov.aa %a4,%a12
800067fe:	6d ff 07 fc 	call 8000600c <IfxAsclin_setClockSource>
    asclin->FLAGSENABLE.U = 0x00000000;
80006802:	82 03       	mov %d3,0
80006804:	59 c3 00 10 	st.w [%a12]64,%d3
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
80006808:	82 f2       	mov %d2,-1
8000680a:	59 c2 3c 00 	st.w [%a12]60,%d2
    asclin->errorFlags.ALL = 0;
8000680e:	28 e3       	st.b [%a15]14,%d3
    if (config->errorFlags.flags.parityError)
80006810:	39 d3 1c 10 	ld.bu %d3,[%a13]92
80006814:	6f 03 09 00 	jz.t %d3,0,80006826 <IfxAsclin_Asc_initModule+0x29a>
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80006818:	d9 c2 00 10 	lea %a2,[%a12]64
8000681c:	19 c3 00 10 	ld.w %d3,[%a12]64
80006820:	b7 13 01 38 	insert %d3,%d3,1,16,1
80006824:	74 23       	st.w [%a2],%d3
    if (config->errorFlags.flags.frameError)
80006826:	39 d3 1c 10 	ld.bu %d3,[%a13]92
8000682a:	6f 13 09 00 	jz.t %d3,1,8000683c <IfxAsclin_Asc_initModule+0x2b0>
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
8000682e:	d9 c2 00 10 	lea %a2,[%a12]64
80006832:	19 c3 00 10 	ld.w %d3,[%a12]64
80006836:	b7 13 01 39 	insert %d3,%d3,1,18,1
8000683a:	74 23       	st.w [%a2],%d3
    if (config->errorFlags.flags.rxFifoOverflow)
8000683c:	39 d3 1c 10 	ld.bu %d3,[%a13]92
80006840:	6f 23 09 00 	jz.t %d3,2,80006852 <IfxAsclin_Asc_initModule+0x2c6>
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80006844:	d9 c2 00 10 	lea %a2,[%a12]64
80006848:	19 c3 00 10 	ld.w %d3,[%a12]64
8000684c:	b7 13 01 3d 	insert %d3,%d3,1,26,1
80006850:	74 23       	st.w [%a2],%d3
    if (config->errorFlags.flags.rxFifoUnderflow)
80006852:	39 d3 1c 10 	ld.bu %d3,[%a13]92
80006856:	6f 33 09 00 	jz.t %d3,3,80006868 <IfxAsclin_Asc_initModule+0x2dc>
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
8000685a:	d9 c2 00 10 	lea %a2,[%a12]64
8000685e:	19 c3 00 10 	ld.w %d3,[%a12]64
80006862:	b7 13 81 3d 	insert %d3,%d3,1,27,1
80006866:	74 23       	st.w [%a2],%d3
    if (config->errorFlags.flags.txFifoOverflow)
80006868:	39 d3 1c 10 	ld.bu %d3,[%a13]92
8000686c:	6f 43 09 00 	jz.t %d3,4,8000687e <IfxAsclin_Asc_initModule+0x2f2>
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
80006870:	d9 c2 00 10 	lea %a2,[%a12]64
80006874:	19 c3 00 10 	ld.w %d3,[%a12]64
80006878:	b7 13 01 3f 	insert %d3,%d3,1,30,1
8000687c:	74 23       	st.w [%a2],%d3
    asclin->rxSwFifoOverflow = FALSE;
8000687e:	82 03       	mov %d3,0
80006880:	28 d3       	st.b [%a15]13,%d3
    asclin->txInProgress     = FALSE;
80006882:	28 c3       	st.b [%a15]12,%d3
    asclin->dataBufferMode = config->dataBufferMode;
80006884:	19 d3 30 10 	ld.w %d3,[%a13]112
80006888:	68 43       	st.w [%a15]16,%d3
    asclin->txTimestamp    = 0;
8000688a:	d2 04       	mov %e4,0
8000688c:	89 f4 58 09 	st.d [%a15]24,%e4
    asclin->sendCount      = 0;
80006890:	82 02       	mov %d2,0
80006892:	68 52       	st.w [%a15]20,%d2
    switch (asclin->dataBufferMode)
80006894:	df 03 82 00 	jeq %d3,0,80006998 <IfxAsclin_Asc_initModule+0x40c>
80006898:	df 13 83 80 	jne %d3,1,8000699e <IfxAsclin_Asc_initModule+0x412>
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
8000689c:	3b c0 00 80 	mov %d8,12
    if (config->txBuffer != NULL_PTR)
800068a0:	99 d4 20 10 	ld.a %a4,[%a13]96
800068a4:	bd 04 80 00 	jz.a %a4,800069a4 <IfxAsclin_Asc_initModule+0x418>
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
800068a8:	02 85       	mov %d5,%d8
800068aa:	c9 d4 1e 10 	ld.h %d4,[%a13]94
800068ae:	6d ff 7b d5 	call 800013a4 <Ifx_Fifo_init>
800068b2:	e8 12       	st.a [%a15]4,%a2
    if (config->rxBuffer != NULL_PTR)
800068b4:	99 d4 28 10 	ld.a %a4,[%a13]104
800068b8:	bd 04 7e 00 	jz.a %a4,800069b4 <IfxAsclin_Asc_initModule+0x428>
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
800068bc:	02 85       	mov %d5,%d8
800068be:	c9 d4 24 10 	ld.h %d4,[%a13]100
800068c2:	6d ff 71 d5 	call 800013a4 <Ifx_Fifo_init>
800068c6:	e8 22       	st.a [%a15]8,%a2
    IfxSrc_Tos tos = config->interrupt.typeOfService;
800068c8:	19 d8 10 10 	ld.w %d8,[%a13]80
    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
800068cc:	b9 d3 0a 10 	ld.hu %d3,[%a13]74
800068d0:	df 03 04 80 	jne %d3,0,800068d8 <IfxAsclin_Asc_initModule+0x34c>
800068d4:	df 38 1e 80 	jne %d8,3,80006910 <IfxAsclin_Asc_initModule+0x384>
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
800068d8:	40 c4       	mov.aa %a4,%a12
800068da:	6d ff 72 fb 	call 80005fbe <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800068de:	39 d2 0a 10 	ld.bu %d2,[%a13]74
800068e2:	54 23       	ld.w %d3,[%a2]
800068e4:	37 23 08 30 	insert %d3,%d3,%d2,0,8
800068e8:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
800068ea:	54 23       	ld.w %d3,[%a2]
800068ec:	37 83 82 35 	insert %d3,%d3,%d8,11,2
800068f0:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
800068f2:	54 23       	ld.w %d3,[%a2]
800068f4:	b7 13 81 3c 	insert %d3,%d3,1,25,1
800068f8:	74 23       	st.w [%a2],%d3
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
800068fa:	d9 c3 00 10 	lea %a3,[%a12]64
800068fe:	19 c3 00 10 	ld.w %d3,[%a12]64
80006902:	b7 13 01 3e 	insert %d3,%d3,1,28,1
80006906:	74 33       	st.w [%a3],%d3
    src->B.SRE = 1;
80006908:	54 23       	ld.w %d3,[%a2]
8000690a:	b7 13 01 35 	insert %d3,%d3,1,10,1
8000690e:	74 23       	st.w [%a2],%d3
    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
80006910:	b9 d3 08 10 	ld.hu %d3,[%a13]72
80006914:	df 03 04 80 	jne %d3,0,8000691c <IfxAsclin_Asc_initModule+0x390>
80006918:	df 38 1e 80 	jne %d8,3,80006954 <IfxAsclin_Asc_initModule+0x3c8>
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
8000691c:	40 c4       	mov.aa %a4,%a12
8000691e:	6d ff 5d fb 	call 80005fd8 <IfxAsclin_getSrcPointerTx>
    src->B.SRPN = priority;
80006922:	39 d2 08 10 	ld.bu %d2,[%a13]72
80006926:	54 23       	ld.w %d3,[%a2]
80006928:	37 23 08 30 	insert %d3,%d3,%d2,0,8
8000692c:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
8000692e:	54 23       	ld.w %d3,[%a2]
80006930:	37 83 82 35 	insert %d3,%d3,%d8,11,2
80006934:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80006936:	54 23       	ld.w %d3,[%a2]
80006938:	b7 13 81 3c 	insert %d3,%d3,1,25,1
8000693c:	74 23       	st.w [%a2],%d3
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
8000693e:	d9 c3 00 10 	lea %a3,[%a12]64
80006942:	19 c3 00 10 	ld.w %d3,[%a12]64
80006946:	b7 13 81 3f 	insert %d3,%d3,1,31,1
8000694a:	74 33       	st.w [%a3],%d3
    src->B.SRE = 1;
8000694c:	54 23       	ld.w %d3,[%a2]
8000694e:	b7 13 01 35 	insert %d3,%d3,1,10,1
80006952:	74 23       	st.w [%a2],%d3
    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80006954:	b9 d3 0c 10 	ld.hu %d3,[%a13]76
80006958:	df 03 36 80 	jne %d3,0,800069c4 <IfxAsclin_Asc_initModule+0x438>
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
8000695c:	d9 c2 10 00 	lea %a2,[%a12]16
80006960:	19 c3 10 00 	ld.w %d3,[%a12]16
80006964:	b7 13 81 30 	insert %d3,%d3,1,1,1
80006968:	74 23       	st.w [%a2],%d3
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
8000696a:	d9 c2 0c 00 	lea %a2,[%a12]12
8000696e:	19 c3 0c 00 	ld.w %d3,[%a12]12
80006972:	b7 13 81 30 	insert %d3,%d3,1,1,1
80006976:	74 23       	st.w [%a2],%d3
    asclin->RXFIFOCON.B.FLUSH = 1;
80006978:	d9 c2 10 00 	lea %a2,[%a12]16
8000697c:	19 c3 10 00 	ld.w %d3,[%a12]16
80006980:	b7 13 01 30 	insert %d3,%d3,1,0,1
80006984:	74 23       	st.w [%a2],%d3
    asclin->TXFIFOCON.B.FLUSH = 1;
80006986:	d9 c2 0c 00 	lea %a2,[%a12]12
8000698a:	19 c3 0c 00 	ld.w %d3,[%a12]12
8000698e:	b7 13 01 30 	insert %d3,%d3,1,0,1
80006992:	74 23       	st.w [%a2],%d3
}
80006994:	02 a2       	mov %d2,%d10
80006996:	00 90       	ret 
    switch (asclin->dataBufferMode)
80006998:	82 18       	mov %d8,1
8000699a:	1d ff 83 ff 	j 800068a0 <IfxAsclin_Asc_initModule+0x314>
        elementSize = 0;
8000699e:	82 08       	mov %d8,0
800069a0:	1d ff 80 ff 	j 800068a0 <IfxAsclin_Asc_initModule+0x314>
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
800069a4:	02 85       	mov %d5,%d8
800069a6:	c9 d4 1e 10 	ld.h %d4,[%a13]94
800069aa:	6d ff 23 d5 	call 800013f0 <Ifx_Fifo_create>
800069ae:	e8 12       	st.a [%a15]4,%a2
800069b0:	1d ff 82 ff 	j 800068b4 <IfxAsclin_Asc_initModule+0x328>
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
800069b4:	02 85       	mov %d5,%d8
800069b6:	c9 d4 24 10 	ld.h %d4,[%a13]100
800069ba:	6d ff 1b d5 	call 800013f0 <Ifx_Fifo_create>
800069be:	e8 22       	st.a [%a15]8,%a2
800069c0:	1d ff 84 ff 	j 800068c8 <IfxAsclin_Asc_initModule+0x33c>
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
800069c4:	40 c4       	mov.aa %a4,%a12
800069c6:	6d ff ee fa 	call 80005fa2 <IfxAsclin_getSrcPointerEr>
    src->B.SRPN = priority;
800069ca:	39 d2 0c 10 	ld.bu %d2,[%a13]76
800069ce:	54 23       	ld.w %d3,[%a2]
800069d0:	37 23 08 30 	insert %d3,%d3,%d2,0,8
800069d4:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
800069d6:	54 23       	ld.w %d3,[%a2]
800069d8:	37 83 82 35 	insert %d3,%d3,%d8,11,2
800069dc:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
800069de:	54 23       	ld.w %d3,[%a2]
800069e0:	b7 13 81 3c 	insert %d3,%d3,1,25,1
800069e4:	74 23       	st.w [%a2],%d3
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
800069e6:	d9 c3 00 10 	lea %a3,[%a12]64
800069ea:	19 c3 00 10 	ld.w %d3,[%a12]64
800069ee:	b7 13 01 38 	insert %d3,%d3,1,16,1
800069f2:	74 33       	st.w [%a3],%d3
    src->B.SRE = 1;
800069f4:	54 23       	ld.w %d3,[%a2]
800069f6:	b7 13 01 35 	insert %d3,%d3,1,10,1
800069fa:	74 23       	st.w [%a2],%d3
}
800069fc:	1d ff b0 ff 	j 8000695c <IfxAsclin_Asc_initModule+0x3d0>

80006a00 <IfxAsclin_Asc_initModuleConfig>:
{
80006a00:	40 ae       	mov.aa %a14,%sp
    config->asclin = asclin;
80006a02:	f4 45       	st.a [%a4],%a5
    config->loopBack = FALSE;                                                  /* no loop back*/
80006a04:	82 02       	mov %d2,0
80006a06:	e9 42 2c 10 	st.b [%a4]108,%d2
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80006a0a:	82 13       	mov %d3,1
80006a0c:	59 43 18 10 	st.w [%a4]88,%d3
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
80006a10:	f9 43 08 00 	st.h [%a4]8,%d3
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80006a14:	7b 10 7e 24 	movh %d2,18401
80006a18:	59 42 04 00 	st.w [%a4]4,%d2
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
80006a1c:	82 34       	mov %d4,3
80006a1e:	59 44 0c 00 	st.w [%a4]12,%d4
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
80006a22:	82 02       	mov %d2,0
80006a24:	59 42 10 00 	st.w [%a4]16,%d2
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
80006a28:	59 44 14 00 	st.w [%a4]20,%d4
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
80006a2c:	59 42 18 00 	st.w [%a4]24,%d2
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
80006a30:	59 43 1c 00 	st.w [%a4]28,%d3
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
80006a34:	59 43 20 00 	st.w [%a4]32,%d3
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
80006a38:	59 42 24 00 	st.w [%a4]36,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
80006a3c:	e9 42 30 00 	st.b [%a4]48,%d2
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
80006a40:	59 42 28 00 	st.w [%a4]40,%d2
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
80006a44:	82 74       	mov %d4,7
80006a46:	59 44 2c 00 	st.w [%a4]44,%d4
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
80006a4a:	59 43 34 00 	st.w [%a4]52,%d3
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80006a4e:	59 43 38 00 	st.w [%a4]56,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
80006a52:	59 42 3c 00 	st.w [%a4]60,%d2
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
80006a56:	59 42 00 10 	st.w [%a4]64,%d2
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
80006a5a:	59 42 04 10 	st.w [%a4]68,%d2
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
80006a5e:	f9 42 0a 10 	st.h [%a4]74,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
80006a62:	f9 42 08 10 	st.h [%a4]72,%d2
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
80006a66:	f9 42 0c 10 	st.h [%a4]76,%d2
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
80006a6a:	59 42 10 10 	st.w [%a4]80,%d2
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
80006a6e:	82 f3       	mov %d3,-1
80006a70:	e9 43 1c 10 	st.b [%a4]92,%d3
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
80006a74:	59 42 14 10 	st.w [%a4]84,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
80006a78:	59 42 28 10 	st.w [%a4]104,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
80006a7c:	59 42 20 10 	st.w [%a4]96,%d2
    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
80006a80:	f9 42 1e 10 	st.h [%a4]94,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
80006a84:	f9 42 24 10 	st.h [%a4]100,%d2
    config->dataBufferMode = Ifx_DataBufferMode_normal;
80006a88:	59 42 30 10 	st.w [%a4]112,%d2
}
80006a8c:	00 90       	ret 

80006a8e <IfxAsclin_Asc_initiateTransmission>:
{
80006a8e:	40 ae       	mov.aa %a14,%sp
80006a90:	20 10       	sub.a %sp,16
80006a92:	40 4c       	mov.aa %a12,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
80006a94:	39 42 0c 00 	ld.bu %d2,[%a4]12
80006a98:	df 02 17 80 	jne %d2,0,80006ac6 <IfxAsclin_Asc_initiateTransmission+0x38>
        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80006a9c:	99 44 04 00 	ld.a %a4,[%a4]4
80006aa0:	c9 42 04 00 	ld.h %d2,[%a4]4
80006aa4:	df 02 11 00 	jeq %d2,0,80006ac6 <IfxAsclin_Asc_initiateTransmission+0x38>
            asclin->txInProgress = TRUE;
80006aa8:	82 12       	mov %d2,1
80006aaa:	e9 c2 0c 00 	st.b [%a12]12,%d2
            switch (asclin->dataBufferMode)
80006aae:	19 c2 10 00 	ld.w %d2,[%a12]16
80006ab2:	df 02 0b 00 	jeq %d2,0,80006ac8 <IfxAsclin_Asc_initiateTransmission+0x3a>
80006ab6:	df 12 11 00 	jeq %d2,1,80006ad8 <IfxAsclin_Asc_initiateTransmission+0x4a>
            IfxAsclin_write8(asclin->asclin, &data, 1);
80006aba:	82 14       	mov %d4,1
80006abc:	d9 e5 f3 ff 	lea %a5,[%a14]-13
80006ac0:	d4 c4       	ld.a %a4,[%a12]
80006ac2:	6d ff 70 fb 	call 800061a2 <IfxAsclin_write8>
}
80006ac6:	00 90       	ret 
                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
80006ac8:	d2 06       	mov %e6,0
80006aca:	82 14       	mov %d4,1
80006acc:	d9 e5 f3 ff 	lea %a5,[%a14]-13
80006ad0:	6d ff 2e d5 	call 8000152c <Ifx_Fifo_read>
            break;
80006ad4:	1d ff f3 ff 	j 80006aba <IfxAsclin_Asc_initiateTransmission+0x2c>
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80006ad8:	d2 06       	mov %e6,0
80006ada:	3b c0 00 40 	mov %d4,12
80006ade:	d9 e5 f4 ff 	lea %a5,[%a14]-12
80006ae2:	6d ff 25 d5 	call 8000152c <Ifx_Fifo_read>
                data = packedData.data;
80006ae6:	39 e2 fc ff 	ld.bu %d2,[%a14]-4
80006aea:	e9 e2 f3 ff 	st.b [%a14]-13,%d2
            break;
80006aee:	1d ff e6 ff 	j 80006aba <IfxAsclin_Asc_initiateTransmission+0x2c>

80006af2 <IfxAsclin_Asc_write>:
    return TRUE;
}


boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80006af2:	40 ae       	mov.aa %a14,%sp
80006af4:	40 4c       	mov.aa %a12,%a4
80006af6:	80 5b       	mov.d %d11,%a5
80006af8:	40 6d       	mov.aa %a13,%a6
80006afa:	02 4a       	mov %d10,%d4
80006afc:	02 59       	mov %d9,%d5
    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
80006afe:	39 43 0c 00 	ld.bu %d3,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80006b02:	99 44 04 00 	ld.a %a4,[%a4]4
80006b06:	c9 42 18 00 	ld.h %d2,[%a4]24
80006b0a:	b9 48 18 00 	ld.hu %d8,[%a4]24

    if (*count != 0)
80006b0e:	94 64       	ld.h %d4,[%a6]
80006b10:	df 04 31 00 	jeq %d4,0,80006b72 <IfxAsclin_Asc_write+0x80>
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80006b14:	df 03 04 80 	jne %d3,0,80006b1c <IfxAsclin_Asc_write+0x2a>
80006b18:	3f 48 11 00 	jlt %d8,%d4,80006b3a <IfxAsclin_Asc_write+0x48>
            IfxAsclin_Asc_initiateTransmission(asclin); /*Will initiate transmission only if txInProgress is False, otherwise interrupts will continue to push data to H/W FIFO*/
        }

        else
        {
            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80006b1c:	02 a6       	mov %d6,%d10
80006b1e:	02 97       	mov %d7,%d9
80006b20:	60 b5       	mov.a %a5,%d11
80006b22:	6d ff 7a d6 	call 80001816 <Ifx_Fifo_write>
80006b26:	02 28       	mov %d8,%d2
            IfxAsclin_Asc_initiateTransmission(asclin);
80006b28:	40 c4       	mov.aa %a4,%a12
80006b2a:	6d ff b2 ff 	call 80006a8e <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
80006b2e:	94 d2       	ld.h %d2,[%a13]
80006b30:	a2 82       	sub %d2,%d8
80006b32:	b4 d2       	st.h [%a13],%d2
        result  = left == 0;
80006b34:	8b 08 00 22 	eq %d2,%d8,0
80006b38:	00 90       	ret 
            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
80006b3a:	02 a6       	mov %d6,%d10
80006b3c:	02 57       	mov %d7,%d5
80006b3e:	02 24       	mov %d4,%d2
80006b40:	6d ff 6b d6 	call 80001816 <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
80006b44:	40 c4       	mov.aa %a4,%a12
80006b46:	6d ff a4 ff 	call 80006a8e <IfxAsclin_Asc_initiateTransmission>
            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80006b4a:	b9 d4 00 00 	ld.hu %d4,[%a13]0
80006b4e:	a2 84       	sub %d4,%d8
80006b50:	02 a6       	mov %d6,%d10
80006b52:	02 97       	mov %d7,%d9
80006b54:	37 04 50 40 	extr %d4,%d4,0,16
80006b58:	60 b2       	mov.a %a2,%d11
80006b5a:	01 28 00 56 	addsc.a %a5,%a2,%d8,0
80006b5e:	99 c4 04 00 	ld.a %a4,[%a12]4
80006b62:	6d ff 5a d6 	call 80001816 <Ifx_Fifo_write>
80006b66:	02 28       	mov %d8,%d2
            IfxAsclin_Asc_initiateTransmission(asclin); /*Will initiate transmission only if txInProgress is False, otherwise interrupts will continue to push data to H/W FIFO*/
80006b68:	40 c4       	mov.aa %a4,%a12
80006b6a:	6d ff 92 ff 	call 80006a8e <IfxAsclin_Asc_initiateTransmission>
80006b6e:	1d ff e0 ff 	j 80006b2e <IfxAsclin_Asc_write+0x3c>
    boolean   result       = TRUE;
80006b72:	82 12       	mov %d2,1
    }

    return result;
}
80006b74:	00 90       	ret 

80006b76 <IfxAsclin_Asc_stdIfDPipeInit>:
{
80006b76:	40 ae       	mov.aa %a14,%sp
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
80006b78:	40 43       	mov.aa %a3,%a4
80006b7a:	82 02       	mov %d2,0
80006b7c:	c5 02 0b 10 	lea %a2,4b <__TRICORE_DERIVATE_MEMORY_MAP__-0x225>
80006b80:	24 32       	st.b [%a3+],%d2
80006b82:	fd 20 ff 7f 	loop %a2,80006b80 <IfxAsclin_Asc_stdIfDPipeInit+0xa>
    stdif->driver         = asclin;
80006b86:	f4 45       	st.a [%a4],%a5
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
80006b88:	91 00 00 28 	movh.a %a2,32768
80006b8c:	d9 22 b2 b6 	lea %a2,[%a2]27378 <80006af2 <IfxAsclin_Asc_write>>
80006b90:	b5 42 08 00 	st.a [%a4]8 <80006af2 <IfxAsclin_Asc_write>>,%a2
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
80006b94:	91 00 00 28 	movh.a %a2,32768
80006b98:	d9 22 24 f6 	lea %a2,[%a2]25572 <800063e4 <IfxAsclin_Asc_read>>
80006b9c:	b5 42 0c 00 	st.a [%a4]12 <800063e4 <IfxAsclin_Asc_read>>,%a2
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
80006ba0:	91 00 00 28 	movh.a %a2,32768
80006ba4:	d9 22 3e 66 	lea %a2,[%a2]25022 <800061be <IfxAsclin_Asc_getReadCount>>
80006ba8:	b5 42 10 00 	st.a [%a4]16 <800061be <IfxAsclin_Asc_getReadCount>>,%a2
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
80006bac:	91 00 00 28 	movh.a %a2,32768
80006bb0:	d9 22 0a 76 	lea %a2,[%a2]25034 <800061ca <IfxAsclin_Asc_getReadEvent>>
80006bb4:	b5 42 14 00 	st.a [%a4]20 <800061ca <IfxAsclin_Asc_getReadEvent>>,%a2
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
80006bb8:	91 00 00 28 	movh.a %a2,32768
80006bbc:	d9 22 26 76 	lea %a2,[%a2]25062 <800061e6 <IfxAsclin_Asc_getWriteCount>>
80006bc0:	b5 42 18 00 	st.a [%a4]24 <800061e6 <IfxAsclin_Asc_getWriteCount>>,%a2
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
80006bc4:	91 00 00 28 	movh.a %a2,32768
80006bc8:	d9 22 3e 76 	lea %a2,[%a2]25086 <800061fe <IfxAsclin_Asc_getWriteEvent>>
80006bcc:	b5 42 1c 00 	st.a [%a4]28 <800061fe <IfxAsclin_Asc_getWriteEvent>>,%a2
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
80006bd0:	91 00 00 28 	movh.a %a2,32768
80006bd4:	d9 22 04 b6 	lea %a2,[%a2]25284 <800062c4 <IfxAsclin_Asc_canReadCount>>
80006bd8:	b5 42 20 00 	st.a [%a4]32 <800062c4 <IfxAsclin_Asc_canReadCount>>,%a2
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80006bdc:	91 00 00 28 	movh.a %a2,32768
80006be0:	d9 22 1a e6 	lea %a2,[%a2]25498 <8000639a <IfxAsclin_Asc_canWriteCount>>
80006be4:	b5 42 24 00 	st.a [%a4]36 <8000639a <IfxAsclin_Asc_canWriteCount>>,%a2
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
80006be8:	91 00 00 28 	movh.a %a2,32768
80006bec:	d9 22 14 b6 	lea %a2,[%a2]25300 <800062d4 <IfxAsclin_Asc_flushTx>>
80006bf0:	b5 42 28 00 	st.a [%a4]40 <800062d4 <IfxAsclin_Asc_flushTx>>,%a2
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80006bf4:	91 00 00 28 	movh.a %a2,32768
80006bf8:	d9 22 06 f6 	lea %a2,[%a2]25542 <800063c6 <IfxAsclin_Asc_clearTx>>
80006bfc:	b5 42 2c 00 	st.a [%a4]44 <800063c6 <IfxAsclin_Asc_clearTx>>,%a2
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
80006c00:	91 00 00 28 	movh.a %a2,32768
80006c04:	d9 22 2a e6 	lea %a2,[%a2]25514 <800063aa <IfxAsclin_Asc_clearRx>>
80006c08:	b5 42 30 00 	st.a [%a4]48 <800063aa <IfxAsclin_Asc_clearRx>>,%a2
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
80006c0c:	91 00 00 28 	movh.a %a2,32768
80006c10:	d9 22 4e 36 	lea %a2,[%a2]25806 <800064ce <IfxAsclin_Asc_isrReceive>>
80006c14:	b5 42 34 00 	st.a [%a4]52 <800064ce <IfxAsclin_Asc_isrReceive>>,%a2
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
80006c18:	91 00 00 28 	movh.a %a2,32768
80006c1c:	d9 22 42 06 	lea %a2,[%a2]25602 <80006402 <IfxAsclin_Asc_isrTransmit>>
80006c20:	b5 42 38 00 	st.a [%a4]56 <80006402 <IfxAsclin_Asc_isrTransmit>>,%a2
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
80006c24:	91 00 00 28 	movh.a %a2,32768
80006c28:	d9 22 0a 86 	lea %a2,[%a2]25098 <8000620a <IfxAsclin_Asc_isrError>>
80006c2c:	b5 42 3c 00 	st.a [%a4]60 <8000620a <IfxAsclin_Asc_isrError>>,%a2
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
80006c30:	91 00 00 28 	movh.a %a2,32768
80006c34:	d9 22 16 76 	lea %a2,[%a2]25046 <800061d6 <IfxAsclin_Asc_getSendCount>>
80006c38:	b5 42 00 10 	st.a [%a4]64 <800061d6 <IfxAsclin_Asc_getSendCount>>,%a2
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
80006c3c:	91 00 00 28 	movh.a %a2,32768
80006c40:	d9 22 1e 76 	lea %a2,[%a2]25054 <800061de <IfxAsclin_Asc_getTxTimeStamp>>
80006c44:	b5 42 04 10 	st.a [%a4]68 <800061de <IfxAsclin_Asc_getTxTimeStamp>>,%a2
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
80006c48:	91 00 00 28 	movh.a %a2,32768
80006c4c:	d9 22 3a a6 	lea %a2,[%a2]25274 <800062ba <IfxAsclin_Asc_resetSendCount>>
80006c50:	b5 42 08 10 	st.a [%a4]72 <800062ba <IfxAsclin_Asc_resetSendCount>>,%a2
}
80006c54:	82 12       	mov %d2,1
80006c56:	00 90       	ret 

80006c58 <Ifx_Console_init>:
/**
 * \brief Initialize the \ref Ifx_g_console object.
 * \param standardIo Pointer to the IfxStdIf_DPipe object used by the \ref Ifx_g_console.
 */
void Ifx_Console_init(IfxStdIf_DPipe *standardIo)
{
80006c58:	40 ae       	mov.aa %a14,%sp
    Ifx_g_console.standardIo = standardIo;
80006c5a:	91 00 00 26 	movh.a %a2,24576
80006c5e:	d9 23 fc 50 	lea %a3,[%a2]3452 <60000d7c <Ifx_g_console>>
80006c62:	b5 24 fc 50 	st.a [%a2]3452 <60000d7c <Ifx_g_console>>,%a4
    Ifx_g_console.align      = 0;
80006c66:	82 02       	mov %d2,0
80006c68:	f9 32 04 00 	st.h [%a3]4,%d2
}
80006c6c:	00 90       	ret 

80006c6e <Ifx_Console_print>:
 * \param format printf-compatible formatted string.
 * \retval TRUE if the string is printed successfully
 * \retval FALSE if the function failed.
 */
boolean Ifx_Console_print(pchar format, ...)
{
80006c6e:	40 ae       	mov.aa %a14,%sp
80006c70:	d9 aa f8 bf 	lea %sp,[%sp]-264
    if (!Ifx_g_console.standardIo->txDisabled)
80006c74:	91 00 00 26 	movh.a %a2,24576
80006c78:	99 22 fc 50 	ld.a %a2,[%a2]3452 <60000d7c <Ifx_g_console>>
80006c7c:	39 22 04 00 	ld.bu %d2,[%a2]4 <60000d7c <Ifx_g_console>>
80006c80:	df 02 04 00 	jeq %d2,0,80006c88 <Ifx_Console_print+0x1a>

        return IfxStdIf_DPipe_write(Ifx_g_console.standardIo, (void *)message, &count, TIME_INFINITE);
    }
    else
    {
        return TRUE;
80006c84:	82 12       	mov %d2,1
    }
}
80006c86:	00 90       	ret 
        vsprintf((char *)message, format, args);
80006c88:	40 e6       	mov.aa %a6,%a14
80006c8a:	40 45       	mov.aa %a5,%a4
80006c8c:	d9 e4 c0 cf 	lea %a4,[%a14]-256
80006c90:	6d 00 22 11 	call 80008ed4 <vsprintf>
        count = (Ifx_SizeT)strlen(message);
80006c94:	d9 e4 c0 cf 	lea %a4,[%a14]-256
80006c98:	6d 00 3b 11 	call 80008f0e <strlen>
80006c9c:	f9 e2 fe bf 	st.h [%a14]-258,%d2
        return IfxStdIf_DPipe_write(Ifx_g_console.standardIo, (void *)message, &count, TIME_INFINITE);
80006ca0:	91 00 00 26 	movh.a %a2,24576
80006ca4:	99 22 fc 50 	ld.a %a2,[%a2]3452 <60000d7c <Ifx_g_console>>
    return stdIf->write(stdIf->driver, data, count, timeout);
80006ca8:	99 23 08 00 	ld.a %a3,[%a2]8 <60000d7c <Ifx_g_console>>
80006cac:	82 f4       	mov %d4,-1
80006cae:	82 f5       	mov %d5,-1
80006cb0:	06 f5       	sh %d5,-1
80006cb2:	d9 e6 fe bf 	lea %a6,[%a14]-258
80006cb6:	d9 e5 c0 cf 	lea %a5,[%a14]-256
80006cba:	d4 24       	ld.a %a4,[%a2]
80006cbc:	2d 03 00 00 	calli %a3
80006cc0:	00 90       	ret 

80006cc2 <Ifx_Shell_initConfig>:
}


//---------------------------------------------------------------------------
void Ifx_Shell_initConfig(Ifx_Shell_Config *config)
{
80006cc2:	40 ae       	mov.aa %a14,%sp
    uint32 i;

    for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
80006cc4:	82 02       	mov %d2,0
80006cc6:	df 02 18 00 	jeq %d2,0,80006cf6 <Ifx_Shell_initConfig+0x34>
    {
        config->commandList[i] = NULL_PTR;
    }

    config->standardIo           = NULL_PTR;
80006cca:	82 02       	mov %d2,0
80006ccc:	74 42       	st.w [%a4],%d2
    config->echo                 = TRUE;
80006cce:	82 13       	mov %d3,1
80006cd0:	e9 43 04 00 	st.b [%a4]4,%d3
    config->protocol.execute     = NULL_PTR;
80006cd4:	59 42 10 00 	st.w [%a4]16,%d2
    config->protocol.object      = NULL_PTR;
80006cd8:	59 42 1c 00 	st.w [%a4]28,%d2
    config->protocol.onStart     = NULL_PTR;
80006cdc:	59 42 14 00 	st.w [%a4]20,%d2
    config->protocol.onStartData = NULL_PTR;
80006ce0:	59 42 18 00 	st.w [%a4]24,%d2
    config->protocol.start       = NULL_PTR;
80006ce4:	59 42 0c 00 	st.w [%a4]12,%d2
    config->protocol.started     = FALSE;
80006ce8:	e9 42 20 00 	st.b [%a4]32,%d2
    config->sendResultCode       = FALSE;
80006cec:	e9 42 06 00 	st.b [%a4]6,%d2
    config->showPrompt           = TRUE;
80006cf0:	e9 43 05 00 	st.b [%a4]5,%d3
    config->standardIo           = NULL_PTR;
}
80006cf4:	00 90       	ret 
        config->commandList[i] = NULL_PTR;
80006cf6:	1b 22 00 30 	addi %d3,%d2,2
80006cfa:	06 23       	sh %d3,2
80006cfc:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80006d00:	82 03       	mov %d3,0
80006d02:	74 23       	st.w [%a2],%d3
    for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
80006d04:	c2 12       	add %d2,1
80006d06:	1d ff e0 ff 	j 80006cc6 <Ifx_Shell_initConfig+0x4>

80006d0a <Ifx_Shell_init>:


boolean Ifx_Shell_init(Ifx_Shell *shell, const Ifx_Shell_Config *config)
{
80006d0a:	40 ae       	mov.aa %a14,%sp
80006d0c:	40 4c       	mov.aa %a12,%a4
80006d0e:	40 5d       	mov.aa %a13,%a5
    sint32 i;
    char **CmdHistory = NULL_PTR;   /* Pointer to array of pointers for command history items */

    /* Ensure state variable is cleared */
    memset(shell, 0, sizeof(*shell));
80006d10:	40 43       	mov.aa %a3,%a4
80006d12:	82 02       	mov %d2,0
80006d14:	c5 02 23 50 	lea %a2,163 <__TRICORE_DERIVATE_MEMORY_MAP__-0x10d>
80006d18:	24 32       	st.b [%a3+],%d2
80006d1a:	fd 20 ff 7f 	loop %a2,80006d18 <Ifx_Shell_init+0xe>

    shell->protocol               = config->protocol;
80006d1e:	d9 42 0c 50 	lea %a2,[%a4]332
80006d22:	d9 53 0c 00 	lea %a3,[%a5]12
80006d26:	09 34 48 01 	ld.d %e4,[%a3+]8
80006d2a:	89 24 48 01 	st.d [%a2+]8,%e4
80006d2e:	09 34 48 01 	ld.d %e4,[%a3+]8
80006d32:	89 24 48 01 	st.d [%a2+]8,%e4
80006d36:	09 34 48 01 	ld.d %e4,[%a3+]8
80006d3a:	89 24 48 01 	st.d [%a2+]8,%e4
    shell->protocol.started       = FALSE;
80006d3e:	82 02       	mov %d2,0
80006d40:	e9 c2 20 50 	st.b [%a12]352,%d2

    shell->io                     = config->standardIo;
80006d44:	54 52       	ld.w %d2,[%a5]
80006d46:	74 c2       	st.w [%a12],%d2
    shell->control.showPrompt     = config->showPrompt;
80006d48:	39 53 05 00 	ld.bu %d3,[%a5]5
80006d4c:	39 c2 04 00 	ld.bu %d2,[%a12]4
80006d50:	67 32 00 20 	ins.t %d2,%d2,0,%d3,0
80006d54:	e9 c2 04 00 	st.b [%a12]4,%d2
    shell->control.sendResultCode = config->sendResultCode;
80006d58:	39 53 06 00 	ld.bu %d3,[%a5]6
80006d5c:	67 32 02 20 	ins.t %d2,%d2,2,%d3,0
80006d60:	e9 c2 04 00 	st.b [%a12]4,%d2
    shell->control.echo           = config->echo;
80006d64:	39 53 04 00 	ld.bu %d3,[%a5]4
80006d68:	67 32 03 20 	ins.t %d2,%d2,3,%d3,0
80006d6c:	e9 c2 04 00 	st.b [%a12]4,%d2
    shell->control.echoError      = TRUE;
80006d70:	b7 12 01 22 	insert %d2,%d2,1,4,1
80006d74:	e9 c2 04 00 	st.b [%a12]4,%d2
    shell->control.enabled        = TRUE;
80006d78:	b7 12 81 20 	insert %d2,%d2,1,1,1
80006d7c:	e9 c2 04 00 	st.b [%a12]4,%d2

    shell->locals.escBracketNum   = IFX_SHELL_NULL_CHAR; /* Used to cache number in sequence "ESC [ 1/2/3/4 ~" */
    shell->locals.cmdState        = IFX_SHELL_CMD_STATE_NORMAL;

    /* Copy command line buffer pointer into state variable */
    shell->cmd.cmdStr = shell->locals.cmdStr;
80006d80:	80 c2       	mov.d %d2,%a12
80006d82:	1b f2 0b 20 	addi %d2,%d2,191
80006d86:	59 c2 30 00 	st.w [%a12]48,%d2

    /* Initialize command history space and cache pointer */
    memset(Ifx_Shell_cmdBuffer, 0, sizeof(Ifx_Shell_cmdBuffer));
80006d8a:	91 00 00 f6 	movh.a %a15,24576
80006d8e:	d9 ff c4 60 	lea %a15,[%a15]3460 <60000d84 <Ifx_Shell_cmdBuffer>>
80006d92:	3b 00 50 50 	mov %d5,1280
80006d96:	82 04       	mov %d4,0
80006d98:	40 f4       	mov.aa %a4,%a15
80006d9a:	6d 00 a5 04 	call 800076e4 <memset>
    shell->cmdHistory[0] = &Ifx_Shell_cmdBuffer[0];
80006d9e:	ec c2       	st.a [%a12]8,%a15

    for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
80006da0:	82 02       	mov %d2,0
80006da2:	bf 12 08 00 	jlt %d2,1,80006db2 <Ifx_Shell_init+0xa8>
    {
        shell->commandList[i] = config->commandList[i];
    }

    /* Initialize command history pointers */
    CmdHistory = shell->cmdHistory;
80006da6:	80 c2       	mov.d %d2,%a12
80006da8:	1b 82 00 50 	addi %d5,%d2,8

    for (i = 1; i < IFX_CFG_SHELL_CMD_HISTORY_SIZE; i++)
80006dac:	82 12       	mov %d2,1
80006dae:	1d 00 22 00 	j 80006df2 <Ifx_Shell_init+0xe8>
        shell->commandList[i] = config->commandList[i];
80006db2:	1b 22 00 30 	addi %d3,%d2,2
80006db6:	06 23       	sh %d3,2
80006db8:	01 d3 00 26 	addsc.a %a2,%a13,%d3,0
80006dbc:	54 24       	ld.w %d4,[%a2]
80006dbe:	1b 22 05 30 	addi %d3,%d2,82
80006dc2:	06 23       	sh %d3,2
80006dc4:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80006dc8:	74 24       	st.w [%a2],%d4
    for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
80006dca:	c2 12       	add %d2,1
80006dcc:	1d ff eb ff 	j 80006da2 <Ifx_Shell_init+0x98>
    {
        CmdHistory[i] = &CmdHistory[i - 1][IFX_CFG_SHELL_CMD_LINE_SIZE];    /* Items are just offsets into a large allocated area */
80006dd0:	82 f3       	mov %d3,-1
80006dd2:	06 e3       	sh %d3,-2
80006dd4:	42 23       	add %d3,%d2
80006dd6:	06 23       	sh %d3,2
80006dd8:	60 52       	mov.a %a2,%d5
80006dda:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80006dde:	54 24       	ld.w %d4,[%a2]
80006de0:	8f 22 00 30 	sh %d3,%d2,2
80006de4:	60 52       	mov.a %a2,%d5
80006de6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80006dea:	1b 04 08 30 	addi %d3,%d4,128
80006dee:	74 23       	st.w [%a2],%d3
    for (i = 1; i < IFX_CFG_SHELL_CMD_HISTORY_SIZE; i++)
80006df0:	c2 12       	add %d2,1
80006df2:	8b a2 40 32 	lt %d3,%d2,10
80006df6:	df 03 ed ff 	jne %d3,0,80006dd0 <Ifx_Shell_init+0xc6>
    }

    shell->cmd.historyItem = IFX_SHELL_CMD_HISTORY_NO_ITEM;
80006dfa:	82 f2       	mov %d2,-1
80006dfc:	f9 c2 3a 00 	st.h [%a12]58,%d2

    /* Pre-load useful commands into history buffer */
    strcpy(CmdHistory[0], "help");
80006e00:	99 c3 08 00 	ld.a %a3,[%a12]8
80006e04:	91 00 00 28 	movh.a %a2,32768
80006e08:	d9 22 42 c0 	lea %a2,[%a2]1794 <80000702 <IfxCpu_Trap_vectorTable0_end+0x50e>>
80006e0c:	04 22       	ld.bu %d2,[%a2+]
80006e0e:	24 32       	st.b [%a3+],%d2
80006e10:	04 22       	ld.bu %d2,[%a2+]
80006e12:	24 32       	st.b [%a3+],%d2
80006e14:	04 22       	ld.bu %d2,[%a2+]
80006e16:	24 32       	st.b [%a3+],%d2
80006e18:	04 22       	ld.bu %d2,[%a2+]
80006e1a:	24 32       	st.b [%a3+],%d2
80006e1c:	04 22       	ld.bu %d2,[%a2+]
80006e1e:	24 32       	st.b [%a3+],%d2
    //strcpy(CmdHistory[1], "protocol start");

    if (shell->control.showPrompt != 0)
80006e20:	39 c2 04 00 	ld.bu %d2,[%a12]4 <80000702 <IfxCpu_Trap_vectorTable0_end+0x50e>>
80006e24:	6f 02 04 80 	jnz.t %d2,0,80006e2c <Ifx_Shell_init+0x122>
        IfxStdIf_DPipe_print(shell->io, ENDL);
        IfxStdIf_DPipe_print(shell->io, IFX_CFG_SHELL_PROMPT);
    }

    return TRUE;
}
80006e28:	82 12       	mov %d2,1
80006e2a:	00 90       	ret 
        IfxStdIf_DPipe_print(shell->io, ENDL);
80006e2c:	91 00 00 58 	movh.a %a5,32768
80006e30:	d9 55 47 c0 	lea %a5,[%a5]1799 <80000707 <IfxCpu_Trap_vectorTable0_end+0x513>>
80006e34:	d4 c4       	ld.a %a4,[%a12]
80006e36:	6d 00 ea 02 	call 8000740a <IfxStdIf_DPipe_print>
        IfxStdIf_DPipe_print(shell->io, IFX_CFG_SHELL_PROMPT);
80006e3a:	91 00 00 58 	movh.a %a5,32768
80006e3e:	d9 55 4a c0 	lea %a5,[%a5]1802 <8000070a <IfxCpu_Trap_vectorTable0_end+0x516>>
80006e42:	d4 c4       	ld.a %a4,[%a12]
80006e44:	6d 00 e3 02 	call 8000740a <IfxStdIf_DPipe_print>
80006e48:	1d ff f0 ff 	j 80006e28 <Ifx_Shell_init+0x11e>

80006e4c <Ifx_Shell_skipWhitespace>:
    // tbd free necessary memory
}


pchar Ifx_Shell_skipWhitespace(pchar args)
{
80006e4c:	40 ae       	mov.aa %a14,%sp
80006e4e:	40 42       	mov.aa %a2,%a4
    if (args != NULL_PTR)
80006e50:	bd 04 04 80 	jnz.a %a4,80006e58 <Ifx_Shell_skipWhitespace+0xc>
80006e54:	00 90       	ret 
    {
        while ((*args != IFX_SHELL_NULL_CHAR) && (ISSPACE(*args)))
        {
            args = &args[1];
80006e56:	b0 12       	add.a %a2,1
        while ((*args != IFX_SHELL_NULL_CHAR) && (ISSPACE(*args)))
80006e58:	79 22 00 00 	ld.b %d2,[%a2]0
80006e5c:	df 02 08 00 	jeq %d2,0,80006e6c <Ifx_Shell_skipWhitespace+0x20>
80006e60:	8b 02 02 32 	eq %d3,%d2,32
80006e64:	8b 92 e0 34 	or.eq %d3,%d2,9
80006e68:	df 03 f7 ff 	jne %d3,0,80006e56 <Ifx_Shell_skipWhitespace+0xa>
        }
    }

    return args;
}
80006e6c:	00 90       	ret 

80006e6e <Ifx_Shell_parseToken>:
    return result;
}


boolean Ifx_Shell_parseToken(pchar *argsPtr, char *tokenBuffer, int bufferLength)
{
80006e6e:	40 ae       	mov.aa %a14,%sp
80006e70:	40 4d       	mov.aa %a13,%a4
80006e72:	40 5c       	mov.aa %a12,%a5
80006e74:	02 48       	mov %d8,%d4
    int   mindex = 0;
    pchar args   = Ifx_Shell_skipWhitespace(*argsPtr);
80006e76:	d4 44       	ld.a %a4,[%a4]
80006e78:	6d ff ea ff 	call 80006e4c <Ifx_Shell_skipWhitespace>
80006e7c:	40 24       	mov.aa %a4,%a2

    tokenBuffer[0] = IFX_SHELL_NULL_CHAR;
80006e7e:	82 02       	mov %d2,0
80006e80:	34 c2       	st.b [%a12],%d2

    if (args == NULL_PTR)
80006e82:	bd 02 4b 00 	jz.a %a2,80006f18 <Ifx_Shell_parseToken+0xaa>
    {
        return FALSE;
    }

    if (*args == '\"')
80006e86:	79 22 00 00 	ld.b %d2,[%a2]0
80006e8a:	3b 20 02 30 	mov %d3,34
80006e8e:	5f 32 07 00 	jeq %d2,%d3,80006e9c <Ifx_Shell_parseToken+0x2e>
        args = &args[1];
    }
    else
    {
        // don't allow unquoted empty tokens
        if (*args == IFX_SHELL_NULL_CHAR)
80006e92:	df 02 47 00 	jeq %d2,0,80006f20 <Ifx_Shell_parseToken+0xb2>
    int   mindex = 0;
80006e96:	82 03       	mov %d3,0
80006e98:	1d 00 2d 00 	j 80006ef2 <Ifx_Shell_parseToken+0x84>
        args = &args[1];
80006e9c:	b0 14       	add.a %a4,1
    int   mindex = 0;
80006e9e:	82 03       	mov %d3,0
        while ((*args != IFX_SHELL_NULL_CHAR) && (*args != '\"'))
80006ea0:	1d 00 03 00 	j 80006ea6 <Ifx_Shell_parseToken+0x38>
            args = &args[1];
80006ea4:	b0 14       	add.a %a4,1
        while ((*args != IFX_SHELL_NULL_CHAR) && (*args != '\"'))
80006ea6:	79 42 00 00 	ld.b %d2,[%a4]0
80006eaa:	8b 02 20 52 	ne %d5,%d2,0
80006eae:	8b 22 22 42 	ne %d4,%d2,34
80006eb2:	26 54       	and %d4,%d5
80006eb4:	df 04 0a 00 	jeq %d4,0,80006ec8 <Ifx_Shell_parseToken+0x5a>
            if (mindex < bufferLength)
80006eb8:	7f 83 f6 7f 	jge %d3,%d8,80006ea4 <Ifx_Shell_parseToken+0x36>
                tokenBuffer[mindex] = *args;
80006ebc:	01 c3 00 36 	addsc.a %a3,%a12,%d3,0
80006ec0:	34 32       	st.b [%a3],%d2
                mindex++;
80006ec2:	c2 13       	add %d3,1
80006ec4:	1d ff f0 ff 	j 80006ea4 <Ifx_Shell_parseToken+0x36>
        if (*args != '\"')
80006ec8:	3b 20 02 40 	mov %d4,34
80006ecc:	5f 42 28 80 	jne %d2,%d4,80006f1c <Ifx_Shell_parseToken+0xae>
        args = &args[1];
80006ed0:	b0 14       	add.a %a4,1
            args = &args[1];
        }
    }

    // make sure string is zero terminated
    if (bufferLength > 0)
80006ed2:	bf 18 0a 00 	jlt %d8,1,80006ee6 <Ifx_Shell_parseToken+0x78>
    {
        tokenBuffer[__min(mindex, bufferLength - 1)] = IFX_SHELL_NULL_CHAR;
80006ed6:	1b f8 ff 2f 	addi %d2,%d8,-1
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80006eda:	0b 23 80 21 	min %d2,%d3,%d2
80006ede:	01 c2 00 c6 	addsc.a %a12,%a12,%d2,0
80006ee2:	82 02       	mov %d2,0
80006ee4:	34 c2       	st.b [%a12],%d2
    }

    *argsPtr = Ifx_Shell_skipWhitespace(args);
80006ee6:	6d ff b3 ff 	call 80006e4c <Ifx_Shell_skipWhitespace>
80006eea:	f4 d2       	st.a [%a13],%a2

    return TRUE;
80006eec:	82 12       	mov %d2,1
80006eee:	00 90       	ret 
            args = &args[1];
80006ef0:	b0 14       	add.a %a4,1
        while ((*args != IFX_SHELL_NULL_CHAR) && (!ISSPACE(*args)))
80006ef2:	79 42 00 00 	ld.b %d2,[%a4]0
80006ef6:	df 02 ee 7f 	jeq %d2,0,80006ed2 <Ifx_Shell_parseToken+0x64>
80006efa:	8b 02 22 52 	ne %d5,%d2,32
80006efe:	8b 92 20 42 	ne %d4,%d2,9
80006f02:	26 54       	and %d4,%d5
80006f04:	df 04 e7 7f 	jeq %d4,0,80006ed2 <Ifx_Shell_parseToken+0x64>
            if (mindex < bufferLength)
80006f08:	7f 83 f4 7f 	jge %d3,%d8,80006ef0 <Ifx_Shell_parseToken+0x82>
                tokenBuffer[mindex] = *args;
80006f0c:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80006f10:	34 22       	st.b [%a2],%d2
                mindex++;
80006f12:	c2 13       	add %d3,1
80006f14:	1d ff ee ff 	j 80006ef0 <Ifx_Shell_parseToken+0x82>
        return FALSE;
80006f18:	82 02       	mov %d2,0
80006f1a:	00 90       	ret 
            return FALSE;
80006f1c:	82 02       	mov %d2,0
80006f1e:	00 90       	ret 
            return FALSE;
80006f20:	82 02       	mov %d2,0
}
80006f22:	00 90       	ret 

80006f24 <Ifx_Shell_matchCommand>:
{
80006f24:	40 ae       	mov.aa %a14,%sp
80006f26:	d9 aa c0 8f 	lea %sp,[%sp]-512
80006f2a:	40 4d       	mov.aa %a13,%a4
80006f2c:	40 5c       	mov.aa %a12,%a5
    pchar   savedArguments = *argsPtr;
80006f2e:	54 49       	ld.w %d9,[%a4]
    pchar   savedMatch     = *match;
80006f30:	54 58       	ld.w %d8,[%a5]
    if ((Ifx_Shell_parseToken(argsPtr, buffer0, Ifx_COUNTOF(buffer0)) != FALSE)
80006f32:	3b 00 10 40 	mov %d4,256
80006f36:	d9 e5 c0 cf 	lea %a5,[%a14]-256
80006f3a:	6d ff 9a ff 	call 80006e6e <Ifx_Shell_parseToken>
80006f3e:	df 02 06 80 	jne %d2,0,80006f4a <Ifx_Shell_matchCommand+0x26>
        *argsPtr = savedArguments;
80006f42:	74 d9       	st.w [%a13],%d9
        *match   = savedMatch;
80006f44:	74 c8       	st.w [%a12],%d8
80006f46:	82 02       	mov %d2,0
80006f48:	00 90       	ret 
        && (Ifx_Shell_parseToken(match, buffer1, Ifx_COUNTOF(buffer1)) != FALSE))
80006f4a:	3b 00 10 40 	mov %d4,256
80006f4e:	d9 e5 c0 8f 	lea %a5,[%a14]-512
80006f52:	40 c4       	mov.aa %a4,%a12
80006f54:	6d ff 8d ff 	call 80006e6e <Ifx_Shell_parseToken>
80006f58:	df 02 f5 7f 	jeq %d2,0,80006f42 <Ifx_Shell_matchCommand+0x1e>
        if (strcmp(buffer1, buffer0) == 0)
80006f5c:	d9 e2 c0 8f 	lea %a2,[%a14]-512
80006f60:	d9 e3 c0 cf 	lea %a3,[%a14]-256
80006f64:	80 22       	mov.d %d2,%a2
80006f66:	8f 32 00 21 	and %d2,%d2,3
80006f6a:	80 33       	mov.d %d3,%a3
80006f6c:	8f 33 00 31 	and %d3,%d3,3
80006f70:	a6 32       	or %d2,%d3
80006f72:	df 02 9d 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
80006f76:	09 24 48 01 	ld.d %e4,[%a2+]8
80006f7a:	09 36 48 01 	ld.d %e6,[%a3+]8
80006f7e:	8b 04 c0 2a 	eqany.b %d2,%d4,0
80006f82:	df 02 4c 80 	jne %d2,0,8000701a <Ifx_Shell_matchCommand+0xf6>
80006f86:	0b 64 80 20 	sub %d2,%d4,%d6
80006f8a:	df 02 48 80 	jne %d2,0,8000701a <Ifx_Shell_matchCommand+0xf6>
80006f8e:	8b 05 c0 2a 	eqany.b %d2,%d5,0
80006f92:	df 02 68 80 	jne %d2,0,80007062 <Ifx_Shell_matchCommand+0x13e>
80006f96:	0b 75 80 20 	sub %d2,%d5,%d7
80006f9a:	df 02 64 80 	jne %d2,0,80007062 <Ifx_Shell_matchCommand+0x13e>
80006f9e:	09 24 48 01 	ld.d %e4,[%a2+]8
80006fa2:	09 36 48 01 	ld.d %e6,[%a3+]8
80006fa6:	8b 04 c0 2a 	eqany.b %d2,%d4,0
80006faa:	df 02 38 80 	jne %d2,0,8000701a <Ifx_Shell_matchCommand+0xf6>
80006fae:	0b 64 80 20 	sub %d2,%d4,%d6
80006fb2:	df 02 34 80 	jne %d2,0,8000701a <Ifx_Shell_matchCommand+0xf6>
80006fb6:	8b 05 c0 2a 	eqany.b %d2,%d5,0
80006fba:	df 02 54 80 	jne %d2,0,80007062 <Ifx_Shell_matchCommand+0x13e>
80006fbe:	0b 75 80 20 	sub %d2,%d5,%d7
80006fc2:	df 02 50 80 	jne %d2,0,80007062 <Ifx_Shell_matchCommand+0x13e>
80006fc6:	09 24 48 01 	ld.d %e4,[%a2+]8
80006fca:	09 36 48 01 	ld.d %e6,[%a3+]8
80006fce:	8b 04 c0 2a 	eqany.b %d2,%d4,0
80006fd2:	df 02 24 80 	jne %d2,0,8000701a <Ifx_Shell_matchCommand+0xf6>
80006fd6:	0b 64 80 20 	sub %d2,%d4,%d6
80006fda:	df 02 20 80 	jne %d2,0,8000701a <Ifx_Shell_matchCommand+0xf6>
80006fde:	8b 05 c0 2a 	eqany.b %d2,%d5,0
80006fe2:	df 02 40 80 	jne %d2,0,80007062 <Ifx_Shell_matchCommand+0x13e>
80006fe6:	0b 75 80 20 	sub %d2,%d5,%d7
80006fea:	df 02 3c 80 	jne %d2,0,80007062 <Ifx_Shell_matchCommand+0x13e>
80006fee:	09 24 48 01 	ld.d %e4,[%a2+]8
80006ff2:	09 36 48 01 	ld.d %e6,[%a3+]8
80006ff6:	8b 04 c0 2a 	eqany.b %d2,%d4,0
80006ffa:	df 02 10 80 	jne %d2,0,8000701a <Ifx_Shell_matchCommand+0xf6>
80006ffe:	0b 64 80 20 	sub %d2,%d4,%d6
80007002:	df 02 0c 80 	jne %d2,0,8000701a <Ifx_Shell_matchCommand+0xf6>
80007006:	8b 05 c0 2a 	eqany.b %d2,%d5,0
8000700a:	df 02 2c 80 	jne %d2,0,80007062 <Ifx_Shell_matchCommand+0x13e>
8000700e:	0b 75 80 20 	sub %d2,%d5,%d7
80007012:	df 02 28 80 	jne %d2,0,80007062 <Ifx_Shell_matchCommand+0x13e>
80007016:	1d ff b0 ff 	j 80006f76 <Ifx_Shell_matchCommand+0x52>
8000701a:	37 04 48 20 	extr %d2,%d4,0,8
8000701e:	37 06 48 30 	extr %d3,%d6,0,8
80007022:	df 02 44 00 	jeq %d2,0,800070aa <Ifx_Shell_matchCommand+0x186>
80007026:	a2 32       	sub %d2,%d3
80007028:	df 02 42 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
8000702c:	37 04 48 24 	extr %d2,%d4,8,8
80007030:	37 06 48 34 	extr %d3,%d6,8,8
80007034:	df 02 3b 00 	jeq %d2,0,800070aa <Ifx_Shell_matchCommand+0x186>
80007038:	a2 32       	sub %d2,%d3
8000703a:	df 02 39 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
8000703e:	37 04 48 28 	extr %d2,%d4,16,8
80007042:	37 06 48 38 	extr %d3,%d6,16,8
80007046:	df 02 32 00 	jeq %d2,0,800070aa <Ifx_Shell_matchCommand+0x186>
8000704a:	a2 32       	sub %d2,%d3
8000704c:	df 02 30 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
80007050:	8f 84 3e 20 	sha %d2,%d4,-24
80007054:	8f 86 3e 30 	sha %d3,%d6,-24
80007058:	df 02 29 00 	jeq %d2,0,800070aa <Ifx_Shell_matchCommand+0x186>
8000705c:	a2 32       	sub %d2,%d3
8000705e:	df 02 27 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
80007062:	37 05 48 20 	extr %d2,%d5,0,8
80007066:	37 07 48 30 	extr %d3,%d7,0,8
8000706a:	df 02 20 00 	jeq %d2,0,800070aa <Ifx_Shell_matchCommand+0x186>
8000706e:	a2 32       	sub %d2,%d3
80007070:	df 02 1e 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
80007074:	37 05 48 24 	extr %d2,%d5,8,8
80007078:	37 07 48 34 	extr %d3,%d7,8,8
8000707c:	df 02 17 00 	jeq %d2,0,800070aa <Ifx_Shell_matchCommand+0x186>
80007080:	a2 32       	sub %d2,%d3
80007082:	df 02 15 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
80007086:	37 05 48 28 	extr %d2,%d5,16,8
8000708a:	37 07 48 38 	extr %d3,%d7,16,8
8000708e:	df 02 0e 00 	jeq %d2,0,800070aa <Ifx_Shell_matchCommand+0x186>
80007092:	a2 32       	sub %d2,%d3
80007094:	df 02 0c 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
80007098:	8f 85 3e 20 	sha %d2,%d5,-24
8000709c:	8f 87 3e 30 	sha %d3,%d7,-24
800070a0:	df 02 05 00 	jeq %d2,0,800070aa <Ifx_Shell_matchCommand+0x186>
800070a4:	a2 32       	sub %d2,%d3
800070a6:	df 02 03 80 	jne %d2,0,800070ac <Ifx_Shell_matchCommand+0x188>
800070aa:	a2 32       	sub %d2,%d3
800070ac:	df 02 4b ff 	jne %d2,0,80006f42 <Ifx_Shell_matchCommand+0x1e>
            result = TRUE;
800070b0:	82 12       	mov %d2,1
}
800070b2:	00 90       	ret 

800070b4 <Ifx_Shell_showHelpSingle>:
{
800070b4:	40 ae       	mov.aa %a14,%sp
800070b6:	20 18       	sub.a %sp,24
800070b8:	40 4f       	mov.aa %a15,%a4
800070ba:	40 5c       	mov.aa %a12,%a5
800070bc:	8f f4 0f 91 	and %d9,%d4,255
800070c0:	8f f5 0f d1 	and %d13,%d5,255
    pchar                    space            = "";
800070c4:	91 00 00 28 	movh.a %a2,32768
800070c8:	80 22       	mov.d %d2,%a2
800070ca:	1b e2 72 a0 	addi %d10,%d2,1838
    uint32                   index            = 0;
800070ce:	82 0e       	mov %d14,0
    while (command->commandLine != NULL_PTR)
800070d0:	1d 00 90 00 	j 800071f0 <Ifx_Shell_showHelpSingle+0x13c>
            else if (Ifx_Shell_matchCommand(&help, &matchs))
800070d4:	d9 e5 fc ff 	lea %a5,[%a14]-4
800070d8:	d9 e4 f4 ff 	lea %a4,[%a14]-12
800070dc:	6d ff 24 ff 	call 80006f24 <Ifx_Shell_matchCommand>
800070e0:	df 02 0c 80 	jne %d2,0,800070f8 <Ifx_Shell_showHelpSingle+0x44>
                if (isParam)
800070e4:	df 0b 12 80 	jne %d11,0,80007108 <Ifx_Shell_showHelpSingle+0x54>
                else if (isSyntax)
800070e8:	df 0c 16 80 	jne %d12,0,80007114 <Ifx_Shell_showHelpSingle+0x60>
                 spaceParam = "";
800070ec:	91 00 00 d8 	movh.a %a13,32768
800070f0:	d9 dd 6e c0 	lea %a13,[%a13]1838 <8000072e <IfxCpu_Trap_vectorTable0_end+0x53a>>
800070f4:	1d 00 60 00 	j 800071b4 <Ifx_Shell_showHelpSingle+0x100>
                isParam    = FALSE;
800070f8:	02 8b       	mov %d11,%d8
                isSyntax   = TRUE,
800070fa:	82 1c       	mov %d12,1
                spaceParam = "    SYNTAX: ";
800070fc:	91 00 00 d8 	movh.a %a13,32768
80007100:	d9 dd 58 c0 	lea %a13,[%a13]1816 <80000718 <IfxCpu_Trap_vectorTable0_end+0x524>>
80007104:	1d 00 58 00 	j 800071b4 <Ifx_Shell_showHelpSingle+0x100>
                    spaceParam = "        ";
80007108:	91 00 00 d8 	movh.a %a13,32768
8000710c:	d9 dd 65 c0 	lea %a13,[%a13]1829 <80000725 <IfxCpu_Trap_vectorTable0_end+0x531>>
80007110:	1d 00 52 00 	j 800071b4 <Ifx_Shell_showHelpSingle+0x100>
                    spaceParam = "            ";
80007114:	91 00 00 d8 	movh.a %a13,32768
80007118:	d9 dd 6f c0 	lea %a13,[%a13]1839 <8000072f <IfxCpu_Trap_vectorTable0_end+0x53b>>
8000711c:	1d 00 4c 00 	j 800071b4 <Ifx_Shell_showHelpSingle+0x100>
                chunk = help + strlen(help);
80007120:	60 84       	mov.a %a4,%d8
80007122:	6d 00 f6 0e 	call 80008f0e <strlen>
80007126:	60 82       	mov.a %a2,%d8
80007128:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
            count = chunk - help;
8000712c:	80 22       	mov.d %d2,%a2
8000712e:	a2 82       	sub %d2,%d8
80007130:	f9 e2 f2 ff 	st.h [%a14]-14,%d2
            IfxStdIf_DPipe_print(io, "%s%s", space, spaceParam);
80007134:	b5 ad 04 00 	st.a [%sp]4,%a13
80007138:	74 aa       	st.w [%sp],%d10
8000713a:	91 00 00 58 	movh.a %a5,32768
8000713e:	d9 55 7f c0 	lea %a5,[%a5]1855 <8000073f <IfxCpu_Trap_vectorTable0_end+0x54b>>
80007142:	40 c4       	mov.aa %a4,%a12
80007144:	6d 00 63 01 	call 8000740a <IfxStdIf_DPipe_print>
80007148:	99 c2 08 00 	ld.a %a2,[%a12]8
8000714c:	82 f4       	mov %d4,-1
8000714e:	82 f5       	mov %d5,-1
80007150:	06 f5       	sh %d5,-1
80007152:	d9 e6 f2 ff 	lea %a6,[%a14]-14
80007156:	99 e5 f4 ff 	ld.a %a5,[%a14]-12
8000715a:	d4 c4       	ld.a %a4,[%a12]
8000715c:	2d 02 00 00 	calli %a2
            help += count;
80007160:	c9 e2 f2 ff 	ld.h %d2,[%a14]-14
80007164:	19 e3 f4 ff 	ld.w %d3,[%a14]-12
80007168:	42 32       	add %d2,%d3
8000716a:	59 e2 f4 ff 	st.w [%a14]-12,%d2
            if (briefOnly)
8000716e:	df 09 33 80 	jne %d9,0,800071d4 <Ifx_Shell_showHelpSingle+0x120>
        while (*help != IFX_SHELL_NULL_CHAR)
80007172:	99 e2 f4 ff 	ld.a %a2,[%a14]-12
80007176:	79 22 00 00 	ld.b %d2,[%a2]0
8000717a:	df 02 2d 00 	jeq %d2,0,800071d4 <Ifx_Shell_showHelpSingle+0x120>
            pchar     matchp     = "/p";
8000717e:	91 00 00 28 	movh.a %a2,32768
80007182:	d9 22 44 d0 	lea %a2,[%a2]1860 <80000744 <IfxCpu_Trap_vectorTable0_end+0x550>>
80007186:	b5 e2 f8 ff 	st.a [%a14]-8 <80000744 <IfxCpu_Trap_vectorTable0_end+0x550>>,%a2
            pchar     matchs     = "/s";
8000718a:	91 00 00 28 	movh.a %a2,32768
8000718e:	d9 22 47 d0 	lea %a2,[%a2]1863 <80000747 <IfxCpu_Trap_vectorTable0_end+0x553>>
80007192:	b5 e2 fc ff 	st.a [%a14]-4 <80000747 <IfxCpu_Trap_vectorTable0_end+0x553>>,%a2
            if (Ifx_Shell_matchCommand(&help, &matchp))
80007196:	d9 e5 f8 ff 	lea %a5,[%a14]-8 <80000747 <IfxCpu_Trap_vectorTable0_end+0x553>>
8000719a:	d9 e4 f4 ff 	lea %a4,[%a14]-12 <80000747 <IfxCpu_Trap_vectorTable0_end+0x553>>
8000719e:	6d ff c3 fe 	call 80006f24 <Ifx_Shell_matchCommand>
800071a2:	02 28       	mov %d8,%d2
800071a4:	df 02 98 7f 	jeq %d2,0,800070d4 <Ifx_Shell_showHelpSingle+0x20>
                isSyntax   = FALSE,
800071a8:	82 0c       	mov %d12,0
                isParam    = TRUE;
800071aa:	82 1b       	mov %d11,1
                spaceParam = "      ";
800071ac:	91 00 00 d8 	movh.a %a13,32768
800071b0:	d9 dd 51 c0 	lea %a13,[%a13]1809 <80000711 <IfxCpu_Trap_vectorTable0_end+0x51d>>
            chunk = strstr(help, ENDL);
800071b4:	19 e8 f4 ff 	ld.w %d8,[%a14]-12 <80000711 <IfxCpu_Trap_vectorTable0_end+0x51d>>
800071b8:	91 00 00 58 	movh.a %a5,32768
800071bc:	d9 55 47 c0 	lea %a5,[%a5]1799 <80000707 <IfxCpu_Trap_vectorTable0_end+0x513>>
800071c0:	60 84       	mov.a %a4,%d8
800071c2:	6d 00 a2 10 	call 80009306 <strstr>
            if (chunk == NULL_PTR)
800071c6:	bd 02 ad 7f 	jz.a %a2,80007120 <Ifx_Shell_showHelpSingle+0x6c>
                if (!briefOnly)
800071ca:	df 09 b1 ff 	jne %d9,0,8000712c <Ifx_Shell_showHelpSingle+0x78>
                    chunk += strlen(ENDL);
800071ce:	b0 22       	add.a %a2,2
800071d0:	1d ff ae ff 	j 8000712c <Ifx_Shell_showHelpSingle+0x78>
        IfxStdIf_DPipe_print(io, ENDL);
800071d4:	91 00 00 58 	movh.a %a5,32768
800071d8:	d9 55 47 c0 	lea %a5,[%a5]1799 <80000707 <IfxCpu_Trap_vectorTable0_end+0x513>>
800071dc:	40 c4       	mov.aa %a4,%a12
800071de:	6d 00 16 01 	call 8000740a <IfxStdIf_DPipe_print>
        if ((command->call == NULL_PTR) && (index == 0))
800071e2:	48 32       	ld.w %d2,[%a15]12
800071e4:	df 02 1b 00 	jeq %d2,0,8000721a <Ifx_Shell_showHelpSingle+0x166>
        command = &command[1];
800071e8:	d9 ff 10 00 	lea %a15,[%a15]16
        if (singleCommand)
800071ec:	df 0d 21 80 	jne %d13,0,8000722e <Ifx_Shell_showHelpSingle+0x17a>
    while (command->commandLine != NULL_PTR)
800071f0:	48 02       	ld.w %d2,[%a15]0
800071f2:	df 02 1e 00 	jeq %d2,0,8000722e <Ifx_Shell_showHelpSingle+0x17a>
        pchar   help     = command->help;
800071f6:	48 12       	ld.w %d2,[%a15]4
800071f8:	59 e2 f4 ff 	st.w [%a14]-12,%d2
        IfxStdIf_DPipe_print(io, "%s%s", space, command->commandLine);
800071fc:	48 02       	ld.w %d2,[%a15]0
800071fe:	59 a2 04 00 	st.w [%sp]4,%d2
80007202:	74 aa       	st.w [%sp],%d10
80007204:	91 00 00 58 	movh.a %a5,32768
80007208:	d9 55 7f c0 	lea %a5,[%a5]1855 <8000073f <IfxCpu_Trap_vectorTable0_end+0x54b>>
8000720c:	40 c4       	mov.aa %a4,%a12
8000720e:	6d 00 fe 00 	call 8000740a <IfxStdIf_DPipe_print>
        boolean isSyntax = FALSE;
80007212:	82 0c       	mov %d12,0
        boolean isParam  = FALSE;
80007214:	82 0b       	mov %d11,0
        while (*help != IFX_SHELL_NULL_CHAR)
80007216:	1d ff ae ff 	j 80007172 <Ifx_Shell_showHelpSingle+0xbe>
        if ((command->call == NULL_PTR) && (index == 0))
8000721a:	df 0e e7 ff 	jne %d14,0,800071e8 <Ifx_Shell_showHelpSingle+0x134>
            space = "  ";
8000721e:	91 00 00 28 	movh.a %a2,32768
80007222:	80 22       	mov.d %d2,%a2
80007224:	1b c2 73 a0 	addi %d10,%d2,1852
            index = 1;
80007228:	82 1e       	mov %d14,1
8000722a:	1d ff df ff 	j 800071e8 <Ifx_Shell_showHelpSingle+0x134>
}
8000722e:	82 12       	mov %d2,1
80007230:	00 90       	ret 

80007232 <Ifx_Shell_commandFind>:
    return result;
}


const Ifx_Shell_Command *Ifx_Shell_commandFind(Ifx_Shell_CommandListConst commandList, pchar commandLine, pchar *args, uint32 *match)
{
80007232:	40 ae       	mov.aa %a14,%sp
80007234:	d9 aa f8 bf 	lea %sp,[%sp]-264
80007238:	40 4c       	mov.aa %a12,%a4
8000723a:	80 5b       	mov.d %d11,%a5
8000723c:	40 6f       	mov.aa %a15,%a6
8000723e:	40 7d       	mov.aa %a13,%a7
    uint32                   matchInit   = 0;
    uint32                   index       = 0;

    boolean                  hasPrefix;

    hasPrefix = (command->commandLine != NULL_PTR) && (command->call == NULL_PTR);
80007240:	54 42       	ld.w %d2,[%a4]
80007242:	df 02 10 00 	jeq %d2,0,80007262 <Ifx_Shell_commandFind+0x30>
80007246:	19 42 0c 00 	ld.w %d2,[%a4]12
8000724a:	df 02 0f 00 	jeq %d2,0,80007268 <Ifx_Shell_commandFind+0x36>
8000724e:	82 0a       	mov %d10,0
80007250:	8f fa 0f a1 	and %d10,%d10,255
    *match    = 0;
80007254:	82 02       	mov %d2,0
80007256:	74 d2       	st.w [%a13],%d2
    uint32                   index       = 0;
80007258:	82 09       	mov %d9,0
    uint32                   matchInit   = 0;
8000725a:	82 0d       	mov %d13,0
    const Ifx_Shell_Command *result      = NULL_PTR;
8000725c:	82 0c       	mov %d12,0

    while (command->commandLine != NULL_PTR)
8000725e:	1d 00 1e 00 	j 8000729a <Ifx_Shell_commandFind+0x68>
    hasPrefix = (command->commandLine != NULL_PTR) && (command->call == NULL_PTR);
80007262:	82 0a       	mov %d10,0
80007264:	1d ff f6 ff 	j 80007250 <Ifx_Shell_commandFind+0x1e>
80007268:	82 1a       	mov %d10,1
8000726a:	1d ff f3 ff 	j 80007250 <Ifx_Shell_commandFind+0x1e>
        char   buffer[256];
        uint32 matchCount      = matchInit;

        while (Ifx_Shell_matchCommand(&commandLineTemp, &commandTemp) != FALSE)
        {
            matchCount++;
8000726e:	c2 18       	add %d8,1
        while (Ifx_Shell_matchCommand(&commandLineTemp, &commandTemp) != FALSE)
80007270:	d9 e5 f8 bf 	lea %a5,[%a14]-264
80007274:	d9 e4 fc bf 	lea %a4,[%a14]-260
80007278:	6d ff 56 fe 	call 80006f24 <Ifx_Shell_matchCommand>
8000727c:	df 02 f9 ff 	jne %d2,0,8000726e <Ifx_Shell_commandFind+0x3c>
        }

        if ((matchCount > *match) && (Ifx_Shell_parseToken(&commandTemp, buffer, Ifx_COUNTOF(buffer)) == FALSE))
80007280:	54 d2       	ld.w %d2,[%a13]
80007282:	3f 82 16 80 	jlt.u %d2,%d8,800072ae <Ifx_Shell_commandFind+0x7c>
            *args  = commandLineTemp;
            result = command;
        }
        else
        {
            if ((index == 0) && hasPrefix)
80007286:	8b 09 00 32 	eq %d3,%d9,0
8000728a:	8b 0a 20 22 	ne %d2,%d10,0
8000728e:	26 32       	and %d2,%d3
80007290:	df 02 2b 80 	jne %d2,0,800072e6 <Ifx_Shell_commandFind+0xb4>
                /* Prefix does not match */
                break;
            }
        }

        command = &command[1];
80007294:	d9 cc 10 00 	lea %a12,[%a12]16

        index++;
80007298:	c2 19       	add %d9,1
    while (command->commandLine != NULL_PTR)
8000729a:	54 c2       	ld.w %d2,[%a12]
8000729c:	df 02 25 00 	jeq %d2,0,800072e6 <Ifx_Shell_commandFind+0xb4>
        pchar  commandTemp     = command->commandLine;
800072a0:	59 e2 f8 bf 	st.w [%a14]-264,%d2
        pchar  commandLineTemp = cmdLineTemp;
800072a4:	59 eb fc bf 	st.w [%a14]-260,%d11
        uint32 matchCount      = matchInit;
800072a8:	02 d8       	mov %d8,%d13
        while (Ifx_Shell_matchCommand(&commandLineTemp, &commandTemp) != FALSE)
800072aa:	1d ff e3 ff 	j 80007270 <Ifx_Shell_commandFind+0x3e>
        if ((matchCount > *match) && (Ifx_Shell_parseToken(&commandTemp, buffer, Ifx_COUNTOF(buffer)) == FALSE))
800072ae:	3b 00 10 40 	mov %d4,256
800072b2:	d9 e5 c0 cf 	lea %a5,[%a14]-256
800072b6:	d9 e4 f8 bf 	lea %a4,[%a14]-264
800072ba:	6d ff da fd 	call 80006e6e <Ifx_Shell_parseToken>
800072be:	df 02 e4 ff 	jne %d2,0,80007286 <Ifx_Shell_commandFind+0x54>
            if ((index == 0) && (command->call == NULL_PTR))
800072c2:	df 09 06 80 	jne %d9,0,800072ce <Ifx_Shell_commandFind+0x9c>
800072c6:	19 c2 0c 00 	ld.w %d2,[%a12]12
800072ca:	df 02 09 00 	jeq %d2,0,800072dc <Ifx_Shell_commandFind+0xaa>
            *match = matchCount;
800072ce:	74 d8       	st.w [%a13],%d8
            *args  = commandLineTemp;
800072d0:	19 e2 fc bf 	ld.w %d2,[%a14]-260
800072d4:	68 02       	st.w [%a15]0,%d2
            result = command;
800072d6:	80 cc       	mov.d %d12,%a12
800072d8:	1d ff de ff 	j 80007294 <Ifx_Shell_commandFind+0x62>
                cmdLineTemp = commandLineTemp;
800072dc:	19 eb fc bf 	ld.w %d11,[%a14]-260
                matchInit   = matchCount;
800072e0:	02 8d       	mov %d13,%d8
800072e2:	1d ff f6 ff 	j 800072ce <Ifx_Shell_commandFind+0x9c>
    }

    return result;
}
800072e6:	60 c2       	mov.a %a2,%d12
800072e8:	00 90       	ret 

800072ea <Ifx_Shell_commandListFind>:


const Ifx_Shell_Command *Ifx_Shell_commandListFind(Ifx_Shell *shell, pchar commandLine, pchar *args, Ifx_Shell_CommandListConst *commandList)
{
800072ea:	40 ae       	mov.aa %a14,%sp
800072ec:	20 08       	sub.a %sp,8
800072ee:	80 4d       	mov.d %d13,%a4
800072f0:	80 5b       	mov.d %d11,%a5
800072f2:	80 6a       	mov.d %d10,%a6
800072f4:	40 7c       	mov.aa %a12,%a7
    int                      i;
    const Ifx_Shell_Command *shellCommand = NULL_PTR;
    const Ifx_Shell_Command *Command      = NULL_PTR;
    uint32                   matchMax     = 0;
800072f6:	82 0c       	mov %d12,0
    const Ifx_Shell_Command *Command      = NULL_PTR;
800072f8:	82 09       	mov %d9,0
    uint32                   match;

    for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
800072fa:	82 08       	mov %d8,0
800072fc:	bf 18 04 00 	jlt %d8,1,80007304 <Ifx_Shell_commandListFind+0x1a>
            }
        }
    }

    return Command;
}
80007300:	60 92       	mov.a %a2,%d9
80007302:	00 90       	ret 
        if (shell->commandList[i] != NULL_PTR)
80007304:	1b 28 05 20 	addi %d2,%d8,82
80007308:	06 22       	sh %d2,2
8000730a:	60 d2       	mov.a %a2,%d13
8000730c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80007310:	d4 24       	ld.a %a4,[%a2]
80007312:	bd 04 19 00 	jz.a %a4,80007344 <Ifx_Shell_commandListFind+0x5a>
            shellCommand = Ifx_Shell_commandFind(shell->commandList[i], commandLine, args, &match);
80007316:	d9 e7 fc ff 	lea %a7,[%a14]-4
8000731a:	60 a6       	mov.a %a6,%d10
8000731c:	60 b5       	mov.a %a5,%d11
8000731e:	6d ff 8a ff 	call 80007232 <Ifx_Shell_commandFind>
80007322:	80 22       	mov.d %d2,%a2
            if ((shellCommand != NULL_PTR) && (match > matchMax))
80007324:	df 02 10 00 	jeq %d2,0,80007344 <Ifx_Shell_commandListFind+0x5a>
80007328:	19 e3 fc ff 	ld.w %d3,[%a14]-4
8000732c:	7f 3c 0c 80 	jge.u %d12,%d3,80007344 <Ifx_Shell_commandListFind+0x5a>
                *commandList = shell->commandList[i];
80007330:	1b 28 05 40 	addi %d4,%d8,82
80007334:	06 24       	sh %d4,2
80007336:	60 d2       	mov.a %a2,%d13
80007338:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000733c:	54 24       	ld.w %d4,[%a2]
8000733e:	74 c4       	st.w [%a12],%d4
                matchMax     = match;
80007340:	02 3c       	mov %d12,%d3
                Command      = shellCommand;
80007342:	02 29       	mov %d9,%d2
    for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
80007344:	c2 18       	add %d8,1
80007346:	1d ff db ff 	j 800072fc <Ifx_Shell_commandListFind+0x12>

8000734a <Ifx_Shell_showHelpSingleCommand>:
{
8000734a:	40 ae       	mov.aa %a14,%sp
8000734c:	20 18       	sub.a %sp,24
8000734e:	b5 e4 f4 ff 	st.a [%a14]-12,%a4
80007352:	80 52       	mov.d %d2,%a5
80007354:	80 68       	mov.d %d8,%a6
    const Ifx_Shell_Command   *shellCommand = Ifx_Shell_commandListFind(shellPtr, args, &args, &commandList);
80007356:	d9 e7 fc ff 	lea %a7,[%a14]-4
8000735a:	d9 e6 f4 ff 	lea %a6,[%a14]-12
8000735e:	40 45       	mov.aa %a5,%a4
80007360:	60 24       	mov.a %a4,%d2
80007362:	6d ff c4 ff 	call 800072ea <Ifx_Shell_commandListFind>
80007366:	40 2c       	mov.aa %a12,%a2
    if (shellCommand != NULL_PTR)
80007368:	bd 02 28 00 	jz.a %a2,800073b8 <Ifx_Shell_showHelpSingleCommand+0x6e>
        if (shellCommand->call == NULL_PTR)
8000736c:	19 22 0c 00 	ld.w %d2,[%a2]12
80007370:	df 02 10 00 	jeq %d2,0,80007390 <Ifx_Shell_showHelpSingleCommand+0x46>
            if (commandList->call == NULL_PTR)
80007374:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80007378:	19 22 0c 00 	ld.w %d2,[%a2]12
8000737c:	df 02 13 00 	jeq %d2,0,800073a2 <Ifx_Shell_showHelpSingleCommand+0x58>
            Ifx_Shell_showHelpSingle(shellCommand, io, FALSE, TRUE);
80007380:	82 15       	mov %d5,1
80007382:	82 04       	mov %d4,0
80007384:	60 85       	mov.a %a5,%d8
80007386:	40 c4       	mov.aa %a4,%a12
80007388:	6d ff 96 fe 	call 800070b4 <Ifx_Shell_showHelpSingle>
        return TRUE;
8000738c:	82 12       	mov %d2,1
8000738e:	00 90       	ret 
            Ifx_Shell_showHelpSingle(commandList, io, FALSE, FALSE);
80007390:	82 05       	mov %d5,0
80007392:	82 04       	mov %d4,0
80007394:	60 85       	mov.a %a5,%d8
80007396:	99 e4 fc ff 	ld.a %a4,[%a14]-4
8000739a:	6d ff 8d fe 	call 800070b4 <Ifx_Shell_showHelpSingle>
8000739e:	1d ff f7 ff 	j 8000738c <Ifx_Shell_showHelpSingleCommand+0x42>
                IfxStdIf_DPipe_print(io, "%s ", commandList->commandLine);
800073a2:	54 22       	ld.w %d2,[%a2]
800073a4:	74 a2       	st.w [%sp],%d2
800073a6:	91 00 00 58 	movh.a %a5,32768
800073aa:	d9 55 78 e0 	lea %a5,[%a5]1976 <800007b8 <IfxCpu_Trap_vectorTable0_end+0x5c4>>
800073ae:	60 84       	mov.a %a4,%d8
800073b0:	6d 00 2d 00 	call 8000740a <IfxStdIf_DPipe_print>
800073b4:	1d ff e6 ff 	j 80007380 <Ifx_Shell_showHelpSingleCommand+0x36>
        IfxStdIf_DPipe_print(io, "unknown command");
800073b8:	91 00 00 58 	movh.a %a5,32768
800073bc:	d9 55 7c e0 	lea %a5,[%a5]1980 <800007bc <IfxCpu_Trap_vectorTable0_end+0x5c8>>
800073c0:	60 84       	mov.a %a4,%d8
800073c2:	6d 00 24 00 	call 8000740a <IfxStdIf_DPipe_print>
        return FALSE;
800073c6:	82 02       	mov %d2,0
}
800073c8:	00 90       	ret 

800073ca <Ifx_Shell_showHelp>:
{
800073ca:	40 ae       	mov.aa %a14,%sp
800073cc:	80 5a       	mov.d %d10,%a5
800073ce:	80 69       	mov.d %d9,%a6
    if (*args == IFX_SHELL_NULL_CHAR)
800073d0:	79 42 00 00 	ld.b %d2,[%a4]0
800073d4:	df 02 18 00 	jeq %d2,0,80007404 <Ifx_Shell_showHelp+0x3a>
        result = Ifx_Shell_showHelpSingleCommand(args, shellPtr, io);
800073d8:	6d ff b9 ff 	call 8000734a <Ifx_Shell_showHelpSingleCommand>
}
800073dc:	00 90       	ret 
            if (shell->commandList[i] != NULL_PTR)
800073de:	1b 28 05 20 	addi %d2,%d8,82
800073e2:	06 22       	sh %d2,2
800073e4:	60 a2       	mov.a %a2,%d10
800073e6:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800073ea:	d4 24       	ld.a %a4,[%a2]
800073ec:	bd 04 07 00 	jz.a %a4,800073fa <Ifx_Shell_showHelp+0x30>
                Ifx_Shell_showHelpSingle(shell->commandList[i], io, TRUE, FALSE);
800073f0:	82 05       	mov %d5,0
800073f2:	82 14       	mov %d4,1
800073f4:	60 95       	mov.a %a5,%d9
800073f6:	6d ff 5f fe 	call 800070b4 <Ifx_Shell_showHelpSingle>
        for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
800073fa:	c2 18       	add %d8,1
800073fc:	bf 18 f1 7f 	jlt %d8,1,800073de <Ifx_Shell_showHelp+0x14>
    boolean    result = TRUE;
80007400:	82 12       	mov %d2,1
80007402:	00 90       	ret 
        for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
80007404:	82 08       	mov %d8,0
80007406:	1d ff fb ff 	j 800073fc <Ifx_Shell_showHelp+0x32>

8000740a <IfxStdIf_DPipe_print>:
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

void IfxStdIf_DPipe_print(IfxStdIf_DPipe *stdIf, pchar format, ...)
{
8000740a:	40 ae       	mov.aa %a14,%sp
8000740c:	d9 aa f8 bf 	lea %sp,[%sp]-264
80007410:	40 4c       	mov.aa %a12,%a4
    if (!stdIf->txDisabled)
80007412:	39 42 04 00 	ld.bu %d2,[%a4]4
80007416:	df 02 03 00 	jeq %d2,0,8000741c <IfxStdIf_DPipe_print+0x12>
    }
    else
    {
        //return TRUE;
    }
}
8000741a:	00 90       	ret 
        vsprintf((char *)message, format, args);
8000741c:	40 e6       	mov.aa %a6,%a14
8000741e:	d9 e4 c0 cf 	lea %a4,[%a14]-256
80007422:	6d 00 59 0d 	call 80008ed4 <vsprintf>
        count = (Ifx_SizeT)strlen(message);
80007426:	d9 e4 c0 cf 	lea %a4,[%a14]-256
8000742a:	6d 00 72 0d 	call 80008f0e <strlen>
8000742e:	f9 e2 fe bf 	st.h [%a14]-258,%d2
 * \{ */
/** \copydoc IfxStdIf_DPipe_Write
 */
IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    return stdIf->write(stdIf->driver, data, count, timeout);
80007432:	99 c2 08 00 	ld.a %a2,[%a12]8
80007436:	82 f4       	mov %d4,-1
80007438:	82 f5       	mov %d5,-1
8000743a:	06 f5       	sh %d5,-1
8000743c:	d9 e6 fe bf 	lea %a6,[%a14]-258
80007440:	d9 e5 c0 cf 	lea %a5,[%a14]-256
80007444:	d4 c4       	ld.a %a4,[%a12]
80007446:	2d 02 00 00 	calli %a2
}
8000744a:	1d ff e8 ff 	j 8000741a <IfxStdIf_DPipe_print+0x10>

8000744e <Ifx_C_Init>:
 *
 * Parameters: Nil
 * Return: Nil
 */
void Ifx_C_Init(void)
{
8000744e:	40 ae       	mov.aa %a14,%sp
80007450:	20 08       	sub.a %sp,8
    IfxStart_CTablePtr pBlockDest, pBlockSrc;
    uint32             uiLength, uiCnt;
    uint32            *pTable;
    /* clear table */
    pTable = (uint32 *)&__clear_table;
80007452:	91 00 00 28 	movh.a %a2,32768
80007456:	d9 22 d4 f0 	lea %a2,[%a2]4052 <80000fd4 <__clear_table>>

    while (pTable)
8000745a:	1d 00 32 00 	j 800074be <Ifx_C_Init+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
8000745e:	91 00 00 28 	movh.a %a2,32768
80007462:	d9 22 3c 01 	lea %a2,[%a2]4156 <8000103c <__copy_table>>
80007466:	1d 00 7c 00 	j 8000755e <Ifx_C_Init+0x110>
            *pBlockDest.ullPtr++ = 0;
8000746a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000746e:	80 22       	mov.d %d2,%a2
80007470:	1b 82 00 20 	addi %d2,%d2,8
80007474:	59 e2 fc ff 	st.w [%a14]-4,%d2
80007478:	d2 02       	mov %e2,0
8000747a:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
8000747e:	02 52       	mov %d2,%d5
80007480:	1b f2 ff 5f 	addi %d5,%d2,-1
80007484:	df 02 f3 ff 	jne %d2,0,8000746a <Ifx_C_Init+0x1c>
        if (uiLength & 0x4)
80007488:	6f 24 0a 00 	jz.t %d4,2,8000749c <Ifx_C_Init+0x4e>
            *pBlockDest.uiPtr++ = 0;
8000748c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80007490:	80 22       	mov.d %d2,%a2
80007492:	c2 42       	add %d2,4
80007494:	59 e2 fc ff 	st.w [%a14]-4,%d2
80007498:	82 02       	mov %d2,0
8000749a:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
8000749c:	6f 14 0a 00 	jz.t %d4,1,800074b0 <Ifx_C_Init+0x62>
            *pBlockDest.usPtr++ = 0;
800074a0:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800074a4:	80 22       	mov.d %d2,%a2
800074a6:	c2 22       	add %d2,2
800074a8:	59 e2 fc ff 	st.w [%a14]-4,%d2
800074ac:	82 02       	mov %d2,0
800074ae:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
800074b0:	6f 04 06 00 	jz.t %d4,0,800074bc <Ifx_C_Init+0x6e>
            *pBlockDest.ucPtr = 0;
800074b4:	99 e2 fc ff 	ld.a %a2,[%a14]-4
800074b8:	82 02       	mov %d2,0
800074ba:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
800074bc:	40 32       	mov.aa %a2,%a3
    while (pTable)
800074be:	bd 02 d0 7f 	jz.a %a2,8000745e <Ifx_C_Init+0x10>
        pBlockDest.uiPtr = (uint32 *)*pTable++;
800074c2:	d9 23 08 00 	lea %a3,[%a2]8
800074c6:	54 22       	ld.w %d2,[%a2]
800074c8:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
800074cc:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
800074d0:	df f4 c7 7f 	jeq %d4,-1,8000745e <Ifx_C_Init+0x10>
        uiCnt = uiLength / 8;
800074d4:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
800074d8:	1d ff d4 ff 	j 80007480 <Ifx_C_Init+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
800074dc:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
800074e0:	80 22       	mov.d %d2,%a2
800074e2:	1b 82 00 20 	addi %d2,%d2,8
800074e6:	59 e2 f8 ff 	st.w [%a14]-8,%d2
800074ea:	99 e3 fc ff 	ld.a %a3,[%a14]-4
800074ee:	80 32       	mov.d %d2,%a3
800074f0:	1b 82 00 20 	addi %d2,%d2,8
800074f4:	59 e2 fc ff 	st.w [%a14]-4,%d2
800074f8:	09 26 40 09 	ld.d %e6,[%a2]
800074fc:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80007500:	02 42       	mov %d2,%d4
80007502:	1b f2 ff 4f 	addi %d4,%d2,-1
80007506:	df 02 eb ff 	jne %d2,0,800074dc <Ifx_C_Init+0x8e>
        }

        if (uiLength & 0x4)
8000750a:	6f 23 10 00 	jz.t %d3,2,8000752a <Ifx_C_Init+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
8000750e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80007512:	80 22       	mov.d %d2,%a2
80007514:	c2 42       	add %d2,4
80007516:	59 e2 f8 ff 	st.w [%a14]-8,%d2
8000751a:	99 e3 fc ff 	ld.a %a3,[%a14]-4
8000751e:	80 32       	mov.d %d2,%a3
80007520:	c2 42       	add %d2,4
80007522:	59 e2 fc ff 	st.w [%a14]-4,%d2
80007526:	54 22       	ld.w %d2,[%a2]
80007528:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
8000752a:	6f 13 11 00 	jz.t %d3,1,8000754c <Ifx_C_Init+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
8000752e:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80007532:	80 32       	mov.d %d2,%a3
80007534:	c2 22       	add %d2,2
80007536:	59 e2 f8 ff 	st.w [%a14]-8,%d2
8000753a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
8000753e:	80 22       	mov.d %d2,%a2
80007540:	c2 22       	add %d2,2
80007542:	59 e2 fc ff 	st.w [%a14]-4,%d2
80007546:	b9 32 00 00 	ld.hu %d2,[%a3]0
8000754a:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
8000754c:	6f 03 08 00 	jz.t %d3,0,8000755c <Ifx_C_Init+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80007550:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80007554:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80007558:	14 32       	ld.bu %d2,[%a3]
8000755a:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
8000755c:	60 52       	mov.a %a2,%d5
    while (pTable)
8000755e:	bd 02 14 00 	jz.a %a2,80007586 <Ifx_C_Init+0x138>
        pBlockSrc.uiPtr  = (uint32 *)*pTable++;
80007562:	54 22       	ld.w %d2,[%a2]
80007564:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        pBlockDest.uiPtr = (uint32 *)*pTable++;
80007568:	19 22 04 00 	ld.w %d2,[%a2]4
8000756c:	59 e2 fc ff 	st.w [%a14]-4,%d2
        uiLength         = *pTable++;
80007570:	80 22       	mov.d %d2,%a2
80007572:	1b c2 00 50 	addi %d5,%d2,12
80007576:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
8000757a:	df f3 06 00 	jeq %d3,-1,80007586 <Ifx_C_Init+0x138>
        uiCnt = uiLength / 8;
8000757e:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80007582:	1d ff c0 ff 	j 80007502 <Ifx_C_Init+0xb4>
        }
    }
}
80007586:	00 90       	ret 

80007588 <core0_main>:
float asa_x = 0;
float asa_y = 0;
float asa_z = 0;
int i=0;
void core0_main (void)
{
80007588:	40 ae       	mov.aa %a14,%sp
8000758a:	20 28       	sub.a %sp,40
    __enable();
8000758c:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80007590:	6d ff 12 d7 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
80007594:	02 24       	mov %d4,%d2
80007596:	6d ff f3 d5 	call 8000217c <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
8000759a:	6d ff 1f d7 	call 800023d8 <IfxScuWdt_getSafetyWatchdogPassword>
8000759e:	02 24       	mov %d4,%d2
800075a0:	6d ff 2d d6 	call 800021fa <IfxScuWdt_disableSafetyWatchdog>

    IfxCpu_emitEvent(&g_cpuSyncEvent);
800075a4:	91 00 00 c6 	movh.a %a12,24576
800075a8:	d9 cc 0c b1 	lea %a12,[%a12]4812 <600012cc <g_cpuSyncEvent>>
800075ac:	40 c4       	mov.aa %a4,%a12
800075ae:	6d ff 50 f0 	call 8000564e <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
800075b2:	82 14       	mov %d4,1
800075b4:	40 c4       	mov.aa %a4,%a12
800075b6:	6d ff 0c f0 	call 800055ce <IfxCpu_waitEvent>
    /////////////////////////////////////////////////////
    initIMU();
800075ba:	6d ff bb e4 	call 80003f30 <initIMU>
    now13=1;
800075be:	91 00 00 26 	movh.a %a2,24576
800075c2:	82 12       	mov %d2,1
800075c4:	e9 22 15 a1 	st.b [%a2]4757 <60001295 <now13>>,%d2
    initShellInterface();
800075c8:	6d ff 9c d9 	call 80002900 <initShellInterface>
    in =5;
800075cc:	91 00 00 26 	movh.a %a2,24576
800075d0:	82 52       	mov %d2,5
800075d2:	e9 22 16 a1 	st.b [%a2]4758 <60001296 <in>>,%d2
800075d6:	1d 00 1f 00 	j 80007614 <core0_main+0x8c>
//        now_euler.yaw =asa_z;


        //now13=3;
        if(i>1000)
            now_euler=MadgwickAHRSupdate(now_status);
800075da:	d9 ec d8 ff 	lea %a12,[%a14]-40
800075de:	91 00 00 56 	movh.a %a5,24576
800075e2:	d9 55 24 a1 	lea %a5,[%a5]4772 <600012a4 <now_status>>
800075e6:	40 c4       	mov.aa %a4,%a12
800075e8:	6d ff 0a e5 	call 80003ffc <MadgwickAHRSupdate>
800075ec:	91 00 00 26 	movh.a %a2,24576
800075f0:	d9 22 18 a1 	lea %a2,[%a2]4760 <60001298 <now_euler>>
800075f4:	09 c4 48 01 	ld.d %e4,[%a12+]8 <60000008 <LCF_DSPR1_START+0x8>>
800075f8:	89 24 48 01 	st.d [%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
800075fc:	44 c4       	ld.w %d4,[%a12+]
800075fe:	64 24       	st.w [%a2+],%d4
            print_enc(&now_status, &now_euler);
80007600:	91 00 00 56 	movh.a %a5,24576
80007604:	d9 55 18 a1 	lea %a5,[%a5]4760 <60001298 <now_euler>>
80007608:	91 00 00 46 	movh.a %a4,24576
8000760c:	d9 44 24 a1 	lea %a4,[%a4]4772 <600012a4 <now_status>>
80007610:	6d ff e2 d9 	call 800029d4 <print_enc>
        i++;
80007614:	91 00 00 d6 	movh.a %a13,24576
80007618:	d9 d2 04 a1 	lea %a2,[%a13]4740 <60001284 <i>>
8000761c:	54 22       	ld.w %d2,[%a2]
8000761e:	c2 12       	add %d2,1
80007620:	59 d2 04 a1 	st.w [%a13]4740 <60001284 <i>>,%d2
        delay(5000);
80007624:	3b 80 38 41 	mov %d4,5000
80007628:	6d ff 32 e9 	call 8000488c <delay>
        now_status=imuRead();
8000762c:	91 00 00 c6 	movh.a %a12,24576
80007630:	d9 cc 24 a1 	lea %a12,[%a12]4772 <600012a4 <now_status>>
80007634:	d9 ef d8 ff 	lea %a15,[%a14]-40 <600012a4 <now_status>>
80007638:	40 f4       	mov.aa %a4,%a15
8000763a:	6d ff 3d e0 	call 800036b4 <imuRead>
8000763e:	40 c2       	mov.aa %a2,%a12
80007640:	09 f4 48 01 	ld.d %e4,[%a15+]8
80007644:	89 24 48 01 	st.d [%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80007648:	09 f4 48 01 	ld.d %e4,[%a15+]8 <60000008 <LCF_DSPR1_START+0x8>>
8000764c:	89 24 48 01 	st.d [%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80007650:	09 f4 48 01 	ld.d %e4,[%a15+]8 <60000008 <LCF_DSPR1_START+0x8>>
80007654:	89 24 48 01 	st.d [%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80007658:	09 f4 48 01 	ld.d %e4,[%a15+]8 <60000008 <LCF_DSPR1_START+0x8>>
8000765c:	89 24 48 01 	st.d [%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
80007660:	09 f4 48 01 	ld.d %e4,[%a15+]8 <60000008 <LCF_DSPR1_START+0x8>>
80007664:	89 24 48 01 	st.d [%a2+]8 <60000008 <LCF_DSPR1_START+0x8>>,%e4
        float temp = now_status.mag_x;
80007668:	19 c3 18 00 	ld.w %d3,[%a12]24 <60000018 <LCF_DSPR1_START+0x18>>
        now_status.mag_x=now_status.mag_y;
8000766c:	19 c2 1c 00 	ld.w %d2,[%a12]28 <6000001c <LCF_DSPR1_START+0x1c>>
80007670:	59 c2 18 00 	st.w [%a12]24 <60000018 <LCF_DSPR1_START+0x18>>,%d2
        now_status.mag_y=temp;
80007674:	59 c3 1c 00 	st.w [%a12]28 <6000001c <LCF_DSPR1_START+0x1c>>,%d3
        now_status.mag_x=-now_status.mag_x;
80007678:	9b 02 00 28 	addih %d2,%d2,32768
8000767c:	59 c2 18 00 	st.w [%a12]24 <60000018 <LCF_DSPR1_START+0x18>>,%d2
        if(i>1000)
80007680:	19 d2 04 a1 	ld.w %d2,[%a13]4740 <60001284 <i>>
80007684:	3b 90 3e 30 	mov %d3,1001
80007688:	7f 32 a9 7f 	jge %d2,%d3,800075da <core0_main+0x52>
8000768c:	1d ff ba ff 	j 80007600 <core0_main+0x78>

80007690 <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
80007690:	40 ae       	mov.aa %a14,%sp
80007692:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80007696:	6d ff 8f d6 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
8000769a:	02 24       	mov %d4,%d2
8000769c:	6d ff 70 d5 	call 8000217c <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
800076a0:	91 00 00 c6 	movh.a %a12,24576
800076a4:	d9 cc 0c b1 	lea %a12,[%a12]4812 <600012cc <g_cpuSyncEvent>>
800076a8:	40 c4       	mov.aa %a4,%a12
800076aa:	6d ff d2 ef 	call 8000564e <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
800076ae:	82 14       	mov %d4,1
800076b0:	40 c4       	mov.aa %a4,%a12
800076b2:	6d ff 8e ef 	call 800055ce <IfxCpu_waitEvent>
    
    while(1)
800076b6:	1d 00 00 00 	j 800076b6 <core1_main+0x26>

800076ba <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
800076ba:	40 ae       	mov.aa %a14,%sp
800076bc:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
800076c0:	6d ff 7a d6 	call 800023b4 <IfxScuWdt_getCpuWatchdogPassword>
800076c4:	02 24       	mov %d4,%d2
800076c6:	6d ff 5b d5 	call 8000217c <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
800076ca:	91 00 00 c6 	movh.a %a12,24576
800076ce:	d9 cc 0c b1 	lea %a12,[%a12]4812 <600012cc <g_cpuSyncEvent>>
800076d2:	40 c4       	mov.aa %a4,%a12
800076d4:	6d ff bd ef 	call 8000564e <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
800076d8:	82 14       	mov %d4,1
800076da:	40 c4       	mov.aa %a4,%a12
800076dc:	6d ff 79 ef 	call 800055ce <IfxCpu_waitEvent>
    
    while(1)
800076e0:	1d 00 00 00 	j 800076e0 <core2_main+0x26>

800076e4 <memset>:
800076e4:	40 42       	mov.aa %a2,%a4
800076e6:	df 05 07 00 	jeq %d5,0,800076f4 <memset+0x10>
800076ea:	60 53       	mov.a %a3,%d5
800076ec:	b0 f3       	add.a %a3,-1
800076ee:	24 44       	st.b [%a4+],%d4
800076f0:	fd 30 ff 7f 	loop %a3,800076ee <memset+0xa>
800076f4:	00 90       	ret 

800076f6 <__extendsfdf2>:
800076f6:	20 20       	sub.a %sp,32
800076f8:	d9 a5 10 00 	lea %a5,[%sp]16
800076fc:	d9 a4 0c 00 	lea %a4,[%sp]12
80007700:	59 a4 0c 00 	st.w [%sp]12,%d4
80007704:	6d 00 11 04 	call 80007f26 <__unpack_f>
80007708:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000770c:	19 a6 18 00 	ld.w %d6,[%sp]24
80007710:	53 12 40 40 	mul.u %e4,%d2,1
80007714:	77 45 00 3f 	dextr %d3,%d5,%d4,30
80007718:	8f e4 01 20 	sh %d2,%d4,30
8000771c:	19 a5 14 00 	ld.w %d5,[%sp]20
80007720:	19 a4 10 00 	ld.w %d4,[%sp]16
80007724:	74 a2       	st.w [%sp],%d2
80007726:	59 a3 04 00 	st.w [%sp]4,%d3
8000772a:	6d 00 a0 03 	call 80007e6a <__make_dp>
8000772e:	00 90       	ret 

80007730 <_fpadd_parts>:
80007730:	54 42       	ld.w %d2,[%a4]
80007732:	40 42       	mov.aa %a2,%a4
80007734:	bf 22 c2 80 	jlt.u %d2,2,800078b8 <_fpadd_parts+0x188>
80007738:	54 53       	ld.w %d3,[%a5]
8000773a:	40 52       	mov.aa %a2,%a5
8000773c:	bf 23 be 80 	jlt.u %d3,2,800078b8 <_fpadd_parts+0x188>
80007740:	df 42 e3 00 	jeq %d2,4,80007906 <_fpadd_parts+0x1d6>
80007744:	df 43 ba 00 	jeq %d3,4,800078b8 <_fpadd_parts+0x188>
80007748:	df 23 b9 00 	jeq %d3,2,800078ba <_fpadd_parts+0x18a>
8000774c:	df 22 b6 00 	jeq %d2,2,800078b8 <_fpadd_parts+0x188>
80007750:	19 40 08 00 	ld.w %d0,[%a4]8
80007754:	19 57 08 00 	ld.w %d7,[%a5]8
80007758:	09 44 4c 09 	ld.d %e4,[%a4]12
8000775c:	0b 70 80 60 	sub %d6,%d0,%d7
80007760:	09 52 4c 09 	ld.d %e2,[%a5]12
80007764:	bf 06 c2 00 	jlt %d6,0,800078e8 <_fpadd_parts+0x1b8>
80007768:	8b 06 84 12 	ge %d1,%d6,64
8000776c:	df 01 c4 80 	jne %d1,0,800078f4 <_fpadd_parts+0x1c4>
80007770:	df 06 2a 00 	jeq %d6,0,800077c4 <_fpadd_parts+0x94>
80007774:	8b 06 82 72 	ge %d7,%d6,32
80007778:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
8000777c:	ab 03 a0 87 	seln %d8,%d7,%d3,0
80007780:	8f f6 01 71 	and %d7,%d6,31
80007784:	8b 07 02 11 	rsub %d1,%d7,32
80007788:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
8000778c:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
80007790:	8b 06 82 a2 	ge %d10,%d6,32
80007794:	32 57       	rsub %d7
80007796:	02 19       	mov %d9,%d1
80007798:	8f f6 01 61 	and %d6,%d6,31
8000779c:	82 f1       	mov %d1,-1
8000779e:	0f 78 00 80 	sh %d8,%d8,%d7
800077a2:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
800077a6:	0f 61 00 60 	sh %d6,%d1,%d6
800077aa:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
800077ae:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
800077b2:	0f 62 e0 10 	andn %d1,%d2,%d6
800077b6:	0f 73 e0 60 	andn %d6,%d3,%d7
800077ba:	a6 16       	or %d6,%d1
800077bc:	8b 06 00 95 	or.ne %d9,%d6,0
800077c0:	0b 98 10 28 	mov %e2,%d8,%d9
800077c4:	19 41 04 00 	ld.w %d1,[%a4]4
800077c8:	19 56 04 00 	ld.w %d6,[%a5]4
800077cc:	5f 61 4c 00 	jeq %d1,%d6,80007864 <_fpadd_parts+0x134>
800077d0:	0b 24 c0 60 	subx %d6,%d4,%d2
800077d4:	0b 35 d0 70 	subc %d7,%d5,%d3
800077d8:	df 01 06 00 	jeq %d1,0,800077e4 <_fpadd_parts+0xb4>
800077dc:	0b 42 c0 60 	subx %d6,%d2,%d4
800077e0:	0b 53 d0 70 	subc %d7,%d3,%d5
800077e4:	8b 07 00 31 	rsub %d3,%d7,0
800077e8:	8b 06 00 91 	rsub %d9,%d6,0
800077ec:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
800077f0:	82 12       	mov %d2,1
800077f2:	bf 07 05 00 	jlt %d7,0,800077fc <_fpadd_parts+0xcc>
800077f6:	02 69       	mov %d9,%d6
800077f8:	02 73       	mov %d3,%d7
800077fa:	82 02       	mov %d2,0
800077fc:	8b f9 9f 70 	addx %d7,%d9,-1
80007800:	82 f5       	mov %d5,-1
80007802:	8b f3 bf 60 	addc %d6,%d3,-1
80007806:	06 c5       	sh %d5,-4
80007808:	59 62 04 00 	st.w [%a6]4,%d2
8000780c:	82 e1       	mov %d1,-2
8000780e:	0b 56 00 21 	eq %d2,%d6,%d5
80007812:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
80007816:	59 60 08 00 	st.w [%a6]8,%d0
8000781a:	59 69 0c 00 	st.w [%a6]12,%d9
8000781e:	59 63 10 00 	st.w [%a6]16,%d3
80007822:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
80007826:	df 02 2b 80 	jne %d2,0,8000787c <_fpadd_parts+0x14c>
8000782a:	1b f0 ff 7f 	addi %d7,%d0,-1
8000782e:	77 93 80 30 	dextr %d3,%d3,%d9,1
80007832:	06 19       	sh %d9,1
80007834:	8b f9 9f 00 	addx %d0,%d9,-1
80007838:	8b f3 bf 60 	addc %d6,%d3,-1
8000783c:	0b 56 00 21 	eq %d2,%d6,%d5
80007840:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
80007844:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
80007848:	02 78       	mov %d8,%d7
8000784a:	c2 f7       	add %d7,-1
8000784c:	df 02 f1 ff 	jne %d2,0,8000782e <_fpadd_parts+0xfe>
80007850:	82 32       	mov %d2,3
80007852:	59 69 0c 00 	st.w [%a6]12,%d9
80007856:	59 63 10 00 	st.w [%a6]16,%d3
8000785a:	59 68 08 00 	st.w [%a6]8,%d8
8000785e:	74 62       	st.w [%a6],%d2
80007860:	40 62       	mov.aa %a2,%a6
80007862:	00 90       	ret 
80007864:	0b 24 40 90 	addx %d9,%d4,%d2
80007868:	0b 35 50 30 	addc %d3,%d5,%d3
8000786c:	59 61 04 00 	st.w [%a6]4,%d1
80007870:	59 60 08 00 	st.w [%a6]8,%d0
80007874:	59 69 0c 00 	st.w [%a6]12,%d9
80007878:	59 63 10 00 	st.w [%a6]16,%d3
8000787c:	82 32       	mov %d2,3
8000787e:	7b 00 00 52 	movh %d5,8192
80007882:	40 62       	mov.aa %a2,%a6
80007884:	74 62       	st.w [%a6],%d2
80007886:	0b 53 00 21 	eq %d2,%d3,%d5
8000788a:	b7 02 01 20 	insert %d2,%d2,0,0,1
8000788e:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
80007892:	df 02 13 80 	jne %d2,0,800078b8 <_fpadd_parts+0x188>
80007896:	8f f3 1f 20 	sh %d2,%d3,-1
8000789a:	77 93 80 5f 	dextr %d5,%d3,%d9,31
8000789e:	8f 19 00 31 	and %d3,%d9,1
800078a2:	59 62 10 00 	st.w [%a6]16,%d2
800078a6:	19 62 08 00 	ld.w %d2,[%a6]8
800078aa:	a6 53       	or %d3,%d5
800078ac:	c2 12       	add %d2,1
800078ae:	d9 63 08 00 	lea %a3,[%a6]8
800078b2:	59 63 0c 00 	st.w [%a6]12,%d3
800078b6:	74 32       	st.w [%a3],%d2
800078b8:	00 90       	ret 
800078ba:	40 42       	mov.aa %a2,%a4
800078bc:	df 22 fe ff 	jne %d2,2,800078b8 <_fpadd_parts+0x188>
800078c0:	40 63       	mov.aa %a3,%a6
800078c2:	09 44 48 01 	ld.d %e4,[%a4+]8
800078c6:	89 34 48 01 	st.d [%a3+]8,%e4
800078ca:	09 44 48 01 	ld.d %e4,[%a4+]8
800078ce:	89 34 48 01 	st.d [%a3+]8,%e4
800078d2:	44 44       	ld.w %d4,[%a4+]
800078d4:	64 34       	st.w [%a3+],%d4
800078d6:	19 23 04 00 	ld.w %d3,[%a2]4
800078da:	19 52 04 00 	ld.w %d2,[%a5]4
800078de:	40 62       	mov.aa %a2,%a6
800078e0:	26 32       	and %d2,%d3
800078e2:	59 62 04 00 	st.w [%a6]4,%d2
800078e6:	00 90       	ret 
800078e8:	0b 07 80 60 	sub %d6,%d7,%d0
800078ec:	8b 06 44 12 	lt %d1,%d6,64
800078f0:	df 01 1d 80 	jne %d1,0,8000792a <_fpadd_parts+0x1fa>
800078f4:	3f 07 06 00 	jlt %d7,%d0,80007900 <_fpadd_parts+0x1d0>
800078f8:	d2 04       	mov %e4,0
800078fa:	02 70       	mov %d0,%d7
800078fc:	1d ff 64 ff 	j 800077c4 <_fpadd_parts+0x94>
80007900:	d2 02       	mov %e2,0
80007902:	1d ff 61 ff 	j 800077c4 <_fpadd_parts+0x94>
80007906:	40 42       	mov.aa %a2,%a4
80007908:	df 43 d8 ff 	jne %d3,4,800078b8 <_fpadd_parts+0x188>
8000790c:	19 43 04 00 	ld.w %d3,[%a4]4
80007910:	19 52 04 00 	ld.w %d2,[%a5]4
80007914:	7b 00 00 48 	movh %d4,32768
80007918:	0b 23 10 21 	ne %d2,%d3,%d2
8000791c:	1b c4 82 40 	addi %d4,%d4,2092
80007920:	80 43       	mov.d %d3,%a4
80007922:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
80007926:	60 22       	mov.a %a2,%d2
80007928:	00 90       	ret 
8000792a:	8b 06 82 02 	ge %d0,%d6,32
8000792e:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
80007932:	ab 05 a0 80 	seln %d8,%d0,%d5,0
80007936:	8f f6 01 01 	and %d0,%d6,31
8000793a:	8b 00 02 11 	rsub %d1,%d0,32
8000793e:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80007942:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
80007946:	8b 06 82 a2 	ge %d10,%d6,32
8000794a:	32 50       	rsub %d0
8000794c:	02 19       	mov %d9,%d1
8000794e:	8f f6 01 61 	and %d6,%d6,31
80007952:	82 f1       	mov %d1,-1
80007954:	0f 08 00 80 	sh %d8,%d8,%d0
80007958:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
8000795c:	0f 61 00 60 	sh %d6,%d1,%d6
80007960:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
80007964:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80007968:	0f 64 e0 10 	andn %d1,%d4,%d6
8000796c:	0f 05 e0 60 	andn %d6,%d5,%d0
80007970:	a6 16       	or %d6,%d1
80007972:	8b 06 00 95 	or.ne %d9,%d6,0
80007976:	0b 98 10 48 	mov %e4,%d8,%d9
8000797a:	02 70       	mov %d0,%d7
8000797c:	1d ff 24 ff 	j 800077c4 <_fpadd_parts+0x94>

80007980 <__adddf3>:
80007980:	20 50       	sub.a %sp,80
80007982:	d9 a5 14 00 	lea %a5,[%sp]20
80007986:	d9 a4 04 00 	lea %a4,[%sp]4
8000798a:	89 a4 44 09 	st.d [%sp]4,%e4
8000798e:	89 a6 4c 09 	st.d [%sp]12,%e6
80007992:	6d 00 e9 03 	call 80008164 <__unpack_d>
80007996:	d9 a5 28 00 	lea %a5,[%sp]40
8000799a:	d9 a4 0c 00 	lea %a4,[%sp]12
8000799e:	6d 00 e3 03 	call 80008164 <__unpack_d>
800079a2:	d9 a4 14 00 	lea %a4,[%sp]20
800079a6:	d9 a6 3c 00 	lea %a6,[%sp]60
800079aa:	d9 a5 28 00 	lea %a5,[%sp]40
800079ae:	6d ff c1 fe 	call 80007730 <_fpadd_parts>
800079b2:	40 24       	mov.aa %a4,%a2
800079b4:	6d 00 09 03 	call 80007fc6 <__pack_d>
800079b8:	00 90       	ret 

800079ba <__subdf3>:
800079ba:	20 50       	sub.a %sp,80
800079bc:	d9 a5 14 00 	lea %a5,[%sp]20
800079c0:	d9 a4 04 00 	lea %a4,[%sp]4
800079c4:	89 a4 44 09 	st.d [%sp]4,%e4
800079c8:	89 a6 4c 09 	st.d [%sp]12,%e6
800079cc:	6d 00 cc 03 	call 80008164 <__unpack_d>
800079d0:	d9 a5 28 00 	lea %a5,[%sp]40
800079d4:	d9 a4 0c 00 	lea %a4,[%sp]12
800079d8:	6d 00 c6 03 	call 80008164 <__unpack_d>
800079dc:	19 a2 2c 00 	ld.w %d2,[%sp]44
800079e0:	d9 a4 14 00 	lea %a4,[%sp]20
800079e4:	8f 12 80 21 	xor %d2,%d2,1
800079e8:	d9 a6 3c 00 	lea %a6,[%sp]60
800079ec:	d9 a5 28 00 	lea %a5,[%sp]40
800079f0:	59 a2 2c 00 	st.w [%sp]44,%d2
800079f4:	6d ff 9e fe 	call 80007730 <_fpadd_parts>
800079f8:	40 24       	mov.aa %a4,%a2
800079fa:	6d 00 e6 02 	call 80007fc6 <__pack_d>
800079fe:	00 90       	ret 

80007a00 <__muldf3>:
80007a00:	20 50       	sub.a %sp,80
80007a02:	d9 a5 14 00 	lea %a5,[%sp]20
80007a06:	d9 a4 04 00 	lea %a4,[%sp]4
80007a0a:	89 a4 44 09 	st.d [%sp]4,%e4
80007a0e:	89 a6 4c 09 	st.d [%sp]12,%e6
80007a12:	6d 00 a9 03 	call 80008164 <__unpack_d>
80007a16:	d9 a5 28 00 	lea %a5,[%sp]40
80007a1a:	d9 a4 0c 00 	lea %a4,[%sp]12
80007a1e:	6d 00 a3 03 	call 80008164 <__unpack_d>
80007a22:	19 a2 14 00 	ld.w %d2,[%sp]20
80007a26:	ff 22 0f 80 	jge.u %d2,2,80007a44 <__muldf3+0x44>
80007a2a:	19 a3 18 00 	ld.w %d3,[%sp]24
80007a2e:	19 a2 2c 00 	ld.w %d2,[%sp]44
80007a32:	d9 a4 14 00 	lea %a4,[%sp]20
80007a36:	0b 23 10 21 	ne %d2,%d3,%d2
80007a3a:	59 a2 18 00 	st.w [%sp]24,%d2
80007a3e:	6d 00 c4 02 	call 80007fc6 <__pack_d>
80007a42:	00 90       	ret 
80007a44:	19 a3 28 00 	ld.w %d3,[%sp]40
80007a48:	bf 23 14 80 	jlt.u %d3,2,80007a70 <__muldf3+0x70>
80007a4c:	df 42 0a 80 	jne %d2,4,80007a60 <__muldf3+0x60>
80007a50:	91 00 00 48 	movh.a %a4,32768
80007a54:	d9 44 ac 00 	lea %a4,[%a4]2092 <8000082c <__thenan_df>>
80007a58:	df 23 f3 7f 	jeq %d3,2,80007a3e <__muldf3+0x3e>
80007a5c:	1d ff e7 ff 	j 80007a2a <__muldf3+0x2a>
80007a60:	df 43 15 80 	jne %d3,4,80007a8a <__muldf3+0x8a>
80007a64:	91 00 00 48 	movh.a %a4,32768
80007a68:	d9 44 ac 00 	lea %a4,[%a4]2092 <8000082c <__thenan_df>>
80007a6c:	df 22 e9 7f 	jeq %d2,2,80007a3e <__muldf3+0x3e>
80007a70:	19 a2 2c 00 	ld.w %d2,[%sp]44
80007a74:	19 a3 18 00 	ld.w %d3,[%sp]24
80007a78:	d9 a4 28 00 	lea %a4,[%sp]40
80007a7c:	0b 23 10 21 	ne %d2,%d3,%d2
80007a80:	59 a2 2c 00 	st.w [%sp]44,%d2
80007a84:	6d 00 a1 02 	call 80007fc6 <__pack_d>
80007a88:	00 90       	ret 
80007a8a:	19 a5 2c 00 	ld.w %d5,[%sp]44
80007a8e:	19 a4 18 00 	ld.w %d4,[%sp]24
80007a92:	0b 45 10 a1 	ne %d10,%d5,%d4
80007a96:	df 22 aa 00 	jeq %d2,2,80007bea <__muldf3+0x1ea>
80007a9a:	df 23 ae 00 	jeq %d3,2,80007bf6 <__muldf3+0x1f6>
80007a9e:	19 a6 34 00 	ld.w %d6,[%sp]52
80007aa2:	19 a4 20 00 	ld.w %d4,[%sp]32
80007aa6:	82 03       	mov %d3,0
80007aa8:	73 46 68 00 	mul.u %e0,%d6,%d4
80007aac:	19 a2 38 00 	ld.w %d2,[%sp]56
80007ab0:	82 0b       	mov %d11,0
80007ab2:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
80007ab6:	02 48       	mov %d8,%d4
80007ab8:	19 a7 24 00 	ld.w %d7,[%sp]36
80007abc:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
80007ac0:	73 42 68 40 	mul.u %e4,%d2,%d4
80007ac4:	82 0d       	mov %d13,0
80007ac6:	82 0c       	mov %d12,0
80007ac8:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
80007acc:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
80007ad0:	73 27 68 80 	mul.u %e8,%d7,%d2
80007ad4:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
80007ad8:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
80007adc:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
80007ae0:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
80007ae4:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
80007ae8:	0b 35 00 61 	eq %d6,%d5,%d3
80007aec:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80007af0:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80007af4:	02 67       	mov %d7,%d6
80007af6:	82 06       	mov %d6,0
80007af8:	0b 06 40 60 	addx %d6,%d6,%d0
80007afc:	0b 12 50 50 	addc %d5,%d2,%d1
80007b00:	0b 51 00 41 	eq %d4,%d1,%d5
80007b04:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
80007b08:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
80007b0c:	df 04 06 80 	jne %d4,0,80007b18 <__muldf3+0x118>
80007b10:	8b 1b 80 b0 	addx %d11,%d11,1
80007b14:	8b 07 a0 70 	addc %d7,%d7,0
80007b18:	82 04       	mov %d4,0
80007b1a:	0b 83 40 30 	addx %d3,%d3,%d8
80007b1e:	0b 94 50 20 	addc %d2,%d4,%d9
80007b22:	0b b3 40 30 	addx %d3,%d3,%d11
80007b26:	0b 72 50 20 	addc %d2,%d2,%d7
80007b2a:	19 a4 1c 00 	ld.w %d4,[%sp]28
80007b2e:	19 a7 30 00 	ld.w %d7,[%sp]48
80007b32:	59 aa 00 10 	st.w [%sp]64,%d10
80007b36:	0b 74 00 10 	add %d1,%d4,%d7
80007b3a:	7b 00 00 42 	movh %d4,8192
80007b3e:	1b 41 00 00 	addi %d0,%d1,4
80007b42:	0b 42 00 71 	eq %d7,%d2,%d4
80007b46:	b7 07 01 70 	insert %d7,%d7,0,0,1
80007b4a:	59 a0 04 10 	st.w [%sp]68,%d0
80007b4e:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
80007b52:	df 07 2b 80 	jne %d7,0,80007ba8 <__muldf3+0x1a8>
80007b56:	1b 51 00 70 	addi %d7,%d1,5
80007b5a:	8f 13 00 01 	and %d0,%d3,1
80007b5e:	02 71       	mov %d1,%d7
80007b60:	df 00 07 00 	jeq %d0,0,80007b6e <__muldf3+0x16e>
80007b64:	77 65 80 6f 	dextr %d6,%d5,%d6,31
80007b68:	06 f5       	sh %d5,-1
80007b6a:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
80007b6e:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80007b72:	06 f2       	sh %d2,-1
80007b74:	0b 24 30 01 	lt.u %d0,%d4,%d2
80007b78:	0b 24 70 02 	or.eq %d0,%d4,%d2
80007b7c:	c2 17       	add %d7,1
80007b7e:	df 00 ee ff 	jne %d0,0,80007b5a <__muldf3+0x15a>
80007b82:	59 a1 04 10 	st.w [%sp]68,%d1
80007b86:	8f f3 0f 41 	and %d4,%d3,255
80007b8a:	8b 04 28 42 	ne %d4,%d4,128
80007b8e:	df 04 3a 00 	jeq %d4,0,80007c02 <__muldf3+0x202>
80007b92:	59 a2 0c 10 	st.w [%sp]76,%d2
80007b96:	82 32       	mov %d2,3
80007b98:	59 a3 08 10 	st.w [%sp]72,%d3
80007b9c:	d9 a4 3c 00 	lea %a4,[%sp]60
80007ba0:	59 a2 3c 00 	st.w [%sp]60,%d2
80007ba4:	1d ff 4d ff 	j 80007a3e <__muldf3+0x3e>
80007ba8:	7b 00 00 71 	movh %d7,4096
80007bac:	0b 27 30 41 	lt.u %d4,%d7,%d2
80007bb0:	0b 27 70 42 	or.eq %d4,%d7,%d2
80007bb4:	df 04 e9 ff 	jne %d4,0,80007b86 <__muldf3+0x186>
80007bb8:	77 32 80 20 	dextr %d2,%d2,%d3,1
80007bbc:	c2 f0       	add %d0,-1
80007bbe:	06 13       	sh %d3,1
80007bc0:	ff 05 06 00 	jge %d5,0,80007bcc <__muldf3+0x1cc>
80007bc4:	8f 13 40 11 	or %d1,%d3,1
80007bc8:	0b 21 10 28 	mov %e2,%d1,%d2
80007bcc:	0b 72 00 41 	eq %d4,%d2,%d7
80007bd0:	b7 04 01 40 	insert %d4,%d4,0,0,1
80007bd4:	77 65 80 50 	dextr %d5,%d5,%d6,1
80007bd8:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
80007bdc:	06 16       	sh %d6,1
80007bde:	df 04 ed ff 	jne %d4,0,80007bb8 <__muldf3+0x1b8>
80007be2:	59 a0 04 10 	st.w [%sp]68,%d0
80007be6:	1d ff d0 ff 	j 80007b86 <__muldf3+0x186>
80007bea:	59 aa 18 00 	st.w [%sp]24,%d10
80007bee:	d9 a4 14 00 	lea %a4,[%sp]20
80007bf2:	1d ff 26 ff 	j 80007a3e <__muldf3+0x3e>
80007bf6:	59 aa 2c 00 	st.w [%sp]44,%d10
80007bfa:	d9 a4 28 00 	lea %a4,[%sp]40
80007bfe:	1d ff 20 ff 	j 80007a3e <__muldf3+0x3e>
80007c02:	77 32 00 4c 	dextr %d4,%d2,%d3,24
80007c06:	a6 65       	or %d5,%d6
80007c08:	8b 05 20 52 	ne %d5,%d5,0
80007c0c:	0f 45 e0 40 	andn %d4,%d5,%d4
80007c10:	df 04 c1 7f 	jeq %d4,0,80007b92 <__muldf3+0x192>
80007c14:	8b 03 88 30 	addx %d3,%d3,128
80007c18:	8b 02 a0 20 	addc %d2,%d2,0
80007c1c:	8f f3 cf 31 	andn %d3,%d3,255
80007c20:	1d ff b9 ff 	j 80007b92 <__muldf3+0x192>

80007c24 <__divdf3>:
80007c24:	20 38       	sub.a %sp,56
80007c26:	d9 a5 10 00 	lea %a5,[%sp]16
80007c2a:	40 a4       	mov.aa %a4,%sp
80007c2c:	89 a4 40 09 	st.d [%sp],%e4
80007c30:	89 a6 48 09 	st.d [%sp]8,%e6
80007c34:	6d 00 98 02 	call 80008164 <__unpack_d>
80007c38:	d9 a5 24 00 	lea %a5,[%sp]36
80007c3c:	d9 a4 08 00 	lea %a4,[%sp]8
80007c40:	6d 00 92 02 	call 80008164 <__unpack_d>
80007c44:	19 a2 10 00 	ld.w %d2,[%sp]16
80007c48:	ff 22 07 80 	jge.u %d2,2,80007c56 <__divdf3+0x32>
80007c4c:	d9 a4 10 00 	lea %a4,[%sp]16
80007c50:	6d 00 bb 01 	call 80007fc6 <__pack_d>
80007c54:	00 90       	ret 
80007c56:	19 a3 24 00 	ld.w %d3,[%sp]36
80007c5a:	d9 a4 24 00 	lea %a4,[%sp]36
80007c5e:	bf 23 f9 ff 	jlt.u %d3,2,80007c50 <__divdf3+0x2c>
80007c62:	19 a5 14 00 	ld.w %d5,[%sp]20
80007c66:	19 a4 28 00 	ld.w %d4,[%sp]40
80007c6a:	c6 54       	xor %d4,%d5
80007c6c:	59 a4 14 00 	st.w [%sp]20,%d4
80007c70:	1b e2 ff 4f 	addi %d4,%d2,-2
80007c74:	8f 24 c0 41 	andn %d4,%d4,2
80007c78:	df 04 0a 80 	jne %d4,0,80007c8c <__divdf3+0x68>
80007c7c:	91 00 00 48 	movh.a %a4,32768
80007c80:	d9 44 ac 00 	lea %a4,[%a4]2092 <8000082c <__thenan_df>>
80007c84:	5f 32 e4 ff 	jne %d2,%d3,80007c4c <__divdf3+0x28>
80007c88:	1d ff e4 ff 	j 80007c50 <__divdf3+0x2c>
80007c8c:	df 43 51 00 	jeq %d3,4,80007d2e <__divdf3+0x10a>
80007c90:	df 23 5a 00 	jeq %d3,2,80007d44 <__divdf3+0x120>
80007c94:	19 a3 18 00 	ld.w %d3,[%sp]24
80007c98:	19 a2 2c 00 	ld.w %d2,[%sp]44
80007c9c:	09 a4 70 09 	ld.d %e4,[%sp]48
80007ca0:	0b 23 80 00 	sub %d0,%d3,%d2
80007ca4:	09 a2 5c 09 	ld.d %e2,[%sp]28
80007ca8:	0b 53 00 61 	eq %d6,%d3,%d5
80007cac:	02 67       	mov %d7,%d6
80007cae:	0b 42 50 72 	and.ge.u %d7,%d2,%d4
80007cb2:	59 a0 18 00 	st.w [%sp]24,%d0
80007cb6:	0b 35 a0 72 	or.lt.u %d7,%d5,%d3
80007cba:	df 07 0b 80 	jne %d7,0,80007cd0 <__divdf3+0xac>
80007cbe:	1b f0 ff 6f 	addi %d6,%d0,-1
80007cc2:	77 23 80 30 	dextr %d3,%d3,%d2,1
80007cc6:	06 12       	sh %d2,1
80007cc8:	59 a6 18 00 	st.w [%sp]24,%d6
80007ccc:	0b 53 00 61 	eq %d6,%d3,%d5
80007cd0:	3b d0 03 10 	mov %d1,61
80007cd4:	d2 08       	mov %e8,0
80007cd6:	82 00       	mov %d0,0
80007cd8:	7b 00 00 71 	movh %d7,4096
80007cdc:	1d 00 04 00 	j 80007ce4 <__divdf3+0xc0>
80007ce0:	0b 53 00 61 	eq %d6,%d3,%d5
80007ce4:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80007ce8:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80007cec:	df 06 0c 80 	jne %d6,0,80007d04 <__divdf3+0xe0>
80007cf0:	0f 08 a0 a0 	or %d10,%d8,%d0
80007cf4:	0f 79 a0 60 	or %d6,%d9,%d7
80007cf8:	0b 42 c0 20 	subx %d2,%d2,%d4
80007cfc:	0b a6 10 88 	mov %e8,%d6,%d10
80007d00:	0b 53 d0 30 	subc %d3,%d3,%d5
80007d04:	c2 f1       	add %d1,-1
80007d06:	77 07 80 0f 	dextr %d0,%d7,%d0,31
80007d0a:	77 23 80 30 	dextr %d3,%d3,%d2,1
80007d0e:	06 f7       	sh %d7,-1
80007d10:	06 12       	sh %d2,1
80007d12:	df 01 e7 ff 	jne %d1,0,80007ce0 <__divdf3+0xbc>
80007d16:	8f f8 0f 41 	and %d4,%d8,255
80007d1a:	8b 04 28 42 	ne %d4,%d4,128
80007d1e:	df 04 1a 00 	jeq %d4,0,80007d52 <__divdf3+0x12e>
80007d22:	59 a8 1c 00 	st.w [%sp]28,%d8
80007d26:	59 a9 20 00 	st.w [%sp]32,%d9
80007d2a:	1d ff 91 ff 	j 80007c4c <__divdf3+0x28>
80007d2e:	82 02       	mov %d2,0
80007d30:	a0 02       	mov.a %a2,0
80007d32:	a0 03       	mov.a %a3,0
80007d34:	89 a2 dc 09 	st.da [%sp]28,%a2
80007d38:	59 a2 18 00 	st.w [%sp]24,%d2
80007d3c:	d9 a4 10 00 	lea %a4,[%sp]16
80007d40:	1d ff 88 ff 	j 80007c50 <__divdf3+0x2c>
80007d44:	82 42       	mov %d2,4
80007d46:	d9 a4 10 00 	lea %a4,[%sp]16
80007d4a:	59 a2 10 00 	st.w [%sp]16,%d2
80007d4e:	1d ff 81 ff 	j 80007c50 <__divdf3+0x2c>
80007d52:	a6 32       	or %d2,%d3
80007d54:	77 89 00 4c 	dextr %d4,%d9,%d8,24
80007d58:	8b 02 20 32 	ne %d3,%d2,0
80007d5c:	0f 43 e0 20 	andn %d2,%d3,%d4
80007d60:	df 02 e1 7f 	jeq %d2,0,80007d22 <__divdf3+0xfe>
80007d64:	8b 08 88 80 	addx %d8,%d8,128
80007d68:	8b 09 a0 90 	addc %d9,%d9,0
80007d6c:	8f f8 cf 81 	andn %d8,%d8,255
80007d70:	1d ff d9 ff 	j 80007d22 <__divdf3+0xfe>

80007d74 <__gtdf2>:
80007d74:	20 38       	sub.a %sp,56
80007d76:	d9 a5 10 00 	lea %a5,[%sp]16
80007d7a:	40 a4       	mov.aa %a4,%sp
80007d7c:	89 a4 40 09 	st.d [%sp],%e4
80007d80:	89 a6 48 09 	st.d [%sp]8,%e6
80007d84:	6d 00 f0 01 	call 80008164 <__unpack_d>
80007d88:	d9 a5 24 00 	lea %a5,[%sp]36
80007d8c:	d9 a4 08 00 	lea %a4,[%sp]8
80007d90:	6d 00 ea 01 	call 80008164 <__unpack_d>
80007d94:	19 a3 10 00 	ld.w %d3,[%sp]16
80007d98:	82 f2       	mov %d2,-1
80007d9a:	bf 23 0c 80 	jlt.u %d3,2,80007db2 <__gtdf2+0x3e>
80007d9e:	19 a3 24 00 	ld.w %d3,[%sp]36
80007da2:	bf 23 08 80 	jlt.u %d3,2,80007db2 <__gtdf2+0x3e>
80007da6:	d9 a5 24 00 	lea %a5,[%sp]36
80007daa:	d9 a4 10 00 	lea %a4,[%sp]16
80007dae:	6d 00 3a 02 	call 80008222 <__fpcmp_parts_d>
80007db2:	00 90       	ret 

80007db4 <__ltdf2>:
80007db4:	20 38       	sub.a %sp,56
80007db6:	d9 a5 10 00 	lea %a5,[%sp]16
80007dba:	40 a4       	mov.aa %a4,%sp
80007dbc:	89 a4 40 09 	st.d [%sp],%e4
80007dc0:	89 a6 48 09 	st.d [%sp]8,%e6
80007dc4:	6d 00 d0 01 	call 80008164 <__unpack_d>
80007dc8:	d9 a5 24 00 	lea %a5,[%sp]36
80007dcc:	d9 a4 08 00 	lea %a4,[%sp]8
80007dd0:	6d 00 ca 01 	call 80008164 <__unpack_d>
80007dd4:	19 a3 10 00 	ld.w %d3,[%sp]16
80007dd8:	82 12       	mov %d2,1
80007dda:	bf 23 0c 80 	jlt.u %d3,2,80007df2 <__ltdf2+0x3e>
80007dde:	19 a3 24 00 	ld.w %d3,[%sp]36
80007de2:	bf 23 08 80 	jlt.u %d3,2,80007df2 <__ltdf2+0x3e>
80007de6:	d9 a5 24 00 	lea %a5,[%sp]36
80007dea:	d9 a4 10 00 	lea %a4,[%sp]16
80007dee:	6d 00 1a 02 	call 80008222 <__fpcmp_parts_d>
80007df2:	00 90       	ret 

80007df4 <__floatsidf>:
80007df4:	82 32       	mov %d2,3
80007df6:	20 18       	sub.a %sp,24
80007df8:	59 a2 04 00 	st.w [%sp]4,%d2
80007dfc:	8f 14 1e 20 	sh %d2,%d4,-31
80007e00:	59 a2 08 00 	st.w [%sp]8,%d2
80007e04:	df 04 0e 80 	jne %d4,0,80007e20 <__floatsidf+0x2c>
80007e08:	82 22       	mov %d2,2
80007e0a:	59 a2 04 00 	st.w [%sp]4,%d2
80007e0e:	d9 a4 04 00 	lea %a4,[%sp]4
80007e12:	6d 00 da 00 	call 80007fc6 <__pack_d>
80007e16:	60 25       	mov.a %a5,%d2
80007e18:	60 34       	mov.a %a4,%d3
80007e1a:	80 52       	mov.d %d2,%a5
80007e1c:	80 43       	mov.d %d3,%a4
80007e1e:	00 90       	ret 
80007e20:	ff 04 0a 00 	jge %d4,0,80007e34 <__floatsidf+0x40>
80007e24:	7b 00 00 28 	movh %d2,32768
80007e28:	a0 05       	mov.a %a5,0
80007e2a:	91 00 1e 4c 	movh.a %a4,49632
80007e2e:	5f 24 f6 7f 	jeq %d4,%d2,80007e1a <__floatsidf+0x26>
80007e32:	32 54       	rsub %d4
80007e34:	0f 04 b0 61 	clz %d6,%d4
80007e38:	1b d6 01 60 	addi %d6,%d6,29
80007e3c:	8f f6 01 21 	and %d2,%d6,31
80007e40:	82 05       	mov %d5,0
80007e42:	8b 06 82 72 	ge %d7,%d6,32
80007e46:	17 45 80 32 	dextr %d3,%d5,%d4,%d2
80007e4a:	0f 24 00 20 	sh %d2,%d4,%d2
80007e4e:	2b 23 50 37 	seln %d3,%d7,%d3,%d2
80007e52:	8b c6 03 61 	rsub %d6,%d6,60
80007e56:	ab 02 a0 27 	seln %d2,%d7,%d2,0
80007e5a:	59 a3 14 00 	st.w [%sp]20,%d3
80007e5e:	59 a6 0c 00 	st.w [%sp]12,%d6
80007e62:	59 a2 10 00 	st.w [%sp]16,%d2
80007e66:	1d ff d4 ff 	j 80007e0e <__floatsidf+0x1a>

80007e6a <__make_dp>:
80007e6a:	20 18       	sub.a %sp,24
80007e6c:	09 a2 d8 09 	ld.da %a2,[%sp]24
80007e70:	d9 a4 04 00 	lea %a4,[%sp]4
80007e74:	59 a4 04 00 	st.w [%sp]4,%d4
80007e78:	59 a5 08 00 	st.w [%sp]8,%d5
80007e7c:	59 a6 0c 00 	st.w [%sp]12,%d6
80007e80:	89 a2 d0 09 	st.da [%sp]16,%a2
80007e84:	6d 00 a1 00 	call 80007fc6 <__pack_d>
80007e88:	00 90       	ret 

80007e8a <__truncdfsf2>:
80007e8a:	20 20       	sub.a %sp,32
80007e8c:	d9 a5 0c 00 	lea %a5,[%sp]12
80007e90:	d9 a4 04 00 	lea %a4,[%sp]4
80007e94:	89 a4 44 09 	st.d [%sp]4,%e4
80007e98:	6d 00 66 01 	call 80008164 <__unpack_d>
80007e9c:	19 a3 18 00 	ld.w %d3,[%sp]24
80007ea0:	19 a2 1c 00 	ld.w %d2,[%sp]28
80007ea4:	77 32 00 21 	dextr %d2,%d2,%d3,2
80007ea8:	b7 03 02 3f 	insert %d3,%d3,0,30,2
80007eac:	02 27       	mov %d7,%d2
80007eae:	df 03 04 00 	jeq %d3,0,80007eb6 <__truncdfsf2+0x2c>
80007eb2:	8f 12 40 71 	or %d7,%d2,1
80007eb6:	19 a6 14 00 	ld.w %d6,[%sp]20
80007eba:	19 a5 10 00 	ld.w %d5,[%sp]16
80007ebe:	19 a4 0c 00 	ld.w %d4,[%sp]12
80007ec2:	6d 00 76 00 	call 80007fae <__make_fp>
80007ec6:	00 90       	ret 

80007ec8 <__floatunsidf>:
80007ec8:	82 02       	mov %d2,0
80007eca:	20 18       	sub.a %sp,24
80007ecc:	59 a2 08 00 	st.w [%sp]8,%d2
80007ed0:	df 04 0a 80 	jne %d4,0,80007ee4 <__floatunsidf+0x1c>
80007ed4:	82 22       	mov %d2,2
80007ed6:	d9 a4 04 00 	lea %a4,[%sp]4
80007eda:	59 a2 04 00 	st.w [%sp]4,%d2
80007ede:	6d 00 74 00 	call 80007fc6 <__pack_d>
80007ee2:	00 90       	ret 
80007ee4:	82 32       	mov %d2,3
80007ee6:	0f 04 b0 61 	clz %d6,%d4
80007eea:	1b d6 01 60 	addi %d6,%d6,29
80007eee:	59 a2 04 00 	st.w [%sp]4,%d2
80007ef2:	82 05       	mov %d5,0
80007ef4:	8f f6 01 21 	and %d2,%d6,31
80007ef8:	8b 06 82 72 	ge %d7,%d6,32
80007efc:	17 45 80 32 	dextr %d3,%d5,%d4,%d2
80007f00:	0f 24 00 20 	sh %d2,%d4,%d2
80007f04:	2b 23 50 37 	seln %d3,%d7,%d3,%d2
80007f08:	8b c6 03 61 	rsub %d6,%d6,60
80007f0c:	ab 02 a0 27 	seln %d2,%d7,%d2,0
80007f10:	d9 a4 04 00 	lea %a4,[%sp]4
80007f14:	59 a3 14 00 	st.w [%sp]20,%d3
80007f18:	59 a2 10 00 	st.w [%sp]16,%d2
80007f1c:	59 a6 0c 00 	st.w [%sp]12,%d6
80007f20:	6d 00 53 00 	call 80007fc6 <__pack_d>
80007f24:	00 90       	ret 

80007f26 <__unpack_f>:
80007f26:	54 42       	ld.w %d2,[%a4]
80007f28:	8f 12 1e 50 	sh %d5,%d2,-31
80007f2c:	37 02 e8 3b 	extr.u %d3,%d2,23,8
80007f30:	b7 02 89 4b 	insert %d4,%d2,0,23,9
80007f34:	59 55 04 00 	st.w [%a5]4,%d5
80007f38:	df 03 16 80 	jne %d3,0,80007f64 <__unpack_f+0x3e>
80007f3c:	df 04 25 00 	jeq %d4,0,80007f86 <__unpack_f+0x60>
80007f40:	82 33       	mov %d3,3
80007f42:	8f 74 00 20 	sh %d2,%d4,7
80007f46:	7b 00 00 54 	movh %d5,16384
80007f4a:	74 53       	st.w [%a5],%d3
80007f4c:	3b 10 f8 3f 	mov %d3,-127
80007f50:	06 12       	sh %d2,1
80007f52:	02 34       	mov %d4,%d3
80007f54:	c2 f3       	add %d3,-1
80007f56:	3f 52 fd ff 	jlt.u %d2,%d5,80007f50 <__unpack_f+0x2a>
80007f5a:	59 54 08 00 	st.w [%a5]8,%d4
80007f5e:	59 52 0c 00 	st.w [%a5]12,%d2
80007f62:	00 90       	ret 
80007f64:	8b f3 2f 52 	ne %d5,%d3,255
80007f68:	df 05 12 00 	jeq %d5,0,80007f8c <__unpack_f+0x66>
80007f6c:	82 32       	mov %d2,3
80007f6e:	1b 13 f8 3f 	addi %d3,%d3,-127
80007f72:	74 52       	st.w [%a5],%d2
80007f74:	8f 74 00 20 	sh %d2,%d4,7
80007f78:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
80007f7c:	59 53 08 00 	st.w [%a5]8,%d3
80007f80:	59 52 0c 00 	st.w [%a5]12,%d2
80007f84:	00 90       	ret 
80007f86:	82 22       	mov %d2,2
80007f88:	74 52       	st.w [%a5],%d2
80007f8a:	00 90       	ret 
80007f8c:	df 04 05 80 	jne %d4,0,80007f96 <__unpack_f+0x70>
80007f90:	82 42       	mov %d2,4
80007f92:	74 52       	st.w [%a5],%d2
80007f94:	00 90       	ret 
80007f96:	37 02 61 3b 	extr.u %d3,%d2,22,1
80007f9a:	06 72       	sh %d2,7
80007f9c:	74 53       	st.w [%a5],%d3
80007f9e:	7b 00 00 32 	movh %d3,8192
80007fa2:	1b 03 f8 3f 	addi %d3,%d3,-128
80007fa6:	26 32       	and %d2,%d3
80007fa8:	59 52 0c 00 	st.w [%a5]12,%d2
80007fac:	00 90       	ret 

80007fae <__make_fp>:
80007fae:	20 10       	sub.a %sp,16
80007fb0:	40 a4       	mov.aa %a4,%sp
80007fb2:	74 a4       	st.w [%sp],%d4
80007fb4:	59 a5 04 00 	st.w [%sp]4,%d5
80007fb8:	59 a6 08 00 	st.w [%sp]8,%d6
80007fbc:	59 a7 0c 00 	st.w [%sp]12,%d7
80007fc0:	6d 00 93 01 	call 800082e6 <__pack_f>
80007fc4:	00 90       	ret 

80007fc6 <__pack_d>:
80007fc6:	54 44       	ld.w %d4,[%a4]
80007fc8:	19 43 0c 00 	ld.w %d3,[%a4]12
80007fcc:	19 42 10 00 	ld.w %d2,[%a4]16
80007fd0:	19 41 04 00 	ld.w %d1,[%a4]4
80007fd4:	bf 24 56 80 	jlt.u %d4,2,80008080 <_SMALL_DATA2_+0x80>
80007fd8:	7b 00 ff 57 	movh %d5,32752
80007fdc:	d2 06       	mov %e6,0
80007fde:	df 44 0b 00 	jeq %d4,4,80007ff4 <__pack_d+0x2e>
80007fe2:	0f 23 a0 50 	or %d5,%d3,%d2
80007fe6:	8b 05 00 02 	eq %d0,%d5,0
80007fea:	8b 24 e0 04 	or.eq %d0,%d4,2
80007fee:	82 05       	mov %d5,0
80007ff0:	df 00 0c 00 	jeq %d0,0,80008008 <_SMALL_DATA2_+0x8>
80007ff4:	0b 10 00 28 	mov %e2,%d1
80007ff8:	a6 75       	or %d5,%d7
80007ffa:	8f f2 01 20 	sh %d2,%d2,31
80007ffe:	0f 25 a0 40 	or %d4,%d5,%d2
80008002:	02 43       	mov %d3,%d4
80008004:	02 62       	mov %d2,%d6
80008006:	00 90       	ret 
80008008:	19 44 08 00 	ld.w %d4,[%a4]8
8000800c:	3b 20 c0 0f 	mov %d0,-1022
80008010:	3f 04 41 00 	jlt %d4,%d0,80008092 <_SMALL_DATA2_+0x92>
80008014:	3b 00 40 00 	mov %d0,1024
80008018:	7b 00 ff 57 	movh %d5,32752
8000801c:	7f 04 ec 7f 	jge %d4,%d0,80007ff4 <__pack_d+0x2e>
80008020:	8f f3 0f 51 	and %d5,%d3,255
80008024:	8b 05 28 52 	ne %d5,%d5,128
80008028:	df 05 1b 00 	jeq %d5,0,8000805e <_SMALL_DATA2_+0x5e>
8000802c:	8b f3 87 30 	addx %d3,%d3,127
80008030:	8b 02 a0 20 	addc %d2,%d2,0
80008034:	7b 00 00 52 	movh %d5,8192
80008038:	0b 25 30 61 	lt.u %d6,%d5,%d2
8000803c:	0b 25 70 62 	or.eq %d6,%d5,%d2
80008040:	df 06 19 80 	jne %d6,0,80008072 <_SMALL_DATA2_+0x72>
80008044:	1b f4 3f 40 	addi %d4,%d4,1023
80008048:	0b 40 00 48 	mov %e4,%d4
8000804c:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80008050:	06 82       	sh %d2,-8
80008052:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
80008056:	8f 44 01 50 	sh %d5,%d4,20
8000805a:	1d ff cd ff 	j 80007ff4 <__pack_d+0x2e>
8000805e:	8f 03 10 51 	and %d5,%d3,256
80008062:	df 05 e9 7f 	jeq %d5,0,80008034 <_SMALL_DATA2_+0x34>
80008066:	8b 03 88 30 	addx %d3,%d3,128
8000806a:	8b 02 a0 20 	addc %d2,%d2,0
8000806e:	1d ff e3 ff 	j 80008034 <_SMALL_DATA2_+0x34>
80008072:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80008076:	1b 04 40 40 	addi %d4,%d4,1024
8000807a:	06 f2       	sh %d2,-1
8000807c:	1d ff e6 ff 	j 80008048 <_SMALL_DATA2_+0x48>
80008080:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80008084:	06 82       	sh %d2,-8
80008086:	b7 12 8d 79 	insert %d7,%d2,1,19,13
8000808a:	7b 00 ff 57 	movh %d5,32752
8000808e:	1d ff b3 ff 	j 80007ff4 <__pack_d+0x2e>
80008092:	0b 40 80 40 	sub %d4,%d0,%d4
80008096:	8b 94 83 02 	ge %d0,%d4,57
8000809a:	df 00 ad ff 	jne %d0,0,80007ff4 <__pack_d+0x2e>
8000809e:	8b 04 82 52 	ge %d5,%d4,32
800080a2:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
800080a6:	ab 02 a0 75 	seln %d7,%d5,%d2,0
800080aa:	8f f4 01 51 	and %d5,%d4,31
800080ae:	8b 05 02 61 	rsub %d6,%d5,32
800080b2:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
800080b6:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
800080ba:	8b 04 82 82 	ge %d8,%d4,32
800080be:	32 55       	rsub %d5
800080c0:	02 60       	mov %d0,%d6
800080c2:	8f f4 01 41 	and %d4,%d4,31
800080c6:	82 f6       	mov %d6,-1
800080c8:	0f 57 00 70 	sh %d7,%d7,%d5
800080cc:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
800080d0:	0f 46 00 40 	sh %d4,%d6,%d4
800080d4:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
800080d8:	ab 04 a0 48 	seln %d4,%d8,%d4,0
800080dc:	0f 43 e0 30 	andn %d3,%d3,%d4
800080e0:	0f 52 e0 20 	andn %d2,%d2,%d5
800080e4:	a6 32       	or %d2,%d3
800080e6:	02 03       	mov %d3,%d0
800080e8:	8b 02 00 35 	or.ne %d3,%d2,0
800080ec:	8f f3 0f 51 	and %d5,%d3,255
800080f0:	82 12       	mov %d2,1
800080f2:	8b 05 08 24 	and.eq %d2,%d5,128
800080f6:	02 74       	mov %d4,%d7
800080f8:	df 02 14 80 	jne %d2,0,80008120 <_SMALL_DATA2_+0x120>
800080fc:	8b f3 87 30 	addx %d3,%d3,127
80008100:	8b 07 a0 20 	addc %d2,%d7,0
80008104:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80008108:	7b 00 00 31 	movh %d3,4096
8000810c:	8f 82 1f 70 	sh %d7,%d2,-8
80008110:	0b 32 50 21 	ge.u %d2,%d2,%d3
80008114:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80008118:	8f 42 01 50 	sh %d5,%d2,20
8000811c:	1d ff 6c ff 	j 80007ff4 <__pack_d+0x2e>
80008120:	8b 03 88 60 	addx %d6,%d3,128
80008124:	8b 07 a0 20 	addc %d2,%d7,0
80008128:	7b 00 00 a1 	movh %d10,4096
8000812c:	8f 82 1f 70 	sh %d7,%d2,-8
80008130:	77 62 00 6c 	dextr %d6,%d2,%d6,24
80008134:	0b a2 50 21 	ge.u %d2,%d2,%d10
80008138:	53 12 40 80 	mul.u %e8,%d2,1
8000813c:	8f 03 10 01 	and %d0,%d3,256
80008140:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80008144:	8f 48 01 50 	sh %d5,%d8,20
80008148:	df 00 56 ff 	jne %d0,0,80007ff4 <__pack_d+0x2e>
8000814c:	8f 84 1f 70 	sh %d7,%d4,-8
80008150:	0b a4 50 21 	ge.u %d2,%d4,%d10
80008154:	77 34 00 6c 	dextr %d6,%d4,%d3,24
80008158:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
8000815c:	8f 42 01 50 	sh %d5,%d2,20
80008160:	1d ff 4a ff 	j 80007ff4 <__pack_d+0x2e>

80008164 <__unpack_d>:
80008164:	09 48 40 09 	ld.d %e8,[%a4]
80008168:	3b f0 7f 00 	mov %d0,2047
8000816c:	8f 19 1e 70 	sh %d7,%d9,-31
80008170:	37 09 6b 5a 	extr.u %d5,%d9,20,11
80008174:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
80008178:	59 57 04 00 	st.w [%a5]4,%d7
8000817c:	df 05 26 80 	jne %d5,0,800081c8 <__unpack_d+0x64>
80008180:	8b 08 20 22 	ne %d2,%d8,0
80008184:	8b 06 00 25 	or.ne %d2,%d6,0
80008188:	df 02 33 00 	jeq %d2,0,800081ee <__unpack_d+0x8a>
8000818c:	82 32       	mov %d2,3
8000818e:	77 86 00 34 	dextr %d3,%d6,%d8,8
80008192:	8f 88 00 40 	sh %d4,%d8,8
80008196:	74 52       	st.w [%a5],%d2
80008198:	3b 10 c0 5f 	mov %d5,-1023
8000819c:	7b 00 00 61 	movh %d6,4096
800081a0:	77 43 80 30 	dextr %d3,%d3,%d4,1
800081a4:	02 57       	mov %d7,%d5
800081a6:	0b 63 00 21 	eq %d2,%d3,%d6
800081aa:	b7 02 01 20 	insert %d2,%d2,0,0,1
800081ae:	06 14       	sh %d4,1
800081b0:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
800081b4:	c2 f5       	add %d5,-1
800081b6:	df 02 f5 ff 	jne %d2,0,800081a0 <__unpack_d+0x3c>
800081ba:	59 57 08 00 	st.w [%a5]8,%d7
800081be:	59 54 0c 00 	st.w [%a5]12,%d4
800081c2:	59 53 10 00 	st.w [%a5]16,%d3
800081c6:	00 90       	ret 
800081c8:	5f 05 16 00 	jeq %d5,%d0,800081f4 <__unpack_d+0x90>
800081cc:	82 32       	mov %d2,3
800081ce:	1b 15 c0 5f 	addi %d5,%d5,-1023
800081d2:	8f 88 00 40 	sh %d4,%d8,8
800081d6:	74 52       	st.w [%a5],%d2
800081d8:	77 86 00 24 	dextr %d2,%d6,%d8,8
800081dc:	59 55 08 00 	st.w [%a5]8,%d5
800081e0:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800081e4:	59 54 0c 00 	st.w [%a5]12,%d4
800081e8:	59 52 10 00 	st.w [%a5]16,%d2
800081ec:	00 90       	ret 
800081ee:	82 22       	mov %d2,2
800081f0:	74 52       	st.w [%a5],%d2
800081f2:	00 90       	ret 
800081f4:	8b 08 20 52 	ne %d5,%d8,0
800081f8:	8b 06 00 55 	or.ne %d5,%d6,0
800081fc:	df 05 05 80 	jne %d5,0,80008206 <__unpack_d+0xa2>
80008200:	82 42       	mov %d2,4
80008202:	74 52       	st.w [%a5],%d2
80008204:	00 90       	ret 
80008206:	77 89 00 34 	dextr %d3,%d9,%d8,8
8000820a:	37 09 e1 49 	extr.u %d4,%d9,19,1
8000820e:	b7 03 85 3d 	insert %d3,%d3,0,27,5
80008212:	8f 88 00 20 	sh %d2,%d8,8
80008216:	74 54       	st.w [%a5],%d4
80008218:	59 52 0c 00 	st.w [%a5]12,%d2
8000821c:	59 53 10 00 	st.w [%a5]16,%d3
80008220:	00 90       	ret 

80008222 <__fpcmp_parts_d>:
80008222:	54 43       	ld.w %d3,[%a4]
80008224:	82 12       	mov %d2,1
80008226:	bf 23 45 80 	jlt.u %d3,2,800082b0 <__fpcmp_parts_d+0x8e>
8000822a:	54 54       	ld.w %d4,[%a5]
8000822c:	bf 24 42 80 	jlt.u %d4,2,800082b0 <__fpcmp_parts_d+0x8e>
80008230:	8b 44 00 52 	eq %d5,%d4,4
80008234:	8b 43 00 54 	and.eq %d5,%d3,4
80008238:	df 05 50 80 	jne %d5,0,800082d8 <__fpcmp_parts_d+0xb6>
8000823c:	df 43 45 00 	jeq %d3,4,800082c6 <__fpcmp_parts_d+0xa4>
80008240:	df 44 3d 00 	jeq %d4,4,800082ba <__fpcmp_parts_d+0x98>
80008244:	8b 24 00 52 	eq %d5,%d4,2
80008248:	8b 23 00 54 	and.eq %d5,%d3,2
8000824c:	82 02       	mov %d2,0
8000824e:	df 05 31 80 	jne %d5,0,800082b0 <__fpcmp_parts_d+0x8e>
80008252:	df 23 34 00 	jeq %d3,2,800082ba <__fpcmp_parts_d+0x98>
80008256:	19 42 04 00 	ld.w %d2,[%a4]4
8000825a:	df 24 2c 00 	jeq %d4,2,800082b2 <__fpcmp_parts_d+0x90>
8000825e:	19 53 04 00 	ld.w %d3,[%a5]4
80008262:	5f 23 28 80 	jne %d3,%d2,800082b2 <__fpcmp_parts_d+0x90>
80008266:	19 44 08 00 	ld.w %d4,[%a4]8
8000826a:	19 53 08 00 	ld.w %d3,[%a5]8
8000826e:	3f 43 22 00 	jlt %d3,%d4,800082b2 <__fpcmp_parts_d+0x90>
80008272:	3f 34 2f 00 	jlt %d4,%d3,800082d0 <__fpcmp_parts_d+0xae>
80008276:	19 45 10 00 	ld.w %d5,[%a4]16
8000827a:	19 56 10 00 	ld.w %d6,[%a5]16
8000827e:	19 40 0c 00 	ld.w %d0,[%a4]12
80008282:	0b 65 00 41 	eq %d4,%d5,%d6
80008286:	19 57 0c 00 	ld.w %d7,[%a5]12
8000828a:	02 43       	mov %d3,%d4
8000828c:	0b 07 50 32 	and.ge.u %d3,%d7,%d0
80008290:	0b 70 50 42 	and.ge.u %d4,%d0,%d7
80008294:	0b 65 a0 32 	or.lt.u %d3,%d5,%d6
80008298:	0b 56 a0 42 	or.lt.u %d4,%d6,%d5
8000829c:	82 f5       	mov %d5,-1
8000829e:	ab 15 a0 52 	seln %d5,%d2,%d5,1
800082a2:	82 16       	mov %d6,1
800082a4:	ab f6 bf 22 	seln %d2,%d2,%d6,-1
800082a8:	ab 05 a0 44 	seln %d4,%d4,%d5,0
800082ac:	2b 24 40 23 	sel %d2,%d3,%d4,%d2
800082b0:	00 90       	ret 
800082b2:	82 13       	mov %d3,1
800082b4:	ab f3 bf 22 	seln %d2,%d2,%d3,-1
800082b8:	00 90       	ret 
800082ba:	19 53 04 00 	ld.w %d3,[%a5]4
800082be:	82 f2       	mov %d2,-1
800082c0:	ab 12 a0 23 	seln %d2,%d3,%d2,1
800082c4:	00 90       	ret 
800082c6:	19 43 04 00 	ld.w %d3,[%a4]4
800082ca:	ab f2 bf 23 	seln %d2,%d3,%d2,-1
800082ce:	00 90       	ret 
800082d0:	82 f3       	mov %d3,-1
800082d2:	ab 13 a0 22 	seln %d2,%d2,%d3,1
800082d6:	00 90       	ret 
800082d8:	19 53 04 00 	ld.w %d3,[%a5]4
800082dc:	19 42 04 00 	ld.w %d2,[%a4]4
800082e0:	0b 23 80 20 	sub %d2,%d3,%d2
800082e4:	00 90       	ret 

800082e6 <__pack_f>:
800082e6:	54 44       	ld.w %d4,[%a4]
800082e8:	19 43 0c 00 	ld.w %d3,[%a4]12
800082ec:	19 47 04 00 	ld.w %d7,[%a4]4
800082f0:	bf 24 3f 80 	jlt.u %d4,2,8000836e <__pack_f+0x88>
800082f4:	7b 00 f8 57 	movh %d5,32640
800082f8:	82 06       	mov %d6,0
800082fa:	df 44 09 00 	jeq %d4,4,8000830c <__pack_f+0x26>
800082fe:	8b 03 00 22 	eq %d2,%d3,0
80008302:	8b 24 e0 24 	or.eq %d2,%d4,2
80008306:	82 05       	mov %d5,0
80008308:	df 02 08 00 	jeq %d2,0,80008318 <__pack_f+0x32>
8000830c:	8f f7 01 70 	sh %d7,%d7,31
80008310:	0f 56 a0 20 	or %d2,%d6,%d5
80008314:	a6 72       	or %d2,%d7
80008316:	00 90       	ret 
80008318:	19 42 08 00 	ld.w %d2,[%a4]8
8000831c:	8b 22 98 42 	ge %d4,%d2,-126
80008320:	df 04 33 00 	jeq %d4,0,80008386 <__pack_f+0xa0>
80008324:	8b 02 88 42 	ge %d4,%d2,128
80008328:	7b 00 f8 57 	movh %d5,32640
8000832c:	df 04 f0 ff 	jne %d4,0,8000830c <__pack_f+0x26>
80008330:	8f f3 07 51 	and %d5,%d3,127
80008334:	8f 03 08 41 	and %d4,%d3,128
80008338:	8b 05 24 52 	ne %d5,%d5,64
8000833c:	ab 03 04 44 	cadd %d4,%d4,%d3,64
80008340:	1b f3 03 30 	addi %d3,%d3,63
80008344:	2b 43 40 35 	sel %d3,%d5,%d3,%d4
80008348:	1b f2 07 50 	addi %d5,%d2,127
8000834c:	bf 03 0c 00 	jlt %d3,0,80008364 <__pack_f+0x7e>
80008350:	37 03 f7 63 	extr.u %d6,%d3,7,23
80008354:	8f 75 01 50 	sh %d5,%d5,23
80008358:	8f f7 01 70 	sh %d7,%d7,31
8000835c:	0f 56 a0 20 	or %d2,%d6,%d5
80008360:	a6 72       	or %d2,%d7
80008362:	00 90       	ret 
80008364:	06 f3       	sh %d3,-1
80008366:	1b 02 08 50 	addi %d5,%d2,128
8000836a:	1d ff f3 ff 	j 80008350 <__pack_f+0x6a>
8000836e:	37 03 f6 33 	extr.u %d3,%d3,7,22
80008372:	7b 00 f8 57 	movh %d5,32640
80008376:	b7 f3 01 6b 	insert %d6,%d3,15,22,1
8000837a:	8f f7 01 70 	sh %d7,%d7,31
8000837e:	0f 56 a0 20 	or %d2,%d6,%d5
80008382:	a6 72       	or %d2,%d7
80008384:	00 90       	ret 
80008386:	8b 22 18 21 	rsub %d2,%d2,-126
8000838a:	8b a2 81 42 	ge %d4,%d2,26
8000838e:	df 04 bf ff 	jne %d4,0,8000830c <__pack_f+0x26>
80008392:	82 f5       	mov %d5,-1
80008394:	8b 02 00 41 	rsub %d4,%d2,0
80008398:	0f 25 00 20 	sh %d2,%d5,%d2
8000839c:	0f 43 00 40 	sh %d4,%d3,%d4
800083a0:	0f 23 e0 30 	andn %d3,%d3,%d2
800083a4:	8b 03 00 45 	or.ne %d4,%d3,0
800083a8:	8f f4 07 31 	and %d3,%d4,127
800083ac:	8b 03 04 32 	eq %d3,%d3,64
800083b0:	df 03 0e 80 	jne %d3,0,800083cc <__pack_f+0xe6>
800083b4:	1b f4 03 20 	addi %d2,%d4,63
800083b8:	7b 00 00 34 	movh %d3,16384
800083bc:	37 02 f7 63 	extr.u %d6,%d2,7,23
800083c0:	0b 32 50 21 	ge.u %d2,%d2,%d3
800083c4:	8f 72 01 50 	sh %d5,%d2,23
800083c8:	1d ff a2 ff 	j 8000830c <__pack_f+0x26>
800083cc:	1b 04 04 30 	addi %d3,%d4,64
800083d0:	7b 00 00 24 	movh %d2,16384
800083d4:	37 03 f7 63 	extr.u %d6,%d3,7,23
800083d8:	0b 23 50 31 	ge.u %d3,%d3,%d2
800083dc:	8f 73 01 50 	sh %d5,%d3,23
800083e0:	6f 74 96 ff 	jnz.t %d4,7,8000830c <__pack_f+0x26>
800083e4:	0b 24 50 21 	ge.u %d2,%d4,%d2
800083e8:	37 04 f7 63 	extr.u %d6,%d4,7,23
800083ec:	8f 72 01 50 	sh %d5,%d2,23
800083f0:	1d ff 8e ff 	j 8000830c <__pack_f+0x26>

800083f4 <malloc>:
800083f4:	91 00 00 46 	movh.a %a4,24576
800083f8:	99 44 68 10 	ld.a %a4,[%a4]1128 <60000468 <_impure_ptr>>
800083fc:	6d 00 03 00 	call 80008402 <_malloc_r>
80008400:	00 90       	ret 

80008402 <_malloc_r>:
80008402:	1b b4 00 20 	addi %d2,%d4,11
80008406:	8b 72 a1 32 	ge.u %d3,%d2,23
8000840a:	40 4e       	mov.aa %a14,%a4
8000840c:	df 03 32 80 	jne %d3,0,80008470 <_malloc_r+0x6e>
80008410:	8b 14 a1 42 	ge.u %d4,%d4,17
80008414:	df 04 db 80 	jne %d4,0,800085ca <_malloc_r+0x1c8>
80008418:	6d 00 35 03 	call 80008a82 <__malloc_lock>
8000841c:	3b 80 01 30 	mov %d3,24
80008420:	82 26       	mov %d6,2
80008422:	3b 00 01 80 	mov %d8,16
80008426:	91 00 00 d6 	movh.a %a13,24576
8000842a:	d9 dd 10 10 	lea %a13,[%a13]80 <60000050 <__malloc_av_>>
8000842e:	01 d3 00 26 	addsc.a %a2,%a13,%d3,0
80008432:	99 2c 04 00 	ld.a %a12,[%a2]4
80008436:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000843a:	7d 3c ce 00 	jeq.a %a12,%a3,800085d6 <_malloc_r+0x1d4>
8000843e:	99 c2 0c 00 	ld.a %a2,[%a12]12
80008442:	99 c3 08 00 	ld.a %a3,[%a12]8
80008446:	19 c2 04 00 	ld.w %d2,[%a12]4
8000844a:	b5 32 0c 00 	st.a [%a3]12,%a2
8000844e:	8f 32 c0 21 	andn %d2,%d2,3
80008452:	b5 23 08 00 	st.a [%a2]8,%a3
80008456:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
8000845a:	b7 10 21 20 	imask %e2,1,0,1
8000845e:	40 e4       	mov.aa %a4,%a14
80008460:	d9 cc 08 00 	lea %a12,[%a12]8
80008464:	49 22 44 08 	ldmst [%a2]4,%e2
80008468:	6d 00 0e 03 	call 80008a84 <__malloc_unlock>
8000846c:	40 c2       	mov.aa %a2,%a12
8000846e:	00 90       	ret 
80008470:	8f 72 c0 81 	andn %d8,%d2,7
80008474:	0b 48 30 31 	lt.u %d3,%d8,%d4
80008478:	8b 02 20 35 	or.lt %d3,%d2,0
8000847c:	df 03 a7 80 	jne %d3,0,800085ca <_malloc_r+0x1c8>
80008480:	6d 00 01 03 	call 80008a82 <__malloc_lock>
80008484:	8b 88 bf 22 	ge.u %d2,%d8,504
80008488:	df 02 07 02 	jeq %d2,0,80008896 <_malloc_r+0x494>
8000848c:	8f 78 1f 20 	sh %d2,%d8,-9
80008490:	3b 00 20 30 	mov %d3,512
80008494:	3b 00 04 60 	mov %d6,64
80008498:	3b f0 03 50 	mov %d5,63
8000849c:	df 02 61 81 	jne %d2,0,8000875e <_malloc_r+0x35c>
800084a0:	91 00 00 d6 	movh.a %a13,24576
800084a4:	d9 dd 10 10 	lea %a13,[%a13]80 <60000050 <__malloc_av_>>
800084a8:	01 d3 00 36 	addsc.a %a3,%a13,%d3,0
800084ac:	99 3c 04 00 	ld.a %a12,[%a3]4
800084b0:	d9 32 f8 ff 	lea %a2,[%a3]-8
800084b4:	7d c2 0a 80 	jne.a %a2,%a12,800084c8 <_malloc_r+0xc6>
800084b8:	1d 00 13 00 	j 800084de <_malloc_r+0xdc>
800084bc:	ff 02 80 01 	jge %d2,0,800087bc <_malloc_r+0x3ba>
800084c0:	99 cc 0c 00 	ld.a %a12,[%a12]12
800084c4:	7d c2 0d 00 	jeq.a %a2,%a12,800084de <_malloc_r+0xdc>
800084c8:	19 c2 04 00 	ld.w %d2,[%a12]4
800084cc:	8f 32 c0 41 	andn %d4,%d2,3
800084d0:	0b 84 80 20 	sub %d2,%d4,%d8
800084d4:	8b 02 81 32 	ge %d3,%d2,16
800084d8:	df 03 f2 7f 	jeq %d3,0,800084bc <_malloc_r+0xba>
800084dc:	02 56       	mov %d6,%d5
800084de:	99 dc 10 00 	ld.a %a12,[%a13]16 <60000010 <LCF_DSPR1_START+0x10>>
800084e2:	d9 d4 08 00 	lea %a4,[%a13]8 <60000008 <LCF_DSPR1_START+0x8>>
800084e6:	7d 4c 83 00 	jeq.a %a12,%a4,800085ec <_malloc_r+0x1ea>
800084ea:	19 c2 04 00 	ld.w %d2,[%a12]4
800084ee:	8f 32 c0 21 	andn %d2,%d2,3
800084f2:	0b 82 80 30 	sub %d3,%d2,%d8
800084f6:	8b 03 41 42 	lt %d4,%d3,16
800084fa:	df 04 d4 01 	jeq %d4,0,800088a2 <_malloc_r+0x4a0>
800084fe:	b5 d4 14 00 	st.a [%a13]20 <60000014 <LCF_DSPR1_START+0x14>>,%a4
80008502:	b5 d4 10 00 	st.a [%a13]16 <60000010 <LCF_DSPR1_START+0x10>>,%a4
80008506:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
8000850a:	ff 03 a8 7f 	jge %d3,0,8000845a <_malloc_r+0x58>
8000850e:	3b 00 20 30 	mov %d3,512
80008512:	7f 32 6a 81 	jge.u %d2,%d3,800087e6 <_malloc_r+0x3e4>
80008516:	19 d4 04 00 	ld.w %d4,[%a13]4 <60000004 <LCF_DSPR1_START+0x4>>
8000851a:	8f b2 1f 30 	sh %d3,%d2,-5
8000851e:	8f 72 c0 21 	andn %d2,%d2,7
80008522:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
80008526:	1b 82 00 20 	addi %d2,%d2,8
8000852a:	01 d2 00 36 	addsc.a %a3,%a13,%d2,0
8000852e:	d9 d2 04 00 	lea %a2,[%a13]4 <60000004 <LCF_DSPR1_START+0x4>>
80008532:	d4 35       	ld.a %a5,[%a3]
80008534:	74 23       	st.w [%a2],%d3
80008536:	40 32       	mov.aa %a2,%a3
80008538:	b0 82       	add.a %a2,-8
8000853a:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000853e:	b5 c5 08 00 	st.a [%a12]8,%a5
80008542:	f4 3c       	st.a [%a3],%a12
80008544:	b5 5c 0c 00 	st.a [%a5]12,%a12
80008548:	8f e6 3f 40 	sha %d4,%d6,-2
8000854c:	82 12       	mov %d2,1
8000854e:	0f 42 00 20 	sh %d2,%d2,%d4
80008552:	3f 23 56 80 	jlt.u %d3,%d2,800085fe <_malloc_r+0x1fc>
80008556:	0f 32 80 40 	and %d4,%d2,%d3
8000855a:	df 04 0a 80 	jne %d4,0,8000856e <_malloc_r+0x16c>
8000855e:	8f 36 c0 61 	andn %d6,%d6,3
80008562:	06 12       	sh %d2,1
80008564:	0f 32 80 40 	and %d4,%d2,%d3
80008568:	c2 46       	add %d6,4
8000856a:	df 04 fc 7f 	jeq %d4,0,80008562 <_malloc_r+0x160>
8000856e:	8f 36 00 30 	sh %d3,%d6,3
80008572:	01 d3 00 56 	addsc.a %a5,%a13,%d3,0
80008576:	02 67       	mov %d7,%d6
80008578:	40 52       	mov.aa %a2,%a5
8000857a:	99 23 0c 00 	ld.a %a3,[%a2]12
8000857e:	7d 32 62 01 	jeq.a %a2,%a3,80008842 <_malloc_r+0x440>
80008582:	19 33 04 00 	ld.w %d3,[%a3]4
80008586:	d9 36 04 00 	lea %a6,[%a3]4
8000858a:	8f 33 c0 51 	andn %d5,%d3,3
8000858e:	0b 85 80 30 	sub %d3,%d5,%d8
80008592:	40 3c       	mov.aa %a12,%a3
80008594:	8b 03 41 42 	lt %d4,%d3,16
80008598:	d9 33 0c 00 	lea %a3,[%a3]12
8000859c:	d4 33       	ld.a %a3,[%a3]
8000859e:	df 04 5b 01 	jeq %d4,0,80008854 <_malloc_r+0x452>
800085a2:	bf 03 ee 7f 	jlt %d3,0,8000857e <_malloc_r+0x17c>
800085a6:	b7 10 21 20 	imask %e2,1,0,1
800085aa:	01 c5 00 26 	addsc.a %a2,%a12,%d5,0
800085ae:	d9 cc 08 00 	lea %a12,[%a12]8
800085b2:	40 e4       	mov.aa %a4,%a14
800085b4:	49 22 44 08 	ldmst [%a2]4,%e2
800085b8:	d4 c2       	ld.a %a2,[%a12]
800085ba:	b5 23 0c 00 	st.a [%a2]12,%a3
800085be:	b5 32 08 00 	st.a [%a3]8,%a2
800085c2:	6d 00 61 02 	call 80008a84 <__malloc_unlock>
800085c6:	1d 00 06 00 	j 800085d2 <_malloc_r+0x1d0>
800085ca:	3b c0 00 20 	mov %d2,12
800085ce:	a0 0c       	mov.a %a12,0
800085d0:	74 e2       	st.w [%a14],%d2
800085d2:	40 c2       	mov.aa %a2,%a12
800085d4:	00 90       	ret 
800085d6:	99 2c 0c 00 	ld.a %a12,[%a2]12
800085da:	c2 26       	add %d6,2
800085dc:	7d c2 31 ff 	jne.a %a2,%a12,8000843e <_malloc_r+0x3c>
800085e0:	99 dc 10 00 	ld.a %a12,[%a13]16
800085e4:	d9 d4 08 00 	lea %a4,[%a13]8
800085e8:	7d 4c 81 ff 	jne.a %a12,%a4,800084ea <_malloc_r+0xe8>
800085ec:	8f e6 3f 40 	sha %d4,%d6,-2
800085f0:	82 12       	mov %d2,1
800085f2:	19 d3 04 00 	ld.w %d3,[%a13]4
800085f6:	0f 42 00 20 	sh %d2,%d2,%d4
800085fa:	7f 23 ae ff 	jge.u %d3,%d2,80008556 <_malloc_r+0x154>
800085fe:	99 dc 08 00 	ld.a %a12,[%a13]8
80008602:	19 c2 04 00 	ld.w %d2,[%a12]4
80008606:	8f 32 c0 b1 	andn %d11,%d2,3
8000860a:	0b 8b 80 20 	sub %d2,%d11,%d8
8000860e:	8b 02 41 32 	lt %d3,%d2,16
80008612:	0b 8b a0 32 	or.lt.u %d3,%d11,%d8
80008616:	df 03 c0 00 	jeq %d3,0,80008796 <_malloc_r+0x394>
8000861a:	80 c2       	mov.d %d2,%a12
8000861c:	91 00 00 26 	movh.a %a2,24576
80008620:	0b b2 00 c0 	add %d12,%d2,%d11
80008624:	19 22 50 e0 	ld.w %d2,[%a2]1936 <60000790 <__malloc_top_pad>>
80008628:	91 00 00 f6 	movh.a %a15,24576
8000862c:	19 f4 08 10 	ld.w %d4,[%a15]72 <60000048 <__malloc_sbrk_base>>
80008630:	42 82       	add %d2,%d8
80008632:	1b 02 01 a0 	addi %d10,%d2,16
80008636:	1b f2 08 20 	addi %d2,%d2,143
8000863a:	8f f2 c7 21 	andn %d2,%d2,127
8000863e:	8b f4 3f 42 	ne %d4,%d4,-1
80008642:	2b a2 40 a4 	sel %d10,%d4,%d2,%d10
80008646:	02 a4       	mov %d4,%d10
80008648:	40 e4       	mov.aa %a4,%a14
8000864a:	6d 00 71 07 	call 8000952c <_sbrk_r>
8000864e:	80 29       	mov.d %d9,%a2
80008650:	df f9 8a 01 	jeq %d9,-1,80008964 <_malloc_r+0x562>
80008654:	80 c3       	mov.d %d3,%a12
80008656:	80 d4       	mov.d %d4,%a13
80008658:	0b c9 30 21 	lt.u %d2,%d9,%d12
8000865c:	0b 43 10 22 	and.ne %d2,%d3,%d4
80008660:	df 02 82 81 	jne %d2,0,80008964 <_malloc_r+0x562>
80008664:	7b 00 00 d6 	movh %d13,24576
80008668:	60 d2       	mov.a %a2,%d13
8000866a:	d9 22 60 d0 	lea %a2,[%a2]1888
8000866e:	54 22       	ld.w %d2,[%a2]
80008670:	60 d2       	mov.a %a2,%d13
80008672:	42 a2       	add %d2,%d10
80008674:	59 22 60 d0 	st.w [%a2]1888,%d2
80008678:	5f 9c 64 01 	jeq %d12,%d9,80008940 <_malloc_r+0x53e>
8000867c:	19 f3 08 10 	ld.w %d3,[%a15]72 <60000048 <__malloc_sbrk_base>>
80008680:	df f3 6e 01 	jeq %d3,-1,8000895c <_malloc_r+0x55a>
80008684:	0b c9 80 c0 	sub %d12,%d9,%d12
80008688:	42 c2       	add %d2,%d12
8000868a:	60 d2       	mov.a %a2,%d13
8000868c:	59 22 60 d0 	st.w [%a2]1888,%d2
80008690:	8f 79 00 e1 	and %d14,%d9,7
80008694:	df 0e 78 01 	jeq %d14,0,80008984 <_malloc_r+0x582>
80008698:	8b 8e 00 21 	rsub %d2,%d14,8
8000869c:	42 29       	add %d9,%d2
8000869e:	42 9a       	add %d10,%d9
800086a0:	8b 8e 08 21 	rsub %d2,%d14,136
800086a4:	a2 a2       	sub %d2,%d10
800086a6:	8f f2 07 c1 	and %d12,%d2,127
800086aa:	02 c4       	mov %d4,%d12
800086ac:	40 e4       	mov.aa %a4,%a14
800086ae:	6d 00 3f 07 	call 8000952c <_sbrk_r>
800086b2:	80 22       	mov.d %d2,%a2
800086b4:	df f2 bd 01 	jeq %d2,-1,80008a2e <_malloc_r+0x62c>
800086b8:	a2 92       	sub %d2,%d9
800086ba:	0b c2 00 a0 	add %d10,%d2,%d12
800086be:	60 d2       	mov.a %a2,%d13
800086c0:	8f 1a 40 31 	or %d3,%d10,1
800086c4:	d9 22 60 d0 	lea %a2,[%a2]1888
800086c8:	54 22       	ld.w %d2,[%a2]
800086ca:	60 d2       	mov.a %a2,%d13
800086cc:	42 c2       	add %d2,%d12
800086ce:	59 d9 08 00 	st.w [%a13]8,%d9
800086d2:	59 22 60 d0 	st.w [%a2]1888,%d2
800086d6:	60 92       	mov.a %a2,%d9
800086d8:	59 23 04 00 	st.w [%a2]4,%d3
800086dc:	7d dc 7f 01 	jeq.a %a12,%a13,800089da <_malloc_r+0x5d8>
800086e0:	8b 0b a1 32 	ge.u %d3,%d11,16
800086e4:	df 03 7e 01 	jeq %d3,0,800089e0 <_malloc_r+0x5de>
800086e8:	19 c4 04 00 	ld.w %d4,[%a12]4
800086ec:	1b 4b ff 3f 	addi %d3,%d11,-12
800086f0:	8f 73 c0 31 	andn %d3,%d3,7
800086f4:	8f 14 00 41 	and %d4,%d4,1
800086f8:	a6 34       	or %d4,%d3
800086fa:	d9 c2 04 00 	lea %a2,[%a12]4
800086fe:	74 24       	st.w [%a2],%d4
80008700:	82 54       	mov %d4,5
80008702:	01 c3 00 26 	addsc.a %a2,%a12,%d3,0
80008706:	8b 03 a1 32 	ge.u %d3,%d3,16
8000870a:	59 24 04 00 	st.w [%a2]4,%d4
8000870e:	59 24 08 00 	st.w [%a2]8,%d4
80008712:	df 03 94 81 	jne %d3,0,80008a3a <_malloc_r+0x638>
80008716:	60 92       	mov.a %a2,%d9
80008718:	60 9c       	mov.a %a12,%d9
8000871a:	19 23 04 00 	ld.w %d3,[%a2]4
8000871e:	91 00 00 26 	movh.a %a2,24576
80008722:	19 24 4c e0 	ld.w %d4,[%a2]1932 <6000078c <__malloc_max_sbrked_mem>>
80008726:	7f 24 04 80 	jge.u %d4,%d2,8000872e <_malloc_r+0x32c>
8000872a:	59 22 4c e0 	st.w [%a2]1932 <6000078c <__malloc_max_sbrked_mem>>,%d2
8000872e:	91 00 00 26 	movh.a %a2,24576
80008732:	19 24 48 e0 	ld.w %d4,[%a2]1928 <60000788 <__malloc_max_total_mem>>
80008736:	7f 24 04 80 	jge.u %d4,%d2,8000873e <_malloc_r+0x33c>
8000873a:	59 22 48 e0 	st.w [%a2]1928 <60000788 <__malloc_max_total_mem>>,%d2
8000873e:	8f 33 c0 31 	andn %d3,%d3,3
80008742:	0b 83 80 20 	sub %d2,%d3,%d8
80008746:	0b 83 30 41 	lt.u %d4,%d3,%d8
8000874a:	8b 02 21 45 	or.lt %d4,%d2,16
8000874e:	df 04 24 00 	jeq %d4,0,80008796 <_malloc_r+0x394>
80008752:	40 e4       	mov.aa %a4,%a14
80008754:	6d 00 98 01 	call 80008a84 <__malloc_unlock>
80008758:	a0 0c       	mov.a %a12,0
8000875a:	1d ff 3c ff 	j 800085d2 <_malloc_r+0x1d0>
8000875e:	8f a8 1f 60 	sh %d6,%d8,-6
80008762:	1b 86 03 50 	addi %d5,%d6,56
80008766:	1b 96 03 60 	addi %d6,%d6,57
8000876a:	8f 36 00 30 	sh %d3,%d6,3
8000876e:	bf 52 99 fe 	jlt.u %d2,5,800084a0 <_malloc_r+0x9e>
80008772:	8b 52 a1 32 	ge.u %d3,%d2,21
80008776:	df 03 bc 00 	jeq %d3,0,800088ee <_malloc_r+0x4ec>
8000877a:	8b 52 a5 32 	ge.u %d3,%d2,85
8000877e:	df 03 20 81 	jne %d3,0,800089be <_malloc_r+0x5bc>
80008782:	8f 48 1f 60 	sh %d6,%d8,-12
80008786:	1b e6 06 50 	addi %d5,%d6,110
8000878a:	1b f6 06 60 	addi %d6,%d6,111
8000878e:	8f 36 00 30 	sh %d3,%d6,3
80008792:	1d ff 87 fe 	j 800084a0 <_malloc_r+0x9e>
80008796:	8f 18 40 31 	or %d3,%d8,1
8000879a:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000879e:	8f 12 40 21 	or %d2,%d2,1
800087a2:	59 c3 04 00 	st.w [%a12]4,%d3
800087a6:	b5 d2 08 00 	st.a [%a13]8,%a2
800087aa:	59 22 04 00 	st.w [%a2]4,%d2
800087ae:	40 e4       	mov.aa %a4,%a14
800087b0:	6d 00 6a 01 	call 80008a84 <__malloc_unlock>
800087b4:	d9 cc 08 00 	lea %a12,[%a12]8
800087b8:	40 c2       	mov.aa %a2,%a12
800087ba:	00 90       	ret 
800087bc:	99 c2 0c 00 	ld.a %a2,[%a12]12
800087c0:	99 c3 08 00 	ld.a %a3,[%a12]8
800087c4:	b7 10 21 20 	imask %e2,1,0,1
800087c8:	40 e4       	mov.aa %a4,%a14
800087ca:	b5 32 0c 00 	st.a [%a3]12,%a2
800087ce:	b5 23 08 00 	st.a [%a2]8,%a3
800087d2:	01 c4 00 26 	addsc.a %a2,%a12,%d4,0
800087d6:	d9 cc 08 00 	lea %a12,[%a12]8
800087da:	49 22 44 08 	ldmst [%a2]4,%e2
800087de:	6d 00 53 01 	call 80008a84 <__malloc_unlock>
800087e2:	1d ff 45 fe 	j 8000846c <_malloc_r+0x6a>
800087e6:	8f 72 1f 30 	sh %d3,%d2,-9
800087ea:	bf 53 78 80 	jlt.u %d3,5,800088da <_malloc_r+0x4d8>
800087ee:	8b 53 a1 42 	ge.u %d4,%d3,21
800087f2:	df 04 d8 80 	jne %d4,0,800089a2 <_malloc_r+0x5a0>
800087f6:	1b b3 05 50 	addi %d5,%d3,91
800087fa:	1b c3 05 30 	addi %d3,%d3,92
800087fe:	8f 33 00 40 	sh %d4,%d3,3
80008802:	01 d4 00 26 	addsc.a %a2,%a13,%d4,0
80008806:	40 23       	mov.aa %a3,%a2
80008808:	d4 33       	ld.a %a3,[%a3]
8000880a:	b0 82       	add.a %a2,-8
8000880c:	7d 32 b2 00 	jeq.a %a2,%a3,80008970 <_malloc_r+0x56e>
80008810:	19 33 04 00 	ld.w %d3,[%a3]4
80008814:	8f 33 c0 31 	andn %d3,%d3,3
80008818:	7f 32 07 80 	jge.u %d2,%d3,80008826 <_malloc_r+0x424>
8000881c:	d9 33 08 00 	lea %a3,[%a3]8
80008820:	d4 33       	ld.a %a3,[%a3]
80008822:	7d 32 f7 ff 	jne.a %a2,%a3,80008810 <_malloc_r+0x40e>
80008826:	99 32 0c 00 	ld.a %a2,[%a3]12
8000882a:	19 d3 04 00 	ld.w %d3,[%a13]4
8000882e:	b5 c2 0c 00 	st.a [%a12]12,%a2
80008832:	b5 c3 08 00 	st.a [%a12]8,%a3
80008836:	b5 2c 08 00 	st.a [%a2]8,%a12
8000883a:	b5 3c 0c 00 	st.a [%a3]12,%a12
8000883e:	1d ff 85 fe 	j 80008548 <_malloc_r+0x146>
80008842:	c2 17       	add %d7,1
80008844:	8f 37 00 31 	and %d3,%d7,3
80008848:	d9 22 08 00 	lea %a2,[%a2]8
8000884c:	df 03 97 fe 	jne %d3,0,8000857a <_malloc_r+0x178>
80008850:	1d 00 5d 00 	j 8000890a <_malloc_r+0x508>
80008854:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
80008858:	8f 18 40 81 	or %d8,%d8,1
8000885c:	99 c5 08 00 	ld.a %a5,[%a12]8
80008860:	8f 13 40 21 	or %d2,%d3,1
80008864:	74 68       	st.w [%a6],%d8
80008866:	b5 53 0c 00 	st.a [%a5]12,%a3
8000886a:	b5 35 08 00 	st.a [%a3]8,%a5
8000886e:	b5 d2 14 00 	st.a [%a13]20,%a2
80008872:	b5 d2 10 00 	st.a [%a13]16,%a2
80008876:	b5 24 0c 00 	st.a [%a2]12,%a4
8000887a:	b5 24 08 00 	st.a [%a2]8,%a4
8000887e:	59 22 04 00 	st.w [%a2]4,%d2
80008882:	01 c5 00 26 	addsc.a %a2,%a12,%d5,0
80008886:	40 e4       	mov.aa %a4,%a14
80008888:	74 23       	st.w [%a2],%d3
8000888a:	6d 00 fd 00 	call 80008a84 <__malloc_unlock>
8000888e:	d9 cc 08 00 	lea %a12,[%a12]8
80008892:	1d ff a0 fe 	j 800085d2 <_malloc_r+0x1d0>
80008896:	8f d8 1f 60 	sh %d6,%d8,-3
8000889a:	1b 88 00 30 	addi %d3,%d8,8
8000889e:	1d ff c4 fd 	j 80008426 <_malloc_r+0x24>
800088a2:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
800088a6:	8f 18 40 81 	or %d8,%d8,1
800088aa:	8f 13 40 41 	or %d4,%d3,1
800088ae:	59 c8 04 00 	st.w [%a12]4,%d8
800088b2:	b5 d2 14 00 	st.a [%a13]20,%a2
800088b6:	b5 d2 10 00 	st.a [%a13]16,%a2
800088ba:	b5 24 0c 00 	st.a [%a2]12,%a4
800088be:	b5 24 08 00 	st.a [%a2]8,%a4
800088c2:	59 24 04 00 	st.w [%a2]4,%d4
800088c6:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
800088ca:	40 e4       	mov.aa %a4,%a14
800088cc:	74 23       	st.w [%a2],%d3
800088ce:	6d 00 db 00 	call 80008a84 <__malloc_unlock>
800088d2:	d9 cc 08 00 	lea %a12,[%a12]8
800088d6:	1d ff 7e fe 	j 800085d2 <_malloc_r+0x1d0>
800088da:	8f a2 1f 30 	sh %d3,%d2,-6
800088de:	1b 83 03 50 	addi %d5,%d3,56
800088e2:	1b 93 03 30 	addi %d3,%d3,57
800088e6:	8f 33 00 40 	sh %d4,%d3,3
800088ea:	1d ff 8c ff 	j 80008802 <_malloc_r+0x400>
800088ee:	1b c2 05 60 	addi %d6,%d2,92
800088f2:	1b b2 05 50 	addi %d5,%d2,91
800088f6:	8f 36 00 30 	sh %d3,%d6,3
800088fa:	1d ff d3 fd 	j 800084a0 <_malloc_r+0x9e>
800088fe:	40 52       	mov.aa %a2,%a5
80008900:	d4 22       	ld.a %a2,[%a2]
80008902:	b0 85       	add.a %a5,-8
80008904:	c2 f6       	add %d6,-1
80008906:	7d 52 ba 80 	jne.a %a2,%a5,80008a7a <_malloc_r+0x678>
8000890a:	8f 36 00 31 	and %d3,%d6,3
8000890e:	df 03 f8 ff 	jne %d3,0,800088fe <_malloc_r+0x4fc>
80008912:	19 d3 04 00 	ld.w %d3,[%a13]4
80008916:	d9 d2 04 00 	lea %a2,[%a13]4
8000891a:	0f 23 e0 30 	andn %d3,%d3,%d2
8000891e:	74 23       	st.w [%a2],%d3
80008920:	06 12       	sh %d2,1
80008922:	1b f2 ff 4f 	addi %d4,%d2,-1
80008926:	3f 34 06 80 	jlt.u %d4,%d3,80008932 <_malloc_r+0x530>
8000892a:	1d ff 6a fe 	j 800085fe <_malloc_r+0x1fc>
8000892e:	c2 47       	add %d7,4
80008930:	06 12       	sh %d2,1
80008932:	0f 32 80 40 	and %d4,%d2,%d3
80008936:	df 04 fc 7f 	jeq %d4,0,8000892e <_malloc_r+0x52c>
8000893a:	02 76       	mov %d6,%d7
8000893c:	1d ff 19 fe 	j 8000856e <_malloc_r+0x16c>
80008940:	8f fc 07 31 	and %d3,%d12,127
80008944:	df 03 9c fe 	jne %d3,0,8000867c <_malloc_r+0x27a>
80008948:	0b ab 00 30 	add %d3,%d11,%d10
8000894c:	99 dc 08 00 	ld.a %a12,[%a13]8
80008950:	8f 13 40 31 	or %d3,%d3,1
80008954:	59 c3 04 00 	st.w [%a12]4,%d3
80008958:	1d ff e3 fe 	j 8000871e <_malloc_r+0x31c>
8000895c:	59 f9 08 10 	st.w [%a15]72,%d9
80008960:	1d ff 98 fe 	j 80008690 <_malloc_r+0x28e>
80008964:	99 dc 08 00 	ld.a %a12,[%a13]8
80008968:	19 c3 04 00 	ld.w %d3,[%a12]4
8000896c:	1d ff e9 fe 	j 8000873e <_malloc_r+0x33c>
80008970:	19 d3 04 00 	ld.w %d3,[%a13]4
80008974:	86 e5       	sha %d5,-2
80008976:	d7 13 01 35 	insert %d3,%d3,1,%d5,1
8000897a:	d9 d5 04 00 	lea %a5,[%a13]4
8000897e:	74 53       	st.w [%a5],%d3
80008980:	1d ff 57 ff 	j 8000882e <_malloc_r+0x42c>
80008984:	0b a9 00 20 	add %d2,%d9,%d10
80008988:	32 52       	rsub %d2
8000898a:	8f f2 07 c1 	and %d12,%d2,127
8000898e:	02 c4       	mov %d4,%d12
80008990:	40 e4       	mov.aa %a4,%a14
80008992:	6d 00 cd 05 	call 8000952c <_sbrk_r>
80008996:	80 22       	mov.d %d2,%a2
80008998:	df f2 90 fe 	jne %d2,-1,800086b8 <_malloc_r+0x2b6>
8000899c:	82 0c       	mov %d12,0
8000899e:	1d ff 90 fe 	j 800086be <_malloc_r+0x2bc>
800089a2:	8b 53 a5 42 	ge.u %d4,%d3,85
800089a6:	df 04 22 80 	jne %d4,0,800089ea <_malloc_r+0x5e8>
800089aa:	8f 42 1f 30 	sh %d3,%d2,-12
800089ae:	1b e3 06 50 	addi %d5,%d3,110
800089b2:	1b f3 06 30 	addi %d3,%d3,111
800089b6:	8f 33 00 40 	sh %d4,%d3,3
800089ba:	1d ff 24 ff 	j 80008802 <_malloc_r+0x400>
800089be:	8b 52 b5 32 	ge.u %d3,%d2,341
800089c2:	df 03 22 80 	jne %d3,0,80008a06 <_malloc_r+0x604>
800089c6:	8f 18 1f 60 	sh %d6,%d8,-15
800089ca:	1b 76 07 50 	addi %d5,%d6,119
800089ce:	1b 86 07 60 	addi %d6,%d6,120
800089d2:	8f 36 00 30 	sh %d3,%d6,3
800089d6:	1d ff 65 fd 	j 800084a0 <_malloc_r+0x9e>
800089da:	60 9c       	mov.a %a12,%d9
800089dc:	1d ff a1 fe 	j 8000871e <_malloc_r+0x31c>
800089e0:	82 12       	mov %d2,1
800089e2:	59 22 04 00 	st.w [%a2]4,%d2
800089e6:	1d ff b6 fe 	j 80008752 <_malloc_r+0x350>
800089ea:	8b 53 b5 42 	ge.u %d4,%d3,341
800089ee:	df 04 34 80 	jne %d4,0,80008a56 <_malloc_r+0x654>
800089f2:	8f 12 1f 30 	sh %d3,%d2,-15
800089f6:	1b 73 07 50 	addi %d5,%d3,119
800089fa:	1b 83 07 30 	addi %d3,%d3,120
800089fe:	8f 33 00 40 	sh %d4,%d3,3
80008a02:	1d ff 00 ff 	j 80008802 <_malloc_r+0x400>
80008a06:	3b 50 55 40 	mov %d4,1365
80008a0a:	3b 80 3f 30 	mov %d3,1016
80008a0e:	3b f0 07 60 	mov %d6,127
80008a12:	3b e0 07 50 	mov %d5,126
80008a16:	7f 42 45 fd 	jge.u %d2,%d4,800084a0 <_malloc_r+0x9e>
80008a1a:	8f e8 1e 60 	sh %d6,%d8,-18
80008a1e:	1b c6 07 50 	addi %d5,%d6,124
80008a22:	1b d6 07 60 	addi %d6,%d6,125
80008a26:	8f 36 00 30 	sh %d3,%d6,3
80008a2a:	1d ff 3b fd 	j 800084a0 <_malloc_r+0x9e>
80008a2e:	c2 8e       	add %d14,-8
80008a30:	42 ea       	add %d10,%d14
80008a32:	a2 9a       	sub %d10,%d9
80008a34:	82 0c       	mov %d12,0
80008a36:	1d ff 44 fe 	j 800086be <_malloc_r+0x2bc>
80008a3a:	d9 c5 08 00 	lea %a5,[%a12]8
80008a3e:	40 e4       	mov.aa %a4,%a14
80008a40:	6d 00 00 06 	call 80009640 <_free_r>
80008a44:	99 dc 08 00 	ld.a %a12,[%a13]8
80008a48:	60 d2       	mov.a %a2,%d13
80008a4a:	19 c3 04 00 	ld.w %d3,[%a12]4
80008a4e:	19 22 60 d0 	ld.w %d2,[%a2]1888
80008a52:	1d ff 66 fe 	j 8000871e <_malloc_r+0x31c>
80008a56:	3b 50 55 70 	mov %d7,1365
80008a5a:	3b 80 3f 40 	mov %d4,1016
80008a5e:	3b e0 07 50 	mov %d5,126
80008a62:	7f 73 d0 fe 	jge.u %d3,%d7,80008802 <_malloc_r+0x400>
80008a66:	8f e2 1e 30 	sh %d3,%d2,-18
80008a6a:	1b c3 07 50 	addi %d5,%d3,124
80008a6e:	1b d3 07 30 	addi %d3,%d3,125
80008a72:	8f 33 00 40 	sh %d4,%d3,3
80008a76:	1d ff c6 fe 	j 80008802 <_malloc_r+0x400>
80008a7a:	19 d3 04 00 	ld.w %d3,[%a13]4
80008a7e:	1d ff 51 ff 	j 80008920 <_malloc_r+0x51e>

80008a82 <__malloc_lock>:
80008a82:	00 90       	ret 

80008a84 <__malloc_unlock>:
80008a84:	00 90       	ret 

80008a86 <__sflush_r>:
80008a86:	c9 53 0c 00 	ld.h %d3,[%a5]12
80008a8a:	40 4d       	mov.aa %a13,%a4
80008a8c:	40 5c       	mov.aa %a12,%a5
80008a8e:	6f 33 41 80 	jnz.t %d3,3,80008b10 <__sflush_r+0x8a>
80008a92:	b7 f3 81 45 	insert %d4,%d3,15,11,1
80008a96:	19 52 04 00 	ld.w %d2,[%a5]4
80008a9a:	f9 54 0c 00 	st.h [%a5]12,%d4
80008a9e:	bf 12 65 00 	jlt %d2,1,80008b68 <__sflush_r+0xe2>
80008aa2:	99 c2 28 00 	ld.a %a2,[%a12]40
80008aa6:	bd 02 65 00 	jz.a %a2,80008b70 <__sflush_r+0xea>
80008aaa:	82 02       	mov %d2,0
80008aac:	54 d8       	ld.w %d8,[%a13]
80008aae:	99 c5 1c 00 	ld.a %a5,[%a12]28
80008ab2:	74 d2       	st.w [%a13],%d2
80008ab4:	6f c3 60 80 	jnz.t %d3,12,80008b74 <__sflush_r+0xee>
80008ab8:	82 15       	mov %d5,1
80008aba:	82 04       	mov %d4,0
80008abc:	40 d4       	mov.aa %a4,%a13
80008abe:	2d 02 00 00 	calli %a2
80008ac2:	df f2 95 00 	jeq %d2,-1,80008bec <__sflush_r+0x166>
80008ac6:	99 c2 28 00 	ld.a %a2,[%a12]40
80008aca:	c9 c4 0c 00 	ld.h %d4,[%a12]12
80008ace:	6f 24 0c 00 	jz.t %d4,2,80008ae6 <__sflush_r+0x60>
80008ad2:	19 c3 04 00 	ld.w %d3,[%a12]4
80008ad6:	a2 32       	sub %d2,%d3
80008ad8:	19 c3 30 00 	ld.w %d3,[%a12]48
80008adc:	df 03 05 00 	jeq %d3,0,80008ae6 <__sflush_r+0x60>
80008ae0:	19 c3 3c 00 	ld.w %d3,[%a12]60
80008ae4:	a2 32       	sub %d2,%d3
80008ae6:	99 c5 1c 00 	ld.a %a5,[%a12]28
80008aea:	82 05       	mov %d5,0
80008aec:	02 24       	mov %d4,%d2
80008aee:	40 d4       	mov.aa %a4,%a13
80008af0:	2d 02 00 00 	calli %a2
80008af4:	df f2 44 80 	jne %d2,-1,80008b7c <__sflush_r+0xf6>
80008af8:	54 d4       	ld.w %d4,[%a13]
80008afa:	8b e4 61 32 	lt.u %d3,%d4,30
80008afe:	df 03 5f 80 	jne %d3,0,80008bbc <__sflush_r+0x136>
80008b02:	c9 c3 0c 00 	ld.h %d3,[%a12]12
80008b06:	8f 03 44 31 	or %d3,%d3,64
80008b0a:	f9 c3 0c 00 	st.h [%a12]12,%d3
80008b0e:	00 90       	ret 
80008b10:	19 59 10 00 	ld.w %d9,[%a5]16
80008b14:	df 09 2e 00 	jeq %d9,0,80008b70 <__sflush_r+0xea>
80008b18:	54 52       	ld.w %d2,[%a5]
80008b1a:	74 59       	st.w [%a5],%d9
80008b1c:	0b 92 80 80 	sub %d8,%d2,%d9
80008b20:	8f 33 00 21 	and %d2,%d3,3
80008b24:	82 03       	mov %d3,0
80008b26:	df 02 04 80 	jne %d2,0,80008b2e <__sflush_r+0xa8>
80008b2a:	19 53 14 00 	ld.w %d3,[%a5]20
80008b2e:	59 c3 08 00 	st.w [%a12]8,%d3
80008b32:	ff 18 08 00 	jge %d8,1,80008b42 <__sflush_r+0xbc>
80008b36:	1d 00 1d 00 	j 80008b70 <__sflush_r+0xea>
80008b3a:	a2 28       	sub %d8,%d2
80008b3c:	42 29       	add %d9,%d2
80008b3e:	bf 18 19 00 	jlt %d8,1,80008b70 <__sflush_r+0xea>
80008b42:	99 c2 24 00 	ld.a %a2,[%a12]36
80008b46:	99 c5 1c 00 	ld.a %a5,[%a12]28
80008b4a:	60 96       	mov.a %a6,%d9
80008b4c:	02 84       	mov %d4,%d8
80008b4e:	40 d4       	mov.aa %a4,%a13
80008b50:	2d 02 00 00 	calli %a2
80008b54:	ff 12 f3 7f 	jge %d2,1,80008b3a <__sflush_r+0xb4>
80008b58:	c9 c2 0c 00 	ld.h %d2,[%a12]12
80008b5c:	8f 02 44 21 	or %d2,%d2,64
80008b60:	f9 c2 0c 00 	st.h [%a12]12,%d2
80008b64:	82 f2       	mov %d2,-1
80008b66:	00 90       	ret 
80008b68:	19 52 3c 00 	ld.w %d2,[%a5]60
80008b6c:	ff 12 9b 7f 	jge %d2,1,80008aa2 <__sflush_r+0x1c>
80008b70:	82 02       	mov %d2,0
80008b72:	00 90       	ret 
80008b74:	19 c2 10 10 	ld.w %d2,[%a12]80
80008b78:	1d ff ab ff 	j 80008ace <__sflush_r+0x48>
80008b7c:	c9 c3 0c 00 	ld.h %d3,[%a12]12
80008b80:	b7 03 81 45 	insert %d4,%d3,0,11,1
80008b84:	f9 c4 0c 00 	st.h [%a12]12,%d4
80008b88:	82 04       	mov %d4,0
80008b8a:	59 c4 04 00 	st.w [%a12]4,%d4
80008b8e:	19 c4 10 00 	ld.w %d4,[%a12]16
80008b92:	74 c4       	st.w [%a12],%d4
80008b94:	6f c3 04 00 	jz.t %d3,12,80008b9c <__sflush_r+0x116>
80008b98:	59 c2 10 10 	st.w [%a12]80,%d2
80008b9c:	99 c5 30 00 	ld.a %a5,[%a12]48
80008ba0:	74 d8       	st.w [%a13],%d8
80008ba2:	bd 05 e7 7f 	jz.a %a5,80008b70 <__sflush_r+0xea>
80008ba6:	d9 c2 00 10 	lea %a2,[%a12]64
80008baa:	7d 25 05 00 	jeq.a %a5,%a2,80008bb4 <__sflush_r+0x12e>
80008bae:	40 d4       	mov.aa %a4,%a13
80008bb0:	6d 00 48 05 	call 80009640 <_free_r>
80008bb4:	82 02       	mov %d2,0
80008bb6:	59 c2 30 00 	st.w [%a12]48,%d2
80008bba:	00 90       	ret 
80008bbc:	7b 00 fc 5d 	movh %d5,57280
80008bc0:	c2 e5       	add %d5,-2
80008bc2:	57 05 61 54 	extr.u %d5,%d5,%d4,1
80008bc6:	c9 c3 0c 00 	ld.h %d3,[%a12]12
80008bca:	df 05 9e ff 	jne %d5,0,80008b06 <__sflush_r+0x80>
80008bce:	b7 03 81 65 	insert %d6,%d3,0,11,1
80008bd2:	59 c5 04 00 	st.w [%a12]4,%d5
80008bd6:	19 c5 10 00 	ld.w %d5,[%a12]16
80008bda:	74 c5       	st.w [%a12],%d5
80008bdc:	f9 c6 0c 00 	st.h [%a12]12,%d6
80008be0:	6f c3 de 7f 	jz.t %d3,12,80008b9c <__sflush_r+0x116>
80008be4:	df 04 dc ff 	jne %d4,0,80008b9c <__sflush_r+0x116>
80008be8:	1d ff d8 ff 	j 80008b98 <__sflush_r+0x112>
80008bec:	54 d3       	ld.w %d3,[%a13]
80008bee:	df 03 6c 7f 	jeq %d3,0,80008ac6 <__sflush_r+0x40>
80008bf2:	8b d3 01 42 	eq %d4,%d3,29
80008bf6:	8b 63 e1 44 	or.eq %d4,%d3,22
80008bfa:	df 04 05 00 	jeq %d4,0,80008c04 <__sflush_r+0x17e>
80008bfe:	74 d8       	st.w [%a13],%d8
80008c00:	1d ff b8 ff 	j 80008b70 <__sflush_r+0xea>
80008c04:	c9 c3 0c 00 	ld.h %d3,[%a12]12
80008c08:	8f 03 44 31 	or %d3,%d3,64
80008c0c:	f9 c3 0c 00 	st.h [%a12]12,%d3
80008c10:	00 90       	ret 

80008c12 <_fflush_r>:
80008c12:	40 4c       	mov.aa %a12,%a4
80008c14:	40 5d       	mov.aa %a13,%a5
80008c16:	bd 04 06 00 	jz.a %a4,80008c22 <_fflush_r+0x10>
80008c1a:	19 42 34 00 	ld.w %d2,[%a4]52
80008c1e:	df 02 0d 00 	jeq %d2,0,80008c38 <_fflush_r+0x26>
80008c22:	c9 d3 0c 00 	ld.h %d3,[%a13]12
80008c26:	82 02       	mov %d2,0
80008c28:	df 03 03 80 	jne %d3,0,80008c2e <_fflush_r+0x1c>
80008c2c:	00 90       	ret 
80008c2e:	40 d5       	mov.aa %a5,%a13
80008c30:	40 c4       	mov.aa %a4,%a12
80008c32:	6d ff 2a ff 	call 80008a86 <__sflush_r>
80008c36:	00 90       	ret 
80008c38:	6d 00 c3 00 	call 80008dbe <__sinit>
80008c3c:	1d ff f3 ff 	j 80008c22 <_fflush_r+0x10>

80008c40 <stdio_exit_handler>:
80008c40:	91 00 00 66 	movh.a %a6,24576
80008c44:	91 10 00 58 	movh.a %a5,32769
80008c48:	91 00 00 46 	movh.a %a4,24576
80008c4c:	d9 66 58 10 	lea %a6,[%a6]1112 <60000458 <__sglue>>
80008c50:	d9 55 80 eb 	lea %a5,[%a5]-17536 <8000bb80 <_fclose_r>>
80008c54:	d9 44 6c 10 	lea %a4,[%a4]1132 <6000046c <_impure_data>>
80008c58:	6d 00 c9 00 	call 80008dea <_fwalk_sglue>
80008c5c:	00 90       	ret 

80008c5e <cleanup_stdio>:
80008c5e:	99 45 04 00 	ld.a %a5,[%a4]4
80008c62:	91 00 00 26 	movh.a %a2,24576
80008c66:	d9 22 58 e0 	lea %a2,[%a2]1944 <60000798 <__sf>>
80008c6a:	40 4c       	mov.aa %a12,%a4
80008c6c:	7d 25 04 00 	jeq.a %a5,%a2,80008c74 <cleanup_stdio+0x16>
80008c70:	6d 00 88 17 	call 8000bb80 <_fclose_r>
80008c74:	99 c5 08 00 	ld.a %a5,[%a12]8
80008c78:	91 00 00 26 	movh.a %a2,24576
80008c7c:	d9 22 80 00 	lea %a2,[%a2]2048 <60000800 <__sf+0x68>>
80008c80:	7d 25 05 00 	jeq.a %a5,%a2,80008c8a <cleanup_stdio+0x2c>
80008c84:	40 c4       	mov.aa %a4,%a12
80008c86:	6d 00 7d 17 	call 8000bb80 <_fclose_r>
80008c8a:	99 c5 0c 00 	ld.a %a5,[%a12]12
80008c8e:	91 00 00 26 	movh.a %a2,24576
80008c92:	d9 22 a8 10 	lea %a2,[%a2]2152 <60000868 <__sf+0xd0>>
80008c96:	7d 25 05 00 	jeq.a %a5,%a2,80008ca0 <cleanup_stdio+0x42>
80008c9a:	40 c4       	mov.aa %a4,%a12
80008c9c:	6d 00 72 17 	call 8000bb80 <_fclose_r>
80008ca0:	00 90       	ret 

80008ca2 <global_stdio_init.part.0>:
80008ca2:	91 10 00 38 	movh.a %a3,32769
80008ca6:	d9 33 c0 18 	lea %a3,[%a3]-29632 <80008c40 <stdio_exit_handler>>
80008caa:	91 00 00 26 	movh.a %a2,24576
80008cae:	82 08       	mov %d8,0
80008cb0:	b5 23 90 30 	st.a [%a2]2256 <600008d0 <__stdio_exit_handler>>,%a3
80008cb4:	82 42       	mov %d2,4
80008cb6:	91 00 00 26 	movh.a %a2,24576
80008cba:	d9 2c 58 e0 	lea %a12,[%a2]1944 <60000798 <__sf>>
80008cbe:	3b 80 00 50 	mov %d5,8
80008cc2:	82 04       	mov %d4,0
80008cc4:	d9 c4 1c 10 	lea %a4,[%a12]92
80008cc8:	59 c2 0c 00 	st.w [%a12]12,%d2
80008ccc:	59 c8 24 10 	st.w [%a12]100,%d8
80008cd0:	59 28 58 e0 	st.w [%a2]1944 <60000798 <__sf>>,%d8
80008cd4:	59 c8 04 00 	st.w [%a12]4 <60000798 <__sf>>,%d8
80008cd8:	59 c8 08 00 	st.w [%a12]8 <60000798 <__sf>>,%d8
80008cdc:	59 c8 10 00 	st.w [%a12]16 <60000798 <__sf>>,%d8
80008ce0:	59 c8 14 00 	st.w [%a12]20 <60000798 <__sf>>,%d8
80008ce4:	59 c8 18 00 	st.w [%a12]24 <60000798 <__sf>>,%d8
80008ce8:	6d ff fe f4 	call 800076e4 <memset>
80008cec:	91 10 00 28 	movh.a %a2,32769
80008cf0:	80 22       	mov.d %d2,%a2
80008cf2:	1b 22 e3 98 	addi %d9,%d2,-29134
80008cf6:	7b 10 00 20 	movh %d2,1
80008cfa:	1b 92 00 20 	addi %d2,%d2,9
80008cfe:	91 10 00 f8 	movh.a %a15,32769
80008d02:	91 10 00 e8 	movh.a %a14,32769
80008d06:	91 10 00 d8 	movh.a %a13,32769
80008d0a:	d9 ee dc a8 	lea %a14,[%a14]-29028 <80008e9c <__sseek>>
80008d0e:	d9 ff e0 98 	lea %a15,[%a15]-29088 <80008e60 <__swrite>>
80008d12:	d9 dd ca b8 	lea %a13,[%a13]-28982 <80008eca <__sclose>>
80008d16:	3b 80 00 50 	mov %d5,8
80008d1a:	82 04       	mov %d4,0
80008d1c:	d9 c4 04 30 	lea %a4,[%a12]196
80008d20:	59 c2 34 10 	st.w [%a12]116,%d2
80008d24:	b5 cc 1c 00 	st.a [%a12]28,%a12
80008d28:	59 c9 20 00 	st.w [%a12]32,%d9
80008d2c:	ec c9       	st.a [%a12]36,%a15
80008d2e:	b5 ce 28 00 	st.a [%a12]40,%a14
80008d32:	b5 cd 2c 00 	st.a [%a12]44,%a13
80008d36:	59 c8 0c 30 	st.w [%a12]204,%d8
80008d3a:	59 c8 28 10 	st.w [%a12]104,%d8
80008d3e:	59 c8 2c 10 	st.w [%a12]108,%d8
80008d42:	59 c8 30 10 	st.w [%a12]112,%d8
80008d46:	59 c8 38 10 	st.w [%a12]120,%d8
80008d4a:	59 c8 3c 10 	st.w [%a12]124,%d8
80008d4e:	59 c8 00 20 	st.w [%a12]128,%d8
80008d52:	6d ff c9 f4 	call 800076e4 <memset>
80008d56:	7b 20 00 20 	movh %d2,2
80008d5a:	1b 22 01 20 	addi %d2,%d2,18
80008d5e:	d9 c2 28 10 	lea %a2,[%a12]104
80008d62:	3b 80 00 50 	mov %d5,8
80008d66:	82 04       	mov %d4,0
80008d68:	d9 c4 2c 40 	lea %a4,[%a12]300
80008d6c:	b5 c2 04 20 	st.a [%a12]132,%a2
80008d70:	59 c9 08 20 	st.w [%a12]136,%d9
80008d74:	b5 cf 0c 20 	st.a [%a12]140,%a15
80008d78:	b5 ce 10 20 	st.a [%a12]144,%a14
80008d7c:	b5 cd 14 20 	st.a [%a12]148,%a13
80008d80:	59 c8 34 40 	st.w [%a12]308,%d8
80008d84:	59 c8 10 30 	st.w [%a12]208,%d8
80008d88:	59 c8 14 30 	st.w [%a12]212,%d8
80008d8c:	59 c8 18 30 	st.w [%a12]216,%d8
80008d90:	59 c2 1c 30 	st.w [%a12]220,%d2
80008d94:	59 c8 20 30 	st.w [%a12]224,%d8
80008d98:	59 c8 24 30 	st.w [%a12]228,%d8
80008d9c:	59 c8 28 30 	st.w [%a12]232,%d8
80008da0:	6d ff a2 f4 	call 800076e4 <memset>
80008da4:	d9 c2 10 30 	lea %a2,[%a12]208
80008da8:	b5 c2 2c 30 	st.a [%a12]236,%a2
80008dac:	59 c9 30 30 	st.w [%a12]240,%d9
80008db0:	b5 cf 34 30 	st.a [%a12]244,%a15
80008db4:	b5 ce 38 30 	st.a [%a12]248,%a14
80008db8:	b5 cd 3c 30 	st.a [%a12]252,%a13
80008dbc:	00 90       	ret 

80008dbe <__sinit>:
80008dbe:	19 42 34 00 	ld.w %d2,[%a4]52
80008dc2:	df 02 03 00 	jeq %d2,0,80008dc8 <__sinit+0xa>
80008dc6:	00 90       	ret 
80008dc8:	91 10 00 28 	movh.a %a2,32769
80008dcc:	d9 22 de 18 	lea %a2,[%a2]-29602 <80008c5e <cleanup_stdio>>
80008dd0:	b5 42 34 00 	st.a [%a4]52 <80008c5e <cleanup_stdio>>,%a2
80008dd4:	91 00 00 26 	movh.a %a2,24576
80008dd8:	19 22 90 30 	ld.w %d2,[%a2]2256 <600008d0 <__stdio_exit_handler>>
80008ddc:	df 02 f5 ff 	jne %d2,0,80008dc6 <__sinit+0x8>
80008de0:	6d ff 61 ff 	call 80008ca2 <global_stdio_init.part.0>
80008de4:	00 90       	ret 

80008de6 <__sfp_lock_acquire>:
80008de6:	00 90       	ret 

80008de8 <__sfp_lock_release>:
80008de8:	00 90       	ret 

80008dea <_fwalk_sglue>:
80008dea:	80 4a       	mov.d %d10,%a4
80008dec:	40 5f       	mov.aa %a15,%a5
80008dee:	40 6e       	mov.aa %a14,%a6
80008df0:	82 08       	mov %d8,0
80008df2:	82 19       	mov %d9,1
80008df4:	99 e2 04 00 	ld.a %a2,[%a14]4
80008df8:	99 ed 08 00 	ld.a %a13,[%a14]8
80008dfc:	d9 2c ff ff 	lea %a12,[%a2]-1
80008e00:	80 c2       	mov.d %d2,%a12
80008e02:	bf 02 13 00 	jlt %d2,0,80008e28 <_fwalk_sglue+0x3e>
80008e06:	b9 d2 0c 00 	ld.hu %d2,[%a13]12
80008e0a:	7f 29 0b 80 	jge.u %d9,%d2,80008e20 <_fwalk_sglue+0x36>
80008e0e:	c9 d2 0e 00 	ld.h %d2,[%a13]14
80008e12:	df f2 07 00 	jeq %d2,-1,80008e20 <_fwalk_sglue+0x36>
80008e16:	60 a4       	mov.a %a4,%d10
80008e18:	40 d5       	mov.aa %a5,%a13
80008e1a:	2d 0f 00 00 	calli %a15
80008e1e:	a6 28       	or %d8,%d2
80008e20:	d9 dd 28 10 	lea %a13,[%a13]104
80008e24:	fd c0 f1 7f 	loop %a12,80008e06 <_fwalk_sglue+0x1c>
80008e28:	d4 ee       	ld.a %a14,[%a14]
80008e2a:	bd 0e e5 ff 	jnz.a %a14,80008df4 <_fwalk_sglue+0xa>
80008e2e:	02 82       	mov %d2,%d8
80008e30:	00 90       	ret 

80008e32 <__sread>:
80008e32:	40 5c       	mov.aa %a12,%a5
80008e34:	02 45       	mov %d5,%d4
80008e36:	c9 c4 0e 00 	ld.h %d4,[%a12]14
80008e3a:	40 65       	mov.aa %a5,%a6
80008e3c:	6d 00 66 03 	call 80009508 <_read_r>
80008e40:	bf 02 09 00 	jlt %d2,0,80008e52 <__sread+0x20>
80008e44:	19 c3 10 10 	ld.w %d3,[%a12]80
80008e48:	d9 c2 10 10 	lea %a2,[%a12]80
80008e4c:	42 23       	add %d3,%d2
80008e4e:	74 23       	st.w [%a2],%d3
80008e50:	00 90       	ret 
80008e52:	c9 c3 0c 00 	ld.h %d3,[%a12]12
80008e56:	b7 03 01 36 	insert %d3,%d3,0,12,1
80008e5a:	f9 c3 0c 00 	st.h [%a12]12,%d3
80008e5e:	00 90       	ret 

80008e60 <__swrite>:
80008e60:	c9 52 0c 00 	ld.h %d2,[%a5]12
80008e64:	80 48       	mov.d %d8,%a4
80008e66:	40 5c       	mov.aa %a12,%a5
80008e68:	80 6a       	mov.d %d10,%a6
80008e6a:	02 49       	mov %d9,%d4
80008e6c:	6f 82 0e 80 	jnz.t %d2,8,80008e88 <__swrite+0x28>
80008e70:	b7 02 01 26 	insert %d2,%d2,0,12,1
80008e74:	60 a5       	mov.a %a5,%d10
80008e76:	c9 c4 0e 00 	ld.h %d4,[%a12]14
80008e7a:	60 84       	mov.a %a4,%d8
80008e7c:	f9 c2 0c 00 	st.h [%a12]12,%d2
80008e80:	02 95       	mov %d5,%d9
80008e82:	6d 00 69 03 	call 80009554 <_write_r>
80008e86:	00 90       	ret 
80008e88:	c9 54 0e 00 	ld.h %d4,[%a5]14
80008e8c:	82 26       	mov %d6,2
80008e8e:	82 05       	mov %d5,0
80008e90:	6d 00 2b 03 	call 800094e6 <_lseek_r>
80008e94:	c9 c2 0c 00 	ld.h %d2,[%a12]12
80008e98:	1d ff ec ff 	j 80008e70 <__swrite+0x10>

80008e9c <__sseek>:
80008e9c:	02 56       	mov %d6,%d5
80008e9e:	02 45       	mov %d5,%d4
80008ea0:	c9 54 0e 00 	ld.h %d4,[%a5]14
80008ea4:	40 5c       	mov.aa %a12,%a5
80008ea6:	6d 00 20 03 	call 800094e6 <_lseek_r>
80008eaa:	c9 c3 0c 00 	ld.h %d3,[%a12]12
80008eae:	df f2 09 00 	jeq %d2,-1,80008ec0 <__sseek+0x24>
80008eb2:	b7 f3 01 36 	insert %d3,%d3,15,12,1
80008eb6:	59 c2 10 10 	st.w [%a12]80,%d2
80008eba:	f9 c3 0c 00 	st.h [%a12]12,%d3
80008ebe:	00 90       	ret 
80008ec0:	b7 03 01 36 	insert %d3,%d3,0,12,1
80008ec4:	f9 c3 0c 00 	st.h [%a12]12,%d3
80008ec8:	00 90       	ret 

80008eca <__sclose>:
80008eca:	c9 54 0e 00 	ld.h %d4,[%a5]14
80008ece:	6d 00 fb 02 	call 800094c4 <_close_r>
80008ed2:	00 90       	ret 

80008ed4 <vsprintf>:
80008ed4:	82 f2       	mov %d2,-1
80008ed6:	06 f2       	sh %d2,-1
80008ed8:	20 68       	sub.a %sp,104
80008eda:	f4 a4       	st.a [%sp],%a4
80008edc:	b5 a4 10 00 	st.a [%sp]16,%a4
80008ee0:	59 a2 14 00 	st.w [%sp]20,%d2
80008ee4:	59 a2 08 00 	st.w [%sp]8,%d2
80008ee8:	91 00 00 46 	movh.a %a4,24576
80008eec:	7b f0 ff 2f 	movh %d2,65535
80008ef0:	99 44 68 10 	ld.a %a4,[%a4]1128 <60000468 <_impure_ptr>>
80008ef4:	1b 82 20 20 	addi %d2,%d2,520
80008ef8:	40 67       	mov.aa %a7,%a6
80008efa:	40 56       	mov.aa %a6,%a5
80008efc:	40 a5       	mov.aa %a5,%sp
80008efe:	59 a2 0c 00 	st.w [%sp]12,%d2
80008f02:	6d 00 e7 04 	call 800098d0 <_svfprintf_r>
80008f06:	d4 a2       	ld.a %a2,[%sp]
80008f08:	82 03       	mov %d3,0
80008f0a:	34 23       	st.b [%a2],%d3
80008f0c:	00 90       	ret 

80008f0e <strlen>:
80008f0e:	80 42       	mov.d %d2,%a4
80008f10:	8f 32 00 41 	and %d4,%d2,3
80008f14:	80 43       	mov.d %d3,%a4
80008f16:	df 04 09 80 	jne %d4,0,80008f28 <strlen+0x1a>
80008f1a:	1d 00 11 00 	j 80008f3c <strlen+0x2e>
80008f1e:	8f 33 00 41 	and %d4,%d3,3
80008f22:	60 32       	mov.a %a2,%d3
80008f24:	df 04 0d 00 	jeq %d4,0,80008f3e <strlen+0x30>
80008f28:	60 32       	mov.a %a2,%d3
80008f2a:	c2 13       	add %d3,1
80008f2c:	79 24 00 00 	ld.b %d4,[%a2]0
80008f30:	df 04 f7 ff 	jne %d4,0,80008f1e <strlen+0x10>
80008f34:	80 23       	mov.d %d3,%a2
80008f36:	a2 23       	sub %d3,%d2
80008f38:	02 32       	mov %d2,%d3
80008f3a:	00 90       	ret 
80008f3c:	40 42       	mov.aa %a2,%a4
80008f3e:	54 24       	ld.w %d4,[%a2]
80008f40:	7b f0 ef 6f 	movh %d6,65279
80008f44:	1b f6 ef 6f 	addi %d6,%d6,-257
80008f48:	0b 64 00 30 	add %d3,%d4,%d6
80008f4c:	7b 10 08 58 	movh %d5,32897
80008f50:	0f 43 e0 30 	andn %d3,%d3,%d4
80008f54:	1b 05 08 58 	addi %d5,%d5,-32640
80008f58:	26 53       	and %d3,%d5
80008f5a:	df 03 0e 80 	jne %d3,0,80008f76 <strlen+0x68>
80008f5e:	d9 23 04 00 	lea %a3,[%a2]4
80008f62:	40 32       	mov.aa %a2,%a3
80008f64:	54 23       	ld.w %d3,[%a2]
80008f66:	b0 43       	add.a %a3,4
80008f68:	0b 63 00 40 	add %d4,%d3,%d6
80008f6c:	0f 34 e0 30 	andn %d3,%d4,%d3
80008f70:	26 53       	and %d3,%d5
80008f72:	df 03 f8 7f 	jeq %d3,0,80008f62 <strlen+0x54>
80008f76:	79 23 00 00 	ld.b %d3,[%a2]0
80008f7a:	df 03 dd 7f 	jeq %d3,0,80008f34 <strlen+0x26>
80008f7e:	d9 23 01 00 	lea %a3,[%a2]1
80008f82:	40 32       	mov.aa %a2,%a3
80008f84:	79 23 00 00 	ld.b %d3,[%a2]0
80008f88:	b0 13       	add.a %a3,1
80008f8a:	df 03 fc ff 	jne %d3,0,80008f82 <strlen+0x74>
80008f8e:	80 23       	mov.d %d3,%a2
80008f90:	a2 23       	sub %d3,%d2
80008f92:	02 32       	mov %d2,%d3
80008f94:	00 90       	ret 

80008f96 <strncpy>:
80008f96:	80 45       	mov.d %d5,%a4
80008f98:	80 52       	mov.d %d2,%a5
80008f9a:	0f 25 a0 60 	or %d6,%d5,%d2
80008f9e:	8f 36 00 61 	and %d6,%d6,3
80008fa2:	8b 44 a0 32 	ge.u %d3,%d4,4
80008fa6:	7b f0 ef 0f 	movh %d0,65279
80008faa:	7b 10 08 78 	movh %d7,32897
80008fae:	8b 06 00 34 	and.eq %d3,%d6,0
80008fb2:	40 46       	mov.aa %a6,%a4
80008fb4:	40 53       	mov.aa %a3,%a5
80008fb6:	1b f0 ef 0f 	addi %d0,%d0,-257
80008fba:	1b 07 08 78 	addi %d7,%d7,-32640
80008fbe:	df 03 13 80 	jne %d3,0,80008fe4 <strncpy+0x4e>
80008fc2:	60 25       	mov.a %a5,%d2
80008fc4:	df 04 0e 00 	jeq %d4,0,80008fe0 <strncpy+0x4a>
80008fc8:	09 52 01 00 	ld.b %d2,[%a5+]1
80008fcc:	40 63       	mov.aa %a3,%a6
80008fce:	24 32       	st.b [%a3+],%d2
80008fd0:	1b f4 ff 3f 	addi %d3,%d4,-1
80008fd4:	df 02 1d 00 	jeq %d2,0,8000900e <strncpy+0x78>
80008fd8:	02 34       	mov %d4,%d3
80008fda:	40 36       	mov.aa %a6,%a3
80008fdc:	df 04 f6 ff 	jne %d4,0,80008fc8 <strncpy+0x32>
80008fe0:	60 52       	mov.a %a2,%d5
80008fe2:	00 90       	ret 
80008fe4:	40 32       	mov.aa %a2,%a3
80008fe6:	54 23       	ld.w %d3,[%a2]
80008fe8:	80 32       	mov.d %d2,%a3
80008fea:	0b 03 00 60 	add %d6,%d3,%d0
80008fee:	0f 36 e0 60 	andn %d6,%d6,%d3
80008ff2:	26 76       	and %d6,%d7
80008ff4:	b0 43       	add.a %a3,4
80008ff6:	df 06 e6 ff 	jne %d6,0,80008fc2 <strncpy+0x2c>
80008ffa:	40 62       	mov.aa %a2,%a6
80008ffc:	c2 c4       	add %d4,-4
80008ffe:	74 23       	st.w [%a2],%d3
80009000:	80 32       	mov.d %d2,%a3
80009002:	b0 46       	add.a %a6,4
80009004:	ff 44 f0 ff 	jge.u %d4,4,80008fe4 <strncpy+0x4e>
80009008:	60 25       	mov.a %a5,%d2
8000900a:	1d ff dd ff 	j 80008fc4 <strncpy+0x2e>
8000900e:	01 64 00 66 	addsc.a %a6,%a6,%d4,0
80009012:	df 03 e7 7f 	jeq %d3,0,80008fe0 <strncpy+0x4a>
80009016:	24 32       	st.b [%a3+],%d2
80009018:	7d 63 ff ff 	jne.a %a3,%a6,80009016 <strncpy+0x80>
8000901c:	60 52       	mov.a %a2,%d5
8000901e:	00 90       	ret 

80009020 <critical_factorization>:
80009020:	82 17       	mov %d7,1
80009022:	bf 24 64 80 	jlt.u %d4,2,800090ea <critical_factorization+0xca>
80009026:	02 75       	mov %d5,%d7
80009028:	82 06       	mov %d6,0
8000902a:	82 f2       	mov %d2,-1
8000902c:	02 73       	mov %d3,%d7
8000902e:	1d 00 0a 00 	j 80009042 <critical_factorization+0x22>
80009032:	0b 23 80 70 	sub %d7,%d3,%d2
80009036:	02 36       	mov %d6,%d3
80009038:	82 15       	mov %d5,1
8000903a:	0b 56 00 30 	add %d3,%d6,%d5
8000903e:	7f 43 17 80 	jge.u %d3,%d4,8000906c <critical_factorization+0x4c>
80009042:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80009046:	80 40       	mov.d %d0,%a4
80009048:	42 50       	add %d0,%d5
8000904a:	14 21       	ld.bu %d1,[%a2]
8000904c:	60 02       	mov.a %a2,%d0
8000904e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80009052:	14 20       	ld.bu %d0,[%a2]
80009054:	3f 01 ef ff 	jlt.u %d1,%d0,80009032 <critical_factorization+0x12>
80009058:	5f 01 36 00 	jeq %d1,%d0,800090c4 <critical_factorization+0xa4>
8000905c:	02 62       	mov %d2,%d6
8000905e:	82 15       	mov %d5,1
80009060:	c2 16       	add %d6,1
80009062:	0b 56 00 30 	add %d3,%d6,%d5
80009066:	82 17       	mov %d7,1
80009068:	3f 43 ed ff 	jlt.u %d3,%d4,80009042 <critical_factorization+0x22>
8000906c:	74 57       	st.w [%a5],%d7
8000906e:	82 17       	mov %d7,1
80009070:	82 15       	mov %d5,1
80009072:	82 06       	mov %d6,0
80009074:	82 f8       	mov %d8,-1
80009076:	02 73       	mov %d3,%d7
80009078:	1d 00 0a 00 	j 8000908c <critical_factorization+0x6c>
8000907c:	0b 83 80 70 	sub %d7,%d3,%d8
80009080:	02 36       	mov %d6,%d3
80009082:	82 15       	mov %d5,1
80009084:	0b 56 00 30 	add %d3,%d6,%d5
80009088:	7f 43 17 80 	jge.u %d3,%d4,800090b6 <critical_factorization+0x96>
8000908c:	01 43 00 26 	addsc.a %a2,%a4,%d3,0
80009090:	80 40       	mov.d %d0,%a4
80009092:	42 80       	add %d0,%d8
80009094:	14 21       	ld.bu %d1,[%a2]
80009096:	60 02       	mov.a %a2,%d0
80009098:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000909c:	14 20       	ld.bu %d0,[%a2]
8000909e:	3f 10 ef ff 	jlt.u %d0,%d1,8000907c <critical_factorization+0x5c>
800090a2:	5f 01 16 00 	jeq %d1,%d0,800090ce <critical_factorization+0xae>
800090a6:	02 68       	mov %d8,%d6
800090a8:	82 15       	mov %d5,1
800090aa:	c2 16       	add %d6,1
800090ac:	0b 56 00 30 	add %d3,%d6,%d5
800090b0:	82 17       	mov %d7,1
800090b2:	3f 43 ed ff 	jlt.u %d3,%d4,8000908c <critical_factorization+0x6c>
800090b6:	c2 18       	add %d8,1
800090b8:	c2 12       	add %d2,1
800090ba:	3f 28 17 80 	jlt.u %d8,%d2,800090e8 <critical_factorization+0xc8>
800090be:	74 57       	st.w [%a5],%d7
800090c0:	02 82       	mov %d2,%d8
800090c2:	00 90       	ret 
800090c4:	5f 75 0a 00 	jeq %d5,%d7,800090d8 <critical_factorization+0xb8>
800090c8:	c2 15       	add %d5,1
800090ca:	1d ff b8 ff 	j 8000903a <critical_factorization+0x1a>
800090ce:	5f 75 09 00 	jeq %d5,%d7,800090e0 <critical_factorization+0xc0>
800090d2:	c2 15       	add %d5,1
800090d4:	1d ff d8 ff 	j 80009084 <critical_factorization+0x64>
800090d8:	42 56       	add %d6,%d5
800090da:	82 15       	mov %d5,1
800090dc:	1d ff af ff 	j 8000903a <critical_factorization+0x1a>
800090e0:	42 56       	add %d6,%d5
800090e2:	82 15       	mov %d5,1
800090e4:	1d ff d0 ff 	j 80009084 <critical_factorization+0x64>
800090e8:	00 90       	ret 
800090ea:	82 08       	mov %d8,0
800090ec:	74 57       	st.w [%a5],%d7
800090ee:	02 82       	mov %d2,%d8
800090f0:	00 90       	ret 

800090f2 <two_way_long_needle>:
800090f2:	d9 aa b8 ff 	lea %sp,[%sp]-1032
800090f6:	40 5c       	mov.aa %a12,%a5
800090f8:	80 4e       	mov.d %d14,%a4
800090fa:	02 4d       	mov %d13,%d4
800090fc:	d9 a5 04 00 	lea %a5,[%sp]4
80009100:	02 54       	mov %d4,%d5
80009102:	40 c4       	mov.aa %a4,%a12
80009104:	02 58       	mov %d8,%d5
80009106:	6d ff 8d ff 	call 80009020 <critical_factorization>
8000910a:	02 2a       	mov %d10,%d2
8000910c:	d9 a2 08 00 	lea %a2,[%sp]8
80009110:	d9 ae 48 00 	lea %a14,[%sp]1032
80009114:	40 23       	mov.aa %a3,%a2
80009116:	74 38       	st.w [%a3],%d8
80009118:	b0 42       	add.a %a2,4
8000911a:	7d e2 fd ff 	jne.a %a2,%a14,80009114 <two_way_long_needle+0x22>
8000911e:	01 c8 00 46 	addsc.a %a4,%a12,%d8,0
80009122:	1b f8 ff 9f 	addi %d9,%d8,-1
80009126:	40 c2       	mov.aa %a2,%a12
80009128:	df 08 0d 00 	jeq %d8,0,80009142 <two_way_long_needle+0x50>
8000912c:	04 22       	ld.bu %d2,[%a2+]
8000912e:	d9 a3 08 00 	lea %a3,[%sp]8
80009132:	06 22       	sh %d2,2
80009134:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
80009138:	01 24 20 50 	sub.a %a5,%a4,%a2
8000913c:	f4 35       	st.a [%a3],%a5
8000913e:	7d 42 f7 ff 	jne.a %a2,%a4,8000912c <two_way_long_needle+0x3a>
80009142:	99 a2 04 00 	ld.a %a2,[%sp]4
80009146:	02 a4       	mov %d4,%d10
80009148:	40 c4       	mov.aa %a4,%a12
8000914a:	01 2c 10 50 	add.a %a5,%a12,%a2
8000914e:	6d 00 da 17 	call 8000c102 <memcmp>
80009152:	df 02 7a 80 	jne %d2,0,80009246 <two_way_long_needle+0x154>
80009156:	60 a2       	mov.a %a2,%d10
80009158:	8b 1a 00 21 	rsub %d2,%d10,1
8000915c:	60 2e       	mov.a %a14,%d2
8000915e:	b7 f8 81 f5 	insert %d15,%d8,15,11,1
80009162:	82 0b       	mov %d11,0
80009164:	82 0c       	mov %d12,0
80009166:	d9 2d ff ff 	lea %a13,[%a2]-1
8000916a:	60 e2       	mov.a %a2,%d14
8000916c:	01 2c 00 46 	addsc.a %a4,%a2,%d12,0
80009170:	01 49 00 26 	addsc.a %a2,%a4,%d9,0
80009174:	14 22       	ld.bu %d2,[%a2]
80009176:	d9 a2 08 00 	lea %a2,[%sp]8
8000917a:	06 22       	sh %d2,2
8000917c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80009180:	54 22       	ld.w %d2,[%a2]
80009182:	df 02 1f 00 	jeq %d2,0,800091c0 <two_way_long_needle+0xce>
80009186:	df 0b 0a 00 	jeq %d11,0,8000919a <two_way_long_needle+0xa8>
8000918a:	19 a4 04 00 	ld.w %d4,[%sp]4
8000918e:	0b 48 80 30 	sub %d3,%d8,%d4
80009192:	0b 42 30 41 	lt.u %d4,%d2,%d4
80009196:	2b 23 40 24 	sel %d2,%d4,%d3,%d2
8000919a:	42 2c       	add %d12,%d2
8000919c:	82 0b       	mov %d11,0
8000919e:	0b 8d 80 20 	sub %d2,%d13,%d8
800091a2:	7f c2 e4 ff 	jge.u %d2,%d12,8000916a <two_way_long_needle+0x78>
800091a6:	60 e2       	mov.a %a2,%d14
800091a8:	02 f4       	mov %d4,%d15
800091aa:	01 2d 00 46 	addsc.a %a4,%a2,%d13,0
800091ae:	6d 00 4b 19 	call 8000c444 <strnlen>
800091b2:	42 2d       	add %d13,%d2
800091b4:	0b 8d 80 20 	sub %d2,%d13,%d8
800091b8:	7f c2 d9 ff 	jge.u %d2,%d12,8000916a <two_way_long_needle+0x78>
800091bc:	a0 02       	mov.a %a2,0
800091be:	00 90       	ret 
800091c0:	60 e2       	mov.a %a2,%d14
800091c2:	0b ba b0 31 	max.u %d3,%d10,%d11
800091c6:	0b 3c 00 20 	add %d2,%d12,%d3
800091ca:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800091ce:	3f 93 07 80 	jlt.u %d3,%d9,800091dc <two_way_long_needle+0xea>
800091d2:	1d 00 11 00 	j 800091f4 <two_way_long_needle+0x102>
800091d6:	c2 13       	add %d3,1
800091d8:	7f 93 0e 80 	jge.u %d3,%d9,800091f4 <two_way_long_needle+0x102>
800091dc:	01 c3 00 36 	addsc.a %a3,%a12,%d3,0
800091e0:	04 25       	ld.bu %d5,[%a2+]
800091e2:	14 36       	ld.bu %d6,[%a3]
800091e4:	5f 56 f9 7f 	jeq %d6,%d5,800091d6 <two_way_long_needle+0xe4>
800091e8:	80 e2       	mov.d %d2,%a14
800091ea:	42 2c       	add %d12,%d2
800091ec:	42 3c       	add %d12,%d3
800091ee:	82 0b       	mov %d11,0
800091f0:	1d ff d7 ff 	j 8000919e <two_way_long_needle+0xac>
800091f4:	60 e2       	mov.a %a2,%d14
800091f6:	0b ac 00 30 	add %d3,%d12,%d10
800091fa:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800091fe:	80 d2       	mov.d %d2,%a13
80009200:	02 a6       	mov %d6,%d10
80009202:	3f ab 09 80 	jlt.u %d11,%d10,80009214 <two_way_long_needle+0x122>
80009206:	1d 00 10 00 	j 80009226 <two_way_long_needle+0x134>
8000920a:	1b f2 ff 3f 	addi %d3,%d2,-1
8000920e:	5f b2 16 00 	jeq %d2,%d11,8000923a <two_way_long_needle+0x148>
80009212:	02 32       	mov %d2,%d3
80009214:	01 c2 00 36 	addsc.a %a3,%a12,%d2,0
80009218:	09 23 7f f4 	ld.bu %d3,[+%a2]-1
8000921c:	14 35       	ld.bu %d5,[%a3]
8000921e:	1b 12 00 60 	addi %d6,%d2,1
80009222:	5f 35 f4 7f 	jeq %d5,%d3,8000920a <two_way_long_needle+0x118>
80009226:	c2 1b       	add %d11,1
80009228:	3f b6 0d 80 	jlt.u %d6,%d11,80009242 <two_way_long_needle+0x150>
8000922c:	19 ab 04 00 	ld.w %d11,[%sp]4
80009230:	42 bc       	add %d12,%d11
80009232:	0b b8 80 b0 	sub %d11,%d8,%d11
80009236:	1d ff b4 ff 	j 8000919e <two_way_long_needle+0xac>
8000923a:	02 b6       	mov %d6,%d11
8000923c:	c2 1b       	add %d11,1
8000923e:	7f b6 f7 ff 	jge.u %d6,%d11,8000922c <two_way_long_needle+0x13a>
80009242:	40 42       	mov.aa %a2,%a4
80009244:	00 90       	ret 
80009246:	0b a8 80 20 	sub %d2,%d8,%d10
8000924a:	0b a2 b0 21 	max.u %d2,%d2,%d10
8000924e:	c2 12       	add %d2,1
80009250:	b7 f8 81 c5 	insert %d12,%d8,15,11,1
80009254:	82 0b       	mov %d11,0
80009256:	59 a2 04 00 	st.w [%sp]4,%d2
8000925a:	8b 1a 00 f1 	rsub %d15,%d10,1
8000925e:	60 e2       	mov.a %a2,%d14
80009260:	01 2b 00 56 	addsc.a %a5,%a2,%d11,0
80009264:	01 59 00 26 	addsc.a %a2,%a5,%d9,0
80009268:	14 22       	ld.bu %d2,[%a2]
8000926a:	d9 a2 08 00 	lea %a2,[%sp]8
8000926e:	06 22       	sh %d2,2
80009270:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80009274:	54 22       	ld.w %d2,[%a2]
80009276:	df 02 14 00 	jeq %d2,0,8000929e <two_way_long_needle+0x1ac>
8000927a:	42 2b       	add %d11,%d2
8000927c:	0b 8d 80 20 	sub %d2,%d13,%d8
80009280:	7f b2 ef ff 	jge.u %d2,%d11,8000925e <two_way_long_needle+0x16c>
80009284:	60 e2       	mov.a %a2,%d14
80009286:	02 c4       	mov %d4,%d12
80009288:	01 2d 00 46 	addsc.a %a4,%a2,%d13,0
8000928c:	6d 00 dc 18 	call 8000c444 <strnlen>
80009290:	42 2d       	add %d13,%d2
80009292:	0b 8d 80 20 	sub %d2,%d13,%d8
80009296:	7f b2 e4 ff 	jge.u %d2,%d11,8000925e <two_way_long_needle+0x16c>
8000929a:	1d ff 91 ff 	j 800091bc <two_way_long_needle+0xca>
8000929e:	60 e2       	mov.a %a2,%d14
800092a0:	0b ba 00 20 	add %d2,%d10,%d11
800092a4:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800092a8:	02 a3       	mov %d3,%d10
800092aa:	3f 9a 07 80 	jlt.u %d10,%d9,800092b8 <two_way_long_needle+0x1c6>
800092ae:	1d 00 0f 00 	j 800092cc <two_way_long_needle+0x1da>
800092b2:	c2 13       	add %d3,1
800092b4:	7f 93 0c 80 	jge.u %d3,%d9,800092cc <two_way_long_needle+0x1da>
800092b8:	01 c3 00 36 	addsc.a %a3,%a12,%d3,0
800092bc:	04 25       	ld.bu %d5,[%a2+]
800092be:	14 36       	ld.bu %d6,[%a3]
800092c0:	5f 56 f9 7f 	jeq %d6,%d5,800092b2 <two_way_long_needle+0x1c0>
800092c4:	42 fb       	add %d11,%d15
800092c6:	42 3b       	add %d11,%d3
800092c8:	1d ff da ff 	j 8000927c <two_way_long_needle+0x18a>
800092cc:	df 0a 1b 00 	jeq %d10,0,80009302 <two_way_long_needle+0x210>
800092d0:	60 e3       	mov.a %a3,%d14
800092d2:	0b ba 00 20 	add %d2,%d10,%d11
800092d6:	01 ca 00 26 	addsc.a %a2,%a12,%d10,0
800092da:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
800092de:	1d 00 07 00 	j 800092ec <two_way_long_needle+0x1fa>
800092e2:	80 42       	mov.d %d2,%a4
800092e4:	c2 f2       	add %d2,-1
800092e6:	60 24       	mov.a %a4,%d2
800092e8:	7d c4 0d 00 	jeq.a %a4,%a12,80009302 <two_way_long_needle+0x210>
800092ec:	40 24       	mov.aa %a4,%a2
800092ee:	09 32 7f f4 	ld.bu %d2,[+%a3]-1
800092f2:	09 23 7f f4 	ld.bu %d3,[+%a2]-1
800092f6:	5f 23 f6 7f 	jeq %d3,%d2,800092e2 <two_way_long_needle+0x1f0>
800092fa:	19 a2 04 00 	ld.w %d2,[%sp]4
800092fe:	1d ff be ff 	j 8000927a <two_way_long_needle+0x188>
80009302:	40 52       	mov.aa %a2,%a5
80009304:	00 90       	ret 

80009306 <strstr>:
80009306:	14 54       	ld.bu %d4,[%a5]
80009308:	20 40       	sub.a %sp,64
8000930a:	40 4d       	mov.aa %a13,%a4
8000930c:	40 5c       	mov.aa %a12,%a5
8000930e:	80 48       	mov.d %d8,%a4
80009310:	df 04 5f 00 	jeq %d4,0,800093ce <strstr+0xc8>
80009314:	39 52 01 00 	ld.bu %d2,[%a5]1
80009318:	df 02 88 00 	jeq %d2,0,80009428 <strstr+0x122>
8000931c:	39 53 02 00 	ld.bu %d3,[%a5]2
80009320:	df 03 59 00 	jeq %d3,0,800093d2 <strstr+0xcc>
80009324:	39 55 03 00 	ld.bu %d5,[%a5]3
80009328:	df 05 a5 00 	jeq %d5,0,80009472 <strstr+0x16c>
8000932c:	39 56 04 00 	ld.bu %d6,[%a5]4
80009330:	df 06 81 00 	jeq %d6,0,80009432 <strstr+0x12c>
80009334:	40 54       	mov.aa %a4,%a5
80009336:	6d ff ec fd 	call 80008f0e <strlen>
8000933a:	b7 f2 81 44 	insert %d4,%d2,15,9,1
8000933e:	40 d4       	mov.aa %a4,%a13
80009340:	02 29       	mov %d9,%d2
80009342:	6d 00 81 18 	call 8000c444 <strnlen>
80009346:	3f 92 5e 80 	jlt.u %d2,%d9,80009402 <strstr+0xfc>
8000934a:	8b f9 af 32 	ge.u %d3,%d9,255
8000934e:	df 03 b2 80 	jne %d3,0,800094b2 <strstr+0x1ac>
80009352:	a2 92       	sub %d2,%d9
80009354:	3b 00 04 50 	mov %d5,64
80009358:	1b 19 00 40 	addi %d4,%d9,1
8000935c:	40 a4       	mov.aa %a4,%sp
8000935e:	0b 28 00 a0 	add %d10,%d8,%d2
80009362:	6d ff c1 f1 	call 800076e4 <memset>
80009366:	8f f9 0f 21 	and %d2,%d9,255
8000936a:	40 c2       	mov.aa %a2,%a12
8000936c:	df 09 0d 00 	jeq %d9,0,80009386 <strstr+0x80>
80009370:	04 23       	ld.bu %d3,[%a2+]
80009372:	8f f3 03 31 	and %d3,%d3,63
80009376:	01 a3 00 36 	addsc.a %a3,%sp,%d3,0
8000937a:	34 32       	st.b [%a3],%d2
8000937c:	c2 f2       	add %d2,-1
8000937e:	8f f2 0f 21 	and %d2,%d2,255
80009382:	df 02 f7 ff 	jne %d2,0,80009370 <strstr+0x6a>
80009386:	80 d8       	mov.d %d8,%a13
80009388:	1b f8 ff 3f 	addi %d3,%d8,-1
8000938c:	60 32       	mov.a %a2,%d3
8000938e:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
80009392:	14 22       	ld.bu %d2,[%a2]
80009394:	8f f2 03 21 	and %d2,%d2,63
80009398:	01 a2 00 26 	addsc.a %a2,%sp,%d2,0
8000939c:	14 28       	ld.bu %d8,[%a2]
8000939e:	42 38       	add %d8,%d3
800093a0:	7f 8a 07 80 	jge.u %d10,%d8,800093ae <strstr+0xa8>
800093a4:	1d 00 32 00 	j 80009408 <strstr+0x102>
800093a8:	42 b8       	add %d8,%d11
800093aa:	3f 8a 2f 80 	jlt.u %d10,%d8,80009408 <strstr+0x102>
800093ae:	60 82       	mov.a %a2,%d8
800093b0:	60 84       	mov.a %a4,%d8
800093b2:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
800093b6:	02 94       	mov %d4,%d9
800093b8:	14 22       	ld.bu %d2,[%a2]
800093ba:	40 c5       	mov.aa %a5,%a12
800093bc:	8f f2 03 21 	and %d2,%d2,63
800093c0:	01 a2 00 26 	addsc.a %a2,%sp,%d2,0
800093c4:	14 2b       	ld.bu %d11,[%a2]
800093c6:	6d 00 9e 16 	call 8000c102 <memcmp>
800093ca:	df 02 ef ff 	jne %d2,0,800093a8 <strstr+0xa2>
800093ce:	60 82       	mov.a %a2,%d8
800093d0:	00 90       	ret 
800093d2:	04 d3       	ld.bu %d3,[%a13+]
800093d4:	8f 04 01 40 	sh %d4,%d4,16
800093d8:	0f 24 a0 50 	or %d5,%d4,%d2
800093dc:	82 02       	mov %d2,0
800093de:	df 03 12 00 	jeq %d3,0,80009402 <strstr+0xfc>
800093e2:	8f 02 01 20 	sh %d2,%d2,16
800093e6:	a6 32       	or %d2,%d3
800093e8:	d9 d3 ff ff 	lea %a3,[%a13]-1
800093ec:	04 d3       	ld.bu %d3,[%a13+]
800093ee:	8b 03 20 42 	ne %d4,%d3,0
800093f2:	0b 25 10 42 	and.ne %d4,%d5,%d2
800093f6:	df 04 f6 ff 	jne %d4,0,800093e2 <strstr+0xdc>
800093fa:	80 38       	mov.d %d8,%a3
800093fc:	c2 f8       	add %d8,-1
800093fe:	5f 25 e8 7f 	jeq %d5,%d2,800093ce <strstr+0xc8>
80009402:	82 08       	mov %d8,0
80009404:	60 82       	mov.a %a2,%d8
80009406:	00 90       	ret 
80009408:	60 a2       	mov.a %a2,%d10
8000940a:	01 29 00 46 	addsc.a %a4,%a2,%d9,0
8000940e:	14 42       	ld.bu %d2,[%a4]
80009410:	df 02 f9 7f 	jeq %d2,0,80009402 <strstr+0xfc>
80009414:	3b 00 80 40 	mov %d4,2048
80009418:	6d 00 16 18 	call 8000c444 <strnlen>
8000941c:	42 2a       	add %d10,%d2
8000941e:	7f 8a b5 ff 	jge.u %d10,%d8,80009388 <strstr+0x82>
80009422:	82 08       	mov %d8,0
80009424:	1d ff f0 ff 	j 80009404 <strstr+0xfe>
80009428:	6d 00 7c 17 	call 8000c320 <strchr>
8000942c:	80 28       	mov.d %d8,%a2
8000942e:	60 82       	mov.a %a2,%d8
80009430:	00 90       	ret 
80009432:	8f 84 01 40 	sh %d4,%d4,24
80009436:	8f 02 01 20 	sh %d2,%d2,16
8000943a:	a6 42       	or %d2,%d4
8000943c:	8f 83 00 30 	sh %d3,%d3,8
80009440:	a6 25       	or %d5,%d2
80009442:	a6 35       	or %d5,%d3
80009444:	14 43       	ld.bu %d3,[%a4]
80009446:	df 03 de 7f 	jeq %d3,0,80009402 <strstr+0xfc>
8000944a:	b0 1d       	add.a %a13,1
8000944c:	82 02       	mov %d2,0
8000944e:	8f 82 00 20 	sh %d2,%d2,8
80009452:	a6 32       	or %d2,%d3
80009454:	d9 d3 ff ff 	lea %a3,[%a13]-1
80009458:	04 d3       	ld.bu %d3,[%a13+]
8000945a:	0b 25 10 41 	ne %d4,%d5,%d2
8000945e:	8b 03 20 44 	and.ne %d4,%d3,0
80009462:	df 04 f6 ff 	jne %d4,0,8000944e <strstr+0x148>
80009466:	80 38       	mov.d %d8,%a3
80009468:	c2 d8       	add %d8,-3
8000946a:	5f 25 b2 7f 	jeq %d5,%d2,800093ce <strstr+0xc8>
8000946e:	1d ff ca ff 	j 80009402 <strstr+0xfc>
80009472:	8f 84 01 40 	sh %d4,%d4,24
80009476:	8f 02 01 20 	sh %d2,%d2,16
8000947a:	8f 83 00 30 	sh %d3,%d3,8
8000947e:	a6 24       	or %d4,%d2
80009480:	0f 34 a0 50 	or %d5,%d4,%d3
80009484:	14 43       	ld.bu %d3,[%a4]
80009486:	df 03 be 7f 	jeq %d3,0,80009402 <strstr+0xfc>
8000948a:	b0 1d       	add.a %a13,1
8000948c:	82 02       	mov %d2,0
8000948e:	a6 32       	or %d2,%d3
80009490:	d9 d3 ff ff 	lea %a3,[%a13]-1
80009494:	04 d3       	ld.bu %d3,[%a13+]
80009496:	8f 82 00 20 	sh %d2,%d2,8
8000949a:	8b 03 20 42 	ne %d4,%d3,0
8000949e:	0b 25 10 42 	and.ne %d4,%d5,%d2
800094a2:	df 04 f6 ff 	jne %d4,0,8000948e <strstr+0x188>
800094a6:	80 38       	mov.d %d8,%a3
800094a8:	c2 e8       	add %d8,-2
800094aa:	5f 25 92 7f 	jeq %d5,%d2,800093ce <strstr+0xc8>
800094ae:	1d ff aa ff 	j 80009402 <strstr+0xfc>
800094b2:	02 95       	mov %d5,%d9
800094b4:	40 c5       	mov.aa %a5,%a12
800094b6:	02 24       	mov %d4,%d2
800094b8:	40 d4       	mov.aa %a4,%a13
800094ba:	6d ff 1c fe 	call 800090f2 <two_way_long_needle>
800094be:	80 28       	mov.d %d8,%a2
800094c0:	1d ff 87 ff 	j 800093ce <strstr+0xc8>

800094c4 <_close_r>:
800094c4:	82 02       	mov %d2,0
800094c6:	91 00 00 c6 	movh.a %a12,24576
800094ca:	40 4d       	mov.aa %a13,%a4
800094cc:	59 c2 98 30 	st.w [%a12]2264 <600008d8 <errno>>,%d2
800094d0:	6d 00 3a 33 	call 8000fb44 <close>
800094d4:	df f2 03 00 	jeq %d2,-1,800094da <_close_r+0x16>
800094d8:	00 90       	ret 
800094da:	19 c3 98 30 	ld.w %d3,[%a12]2264
800094de:	df 03 fd 7f 	jeq %d3,0,800094d8 <_close_r+0x14>
800094e2:	74 d3       	st.w [%a13],%d3
800094e4:	00 90       	ret 

800094e6 <_lseek_r>:
800094e6:	82 02       	mov %d2,0
800094e8:	91 00 00 c6 	movh.a %a12,24576
800094ec:	40 4d       	mov.aa %a13,%a4
800094ee:	59 c2 98 30 	st.w [%a12]2264 <600008d8 <errno>>,%d2
800094f2:	6d 00 2d 33 	call 8000fb4c <lseek>
800094f6:	df f2 03 00 	jeq %d2,-1,800094fc <_lseek_r+0x16>
800094fa:	00 90       	ret 
800094fc:	19 c3 98 30 	ld.w %d3,[%a12]2264
80009500:	df 03 fd 7f 	jeq %d3,0,800094fa <_lseek_r+0x14>
80009504:	74 d3       	st.w [%a13],%d3
80009506:	00 90       	ret 

80009508 <_read_r>:
80009508:	82 02       	mov %d2,0
8000950a:	40 4d       	mov.aa %a13,%a4
8000950c:	91 00 00 c6 	movh.a %a12,24576
80009510:	40 54       	mov.aa %a4,%a5
80009512:	59 c2 98 30 	st.w [%a12]2264 <600008d8 <errno>>,%d2
80009516:	6d 00 1f 33 	call 8000fb54 <read>
8000951a:	df f2 03 00 	jeq %d2,-1,80009520 <_read_r+0x18>
8000951e:	00 90       	ret 
80009520:	19 c3 98 30 	ld.w %d3,[%a12]2264
80009524:	df 03 fd 7f 	jeq %d3,0,8000951e <_read_r+0x16>
80009528:	74 d3       	st.w [%a13],%d3
8000952a:	00 90       	ret 

8000952c <_sbrk_r>:
8000952c:	82 02       	mov %d2,0
8000952e:	91 00 00 c6 	movh.a %a12,24576
80009532:	40 4d       	mov.aa %a13,%a4
80009534:	59 c2 98 30 	st.w [%a12]2264 <600008d8 <errno>>,%d2
80009538:	6d 00 34 33 	call 8000fba0 <sbrk>
8000953c:	80 22       	mov.d %d2,%a2
8000953e:	df f2 04 00 	jeq %d2,-1,80009546 <_sbrk_r+0x1a>
80009542:	60 22       	mov.a %a2,%d2
80009544:	00 90       	ret 
80009546:	19 c3 98 30 	ld.w %d3,[%a12]2264
8000954a:	df 03 fc 7f 	jeq %d3,0,80009542 <_sbrk_r+0x16>
8000954e:	60 22       	mov.a %a2,%d2
80009550:	74 d3       	st.w [%a13],%d3
80009552:	00 90       	ret 

80009554 <_write_r>:
80009554:	82 02       	mov %d2,0
80009556:	40 4d       	mov.aa %a13,%a4
80009558:	91 00 00 c6 	movh.a %a12,24576
8000955c:	40 54       	mov.aa %a4,%a5
8000955e:	59 c2 98 30 	st.w [%a12]2264 <600008d8 <errno>>,%d2
80009562:	6d 00 05 33 	call 8000fb6c <write>
80009566:	df f2 03 00 	jeq %d2,-1,8000956c <_write_r+0x18>
8000956a:	00 90       	ret 
8000956c:	19 c3 98 30 	ld.w %d3,[%a12]2264
80009570:	df 03 fd 7f 	jeq %d3,0,8000956a <_write_r+0x16>
80009574:	74 d3       	st.w [%a13],%d3
80009576:	00 90       	ret 

80009578 <_malloc_trim_r>:
80009578:	91 00 00 c6 	movh.a %a12,24576
8000957c:	02 49       	mov %d9,%d4
8000957e:	80 48       	mov.d %d8,%a4
80009580:	d9 cc 10 10 	lea %a12,[%a12]80 <60000050 <__malloc_av_>>
80009584:	6d ff 7f fa 	call 80008a82 <__malloc_lock>
80009588:	99 c2 08 00 	ld.a %a2,[%a12]8 <60000008 <LCF_DSPR1_START+0x8>>
8000958c:	8b f9 06 21 	rsub %d2,%d9,111
80009590:	19 2a 04 00 	ld.w %d10,[%a2]4
80009594:	8f 3a c0 a1 	andn %d10,%d10,3
80009598:	42 a2       	add %d2,%d10
8000959a:	8f f2 c7 21 	andn %d2,%d2,127
8000959e:	1b 02 f8 9f 	addi %d9,%d2,-128
800095a2:	8b 09 88 22 	ge %d2,%d9,128
800095a6:	df 02 0c 00 	jeq %d2,0,800095be <_malloc_trim_r+0x46>
800095aa:	60 84       	mov.a %a4,%d8
800095ac:	82 04       	mov %d4,0
800095ae:	6d ff bf ff 	call 8000952c <_sbrk_r>
800095b2:	19 c2 08 00 	ld.w %d2,[%a12]8 <60000008 <LCF_DSPR1_START+0x8>>
800095b6:	80 23       	mov.d %d3,%a2
800095b8:	42 a2       	add %d2,%d10
800095ba:	5f 23 07 00 	jeq %d3,%d2,800095c8 <_malloc_trim_r+0x50>
800095be:	60 84       	mov.a %a4,%d8
800095c0:	6d ff 62 fa 	call 80008a84 <__malloc_unlock>
800095c4:	82 02       	mov %d2,0
800095c6:	00 90       	ret 
800095c8:	60 84       	mov.a %a4,%d8
800095ca:	8b 09 00 41 	rsub %d4,%d9,0
800095ce:	6d ff af ff 	call 8000952c <_sbrk_r>
800095d2:	80 22       	mov.d %d2,%a2
800095d4:	df f2 18 00 	jeq %d2,-1,80009604 <_malloc_trim_r+0x8c>
800095d8:	0b 9a 80 20 	sub %d2,%d10,%d9
800095dc:	99 c2 08 00 	ld.a %a2,[%a12]8
800095e0:	8f 12 40 21 	or %d2,%d2,1
800095e4:	60 84       	mov.a %a4,%d8
800095e6:	59 22 04 00 	st.w [%a2]4,%d2
800095ea:	91 00 00 26 	movh.a %a2,24576
800095ee:	d9 23 60 d0 	lea %a3,[%a2]1888 <60000760 <__malloc_current_mallinfo>>
800095f2:	54 32       	ld.w %d2,[%a3]
800095f4:	0b 92 80 90 	sub %d9,%d2,%d9
800095f8:	59 29 60 d0 	st.w [%a2]1888 <60000760 <__malloc_current_mallinfo>>,%d9
800095fc:	6d ff 44 fa 	call 80008a84 <__malloc_unlock>
80009600:	82 12       	mov %d2,1
80009602:	00 90       	ret 
80009604:	60 84       	mov.a %a4,%d8
80009606:	82 04       	mov %d4,0
80009608:	6d ff 92 ff 	call 8000952c <_sbrk_r>
8000960c:	80 24       	mov.d %d4,%a2
8000960e:	99 c2 08 00 	ld.a %a2,[%a12]8
80009612:	80 22       	mov.d %d2,%a2
80009614:	0b 24 80 30 	sub %d3,%d4,%d2
80009618:	8b 03 41 22 	lt %d2,%d3,16
8000961c:	df 02 d1 ff 	jne %d2,0,800095be <_malloc_trim_r+0x46>
80009620:	91 00 00 36 	movh.a %a3,24576
80009624:	19 32 08 10 	ld.w %d2,[%a3]72 <60000048 <__malloc_sbrk_base>>
80009628:	8f 13 40 31 	or %d3,%d3,1
8000962c:	0b 24 80 20 	sub %d2,%d4,%d2
80009630:	91 00 00 36 	movh.a %a3,24576
80009634:	59 23 04 00 	st.w [%a2]4,%d3
80009638:	59 32 60 d0 	st.w [%a3]1888 <60000760 <__malloc_current_mallinfo>>,%d2
8000963c:	1d ff c1 ff 	j 800095be <_malloc_trim_r+0x46>

80009640 <_free_r>:
80009640:	80 48       	mov.d %d8,%a4
80009642:	40 5c       	mov.aa %a12,%a5
80009644:	bd 05 5c 00 	jz.a %a5,800096fc <_free_r+0xbc>
80009648:	6d ff 1d fa 	call 80008a82 <__malloc_lock>
8000964c:	19 c3 fc ff 	ld.w %d3,[%a12]-4
80009650:	d9 c3 f8 ff 	lea %a3,[%a12]-8
80009654:	8f 13 c0 21 	andn %d2,%d3,1
80009658:	91 00 00 66 	movh.a %a6,24576
8000965c:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
80009660:	d9 66 10 10 	lea %a6,[%a6]80 <60000050 <__malloc_av_>>
80009664:	99 64 08 00 	ld.a %a4,[%a6]8 <60000008 <LCF_DSPR1_START+0x8>>
80009668:	19 24 04 00 	ld.w %d4,[%a2]4 <60000008 <LCF_DSPR1_START+0x8>>
8000966c:	8f 34 c0 41 	andn %d4,%d4,3
80009670:	7d 24 ae 00 	jeq.a %a4,%a2,800097cc <_free_r+0x18c>
80009674:	59 24 04 00 	st.w [%a2]4,%d4
80009678:	01 24 00 56 	addsc.a %a5,%a2,%d4,0
8000967c:	6f 03 41 80 	jnz.t %d3,0,800096fe <_free_r+0xbe>
80009680:	19 c3 f8 ff 	ld.w %d3,[%a12]-8
80009684:	60 34       	mov.a %a4,%d3
80009686:	42 32       	add %d2,%d3
80009688:	01 43 20 30 	sub.a %a3,%a3,%a4
8000968c:	99 34 08 00 	ld.a %a4,[%a3]8
80009690:	19 53 04 00 	ld.w %d3,[%a5]4
80009694:	d9 65 08 00 	lea %a5,[%a6]8 <60000008 <LCF_DSPR1_START+0x8>>
80009698:	8f 13 00 31 	and %d3,%d3,1
8000969c:	7d 54 81 00 	jeq.a %a4,%a5,8000979e <_free_r+0x15e>
800096a0:	99 37 0c 00 	ld.a %a7,[%a3]12
800096a4:	b5 47 0c 00 	st.a [%a4]12,%a7
800096a8:	b5 74 08 00 	st.a [%a7]8,%a4
800096ac:	df 03 c7 00 	jeq %d3,0,8000983a <_free_r+0x1fa>
800096b0:	8f 12 40 31 	or %d3,%d2,1
800096b4:	59 33 04 00 	st.w [%a3]4,%d3
800096b8:	74 22       	st.w [%a2],%d2
800096ba:	3b 00 20 30 	mov %d3,512
800096be:	7f 32 44 80 	jge.u %d2,%d3,80009746 <_free_r+0x106>
800096c2:	19 64 04 00 	ld.w %d4,[%a6]4 <60000004 <LCF_DSPR1_START+0x4>>
800096c6:	8f b2 1f 30 	sh %d3,%d2,-5
800096ca:	8f 72 c0 21 	andn %d2,%d2,7
800096ce:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
800096d2:	1b 82 00 20 	addi %d2,%d2,8
800096d6:	d9 62 04 00 	lea %a2,[%a6]4 <60000004 <LCF_DSPR1_START+0x4>>
800096da:	01 62 00 66 	addsc.a %a6,%a6,%d2,0
800096de:	74 23       	st.w [%a2],%d3
800096e0:	d4 65       	ld.a %a5,[%a6]
800096e2:	40 62       	mov.aa %a2,%a6
800096e4:	b0 82       	add.a %a2,-8
800096e6:	b5 32 0c 00 	st.a [%a3]12,%a2
800096ea:	b5 35 08 00 	st.a [%a3]8,%a5
800096ee:	f4 63       	st.a [%a6],%a3
800096f0:	b5 53 0c 00 	st.a [%a5]12,%a3
800096f4:	60 84       	mov.a %a4,%d8
800096f6:	6d ff c7 f9 	call 80008a84 <__malloc_unlock>
800096fa:	00 90       	ret 
800096fc:	00 90       	ret 
800096fe:	19 53 04 00 	ld.w %d3,[%a5]4
80009702:	6f 03 19 80 	jnz.t %d3,0,80009734 <_free_r+0xf4>
80009706:	42 42       	add %d2,%d4
80009708:	d9 65 08 00 	lea %a5,[%a6]8
8000970c:	99 24 08 00 	ld.a %a4,[%a2]8
80009710:	01 32 00 76 	addsc.a %a7,%a3,%d2,0
80009714:	8f 12 40 31 	or %d3,%d2,1
80009718:	7d 54 9c 00 	jeq.a %a4,%a5,80009850 <_free_r+0x210>
8000971c:	d9 22 0c 00 	lea %a2,[%a2]12
80009720:	d4 22       	ld.a %a2,[%a2]
80009722:	b5 42 0c 00 	st.a [%a4]12,%a2
80009726:	b5 24 08 00 	st.a [%a2]8,%a4
8000972a:	59 33 04 00 	st.w [%a3]4,%d3
8000972e:	74 72       	st.w [%a7],%d2
80009730:	1d ff c5 ff 	j 800096ba <_free_r+0x7a>
80009734:	8f 12 40 31 	or %d3,%d2,1
80009738:	59 c3 fc ff 	st.w [%a12]-4,%d3
8000973c:	74 22       	st.w [%a2],%d2
8000973e:	3b 00 20 30 	mov %d3,512
80009742:	3f 32 c0 ff 	jlt.u %d2,%d3,800096c2 <_free_r+0x82>
80009746:	8f 72 1f 30 	sh %d3,%d2,-9
8000974a:	ff 53 66 80 	jge.u %d3,5,80009816 <_free_r+0x1d6>
8000974e:	8f a2 1f 30 	sh %d3,%d2,-6
80009752:	1b 83 03 50 	addi %d5,%d3,56
80009756:	1b 93 03 30 	addi %d3,%d3,57
8000975a:	8f 33 00 40 	sh %d4,%d3,3
8000975e:	01 64 00 56 	addsc.a %a5,%a6,%d4,0
80009762:	40 52       	mov.aa %a2,%a5
80009764:	d4 22       	ld.a %a2,[%a2]
80009766:	b0 85       	add.a %a5,-8
80009768:	7d 25 81 00 	jeq.a %a5,%a2,8000986a <_free_r+0x22a>
8000976c:	19 23 04 00 	ld.w %d3,[%a2]4
80009770:	8f 33 c0 31 	andn %d3,%d3,3
80009774:	7f 32 07 80 	jge.u %d2,%d3,80009782 <_free_r+0x142>
80009778:	d9 22 08 00 	lea %a2,[%a2]8
8000977c:	d4 22       	ld.a %a2,[%a2]
8000977e:	7d 25 f7 ff 	jne.a %a5,%a2,8000976c <_free_r+0x12c>
80009782:	99 25 0c 00 	ld.a %a5,[%a2]12
80009786:	b5 35 0c 00 	st.a [%a3]12,%a5
8000978a:	b5 32 08 00 	st.a [%a3]8,%a2
8000978e:	b5 53 08 00 	st.a [%a5]8,%a3
80009792:	60 84       	mov.a %a4,%d8
80009794:	b5 23 0c 00 	st.a [%a2]12,%a3
80009798:	6d ff 76 f9 	call 80008a84 <__malloc_unlock>
8000979c:	00 90       	ret 
8000979e:	df 03 91 80 	jne %d3,0,800098c0 <_free_r+0x280>
800097a2:	99 24 0c 00 	ld.a %a4,[%a2]12
800097a6:	d9 22 08 00 	lea %a2,[%a2]8
800097aa:	d4 22       	ld.a %a2,[%a2]
800097ac:	42 42       	add %d2,%d4
800097ae:	8f 12 40 31 	or %d3,%d2,1
800097b2:	b5 24 0c 00 	st.a [%a2]12,%a4
800097b6:	b5 42 08 00 	st.a [%a4]8,%a2
800097ba:	59 33 04 00 	st.w [%a3]4,%d3
800097be:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
800097c2:	60 84       	mov.a %a4,%d8
800097c4:	74 32       	st.w [%a3],%d2
800097c6:	6d ff 5f f9 	call 80008a84 <__malloc_unlock>
800097ca:	00 90       	ret 
800097cc:	42 42       	add %d2,%d4
800097ce:	6f 03 0f 80 	jnz.t %d3,0,800097ec <_free_r+0x1ac>
800097d2:	54 33       	ld.w %d3,[%a3]
800097d4:	60 32       	mov.a %a2,%d3
800097d6:	42 32       	add %d2,%d3
800097d8:	01 23 20 30 	sub.a %a3,%a3,%a2
800097dc:	99 32 0c 00 	ld.a %a2,[%a3]12
800097e0:	99 34 08 00 	ld.a %a4,[%a3]8
800097e4:	b5 42 0c 00 	st.a [%a4]12,%a2
800097e8:	b5 24 08 00 	st.a [%a2]8,%a4
800097ec:	8f 12 40 31 	or %d3,%d2,1
800097f0:	91 00 00 26 	movh.a %a2,24576
800097f4:	59 33 04 00 	st.w [%a3]4,%d3
800097f8:	19 23 0c 10 	ld.w %d3,[%a2]76 <6000004c <__malloc_trim_threshold>>
800097fc:	b5 63 08 00 	st.a [%a6]8 <6000004c <__malloc_trim_threshold>>,%a3
80009800:	3f 32 7a ff 	jlt.u %d2,%d3,800096f4 <_free_r+0xb4>
80009804:	91 00 00 26 	movh.a %a2,24576
80009808:	19 24 50 e0 	ld.w %d4,[%a2]1936 <60000790 <__malloc_top_pad>>
8000980c:	60 84       	mov.a %a4,%d8
8000980e:	6d ff b5 fe 	call 80009578 <_malloc_trim_r>
80009812:	1d ff 71 ff 	j 800096f4 <_free_r+0xb4>
80009816:	8b 53 a1 42 	ge.u %d4,%d3,21
8000981a:	df 04 13 00 	jeq %d4,0,80009840 <_free_r+0x200>
8000981e:	8b 53 a5 42 	ge.u %d4,%d3,85
80009822:	df 04 2f 80 	jne %d4,0,80009880 <_free_r+0x240>
80009826:	8f 42 1f 30 	sh %d3,%d2,-12
8000982a:	1b e3 06 50 	addi %d5,%d3,110
8000982e:	1b f3 06 30 	addi %d3,%d3,111
80009832:	8f 33 00 40 	sh %d4,%d3,3
80009836:	1d ff 94 ff 	j 8000975e <_free_r+0x11e>
8000983a:	42 42       	add %d2,%d4
8000983c:	1d ff 68 ff 	j 8000970c <_free_r+0xcc>
80009840:	1b b3 05 50 	addi %d5,%d3,91
80009844:	1b c3 05 30 	addi %d3,%d3,92
80009848:	8f 33 00 40 	sh %d4,%d3,3
8000984c:	1d ff 89 ff 	j 8000975e <_free_r+0x11e>
80009850:	b5 63 14 00 	st.a [%a6]20,%a3
80009854:	b5 63 10 00 	st.a [%a6]16,%a3
80009858:	b5 35 0c 00 	st.a [%a3]12,%a5
8000985c:	b5 35 08 00 	st.a [%a3]8,%a5
80009860:	59 33 04 00 	st.w [%a3]4,%d3
80009864:	74 72       	st.w [%a7],%d2
80009866:	1d ff 47 ff 	j 800096f4 <_free_r+0xb4>
8000986a:	19 63 04 00 	ld.w %d3,[%a6]4
8000986e:	8f e5 3f 20 	sha %d2,%d5,-2
80009872:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
80009876:	d9 64 04 00 	lea %a4,[%a6]4
8000987a:	74 42       	st.w [%a4],%d2
8000987c:	1d ff 85 ff 	j 80009786 <_free_r+0x146>
80009880:	8b 53 b5 42 	ge.u %d4,%d3,341
80009884:	df 04 0c 80 	jne %d4,0,8000989c <_free_r+0x25c>
80009888:	8f 12 1f 30 	sh %d3,%d2,-15
8000988c:	1b 73 07 50 	addi %d5,%d3,119
80009890:	1b 83 07 30 	addi %d3,%d3,120
80009894:	8f 33 00 40 	sh %d4,%d3,3
80009898:	1d ff 63 ff 	j 8000975e <_free_r+0x11e>
8000989c:	3b 50 55 60 	mov %d6,1365
800098a0:	3b 80 3f 40 	mov %d4,1016
800098a4:	3b e0 07 50 	mov %d5,126
800098a8:	7f 63 5b ff 	jge.u %d3,%d6,8000975e <_free_r+0x11e>
800098ac:	8f e2 1e 30 	sh %d3,%d2,-18
800098b0:	1b c3 07 50 	addi %d5,%d3,124
800098b4:	1b d3 07 30 	addi %d3,%d3,125
800098b8:	8f 33 00 40 	sh %d4,%d3,3
800098bc:	1d ff 51 ff 	j 8000975e <_free_r+0x11e>
800098c0:	8f 12 40 31 	or %d3,%d2,1
800098c4:	59 33 04 00 	st.w [%a3]4,%d3
800098c8:	74 22       	st.w [%a2],%d2
800098ca:	1d ff 15 ff 	j 800096f4 <_free_r+0xb4>

800098ce <_free_r_end>:
	...

800098d0 <_svfprintf_r>:
800098d0:	d9 aa d0 bf 	lea %sp,[%sp]-304
800098d4:	80 5f       	mov.d %d15,%a5
800098d6:	40 4f       	mov.aa %a15,%a4
800098d8:	80 6e       	mov.d %d14,%a6
800098da:	b5 a7 20 00 	st.a [%sp]32,%a7
800098de:	6d 00 d5 15 	call 8000c488 <_localeconv_r>
800098e2:	54 22       	ld.w %d2,[%a2]
800098e4:	59 a2 04 10 	st.w [%sp]68,%d2
800098e8:	60 24       	mov.a %a4,%d2
800098ea:	6d ff 12 fb 	call 80008f0e <strlen>
800098ee:	60 f2       	mov.a %a2,%d15
800098f0:	59 a2 00 10 	st.w [%sp]64,%d2
800098f4:	c9 23 0c 00 	ld.h %d3,[%a2]12
800098f8:	6f 73 06 00 	jz.t %d3,7,80009904 <_svfprintf_r+0x34>
800098fc:	19 22 10 00 	ld.w %d2,[%a2]16
80009900:	df 02 d8 09 	jeq %d2,0,8000acb0 <_svfprintf_r+0x13e0>
80009904:	82 02       	mov %d2,0
80009906:	d9 a2 0c 20 	lea %a2,[%sp]140
8000990a:	60 ed       	mov.a %a13,%d14
8000990c:	f8 02       	st.a [%sp]8,%a15
8000990e:	b5 a2 00 20 	st.a [%sp]128,%a2
80009912:	59 a2 08 20 	st.w [%sp]136,%d2
80009916:	59 a2 04 20 	st.w [%sp]132,%d2
8000991a:	59 a2 30 00 	st.w [%sp]48,%d2
8000991e:	59 a2 38 00 	st.w [%sp]56,%d2
80009922:	59 a2 3c 00 	st.w [%sp]60,%d2
80009926:	59 a2 08 10 	st.w [%sp]72,%d2
8000992a:	59 a2 0c 10 	st.w [%sp]76,%d2
8000992e:	59 a2 14 10 	st.w [%sp]84,%d2
80009932:	59 a2 18 10 	st.w [%sp]88,%d2
80009936:	59 a2 10 10 	st.w [%sp]80,%d2
8000993a:	59 a2 10 00 	st.w [%sp]16,%d2
8000993e:	02 fe       	mov %d14,%d15
80009940:	40 2f       	mov.aa %a15,%a2
80009942:	79 d3 00 00 	ld.b %d3,[%a13]0
80009946:	8b 03 20 22 	ne %d2,%d3,0
8000994a:	8b 53 22 24 	and.ne %d2,%d3,37
8000994e:	df 02 f7 00 	jeq %d2,0,80009b3c <_svfprintf_r+0x26c>
80009952:	58 02       	ld.w %d15,[%sp]8
80009954:	d9 d2 01 00 	lea %a2,[%a13]1
80009958:	79 23 00 00 	ld.b %d3,[%a2]0
8000995c:	d9 2e ff ff 	lea %a14,[%a2]-1
80009960:	8b 53 22 22 	ne %d2,%d3,37
80009964:	8b 03 20 24 	and.ne %d2,%d3,0
80009968:	40 2c       	mov.aa %a12,%a2
8000996a:	b0 12       	add.a %a2,1
8000996c:	df 02 f6 ff 	jne %d2,0,80009958 <_svfprintf_r+0x88>
80009970:	01 dc 20 20 	sub.a %a2,%a12,%a13
80009974:	78 02       	st.w [%sp]8,%d15
80009976:	80 28       	mov.d %d8,%a2
80009978:	7d dc 1b 00 	jeq.a %a12,%a13,800099ae <_svfprintf_r+0xde>
8000997c:	19 a2 08 20 	ld.w %d2,[%sp]136
80009980:	e8 0d       	st.a [%a15]0,%a13
80009982:	42 82       	add %d2,%d8
80009984:	e8 12       	st.a [%a15]4,%a2
80009986:	d9 ff 08 00 	lea %a15,[%a15]8
8000998a:	59 a2 08 20 	st.w [%sp]136,%d2
8000998e:	19 a2 04 20 	ld.w %d2,[%sp]132
80009992:	c2 12       	add %d2,1
80009994:	59 a2 04 20 	st.w [%sp]132,%d2
80009998:	8b 82 80 22 	ge %d2,%d2,8
8000999c:	df 02 ab 81 	jne %d2,0,80009cf2 <_svfprintf_r+0x422>
800099a0:	19 a2 10 00 	ld.w %d2,[%sp]16
800099a4:	79 e3 01 00 	ld.b %d3,[%a14]1
800099a8:	42 82       	add %d2,%d8
800099aa:	59 a2 10 00 	st.w [%sp]16,%d2
800099ae:	df 03 84 0a 	jeq %d3,0,8000aeb6 <_svfprintf_r+0x15e6>
800099b2:	82 f2       	mov %d2,-1
800099b4:	82 0f       	mov %d15,0
800099b6:	99 ae 08 00 	ld.a %a14,[%sp]8
800099ba:	59 a2 0c 00 	st.w [%sp]12,%d2
800099be:	82 02       	mov %d2,0
800099c0:	79 c3 01 00 	ld.b %d3,[%a12]1
800099c4:	d9 cd 01 00 	lea %a13,[%a12]1
800099c8:	91 10 00 c8 	movh.a %a12,32769
800099cc:	e9 af 23 10 	st.b [%sp]99,%d15
800099d0:	59 a2 18 00 	st.w [%sp]24,%d2
800099d4:	59 a2 04 00 	st.w [%sp]4,%d2
800099d8:	d9 cc 88 d9 	lea %a12,[%a12]-25784 <80009b48 <_svfprintf_r+0x278>>
800099dc:	3b c0 06 90 	mov %d9,108
800099e0:	3b 80 06 80 	mov %d8,104
800099e4:	b0 1d       	add.a %a13,1
800099e6:	80 ef       	mov.d %d15,%a14
800099e8:	1b 03 fe 4f 	addi %d4,%d3,-32
800099ec:	8b b4 a5 22 	ge.u %d2,%d4,91
800099f0:	df 02 a9 00 	jeq %d2,0,80009b42 <_svfprintf_r+0x272>
800099f4:	59 a3 24 00 	st.w [%sp]36,%d3
800099f8:	78 02       	st.w [%sp]8,%d15
800099fa:	df 03 5e 0a 	jeq %d3,0,8000aeb6 <_svfprintf_r+0x15e6>
800099fe:	82 0f       	mov %d15,0
80009a00:	e9 a3 0c 30 	st.b [%sp]204,%d3
80009a04:	e9 af 23 10 	st.b [%sp]99,%d15
80009a08:	d2 02       	mov %e2,0
80009a0a:	82 1d       	mov %d13,1
80009a0c:	d9 ae 0c 30 	lea %a14,[%sp]204
80009a10:	59 a2 1c 00 	st.w [%sp]28,%d2
80009a14:	59 ad 14 00 	st.w [%sp]20,%d13
80009a18:	59 a2 0c 00 	st.w [%sp]12,%d2
80009a1c:	59 a2 34 00 	st.w [%sp]52,%d2
80009a20:	59 a2 2c 00 	st.w [%sp]44,%d2
80009a24:	59 a2 28 00 	st.w [%sp]40,%d2
80009a28:	19 a2 04 00 	ld.w %d2,[%sp]4
80009a2c:	19 ab 08 20 	ld.w %d11,[%sp]136
80009a30:	8f 22 00 51 	and %d5,%d2,2
80009a34:	8f 42 08 c1 	and %d12,%d2,132
80009a38:	ab 2d 00 d5 	cadd %d13,%d5,%d13,2
80009a3c:	df 0c 08 80 	jne %d12,0,80009a4c <_svfprintf_r+0x17c>
80009a40:	19 a2 18 00 	ld.w %d2,[%sp]24
80009a44:	0b d2 80 80 	sub %d8,%d2,%d13
80009a48:	ff 18 c9 01 	jge %d8,1,80009dda <_svfprintf_r+0x50a>
80009a4c:	df 03 15 00 	jeq %d3,0,80009a76 <_svfprintf_r+0x1a6>
80009a50:	82 13       	mov %d3,1
80009a52:	19 a2 04 20 	ld.w %d2,[%sp]132
80009a56:	42 3b       	add %d11,%d3
80009a58:	68 13       	st.w [%a15]4,%d3
80009a5a:	42 23       	add %d3,%d2
80009a5c:	d9 a3 23 10 	lea %a3,[%sp]99
80009a60:	e8 03       	st.a [%a15]0,%a3
80009a62:	59 a3 04 20 	st.w [%sp]132,%d3
80009a66:	59 ab 08 20 	st.w [%sp]136,%d11
80009a6a:	8b 83 80 32 	ge %d3,%d3,8
80009a6e:	d9 ff 08 00 	lea %a15,[%a15]8
80009a72:	df 03 0c 82 	jne %d3,0,80009e8a <_svfprintf_r+0x5ba>
80009a76:	df 05 16 00 	jeq %d5,0,80009aa2 <_svfprintf_r+0x1d2>
80009a7a:	82 23       	mov %d3,2
80009a7c:	19 a2 04 20 	ld.w %d2,[%sp]132
80009a80:	42 3b       	add %d11,%d3
80009a82:	68 13       	st.w [%a15]4,%d3
80009a84:	1b 12 00 30 	addi %d3,%d2,1
80009a88:	d9 a3 24 10 	lea %a3,[%sp]100
80009a8c:	e8 03       	st.a [%a15]0,%a3
80009a8e:	59 a3 04 20 	st.w [%sp]132,%d3
80009a92:	59 ab 08 20 	st.w [%sp]136,%d11
80009a96:	8b 83 80 32 	ge %d3,%d3,8
80009a9a:	d9 ff 08 00 	lea %a15,[%a15]8
80009a9e:	df 03 ce 85 	jne %d3,0,8000a63a <_svfprintf_r+0xd6a>
80009aa2:	8b 0c 28 c2 	ne %d12,%d12,128
80009aa6:	df 0c 4d 04 	jeq %d12,0,8000a340 <_svfprintf_r+0xa70>
80009aaa:	19 a8 0c 00 	ld.w %d8,[%sp]12
80009aae:	19 a2 14 00 	ld.w %d2,[%sp]20
80009ab2:	a2 28       	sub %d8,%d2
80009ab4:	ff 18 aa 04 	jge %d8,1,8000a408 <_svfprintf_r+0xb38>
80009ab8:	19 a2 04 00 	ld.w %d2,[%sp]4
80009abc:	6f 82 c0 83 	jnz.t %d2,8,8000a23c <_svfprintf_r+0x96c>
80009ac0:	19 a3 14 00 	ld.w %d3,[%sp]20
80009ac4:	19 a2 04 20 	ld.w %d2,[%sp]132
80009ac8:	42 3b       	add %d11,%d3
80009aca:	c2 12       	add %d2,1
80009acc:	e8 0e       	st.a [%a15]0,%a14
80009ace:	68 13       	st.w [%a15]4,%d3
80009ad0:	59 a2 04 20 	st.w [%sp]132,%d2
80009ad4:	59 ab 08 20 	st.w [%sp]136,%d11
80009ad8:	8b 82 80 22 	ge %d2,%d2,8
80009adc:	df 02 87 85 	jne %d2,0,8000a5ea <_svfprintf_r+0xd1a>
80009ae0:	d9 ff 08 00 	lea %a15,[%a15]8
80009ae4:	19 a2 04 00 	ld.w %d2,[%sp]4
80009ae8:	6f 22 08 00 	jz.t %d2,2,80009af8 <_svfprintf_r+0x228>
80009aec:	19 a2 18 00 	ld.w %d2,[%sp]24
80009af0:	0b d2 80 80 	sub %d8,%d2,%d13
80009af4:	ff 18 c8 05 	jge %d8,1,8000a684 <_svfprintf_r+0xdb4>
80009af8:	19 a2 18 00 	ld.w %d2,[%sp]24
80009afc:	0b d2 a0 d1 	max %d13,%d2,%d13
80009b00:	19 a2 10 00 	ld.w %d2,[%sp]16
80009b04:	42 d2       	add %d2,%d13
80009b06:	59 a2 10 00 	st.w [%sp]16,%d2
80009b0a:	df 0b 01 85 	jne %d11,0,8000a50c <_svfprintf_r+0xc3c>
80009b0e:	82 02       	mov %d2,0
80009b10:	59 a2 04 20 	st.w [%sp]132,%d2
80009b14:	19 a2 1c 00 	ld.w %d2,[%sp]28
80009b18:	df 02 08 00 	jeq %d2,0,80009b28 <_svfprintf_r+0x258>
80009b1c:	99 a5 1c 00 	ld.a %a5,[%sp]28
80009b20:	99 a4 08 00 	ld.a %a4,[%sp]8
80009b24:	6d ff 8e fd 	call 80009640 <_free_r>
80009b28:	79 d3 00 00 	ld.b %d3,[%a13]0
80009b2c:	d9 af 0c 20 	lea %a15,[%sp]140
80009b30:	8b 03 20 22 	ne %d2,%d3,0
80009b34:	8b 53 22 24 	and.ne %d2,%d3,37
80009b38:	df 02 0d ff 	jne %d2,0,80009952 <_svfprintf_r+0x82>
80009b3c:	40 dc       	mov.aa %a12,%a13
80009b3e:	1d ff 38 ff 	j 800099ae <_svfprintf_r+0xde>
80009b42:	01 c4 02 26 	addsc.a %a2,%a12,%d4,2
80009b46:	dc 02       	ji %a2
80009b48:	1d 00 07 02 	j 80009f56 <_svfprintf_r+0x686>
80009b4c:	1d ff 54 ff 	j 800099f4 <_svfprintf_r+0x124>
80009b50:	1d ff 52 ff 	j 800099f4 <_svfprintf_r+0x124>
80009b54:	1d 00 38 02 	j 80009fc4 <_svfprintf_r+0x6f4>
80009b58:	1d ff 4e ff 	j 800099f4 <_svfprintf_r+0x124>
80009b5c:	1d ff 4c ff 	j 800099f4 <_svfprintf_r+0x124>
80009b60:	1d ff 4a ff 	j 800099f4 <_svfprintf_r+0x124>
80009b64:	1d 00 05 02 	j 80009f6e <_svfprintf_r+0x69e>
80009b68:	1d ff 46 ff 	j 800099f4 <_svfprintf_r+0x124>
80009b6c:	1d ff 44 ff 	j 800099f4 <_svfprintf_r+0x124>
80009b70:	1d 00 59 02 	j 8000a022 <_svfprintf_r+0x752>
80009b74:	1d 00 4f 02 	j 8000a012 <_svfprintf_r+0x742>
80009b78:	1d ff 3e ff 	j 800099f4 <_svfprintf_r+0x124>
80009b7c:	1d 00 21 09 	j 8000adbe <_svfprintf_r+0x14ee>
80009b80:	1d 00 2d 02 	j 80009fda <_svfprintf_r+0x70a>
80009b84:	1d ff 38 ff 	j 800099f4 <_svfprintf_r+0x124>
80009b88:	1d 00 dc 01 	j 80009f40 <_svfprintf_r+0x670>
80009b8c:	1d 00 94 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009b90:	1d 00 92 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009b94:	1d 00 90 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009b98:	1d 00 8e 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009b9c:	1d 00 8c 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009ba0:	1d 00 8a 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009ba4:	1d 00 88 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009ba8:	1d 00 86 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009bac:	1d 00 84 00 	j 80009cb4 <_svfprintf_r+0x3e4>
80009bb0:	1d ff 22 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bb4:	1d ff 20 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bb8:	1d ff 1e ff 	j 800099f4 <_svfprintf_r+0x124>
80009bbc:	1d ff 1c ff 	j 800099f4 <_svfprintf_r+0x124>
80009bc0:	1d ff 1a ff 	j 800099f4 <_svfprintf_r+0x124>
80009bc4:	1d ff 18 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bc8:	1d ff 16 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bcc:	1d 00 a0 00 	j 80009d0c <_svfprintf_r+0x43c>
80009bd0:	1d ff 12 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bd4:	1d 00 a5 01 	j 80009f1e <_svfprintf_r+0x64e>
80009bd8:	1d 00 82 02 	j 8000a0dc <_svfprintf_r+0x80c>
80009bdc:	1d 00 98 00 	j 80009d0c <_svfprintf_r+0x43c>
80009be0:	1d 00 96 00 	j 80009d0c <_svfprintf_r+0x43c>
80009be4:	1d 00 94 00 	j 80009d0c <_svfprintf_r+0x43c>
80009be8:	1d ff 06 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bec:	1d ff 04 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bf0:	1d ff 02 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bf4:	1d ff 00 ff 	j 800099f4 <_svfprintf_r+0x124>
80009bf8:	1d 00 de 02 	j 8000a1b4 <_svfprintf_r+0x8e4>
80009bfc:	1d ff fc fe 	j 800099f4 <_svfprintf_r+0x124>
80009c00:	1d ff fa fe 	j 800099f4 <_svfprintf_r+0x124>
80009c04:	1d 00 a0 02 	j 8000a144 <_svfprintf_r+0x874>
80009c08:	1d ff f6 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c0c:	1d ff f4 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c10:	1d ff f2 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c14:	1d 00 4e 01 	j 80009eb0 <_svfprintf_r+0x5e0>
80009c18:	1d ff ee fe 	j 800099f4 <_svfprintf_r+0x124>
80009c1c:	1d 00 13 02 	j 8000a042 <_svfprintf_r+0x772>
80009c20:	1d ff ea fe 	j 800099f4 <_svfprintf_r+0x124>
80009c24:	1d ff e8 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c28:	1d 00 c0 08 	j 8000ada8 <_svfprintf_r+0x14d8>
80009c2c:	1d ff e4 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c30:	1d ff e2 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c34:	1d ff e0 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c38:	1d ff de fe 	j 800099f4 <_svfprintf_r+0x124>
80009c3c:	1d ff dc fe 	j 800099f4 <_svfprintf_r+0x124>
80009c40:	1d ff da fe 	j 800099f4 <_svfprintf_r+0x124>
80009c44:	1d ff d8 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c48:	1d ff d6 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c4c:	1d 00 60 00 	j 80009d0c <_svfprintf_r+0x43c>
80009c50:	1d ff d2 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c54:	1d 00 65 01 	j 80009f1e <_svfprintf_r+0x64e>
80009c58:	1d 00 f5 07 	j 8000ac42 <_svfprintf_r+0x1372>
80009c5c:	1d 00 58 00 	j 80009d0c <_svfprintf_r+0x43c>
80009c60:	1d 00 56 00 	j 80009d0c <_svfprintf_r+0x43c>
80009c64:	1d 00 54 00 	j 80009d0c <_svfprintf_r+0x43c>
80009c68:	1d 00 dd 02 	j 8000a222 <_svfprintf_r+0x952>
80009c6c:	1d 00 eb 07 	j 8000ac42 <_svfprintf_r+0x1372>
80009c70:	1d 00 36 00 	j 80009cdc <_svfprintf_r+0x40c>
80009c74:	1d ff c0 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c78:	1d 00 c8 02 	j 8000a208 <_svfprintf_r+0x938>
80009c7c:	1d ff bc fe 	j 800099f4 <_svfprintf_r+0x124>
80009c80:	1d 00 a5 02 	j 8000a1ca <_svfprintf_r+0x8fa>
80009c84:	1d 00 a0 08 	j 8000adc4 <_svfprintf_r+0x14f4>
80009c88:	1d 00 78 02 	j 8000a178 <_svfprintf_r+0x8a8>
80009c8c:	1d 00 28 00 	j 80009cdc <_svfprintf_r+0x40c>
80009c90:	1d ff b2 fe 	j 800099f4 <_svfprintf_r+0x124>
80009c94:	1d 00 0e 01 	j 80009eb0 <_svfprintf_r+0x5e0>
80009c98:	1d 00 1d 00 	j 80009cd2 <_svfprintf_r+0x402>
80009c9c:	1d 00 7f 08 	j 8000ad9a <_svfprintf_r+0x14ca>
80009ca0:	1d ff aa fe 	j 800099f4 <_svfprintf_r+0x124>
80009ca4:	1d ff a8 fe 	j 800099f4 <_svfprintf_r+0x124>
80009ca8:	1d 00 56 08 	j 8000ad54 <_svfprintf_r+0x1484>
80009cac:	1d ff a4 fe 	j 800099f4 <_svfprintf_r+0x124>
80009cb0:	1d 00 11 00 	j 80009cd2 <_svfprintf_r+0x402>
80009cb4:	82 04       	mov %d4,0
80009cb6:	1b 03 fd 2f 	addi %d2,%d3,-48
80009cba:	09 d3 01 00 	ld.b %d3,[%a13+]1
80009cbe:	13 a4 20 42 	madd %d4,%d2,%d4,10
80009cc2:	1b 03 fd 2f 	addi %d2,%d3,-48
80009cc6:	bf a2 fa ff 	jlt.u %d2,10,80009cba <_svfprintf_r+0x3ea>
80009cca:	59 a4 18 00 	st.w [%sp]24,%d4
80009cce:	1d ff 8d fe 	j 800099e8 <_svfprintf_r+0x118>
80009cd2:	60 fe       	mov.a %a14,%d15
80009cd4:	79 d3 00 00 	ld.b %d3,[%a13]0
80009cd8:	1d ff 86 fe 	j 800099e4 <_svfprintf_r+0x114>
80009cdc:	19 a2 04 00 	ld.w %d2,[%sp]4
80009ce0:	60 fe       	mov.a %a14,%d15
80009ce2:	8f 02 42 21 	or %d2,%d2,32
80009ce6:	79 d3 00 00 	ld.b %d3,[%a13]0
80009cea:	59 a2 04 00 	st.w [%sp]4,%d2
80009cee:	1d ff 7b fe 	j 800099e4 <_svfprintf_r+0x114>
80009cf2:	99 a4 08 00 	ld.a %a4,[%sp]8
80009cf6:	60 e5       	mov.a %a5,%d14
80009cf8:	d9 a6 00 20 	lea %a6,[%sp]128
80009cfc:	6d 00 bd 23 	call 8000e476 <__ssprint_r>
80009d00:	df 02 d6 8e 	jne %d2,0,8000baac <_svfprintf_r+0x21dc>
80009d04:	d9 af 0c 20 	lea %a15,[%sp]140
80009d08:	1d ff 4c fe 	j 800099a0 <_svfprintf_r+0xd0>
80009d0c:	19 a2 20 00 	ld.w %d2,[%sp]32
80009d10:	59 a3 24 00 	st.w [%sp]36,%d3
80009d14:	19 a3 04 00 	ld.w %d3,[%sp]4
80009d18:	78 02       	st.w [%sp]8,%d15
80009d1a:	60 22       	mov.a %a2,%d2
80009d1c:	1b 82 00 c0 	addi %d12,%d2,8
80009d20:	6f 33 8d 07 	jz.t %d3,3,8000ac3a <_svfprintf_r+0x136a>
80009d24:	54 22       	ld.w %d2,[%a2]
80009d26:	59 a2 38 00 	st.w [%sp]56,%d2
80009d2a:	19 22 04 00 	ld.w %d2,[%a2]4
80009d2e:	59 a2 3c 00 	st.w [%sp]60,%d2
80009d32:	19 a9 3c 00 	ld.w %d9,[%sp]60
80009d36:	19 aa 38 00 	ld.w %d10,[%sp]56
80009d3a:	b7 09 81 8f 	insert %d8,%d9,0,31,1
80009d3e:	7b 00 ff 77 	movh %d7,32752
80009d42:	82 f6       	mov %d6,-1
80009d44:	c2 f7       	add %d7,-1
80009d46:	02 a4       	mov %d4,%d10
80009d48:	02 85       	mov %d5,%d8
80009d4a:	6d 00 17 33 	call 80010378 <__unorddf2>
80009d4e:	df 02 9a 86 	jne %d2,0,8000aa82 <_svfprintf_r+0x11b2>
80009d52:	7b 00 ff 77 	movh %d7,32752
80009d56:	82 f6       	mov %d6,-1
80009d58:	c2 f7       	add %d7,-1
80009d5a:	02 a4       	mov %d4,%d10
80009d5c:	02 85       	mov %d5,%d8
80009d5e:	6d 00 ed 32 	call 80010338 <__ledf2>
80009d62:	bf 12 90 06 	jlt %d2,1,8000aa82 <_svfprintf_r+0x11b2>
80009d66:	d2 06       	mov %e6,0
80009d68:	02 a4       	mov %d4,%d10
80009d6a:	02 95       	mov %d5,%d9
80009d6c:	6d ff 24 f0 	call 80007db4 <__ltdf2>
80009d70:	79 a3 23 10 	ld.b %d3,[%sp]99
80009d74:	ff 02 07 00 	jge %d2,0,80009d82 <_svfprintf_r+0x4b2>
80009d78:	da 2d       	mov %d15,45
80009d7a:	3b d0 02 30 	mov %d3,45
80009d7e:	e9 af 23 10 	st.b [%sp]99,%d15
80009d82:	91 00 00 38 	movh.a %a3,32768
80009d86:	80 34       	mov.d %d4,%a3
80009d88:	19 a2 24 00 	ld.w %d2,[%sp]36
80009d8c:	91 00 00 28 	movh.a %a2,32768
80009d90:	1b 44 84 50 	addi %d5,%d4,2116
80009d94:	80 24       	mov.d %d4,%a2
80009d96:	8b 82 44 22 	lt %d2,%d2,72
80009d9a:	1b 04 84 40 	addi %d4,%d4,2112
80009d9e:	2b 54 40 22 	sel %d2,%d2,%d4,%d5
80009da2:	60 2e       	mov.a %a14,%d2
80009da4:	19 a2 04 00 	ld.w %d2,[%sp]4
80009da8:	59 ac 20 00 	st.w [%sp]32,%d12
80009dac:	8f 02 c8 21 	andn %d2,%d2,128
80009db0:	82 3d       	mov %d13,3
80009db2:	59 a2 04 00 	st.w [%sp]4,%d2
80009db6:	82 02       	mov %d2,0
80009db8:	59 a2 1c 00 	st.w [%sp]28,%d2
80009dbc:	59 ad 14 00 	st.w [%sp]20,%d13
80009dc0:	59 a2 0c 00 	st.w [%sp]12,%d2
80009dc4:	59 a2 34 00 	st.w [%sp]52,%d2
80009dc8:	59 a2 2c 00 	st.w [%sp]44,%d2
80009dcc:	59 a2 28 00 	st.w [%sp]40,%d2
80009dd0:	df 03 2c 7e 	jeq %d3,0,80009a28 <_svfprintf_r+0x158>
80009dd4:	c2 1d       	add %d13,1
80009dd6:	1d ff 29 fe 	j 80009a28 <_svfprintf_r+0x158>
80009dda:	8b 18 41 32 	lt %d3,%d8,17
80009dde:	19 a4 04 20 	ld.w %d4,[%sp]132
80009de2:	df 03 d5 8c 	jne %d3,0,8000b78c <_svfprintf_r+0x1ebc>
80009de6:	1b f8 fe 3f 	addi %d3,%d8,-17
80009dea:	8f f3 60 31 	nor %d3,%d3,15
80009dee:	91 00 00 c8 	movh.a %a12,32768
80009df2:	b5 ad 1c 10 	st.a [%sp]92,%a13
80009df6:	58 02       	ld.w %d15,[%sp]8
80009df8:	60 dd       	mov.a %a13,%d13
80009dfa:	0b 83 00 90 	add %d9,%d3,%d8
80009dfe:	d9 cc 8c 20 	lea %a12,[%a12]2188 <8000088c <blanks.1>>
80009e02:	3b 00 01 a0 	mov %d10,16
80009e06:	0b 5c 10 c8 	mov %e12,%d12,%d5
80009e0a:	1d 00 06 00 	j 80009e16 <_svfprintf_r+0x546>
80009e0e:	1b 08 ff 8f 	addi %d8,%d8,-16
80009e12:	5f 89 23 00 	jeq %d9,%d8,80009e58 <_svfprintf_r+0x588>
80009e16:	c2 14       	add %d4,1
80009e18:	1b 0b 01 b0 	addi %d11,%d11,16
80009e1c:	e8 0c       	st.a [%a15]0,%a12
80009e1e:	68 1a       	st.w [%a15]4,%d10
80009e20:	59 ab 08 20 	st.w [%sp]136,%d11
80009e24:	59 a4 04 20 	st.w [%sp]132,%d4
80009e28:	8b 84 80 22 	ge %d2,%d4,8
80009e2c:	d9 ff 08 00 	lea %a15,[%a15]8
80009e30:	df 02 ef 7f 	jeq %d2,0,80009e0e <_svfprintf_r+0x53e>
80009e34:	60 e5       	mov.a %a5,%d14
80009e36:	60 f4       	mov.a %a4,%d15
80009e38:	d9 a6 00 20 	lea %a6,[%sp]128
80009e3c:	6d 00 1d 23 	call 8000e476 <__ssprint_r>
80009e40:	df 02 e4 83 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
80009e44:	1b 08 ff 8f 	addi %d8,%d8,-16
80009e48:	19 ab 08 20 	ld.w %d11,[%sp]136
80009e4c:	19 a4 04 20 	ld.w %d4,[%sp]132
80009e50:	d9 af 0c 20 	lea %a15,[%sp]140
80009e54:	5f 89 e1 ff 	jne %d9,%d8,80009e16 <_svfprintf_r+0x546>
80009e58:	02 c5       	mov %d5,%d12
80009e5a:	02 dc       	mov %d12,%d13
80009e5c:	80 dd       	mov.d %d13,%a13
80009e5e:	99 ad 1c 10 	ld.a %a13,[%sp]92
80009e62:	78 02       	st.w [%sp]8,%d15
80009e64:	1b 14 00 30 	addi %d3,%d4,1
80009e68:	42 9b       	add %d11,%d9
80009e6a:	e8 0c       	st.a [%a15]0,%a12
80009e6c:	59 a3 04 20 	st.w [%sp]132,%d3
80009e70:	68 19       	st.w [%a15]4,%d9
80009e72:	59 ab 08 20 	st.w [%sp]136,%d11
80009e76:	8b 83 80 32 	ge %d3,%d3,8
80009e7a:	df 03 ae 88 	jne %d3,0,8000afd6 <_svfprintf_r+0x1706>
80009e7e:	79 a3 23 10 	ld.b %d3,[%sp]99
80009e82:	d9 ff 08 00 	lea %a15,[%a15]8
80009e86:	1d ff e3 fd 	j 80009a4c <_svfprintf_r+0x17c>
80009e8a:	99 a4 08 00 	ld.a %a4,[%sp]8
80009e8e:	60 e5       	mov.a %a5,%d14
80009e90:	d9 a6 00 20 	lea %a6,[%sp]128
80009e94:	59 a5 1c 10 	st.w [%sp]92,%d5
80009e98:	6d 00 ef 22 	call 8000e476 <__ssprint_r>
80009e9c:	df 02 41 83 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
80009ea0:	19 ab 08 20 	ld.w %d11,[%sp]136
80009ea4:	19 a5 1c 10 	ld.w %d5,[%sp]92
80009ea8:	d9 af 0c 20 	lea %a15,[%sp]140
80009eac:	1d ff e5 fd 	j 80009a76 <_svfprintf_r+0x1a6>
80009eb0:	99 ac 20 00 	ld.a %a12,[%sp]32
80009eb4:	78 02       	st.w [%sp]8,%d15
80009eb6:	82 0f       	mov %d15,0
80009eb8:	40 c2       	mov.aa %a2,%a12
80009eba:	d4 2e       	ld.a %a14,[%a2]
80009ebc:	59 a3 24 00 	st.w [%sp]36,%d3
80009ec0:	e9 af 23 10 	st.b [%sp]99,%d15
80009ec4:	19 a2 0c 00 	ld.w %d2,[%sp]12
80009ec8:	b0 4c       	add.a %a12,4
80009eca:	bd 0e ca 09 	jz.a %a14,8000b25e <_svfprintf_r+0x198e>
80009ece:	df f2 02 07 	jeq %d2,-1,8000acd2 <_svfprintf_r+0x1402>
80009ed2:	02 25       	mov %d5,%d2
80009ed4:	82 04       	mov %d4,0
80009ed6:	40 e4       	mov.aa %a4,%a14
80009ed8:	6d 00 b8 10 	call 8000c048 <memchr>
80009edc:	80 22       	mov.d %d2,%a2
80009ede:	b5 a2 1c 00 	st.a [%sp]28,%a2
80009ee2:	df 02 7b 0c 	jeq %d2,0,8000b7d8 <_svfprintf_r+0x1f08>
80009ee6:	99 a2 1c 00 	ld.a %a2,[%sp]28
80009eea:	79 a3 23 10 	ld.b %d3,[%sp]99
80009eee:	01 e2 20 20 	sub.a %a2,%a2,%a14
80009ef2:	b5 a2 14 00 	st.a [%sp]20,%a2
80009ef6:	80 22       	mov.d %d2,%a2
80009ef8:	8b 02 40 d3 	max %d13,%d2,0
80009efc:	82 02       	mov %d2,0
80009efe:	b5 ac 20 00 	st.a [%sp]32,%a12
80009f02:	59 a2 1c 00 	st.w [%sp]28,%d2
80009f06:	59 a2 0c 00 	st.w [%sp]12,%d2
80009f0a:	59 a2 34 00 	st.w [%sp]52,%d2
80009f0e:	59 a2 2c 00 	st.w [%sp]44,%d2
80009f12:	59 a2 28 00 	st.w [%sp]40,%d2
80009f16:	df 03 89 7d 	jeq %d3,0,80009a28 <_svfprintf_r+0x158>
80009f1a:	1d ff 5d ff 	j 80009dd4 <_svfprintf_r+0x504>
80009f1e:	99 a2 20 00 	ld.a %a2,[%sp]32
80009f22:	78 02       	st.w [%sp]8,%d15
80009f24:	82 0f       	mov %d15,0
80009f26:	40 23       	mov.aa %a3,%a2
80009f28:	54 32       	ld.w %d2,[%a3]
80009f2a:	b0 42       	add.a %a2,4
80009f2c:	59 a3 24 00 	st.w [%sp]36,%d3
80009f30:	e9 a2 0c 30 	st.b [%sp]204,%d2
80009f34:	e9 af 23 10 	st.b [%sp]99,%d15
80009f38:	b5 a2 20 00 	st.a [%sp]32,%a2
80009f3c:	1d ff 66 fd 	j 80009a08 <_svfprintf_r+0x138>
80009f40:	19 a2 04 00 	ld.w %d2,[%sp]4
80009f44:	60 fe       	mov.a %a14,%d15
80009f46:	8f 02 48 21 	or %d2,%d2,128
80009f4a:	79 d3 00 00 	ld.b %d3,[%a13]0
80009f4e:	59 a2 04 00 	st.w [%sp]4,%d2
80009f52:	1d ff 49 fd 	j 800099e4 <_svfprintf_r+0x114>
80009f56:	79 a2 23 10 	ld.b %d2,[%sp]99
80009f5a:	60 fe       	mov.a %a14,%d15
80009f5c:	79 d3 00 00 	ld.b %d3,[%a13]0
80009f60:	df 02 42 fd 	jne %d2,0,800099e4 <_svfprintf_r+0x114>
80009f64:	da 20       	mov %d15,32
80009f66:	e9 af 23 10 	st.b [%sp]99,%d15
80009f6a:	1d ff 3d fd 	j 800099e4 <_svfprintf_r+0x114>
80009f6e:	60 fe       	mov.a %a14,%d15
80009f70:	60 f4       	mov.a %a4,%d15
80009f72:	6d 00 8b 12 	call 8000c488 <_localeconv_r>
80009f76:	19 22 04 00 	ld.w %d2,[%a2]4
80009f7a:	59 a2 10 10 	st.w [%sp]80,%d2
80009f7e:	60 24       	mov.a %a4,%d2
80009f80:	6d ff c7 f7 	call 80008f0e <strlen>
80009f84:	60 f4       	mov.a %a4,%d15
80009f86:	02 2a       	mov %d10,%d2
80009f88:	59 a2 18 10 	st.w [%sp]88,%d2
80009f8c:	6d 00 7e 12 	call 8000c488 <_localeconv_r>
80009f90:	19 23 08 00 	ld.w %d3,[%a2]8
80009f94:	59 a3 14 10 	st.w [%sp]84,%d3
80009f98:	8b 03 20 22 	ne %d2,%d3,0
80009f9c:	8b 0a 20 24 	and.ne %d2,%d10,0
80009fa0:	df 02 9a 7e 	jeq %d2,0,80009cd4 <_svfprintf_r+0x404>
80009fa4:	99 a2 14 10 	ld.a %a2,[%sp]84
80009fa8:	19 a5 04 00 	ld.w %d5,[%sp]4
80009fac:	79 d3 00 00 	ld.b %d3,[%a13]0
80009fb0:	79 24 00 00 	ld.b %d4,[%a2]0
80009fb4:	b7 f5 01 25 	insert %d2,%d5,15,10,1
80009fb8:	2b 52 40 24 	sel %d2,%d4,%d2,%d5
80009fbc:	59 a2 04 00 	st.w [%sp]4,%d2
80009fc0:	1d ff 12 fd 	j 800099e4 <_svfprintf_r+0x114>
80009fc4:	19 a2 04 00 	ld.w %d2,[%sp]4
80009fc8:	60 fe       	mov.a %a14,%d15
80009fca:	8f 12 40 21 	or %d2,%d2,1
80009fce:	79 d3 00 00 	ld.b %d3,[%a13]0
80009fd2:	59 a2 04 00 	st.w [%sp]4,%d2
80009fd6:	1d ff 07 fd 	j 800099e4 <_svfprintf_r+0x114>
80009fda:	40 d2       	mov.aa %a2,%a13
80009fdc:	09 23 01 00 	ld.b %d3,[%a2+]1
80009fe0:	8b a3 02 22 	eq %d2,%d3,42
80009fe4:	df 02 94 8d 	jne %d2,0,8000bb0c <_svfprintf_r+0x223c>
80009fe8:	82 04       	mov %d4,0
80009fea:	1b 03 fd 2f 	addi %d2,%d3,-48
80009fee:	40 2d       	mov.aa %a13,%a2
80009ff0:	59 a4 0c 00 	st.w [%sp]12,%d4
80009ff4:	82 04       	mov %d4,0
80009ff6:	ff a2 f9 fc 	jge.u %d2,10,800099e8 <_svfprintf_r+0x118>
80009ffa:	09 d3 01 00 	ld.b %d3,[%a13+]1
80009ffe:	13 a4 20 42 	madd %d4,%d2,%d4,10
8000a002:	1b 03 fd 2f 	addi %d2,%d3,-48
8000a006:	bf a2 fa ff 	jlt.u %d2,10,80009ffa <_svfprintf_r+0x72a>
8000a00a:	59 a4 0c 00 	st.w [%sp]12,%d4
8000a00e:	1d ff ed fc 	j 800099e8 <_svfprintf_r+0x118>
8000a012:	60 fe       	mov.a %a14,%d15
8000a014:	da 2b       	mov %d15,43
8000a016:	79 d3 00 00 	ld.b %d3,[%a13]0
8000a01a:	e9 af 23 10 	st.b [%sp]99,%d15
8000a01e:	1d ff e3 fc 	j 800099e4 <_svfprintf_r+0x114>
8000a022:	99 a2 20 00 	ld.a %a2,[%sp]32
8000a026:	60 fe       	mov.a %a14,%d15
8000a028:	40 23       	mov.aa %a3,%a2
8000a02a:	54 32       	ld.w %d2,[%a3]
8000a02c:	59 a2 18 00 	st.w [%sp]24,%d2
8000a030:	b0 42       	add.a %a2,4
8000a032:	bf 02 0d 06 	jlt %d2,0,8000ac4c <_svfprintf_r+0x137c>
8000a036:	79 d3 00 00 	ld.b %d3,[%a13]0
8000a03a:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a03e:	1d ff d3 fc 	j 800099e4 <_svfprintf_r+0x114>
8000a042:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a046:	59 a3 24 00 	st.w [%sp]36,%d3
8000a04a:	78 02       	st.w [%sp]8,%d15
8000a04c:	8f 02 41 11 	or %d1,%d2,16
8000a050:	99 a2 20 00 	ld.a %a2,[%sp]32
8000a054:	6f 51 b8 04 	jz.t %d1,5,8000a9c4 <_svfprintf_r+0x10f4>
8000a058:	09 2c 48 01 	ld.d %e12,[%a2+]8
8000a05c:	82 14       	mov %d4,1
8000a05e:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a062:	82 02       	mov %d2,0
8000a064:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000a068:	e9 a2 23 10 	st.b [%sp]99,%d2
8000a06c:	df f3 29 02 	jeq %d3,-1,8000a4be <_svfprintf_r+0xbee>
8000a070:	8f 01 c8 21 	andn %d2,%d1,128
8000a074:	02 35       	mov %d5,%d3
8000a076:	59 a2 04 00 	st.w [%sp]4,%d2
8000a07a:	0f dc a0 20 	or %d2,%d12,%d13
8000a07e:	8b 02 20 32 	ne %d3,%d2,0
8000a082:	8b 05 00 35 	or.ne %d3,%d5,0
8000a086:	df 03 1a 82 	jne %d3,0,8000a4ba <_svfprintf_r+0xbea>
8000a08a:	82 02       	mov %d2,0
8000a08c:	d9 ae 30 40 	lea %a14,[%sp]304
8000a090:	59 a2 0c 00 	st.w [%sp]12,%d2
8000a094:	59 a2 14 00 	st.w [%sp]20,%d2
8000a098:	df 04 0d 80 	jne %d4,0,8000a0b2 <_svfprintf_r+0x7e2>
8000a09c:	8f 11 00 21 	and %d2,%d1,1
8000a0a0:	59 a2 14 00 	st.w [%sp]20,%d2
8000a0a4:	6f 01 07 00 	jz.t %d1,0,8000a0b2 <_svfprintf_r+0x7e2>
8000a0a8:	da 30       	mov %d15,48
8000a0aa:	d9 ae 2f 40 	lea %a14,[%sp]303
8000a0ae:	e9 af 2f 40 	st.b [%sp]303,%d15
8000a0b2:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000a0b6:	19 a4 14 00 	ld.w %d4,[%sp]20
8000a0ba:	79 a3 23 10 	ld.b %d3,[%sp]99
8000a0be:	0b 42 a0 d1 	max %d13,%d2,%d4
8000a0c2:	82 02       	mov %d2,0
8000a0c4:	59 a2 1c 00 	st.w [%sp]28,%d2
8000a0c8:	59 a2 34 00 	st.w [%sp]52,%d2
8000a0cc:	59 a2 2c 00 	st.w [%sp]44,%d2
8000a0d0:	59 a2 28 00 	st.w [%sp]40,%d2
8000a0d4:	df 03 aa 7c 	jeq %d3,0,80009a28 <_svfprintf_r+0x158>
8000a0d8:	1d ff 7e fe 	j 80009dd4 <_svfprintf_r+0x504>
8000a0dc:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a0e0:	59 a3 24 00 	st.w [%sp]36,%d3
8000a0e4:	8f 02 41 21 	or %d2,%d2,16
8000a0e8:	78 02       	st.w [%sp]8,%d15
8000a0ea:	59 a2 04 00 	st.w [%sp]4,%d2
8000a0ee:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a0f2:	99 a2 20 00 	ld.a %a2,[%sp]32
8000a0f6:	6f 52 47 04 	jz.t %d2,5,8000a984 <_svfprintf_r+0x10b4>
8000a0fa:	09 22 48 01 	ld.d %e2,[%a2+]8
8000a0fe:	0b 23 10 c8 	mov %e12,%d3,%d2
8000a102:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a106:	bf 03 54 04 	jlt %d3,0,8000a9ae <_svfprintf_r+0x10de>
8000a10a:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000a10e:	df f2 10 03 	jeq %d2,-1,8000a72e <_svfprintf_r+0xe5e>
8000a112:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a116:	19 a4 0c 00 	ld.w %d4,[%sp]12
8000a11a:	8f 02 c8 21 	andn %d2,%d2,128
8000a11e:	8b 04 20 32 	ne %d3,%d4,0
8000a122:	59 a2 04 00 	st.w [%sp]4,%d2
8000a126:	0f dc a0 20 	or %d2,%d12,%d13
8000a12a:	8b 02 00 35 	or.ne %d3,%d2,0
8000a12e:	df 03 00 83 	jne %d3,0,8000a72e <_svfprintf_r+0xe5e>
8000a132:	82 02       	mov %d2,0
8000a134:	d9 ae 30 40 	lea %a14,[%sp]304
8000a138:	59 a2 0c 00 	st.w [%sp]12,%d2
8000a13c:	59 a2 14 00 	st.w [%sp]20,%d2
8000a140:	1d ff b9 ff 	j 8000a0b2 <_svfprintf_r+0x7e2>
8000a144:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a148:	59 a3 24 00 	st.w [%sp]36,%d3
8000a14c:	8f 02 41 21 	or %d2,%d2,16
8000a150:	78 02       	st.w [%sp]8,%d15
8000a152:	59 a2 04 00 	st.w [%sp]4,%d2
8000a156:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a15a:	99 a2 20 00 	ld.a %a2,[%sp]32
8000a15e:	6f 52 00 04 	jz.t %d2,5,8000a95e <_svfprintf_r+0x108e>
8000a162:	09 2c 48 01 	ld.d %e12,[%a2+]8
8000a166:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a16a:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a16e:	82 04       	mov %d4,0
8000a170:	b7 02 01 15 	insert %d1,%d2,0,10,1
8000a174:	1d ff 77 ff 	j 8000a062 <_svfprintf_r+0x792>
8000a178:	99 a2 20 00 	ld.a %a2,[%sp]32
8000a17c:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a180:	78 02       	st.w [%sp]8,%d15
8000a182:	40 23       	mov.aa %a3,%a2
8000a184:	b0 42       	add.a %a2,4
8000a186:	8f 22 40 11 	or %d1,%d2,2
8000a18a:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a18e:	3b 00 83 27 	mov %d2,30768
8000a192:	91 00 00 28 	movh.a %a2,32768
8000a196:	d9 22 90 10 	lea %a2,[%a2]2128 <80000850 <__thenan_df+0x24>>
8000a19a:	b5 a2 08 10 	st.a [%sp]72 <80000850 <__thenan_df+0x24>>,%a2
8000a19e:	c5 02 38 10 	lea %a2,78 <__TRICORE_DERIVATE_MEMORY_MAP__-0x1f8>
8000a1a2:	54 3c       	ld.w %d12,[%a3]
8000a1a4:	82 0d       	mov %d13,0
8000a1a6:	f9 a2 24 10 	st.h [%sp]100,%d2
8000a1aa:	82 24       	mov %d4,2
8000a1ac:	b5 a2 24 00 	st.a [%sp]36,%a2
8000a1b0:	1d ff 59 ff 	j 8000a062 <_svfprintf_r+0x792>
8000a1b4:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a1b8:	60 fe       	mov.a %a14,%d15
8000a1ba:	8f 82 40 21 	or %d2,%d2,8
8000a1be:	79 d3 00 00 	ld.b %d3,[%a13]0
8000a1c2:	59 a2 04 00 	st.w [%sp]4,%d2
8000a1c6:	1d ff 0f fc 	j 800099e4 <_svfprintf_r+0x114>
8000a1ca:	99 a3 20 00 	ld.a %a3,[%sp]32
8000a1ce:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a1d2:	78 02       	st.w [%sp]8,%d15
8000a1d4:	d9 32 04 00 	lea %a2,[%a3]4 <80000002 <BootModeHeader_0+0x2>>
8000a1d8:	6f 52 4a 84 	jnz.t %d2,5,8000aa6c <_svfprintf_r+0x119c>
8000a1dc:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a1e0:	6f 42 35 88 	jnz.t %d2,4,8000b24a <_svfprintf_r+0x197a>
8000a1e4:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a1e8:	6f 62 db 89 	jnz.t %d2,6,8000b59e <_svfprintf_r+0x1cce>
8000a1ec:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a1f0:	6f 92 2d 08 	jz.t %d2,9,8000b24a <_svfprintf_r+0x197a>
8000a1f4:	99 a3 20 00 	ld.a %a3,[%sp]32
8000a1f8:	19 a2 10 00 	ld.w %d2,[%sp]16
8000a1fc:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a200:	d4 33       	ld.a %a3,[%a3]
8000a202:	34 32       	st.b [%a3],%d2
8000a204:	1d ff 9f fb 	j 80009942 <_svfprintf_r+0x72>
8000a208:	79 d3 00 00 	ld.b %d3,[%a13]0
8000a20c:	60 fe       	mov.a %a14,%d15
8000a20e:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a212:	5f 93 46 05 	jeq %d3,%d9,8000ac9e <_svfprintf_r+0x13ce>
8000a216:	8f 02 41 21 	or %d2,%d2,16
8000a21a:	59 a2 04 00 	st.w [%sp]4,%d2
8000a21e:	1d ff e3 fb 	j 800099e4 <_svfprintf_r+0x114>
8000a222:	79 d3 00 00 	ld.b %d3,[%a13]0
8000a226:	60 fe       	mov.a %a14,%d15
8000a228:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a22c:	5f 83 30 05 	jeq %d3,%d8,8000ac8c <_svfprintf_r+0x13bc>
8000a230:	8f 02 44 21 	or %d2,%d2,64
8000a234:	59 a2 04 00 	st.w [%sp]4,%d2
8000a238:	1d ff d6 fb 	j 800099e4 <_svfprintf_r+0x114>
8000a23c:	19 a2 24 00 	ld.w %d2,[%sp]36
8000a240:	8b 62 46 22 	lt %d2,%d2,102
8000a244:	df 02 71 81 	jne %d2,0,8000a526 <_svfprintf_r+0xc56>
8000a248:	99 a3 38 00 	ld.a %a3,[%sp]56
8000a24c:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000a250:	d2 06       	mov %e6,0
8000a252:	80 34       	mov.d %d4,%a3
8000a254:	02 25       	mov %d5,%d2
8000a256:	6d 00 31 30 	call 800102b8 <__eqdf2>
8000a25a:	df 02 82 82 	jne %d2,0,8000a75e <_svfprintf_r+0xe8e>
8000a25e:	82 12       	mov %d2,1
8000a260:	42 2b       	add %d11,%d2
8000a262:	91 00 00 38 	movh.a %a3,32768
8000a266:	68 12       	st.w [%a15]4,%d2
8000a268:	19 a2 04 20 	ld.w %d2,[%sp]132 <80000001 <BootModeHeader_0+0x1>>
8000a26c:	d9 33 b9 10 	lea %a3,[%a3]2169 <80000879 <__thenan_df+0x4d>>
8000a270:	c2 12       	add %d2,1
8000a272:	e8 03       	st.a [%a15]0,%a3
8000a274:	59 ab 08 20 	st.w [%sp]136,%d11
8000a278:	59 a2 04 20 	st.w [%sp]132,%d2
8000a27c:	8b 82 80 22 	ge %d2,%d2,8
8000a280:	d9 ff 08 00 	lea %a15,[%a15]8
8000a284:	df 02 1f 87 	jne %d2,0,8000b0c2 <_svfprintf_r+0x17f2>
8000a288:	19 a2 28 10 	ld.w %d2,[%sp]104
8000a28c:	19 a3 30 00 	ld.w %d3,[%sp]48
8000a290:	7f 32 cc 03 	jge %d2,%d3,8000aa28 <_svfprintf_r+0x1158>
8000a294:	19 a2 04 10 	ld.w %d2,[%sp]68
8000a298:	19 a3 00 10 	ld.w %d3,[%sp]64
8000a29c:	68 02       	st.w [%a15]0,%d2
8000a29e:	19 a2 04 20 	ld.w %d2,[%sp]132 <80000000 <BootModeHeader_0>>
8000a2a2:	42 3b       	add %d11,%d3
8000a2a4:	c2 12       	add %d2,1
8000a2a6:	68 13       	st.w [%a15]4,%d3
8000a2a8:	59 ab 08 20 	st.w [%sp]136,%d11
8000a2ac:	59 a2 04 20 	st.w [%sp]132,%d2
8000a2b0:	8b 82 80 22 	ge %d2,%d2,8
8000a2b4:	d9 ff 08 00 	lea %a15,[%a15]8
8000a2b8:	df 02 db 84 	jne %d2,0,8000ac6e <_svfprintf_r+0x139e>
8000a2bc:	19 a2 30 00 	ld.w %d2,[%sp]48
8000a2c0:	1b f2 ff 8f 	addi %d8,%d2,-1
8000a2c4:	bf 18 10 7c 	jlt %d8,1,80009ae4 <_svfprintf_r+0x214>
8000a2c8:	8b 18 41 22 	lt %d2,%d8,17
8000a2cc:	19 a3 04 20 	ld.w %d3,[%sp]132
8000a2d0:	df 02 02 8c 	jne %d2,0,8000bad4 <_svfprintf_r+0x2204>
8000a2d4:	19 a2 30 00 	ld.w %d2,[%sp]48
8000a2d8:	91 00 00 c8 	movh.a %a12,32768
8000a2dc:	1b e2 fe 9f 	addi %d9,%d2,-18
8000a2e0:	1b f2 fe 5f 	addi %d5,%d2,-17
8000a2e4:	8f f9 c0 91 	andn %d9,%d9,15
8000a2e8:	58 02       	ld.w %d15,[%sp]8
8000a2ea:	0b 95 80 90 	sub %d9,%d5,%d9
8000a2ee:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000a2f2:	3b 00 01 a0 	mov %d10,16
8000a2f6:	1d 00 06 00 	j 8000a302 <_svfprintf_r+0xa32>
8000a2fa:	1b 08 ff 8f 	addi %d8,%d8,-16
8000a2fe:	5f 98 90 07 	jeq %d8,%d9,8000b21e <_svfprintf_r+0x194e>
8000a302:	c2 13       	add %d3,1
8000a304:	1b 0b 01 b0 	addi %d11,%d11,16
8000a308:	e8 0c       	st.a [%a15]0,%a12
8000a30a:	68 1a       	st.w [%a15]4,%d10
8000a30c:	59 ab 08 20 	st.w [%sp]136,%d11
8000a310:	59 a3 04 20 	st.w [%sp]132,%d3
8000a314:	8b 83 80 22 	ge %d2,%d3,8
8000a318:	d9 ff 08 00 	lea %a15,[%a15]8
8000a31c:	df 02 ef 7f 	jeq %d2,0,8000a2fa <_svfprintf_r+0xa2a>
8000a320:	60 e5       	mov.a %a5,%d14
8000a322:	60 f4       	mov.a %a4,%d15
8000a324:	d9 a6 00 20 	lea %a6,[%sp]128
8000a328:	6d 00 a7 20 	call 8000e476 <__ssprint_r>
8000a32c:	df 02 6e 81 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000a330:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a334:	19 a3 04 20 	ld.w %d3,[%sp]132
8000a338:	d9 af 0c 20 	lea %a15,[%sp]140
8000a33c:	1d ff df ff 	j 8000a2fa <_svfprintf_r+0xa2a>
8000a340:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a344:	0b d2 80 80 	sub %d8,%d2,%d13
8000a348:	bf 18 b1 7b 	jlt %d8,1,80009aaa <_svfprintf_r+0x1da>
8000a34c:	8b 18 41 32 	lt %d3,%d8,17
8000a350:	19 a4 04 20 	ld.w %d4,[%sp]132
8000a354:	df 03 eb 8a 	jne %d3,0,8000b92a <_svfprintf_r+0x205a>
8000a358:	1b f8 fe 3f 	addi %d3,%d8,-17
8000a35c:	8f f3 60 31 	nor %d3,%d3,15
8000a360:	91 00 00 c8 	movh.a %a12,32768
8000a364:	58 02       	ld.w %d15,[%sp]8
8000a366:	0b 83 00 90 	add %d9,%d3,%d8
8000a36a:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000a36e:	3b 00 01 a0 	mov %d10,16
8000a372:	1d 00 06 00 	j 8000a37e <_svfprintf_r+0xaae>
8000a376:	1b 08 ff 8f 	addi %d8,%d8,-16
8000a37a:	5f 89 23 00 	jeq %d9,%d8,8000a3c0 <_svfprintf_r+0xaf0>
8000a37e:	c2 14       	add %d4,1
8000a380:	1b 0b 01 b0 	addi %d11,%d11,16
8000a384:	e8 0c       	st.a [%a15]0,%a12
8000a386:	68 1a       	st.w [%a15]4,%d10
8000a388:	59 ab 08 20 	st.w [%sp]136,%d11
8000a38c:	59 a4 04 20 	st.w [%sp]132,%d4
8000a390:	8b 84 80 22 	ge %d2,%d4,8
8000a394:	d9 ff 08 00 	lea %a15,[%a15]8
8000a398:	df 02 ef 7f 	jeq %d2,0,8000a376 <_svfprintf_r+0xaa6>
8000a39c:	60 e5       	mov.a %a5,%d14
8000a39e:	60 f4       	mov.a %a4,%d15
8000a3a0:	d9 a6 00 20 	lea %a6,[%sp]128
8000a3a4:	6d 00 69 20 	call 8000e476 <__ssprint_r>
8000a3a8:	df 02 30 81 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000a3ac:	1b 08 ff 8f 	addi %d8,%d8,-16
8000a3b0:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a3b4:	19 a4 04 20 	ld.w %d4,[%sp]132
8000a3b8:	d9 af 0c 20 	lea %a15,[%sp]140
8000a3bc:	5f 89 e1 ff 	jne %d9,%d8,8000a37e <_svfprintf_r+0xaae>
8000a3c0:	78 02       	st.w [%sp]8,%d15
8000a3c2:	1b 14 00 30 	addi %d3,%d4,1
8000a3c6:	42 9b       	add %d11,%d9
8000a3c8:	e8 0c       	st.a [%a15]0,%a12
8000a3ca:	68 19       	st.w [%a15]4,%d9
8000a3cc:	59 a3 04 20 	st.w [%sp]132,%d3
8000a3d0:	59 ab 08 20 	st.w [%sp]136,%d11
8000a3d4:	8b 83 80 32 	ge %d3,%d3,8
8000a3d8:	d9 ff 08 00 	lea %a15,[%a15]8
8000a3dc:	df 03 67 7b 	jeq %d3,0,80009aaa <_svfprintf_r+0x1da>
8000a3e0:	99 a4 08 00 	ld.a %a4,[%sp]8
8000a3e4:	60 e5       	mov.a %a5,%d14
8000a3e6:	d9 a6 00 20 	lea %a6,[%sp]128
8000a3ea:	6d 00 46 20 	call 8000e476 <__ssprint_r>
8000a3ee:	df 02 98 80 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000a3f2:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000a3f6:	19 a2 14 00 	ld.w %d2,[%sp]20
8000a3fa:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a3fe:	a2 28       	sub %d8,%d2
8000a400:	d9 af 0c 20 	lea %a15,[%sp]140
8000a404:	bf 18 5a 7b 	jlt %d8,1,80009ab8 <_svfprintf_r+0x1e8>
8000a408:	8b 18 41 32 	lt %d3,%d8,17
8000a40c:	19 a4 04 20 	ld.w %d4,[%sp]132
8000a410:	df 03 5a 87 	jne %d3,0,8000b2c4 <_svfprintf_r+0x19f4>
8000a414:	1b f8 fe 3f 	addi %d3,%d8,-17
8000a418:	8f f3 60 31 	nor %d3,%d3,15
8000a41c:	91 00 00 c8 	movh.a %a12,32768
8000a420:	58 02       	ld.w %d15,[%sp]8
8000a422:	0b 83 00 90 	add %d9,%d3,%d8
8000a426:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000a42a:	3b 00 01 a0 	mov %d10,16
8000a42e:	1d 00 06 00 	j 8000a43a <_svfprintf_r+0xb6a>
8000a432:	1b 08 ff 8f 	addi %d8,%d8,-16
8000a436:	5f 89 23 00 	jeq %d9,%d8,8000a47c <_svfprintf_r+0xbac>
8000a43a:	c2 14       	add %d4,1
8000a43c:	1b 0b 01 b0 	addi %d11,%d11,16
8000a440:	e8 0c       	st.a [%a15]0,%a12
8000a442:	68 1a       	st.w [%a15]4,%d10
8000a444:	59 ab 08 20 	st.w [%sp]136,%d11
8000a448:	59 a4 04 20 	st.w [%sp]132,%d4
8000a44c:	8b 84 80 22 	ge %d2,%d4,8
8000a450:	d9 ff 08 00 	lea %a15,[%a15]8
8000a454:	df 02 ef 7f 	jeq %d2,0,8000a432 <_svfprintf_r+0xb62>
8000a458:	60 e5       	mov.a %a5,%d14
8000a45a:	60 f4       	mov.a %a4,%d15
8000a45c:	d9 a6 00 20 	lea %a6,[%sp]128
8000a460:	6d 00 0b 20 	call 8000e476 <__ssprint_r>
8000a464:	df 02 d2 80 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000a468:	1b 08 ff 8f 	addi %d8,%d8,-16
8000a46c:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a470:	19 a4 04 20 	ld.w %d4,[%sp]132
8000a474:	d9 af 0c 20 	lea %a15,[%sp]140
8000a478:	5f 89 e1 ff 	jne %d9,%d8,8000a43a <_svfprintf_r+0xb6a>
8000a47c:	78 02       	st.w [%sp]8,%d15
8000a47e:	1b 14 00 30 	addi %d3,%d4,1
8000a482:	42 9b       	add %d11,%d9
8000a484:	e8 0c       	st.a [%a15]0,%a12
8000a486:	68 19       	st.w [%a15]4,%d9
8000a488:	59 a3 04 20 	st.w [%sp]132,%d3
8000a48c:	59 ab 08 20 	st.w [%sp]136,%d11
8000a490:	8b 83 80 32 	ge %d3,%d3,8
8000a494:	d9 ff 08 00 	lea %a15,[%a15]8
8000a498:	df 03 10 7b 	jeq %d3,0,80009ab8 <_svfprintf_r+0x1e8>
8000a49c:	99 a4 08 00 	ld.a %a4,[%sp]8
8000a4a0:	60 e5       	mov.a %a5,%d14
8000a4a2:	d9 a6 00 20 	lea %a6,[%sp]128
8000a4a6:	6d 00 e8 1f 	call 8000e476 <__ssprint_r>
8000a4aa:	df 02 3a 80 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000a4ae:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a4b2:	d9 af 0c 20 	lea %a15,[%sp]140
8000a4b6:	1d ff 01 fb 	j 80009ab8 <_svfprintf_r+0x1e8>
8000a4ba:	19 a1 04 00 	ld.w %d1,[%sp]4
8000a4be:	df 14 3a 01 	jeq %d4,1,8000a732 <_svfprintf_r+0xe62>
8000a4c2:	d9 ae 30 40 	lea %a14,[%sp]304
8000a4c6:	df 24 c9 00 	jeq %d4,2,8000a658 <_svfprintf_r+0xd88>
8000a4ca:	58 02       	ld.w %d15,[%sp]8
8000a4cc:	8f 7c 00 31 	and %d3,%d12,7
8000a4d0:	1b 03 03 30 	addi %d3,%d3,48
8000a4d4:	77 cd 80 ce 	dextr %d12,%d13,%d12,29
8000a4d8:	06 dd       	sh %d13,-3
8000a4da:	8b 0c 20 22 	ne %d2,%d12,0
8000a4de:	40 e2       	mov.aa %a2,%a14
8000a4e0:	8b 0d 00 25 	or.ne %d2,%d13,0
8000a4e4:	89 e3 3f f4 	st.b [+%a14]-1,%d3
8000a4e8:	df 02 f2 ff 	jne %d2,0,8000a4cc <_svfprintf_r+0xbfc>
8000a4ec:	8b 03 23 22 	ne %d2,%d3,48
8000a4f0:	78 02       	st.w [%sp]8,%d15
8000a4f2:	26 12       	and %d2,%d1
8000a4f4:	df 02 d8 85 	jne %d2,0,8000b0a4 <_svfprintf_r+0x17d4>
8000a4f8:	d9 a2 30 40 	lea %a2,[%sp]304
8000a4fc:	01 e2 20 20 	sub.a %a2,%a2,%a14
8000a500:	b5 a2 14 00 	st.a [%sp]20,%a2
8000a504:	59 a1 04 00 	st.w [%sp]4,%d1
8000a508:	1d ff d5 fd 	j 8000a0b2 <_svfprintf_r+0x7e2>
8000a50c:	99 a4 08 00 	ld.a %a4,[%sp]8
8000a510:	60 e5       	mov.a %a5,%d14
8000a512:	d9 a6 00 20 	lea %a6,[%sp]128
8000a516:	6d 00 b0 1f 	call 8000e476 <__ssprint_r>
8000a51a:	df 02 fa 7a 	jeq %d2,0,80009b0e <_svfprintf_r+0x23e>
8000a51e:	d8 02       	ld.a %a15,[%sp]8
8000a520:	02 ef       	mov %d15,%d14
8000a522:	1d 00 75 00 	j 8000a60c <_svfprintf_r+0xd3c>
8000a526:	19 a2 04 20 	ld.w %d2,[%sp]132
8000a52a:	1b 1b 00 a0 	addi %d10,%d11,1
8000a52e:	1b 12 00 80 	addi %d8,%d2,1
8000a532:	19 a2 30 00 	ld.w %d2,[%sp]48
8000a536:	d9 f6 08 00 	lea %a6,[%a15]8
8000a53a:	bf 22 b5 01 	jlt %d2,2,8000a8a4 <_svfprintf_r+0xfd4>
8000a53e:	82 12       	mov %d2,1
8000a540:	e8 0e       	st.a [%a15]0,%a14
8000a542:	59 aa 08 20 	st.w [%sp]136,%d10
8000a546:	68 12       	st.w [%a15]4,%d2
8000a548:	59 a8 04 20 	st.w [%sp]132,%d8
8000a54c:	8b 88 40 22 	lt %d2,%d8,8
8000a550:	df 02 4a 02 	jeq %d2,0,8000a9e4 <_svfprintf_r+0x1114>
8000a554:	19 a3 00 10 	ld.w %d3,[%sp]64
8000a558:	c2 18       	add %d8,1
8000a55a:	42 3a       	add %d10,%d3
8000a55c:	19 a2 04 10 	ld.w %d2,[%sp]68
8000a560:	74 62       	st.w [%a6],%d2
8000a562:	59 63 04 00 	st.w [%a6]4,%d3
8000a566:	59 aa 08 20 	st.w [%sp]136,%d10
8000a56a:	59 a8 04 20 	st.w [%sp]132,%d8
8000a56e:	8b 88 80 22 	ge %d2,%d8,8
8000a572:	d9 66 08 00 	lea %a6,[%a6]8
8000a576:	df 02 48 82 	jne %d2,0,8000aa06 <_svfprintf_r+0x1136>
8000a57a:	19 a2 30 00 	ld.w %d2,[%sp]48
8000a57e:	99 a2 38 00 	ld.a %a2,[%sp]56
8000a582:	1b f2 ff 9f 	addi %d9,%d2,-1
8000a586:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000a58a:	d2 06       	mov %e6,0
8000a58c:	80 24       	mov.d %d4,%a2
8000a58e:	02 25       	mov %d5,%d2
8000a590:	b5 a6 0c 00 	st.a [%sp]12,%a6
8000a594:	6d 00 b2 2e 	call 800102f8 <__nedf2>
8000a598:	99 a6 0c 00 	ld.a %a6,[%sp]12
8000a59c:	df 02 a4 01 	jeq %d2,0,8000a8e4 <_svfprintf_r+0x1014>
8000a5a0:	c2 18       	add %d8,1
8000a5a2:	42 9a       	add %d10,%d9
8000a5a4:	b0 1e       	add.a %a14,1
8000a5a6:	f4 6e       	st.a [%a6],%a14
8000a5a8:	59 69 04 00 	st.w [%a6]4,%d9
8000a5ac:	59 aa 08 20 	st.w [%sp]136,%d10
8000a5b0:	59 a8 04 20 	st.w [%sp]132,%d8
8000a5b4:	8b 88 80 22 	ge %d2,%d8,8
8000a5b8:	df 02 85 81 	jne %d2,0,8000a8c2 <_svfprintf_r+0xff2>
8000a5bc:	d9 66 08 00 	lea %a6,[%a6]8
8000a5c0:	19 a3 0c 10 	ld.w %d3,[%sp]76
8000a5c4:	1b 18 00 20 	addi %d2,%d8,1
8000a5c8:	0b a3 00 b0 	add %d11,%d3,%d10
8000a5cc:	d9 a3 30 10 	lea %a3,[%sp]112
8000a5d0:	59 a2 04 20 	st.w [%sp]132,%d2
8000a5d4:	f4 63       	st.a [%a6],%a3
8000a5d6:	59 63 04 00 	st.w [%a6]4,%d3
8000a5da:	59 ab 08 20 	st.w [%sp]136,%d11
8000a5de:	8b 82 80 22 	ge %d2,%d2,8
8000a5e2:	d9 6f 08 00 	lea %a15,[%a6]8
8000a5e6:	df 02 7f 7a 	jeq %d2,0,80009ae4 <_svfprintf_r+0x214>
8000a5ea:	99 a4 08 00 	ld.a %a4,[%sp]8
8000a5ee:	60 e5       	mov.a %a5,%d14
8000a5f0:	d9 a6 00 20 	lea %a6,[%sp]128
8000a5f4:	6d 00 41 1f 	call 8000e476 <__ssprint_r>
8000a5f8:	df 02 93 ff 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000a5fc:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a600:	d9 af 0c 20 	lea %a15,[%sp]140
8000a604:	1d ff 70 fa 	j 80009ae4 <_svfprintf_r+0x214>
8000a608:	60 ff       	mov.a %a15,%d15
8000a60a:	02 ef       	mov %d15,%d14
8000a60c:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a610:	df 02 07 00 	jeq %d2,0,8000a61e <_svfprintf_r+0xd4e>
8000a614:	99 a5 1c 00 	ld.a %a5,[%sp]28
8000a618:	40 f4       	mov.aa %a4,%a15
8000a61a:	6d ff 13 f8 	call 80009640 <_free_r>
8000a61e:	60 f2       	mov.a %a2,%d15
8000a620:	c9 23 0c 00 	ld.h %d3,[%a2]12
8000a624:	19 a2 10 00 	ld.w %d2,[%sp]16
8000a628:	8f 03 04 31 	and %d3,%d3,64
8000a62c:	ab f2 bf 23 	seln %d2,%d3,%d2,-1
8000a630:	59 a2 10 00 	st.w [%sp]16,%d2
8000a634:	19 a2 10 00 	ld.w %d2,[%sp]16
8000a638:	00 90       	ret 
8000a63a:	99 a4 08 00 	ld.a %a4,[%sp]8
8000a63e:	60 e5       	mov.a %a5,%d14
8000a640:	d9 a6 00 20 	lea %a6,[%sp]128
8000a644:	6d 00 19 1f 	call 8000e476 <__ssprint_r>
8000a648:	df 02 6b ff 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000a64c:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a650:	d9 af 0c 20 	lea %a15,[%sp]140
8000a654:	1d ff 27 fa 	j 80009aa2 <_svfprintf_r+0x1d2>
8000a658:	99 a3 08 10 	ld.a %a3,[%sp]72
8000a65c:	58 02       	ld.w %d15,[%sp]8
8000a65e:	8f fc 00 21 	and %d2,%d12,15
8000a662:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
8000a666:	77 cd 00 ce 	dextr %d12,%d13,%d12,28
8000a66a:	14 22       	ld.bu %d2,[%a2]
8000a66c:	89 e2 3f f4 	st.b [+%a14]-1,%d2
8000a670:	06 cd       	sh %d13,-4
8000a672:	8b 0c 20 22 	ne %d2,%d12,0
8000a676:	8b 0d 00 25 	or.ne %d2,%d13,0
8000a67a:	df 02 f2 ff 	jne %d2,0,8000a65e <_svfprintf_r+0xd8e>
8000a67e:	78 02       	st.w [%sp]8,%d15
8000a680:	1d ff 3c ff 	j 8000a4f8 <_svfprintf_r+0xc28>
8000a684:	8b 18 41 22 	lt %d2,%d8,17
8000a688:	19 a3 04 20 	ld.w %d3,[%sp]132
8000a68c:	df 02 c2 88 	jne %d2,0,8000b810 <_svfprintf_r+0x1f40>
8000a690:	1b f8 fe 2f 	addi %d2,%d8,-17
8000a694:	8f f2 60 21 	nor %d2,%d2,15
8000a698:	91 00 00 c8 	movh.a %a12,32768
8000a69c:	58 02       	ld.w %d15,[%sp]8
8000a69e:	0b 82 00 90 	add %d9,%d2,%d8
8000a6a2:	d9 cc 8c 20 	lea %a12,[%a12]2188 <8000088c <blanks.1>>
8000a6a6:	3b 00 01 a0 	mov %d10,16
8000a6aa:	1d 00 06 00 	j 8000a6b6 <_svfprintf_r+0xde6>
8000a6ae:	1b 08 ff 8f 	addi %d8,%d8,-16
8000a6b2:	5f 98 23 00 	jeq %d8,%d9,8000a6f8 <_svfprintf_r+0xe28>
8000a6b6:	c2 13       	add %d3,1
8000a6b8:	1b 0b 01 b0 	addi %d11,%d11,16
8000a6bc:	e8 0c       	st.a [%a15]0,%a12
8000a6be:	68 1a       	st.w [%a15]4,%d10
8000a6c0:	59 ab 08 20 	st.w [%sp]136,%d11
8000a6c4:	59 a3 04 20 	st.w [%sp]132,%d3
8000a6c8:	8b 83 80 22 	ge %d2,%d3,8
8000a6cc:	d9 ff 08 00 	lea %a15,[%a15]8
8000a6d0:	df 02 ef 7f 	jeq %d2,0,8000a6ae <_svfprintf_r+0xdde>
8000a6d4:	60 e5       	mov.a %a5,%d14
8000a6d6:	60 f4       	mov.a %a4,%d15
8000a6d8:	d9 a6 00 20 	lea %a6,[%sp]128
8000a6dc:	6d 00 cd 1e 	call 8000e476 <__ssprint_r>
8000a6e0:	df 02 94 ff 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000a6e4:	1b 08 ff 8f 	addi %d8,%d8,-16
8000a6e8:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a6ec:	19 a3 04 20 	ld.w %d3,[%sp]132
8000a6f0:	d9 af 0c 20 	lea %a15,[%sp]140
8000a6f4:	5f 98 e1 ff 	jne %d8,%d9,8000a6b6 <_svfprintf_r+0xde6>
8000a6f8:	78 02       	st.w [%sp]8,%d15
8000a6fa:	1b 13 00 20 	addi %d2,%d3,1
8000a6fe:	42 9b       	add %d11,%d9
8000a700:	e8 0c       	st.a [%a15]0,%a12
8000a702:	59 a2 04 20 	st.w [%sp]132,%d2
8000a706:	68 19       	st.w [%a15]4,%d9
8000a708:	59 ab 08 20 	st.w [%sp]136,%d11
8000a70c:	8b 82 40 22 	lt %d2,%d2,8
8000a710:	df 02 f4 f9 	jne %d2,0,80009af8 <_svfprintf_r+0x228>
8000a714:	99 a4 08 00 	ld.a %a4,[%sp]8
8000a718:	60 e5       	mov.a %a5,%d14
8000a71a:	d9 a6 00 20 	lea %a6,[%sp]128
8000a71e:	6d 00 ac 1e 	call 8000e476 <__ssprint_r>
8000a722:	df 02 fe fe 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000a726:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a72a:	1d ff e7 f9 	j 80009af8 <_svfprintf_r+0x228>
8000a72e:	19 a1 04 00 	ld.w %d1,[%sp]4
8000a732:	a0 9c       	mov.a %a12,9
8000a734:	8b 0d 00 22 	eq %d2,%d13,0
8000a738:	80 c3       	mov.d %d3,%a12
8000a73a:	60 24       	mov.a %a4,%d2
8000a73c:	0b c3 50 22 	and.ge.u %d2,%d3,%d12
8000a740:	df 02 d0 04 	jeq %d2,0,8000b0e0 <_svfprintf_r+0x1810>
8000a744:	1b 0c 03 c0 	addi %d12,%d12,48
8000a748:	82 12       	mov %d2,1
8000a74a:	59 a1 04 00 	st.w [%sp]4,%d1
8000a74e:	e9 ac 2f 40 	st.b [%sp]303,%d12
8000a752:	59 a2 14 00 	st.w [%sp]20,%d2
8000a756:	d9 ae 2f 40 	lea %a14,[%sp]303
8000a75a:	1d ff ac fc 	j 8000a0b2 <_svfprintf_r+0x7e2>
8000a75e:	19 a4 28 10 	ld.w %d4,[%sp]104
8000a762:	bf 14 5d 04 	jlt %d4,1,8000b01c <_svfprintf_r+0x174c>
8000a766:	19 a2 28 00 	ld.w %d2,[%sp]40
8000a76a:	19 a3 30 00 	ld.w %d3,[%sp]48
8000a76e:	0b 32 80 81 	min %d8,%d2,%d3
8000a772:	bf 18 12 00 	jlt %d8,1,8000a796 <_svfprintf_r+0xec6>
8000a776:	19 a2 04 20 	ld.w %d2,[%sp]132
8000a77a:	42 8b       	add %d11,%d8
8000a77c:	c2 12       	add %d2,1
8000a77e:	e8 0e       	st.a [%a15]0,%a14
8000a780:	68 18       	st.w [%a15]4,%d8
8000a782:	59 a2 04 20 	st.w [%sp]132,%d2
8000a786:	59 ab 08 20 	st.w [%sp]136,%d11
8000a78a:	8b 82 80 22 	ge %d2,%d2,8
8000a78e:	d9 ff 08 00 	lea %a15,[%a15]8
8000a792:	df 02 d9 86 	jne %d2,0,8000b544 <_svfprintf_r+0x1c74>
8000a796:	19 a2 28 00 	ld.w %d2,[%sp]40
8000a79a:	8b 08 40 83 	max %d8,%d8,0
8000a79e:	0b 82 80 80 	sub %d8,%d2,%d8
8000a7a2:	ff 18 a1 02 	jge %d8,1,8000ace4 <_svfprintf_r+0x1414>
8000a7a6:	19 aa 28 00 	ld.w %d10,[%sp]40
8000a7aa:	80 e2       	mov.d %d2,%a14
8000a7ac:	42 2a       	add %d10,%d2
8000a7ae:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a7b2:	6f a2 0e 83 	jnz.t %d2,10,8000adce <_svfprintf_r+0x14fe>
8000a7b6:	19 a3 28 10 	ld.w %d3,[%sp]104
8000a7ba:	19 a2 30 00 	ld.w %d2,[%sp]48
8000a7be:	3f 23 06 00 	jlt %d3,%d2,8000a7ca <_svfprintf_r+0xefa>
8000a7c2:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a7c6:	6f 02 e1 06 	jz.t %d2,0,8000b588 <_svfprintf_r+0x1cb8>
8000a7ca:	19 a2 04 10 	ld.w %d2,[%sp]68
8000a7ce:	19 a4 00 10 	ld.w %d4,[%sp]64
8000a7d2:	68 02       	st.w [%a15]0,%d2
8000a7d4:	19 a2 04 20 	ld.w %d2,[%sp]132
8000a7d8:	42 4b       	add %d11,%d4
8000a7da:	c2 12       	add %d2,1
8000a7dc:	68 14       	st.w [%a15]4,%d4
8000a7de:	59 ab 08 20 	st.w [%sp]136,%d11
8000a7e2:	59 a2 04 20 	st.w [%sp]132,%d2
8000a7e6:	8b 82 80 22 	ge %d2,%d2,8
8000a7ea:	d9 ff 08 00 	lea %a15,[%a15]8
8000a7ee:	df 02 be 87 	jne %d2,0,8000b76a <_svfprintf_r+0x1e9a>
8000a7f2:	19 a4 30 00 	ld.w %d4,[%sp]48
8000a7f6:	80 e2       	mov.d %d2,%a14
8000a7f8:	42 42       	add %d2,%d4
8000a7fa:	0b 34 80 30 	sub %d3,%d4,%d3
8000a7fe:	a2 a2       	sub %d2,%d10
8000a800:	0b 32 80 81 	min %d8,%d2,%d3
8000a804:	bf 18 12 00 	jlt %d8,1,8000a828 <_svfprintf_r+0xf58>
8000a808:	19 a2 04 20 	ld.w %d2,[%sp]132
8000a80c:	42 8b       	add %d11,%d8
8000a80e:	c2 12       	add %d2,1
8000a810:	68 0a       	st.w [%a15]0,%d10
8000a812:	68 18       	st.w [%a15]4,%d8
8000a814:	59 a2 04 20 	st.w [%sp]132,%d2
8000a818:	59 ab 08 20 	st.w [%sp]136,%d11
8000a81c:	8b 82 80 22 	ge %d2,%d2,8
8000a820:	d9 ff 08 00 	lea %a15,[%a15]8
8000a824:	df 02 e2 87 	jne %d2,0,8000b7e8 <_svfprintf_r+0x1f18>
8000a828:	8b 08 40 83 	max %d8,%d8,0
8000a82c:	0b 83 80 80 	sub %d8,%d3,%d8
8000a830:	bf 18 5a 79 	jlt %d8,1,80009ae4 <_svfprintf_r+0x214>
8000a834:	8b 18 41 22 	lt %d2,%d8,17
8000a838:	19 a3 04 20 	ld.w %d3,[%sp]132
8000a83c:	df 02 4c 89 	jne %d2,0,8000bad4 <_svfprintf_r+0x2204>
8000a840:	1b f8 fe 2f 	addi %d2,%d8,-17
8000a844:	8f f2 60 21 	nor %d2,%d2,15
8000a848:	91 00 00 c8 	movh.a %a12,32768
8000a84c:	58 02       	ld.w %d15,[%sp]8
8000a84e:	0b 82 00 90 	add %d9,%d2,%d8
8000a852:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000a856:	3b 00 01 a0 	mov %d10,16
8000a85a:	1d 00 06 00 	j 8000a866 <_svfprintf_r+0xf96>
8000a85e:	1b 08 ff 8f 	addi %d8,%d8,-16
8000a862:	5f 98 de 04 	jeq %d8,%d9,8000b21e <_svfprintf_r+0x194e>
8000a866:	c2 13       	add %d3,1
8000a868:	1b 0b 01 b0 	addi %d11,%d11,16
8000a86c:	e8 0c       	st.a [%a15]0,%a12
8000a86e:	68 1a       	st.w [%a15]4,%d10
8000a870:	59 ab 08 20 	st.w [%sp]136,%d11
8000a874:	59 a3 04 20 	st.w [%sp]132,%d3
8000a878:	8b 83 80 22 	ge %d2,%d3,8
8000a87c:	d9 ff 08 00 	lea %a15,[%a15]8
8000a880:	df 02 ef 7f 	jeq %d2,0,8000a85e <_svfprintf_r+0xf8e>
8000a884:	60 e5       	mov.a %a5,%d14
8000a886:	60 f4       	mov.a %a4,%d15
8000a888:	d9 a6 00 20 	lea %a6,[%sp]128
8000a88c:	6d 00 f5 1d 	call 8000e476 <__ssprint_r>
8000a890:	df 02 bc fe 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000a894:	19 ab 08 20 	ld.w %d11,[%sp]136
8000a898:	19 a3 04 20 	ld.w %d3,[%sp]132
8000a89c:	d9 af 0c 20 	lea %a15,[%sp]140
8000a8a0:	1d ff df ff 	j 8000a85e <_svfprintf_r+0xf8e>
8000a8a4:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a8a8:	6f 02 4b fe 	jnz.t %d2,0,8000a53e <_svfprintf_r+0xc6e>
8000a8ac:	82 12       	mov %d2,1
8000a8ae:	e8 0e       	st.a [%a15]0,%a14
8000a8b0:	59 aa 08 20 	st.w [%sp]136,%d10
8000a8b4:	68 12       	st.w [%a15]4,%d2
8000a8b6:	59 a8 04 20 	st.w [%sp]132,%d8
8000a8ba:	8b 88 40 22 	lt %d2,%d8,8
8000a8be:	df 02 81 fe 	jne %d2,0,8000a5c0 <_svfprintf_r+0xcf0>
8000a8c2:	99 a4 08 00 	ld.a %a4,[%sp]8
8000a8c6:	60 e5       	mov.a %a5,%d14
8000a8c8:	d9 a6 00 20 	lea %a6,[%sp]128
8000a8cc:	6d 00 d5 1d 	call 8000e476 <__ssprint_r>
8000a8d0:	df 02 27 fe 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000a8d4:	19 aa 08 20 	ld.w %d10,[%sp]136
8000a8d8:	19 a8 04 20 	ld.w %d8,[%sp]132
8000a8dc:	d9 a6 0c 20 	lea %a6,[%sp]140
8000a8e0:	1d ff 70 fe 	j 8000a5c0 <_svfprintf_r+0xcf0>
8000a8e4:	bf 19 6e 7e 	jlt %d9,1,8000a5c0 <_svfprintf_r+0xcf0>
8000a8e8:	8b 19 41 22 	lt %d2,%d9,17
8000a8ec:	df 02 e5 88 	jne %d2,0,8000bab6 <_svfprintf_r+0x21e6>
8000a8f0:	19 a2 30 00 	ld.w %d2,[%sp]48
8000a8f4:	91 00 00 c8 	movh.a %a12,32768
8000a8f8:	1b e2 fe bf 	addi %d11,%d2,-18
8000a8fc:	1b f2 fe 4f 	addi %d4,%d2,-17
8000a900:	8f fb c0 b1 	andn %d11,%d11,15
8000a904:	58 02       	ld.w %d15,[%sp]8
8000a906:	0b b4 80 b0 	sub %d11,%d4,%d11
8000a90a:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000a90e:	3b 00 01 c0 	mov %d12,16
8000a912:	1d 00 06 00 	j 8000a91e <_svfprintf_r+0x104e>
8000a916:	1b 09 ff 9f 	addi %d9,%d9,-16
8000a91a:	5f 9b ba 04 	jeq %d11,%d9,8000b28e <_svfprintf_r+0x19be>
8000a91e:	c2 18       	add %d8,1
8000a920:	1b 0a 01 a0 	addi %d10,%d10,16
8000a924:	f4 6c       	st.a [%a6],%a12
8000a926:	59 6c 04 00 	st.w [%a6]4,%d12
8000a92a:	59 aa 08 20 	st.w [%sp]136,%d10
8000a92e:	59 a8 04 20 	st.w [%sp]132,%d8
8000a932:	8b 88 80 22 	ge %d2,%d8,8
8000a936:	d9 66 08 00 	lea %a6,[%a6]8
8000a93a:	df 02 ee 7f 	jeq %d2,0,8000a916 <_svfprintf_r+0x1046>
8000a93e:	60 e5       	mov.a %a5,%d14
8000a940:	60 f4       	mov.a %a4,%d15
8000a942:	d9 a6 00 20 	lea %a6,[%sp]128
8000a946:	6d 00 98 1d 	call 8000e476 <__ssprint_r>
8000a94a:	df 02 5f fe 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000a94e:	19 aa 08 20 	ld.w %d10,[%sp]136
8000a952:	19 a8 04 20 	ld.w %d8,[%sp]132
8000a956:	d9 a6 0c 20 	lea %a6,[%sp]140
8000a95a:	1d ff de ff 	j 8000a916 <_svfprintf_r+0x1046>
8000a95e:	40 23       	mov.aa %a3,%a2
8000a960:	19 a3 04 00 	ld.w %d3,[%sp]4
8000a964:	b0 42       	add.a %a2,4
8000a966:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a96a:	54 32       	ld.w %d2,[%a3]
8000a96c:	6f 43 7c 80 	jnz.t %d3,4,8000aa64 <_svfprintf_r+0x1194>
8000a970:	19 a3 04 00 	ld.w %d3,[%sp]4
8000a974:	6f 63 70 00 	jz.t %d3,6,8000aa54 <_svfprintf_r+0x1184>
8000a978:	37 02 70 20 	extr.u %d2,%d2,0,16
8000a97c:	53 12 40 c0 	mul.u %e12,%d2,1
8000a980:	1d ff f5 fb 	j 8000a16a <_svfprintf_r+0x89a>
8000a984:	40 23       	mov.aa %a3,%a2
8000a986:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a98a:	b0 42       	add.a %a2,4
8000a98c:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a990:	54 34       	ld.w %d4,[%a3]
8000a992:	6f 42 5b 80 	jnz.t %d2,4,8000aa48 <_svfprintf_r+0x1178>
8000a996:	19 a2 04 00 	ld.w %d2,[%sp]4
8000a99a:	6f 62 4d 00 	jz.t %d2,6,8000aa34 <_svfprintf_r+0x1164>
8000a99e:	37 04 50 40 	extr %d4,%d4,0,16
8000a9a2:	0b 40 00 c8 	mov %e12,%d4
8000a9a6:	0b cd 10 28 	mov %e2,%d13,%d12
8000a9aa:	ff 03 b0 7b 	jge %d3,0,8000a10a <_svfprintf_r+0x83a>
8000a9ae:	32 5d       	rsub %d13
8000a9b0:	32 5c       	rsub %d12
8000a9b2:	19 a1 04 00 	ld.w %d1,[%sp]4
8000a9b6:	ab fd 1f dc 	cadd %d13,%d12,%d13,-1
8000a9ba:	3b d0 02 20 	mov %d2,45
8000a9be:	82 14       	mov %d4,1
8000a9c0:	1d ff 52 fb 	j 8000a064 <_svfprintf_r+0x794>
8000a9c4:	40 23       	mov.aa %a3,%a2
8000a9c6:	b0 42       	add.a %a2,4
8000a9c8:	b5 a2 20 00 	st.a [%sp]32,%a2
8000a9cc:	54 32       	ld.w %d2,[%a3]
8000a9ce:	6f 41 06 80 	jnz.t %d1,4,8000a9da <_svfprintf_r+0x110a>
8000a9d2:	6f 61 6e 04 	jz.t %d1,6,8000b2ae <_svfprintf_r+0x19de>
8000a9d6:	37 02 70 20 	extr.u %d2,%d2,0,16
8000a9da:	53 12 40 c0 	mul.u %e12,%d2,1
8000a9de:	82 14       	mov %d4,1
8000a9e0:	1d ff 41 fb 	j 8000a062 <_svfprintf_r+0x792>
8000a9e4:	99 a4 08 00 	ld.a %a4,[%sp]8
8000a9e8:	60 e5       	mov.a %a5,%d14
8000a9ea:	d9 a6 00 20 	lea %a6,[%sp]128
8000a9ee:	6d 00 44 1d 	call 8000e476 <__ssprint_r>
8000a9f2:	df 02 96 fd 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000a9f6:	19 aa 08 20 	ld.w %d10,[%sp]136
8000a9fa:	19 a8 04 20 	ld.w %d8,[%sp]132
8000a9fe:	d9 a6 0c 20 	lea %a6,[%sp]140
8000aa02:	1d ff a9 fd 	j 8000a554 <_svfprintf_r+0xc84>
8000aa06:	99 a4 08 00 	ld.a %a4,[%sp]8
8000aa0a:	60 e5       	mov.a %a5,%d14
8000aa0c:	d9 a6 00 20 	lea %a6,[%sp]128
8000aa10:	6d 00 33 1d 	call 8000e476 <__ssprint_r>
8000aa14:	df 02 85 fd 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000aa18:	19 aa 08 20 	ld.w %d10,[%sp]136
8000aa1c:	19 a8 04 20 	ld.w %d8,[%sp]132
8000aa20:	d9 a6 0c 20 	lea %a6,[%sp]140
8000aa24:	1d ff ab fd 	j 8000a57a <_svfprintf_r+0xcaa>
8000aa28:	19 a2 04 00 	ld.w %d2,[%sp]4
8000aa2c:	6f 02 5c 78 	jz.t %d2,0,80009ae4 <_svfprintf_r+0x214>
8000aa30:	1d ff 32 fc 	j 8000a294 <_svfprintf_r+0x9c4>
8000aa34:	0b 40 00 c8 	mov %e12,%d4
8000aa38:	19 a5 04 00 	ld.w %d5,[%sp]4
8000aa3c:	0b cd 10 28 	mov %e2,%d13,%d12
8000aa40:	6f 95 63 7b 	jz.t %d5,9,8000a106 <_svfprintf_r+0x836>
8000aa44:	37 04 48 40 	extr %d4,%d4,0,8
8000aa48:	0b 40 00 c8 	mov %e12,%d4
8000aa4c:	0b cd 10 28 	mov %e2,%d13,%d12
8000aa50:	1d ff 5b fb 	j 8000a106 <_svfprintf_r+0x836>
8000aa54:	19 a3 04 00 	ld.w %d3,[%sp]4
8000aa58:	53 12 40 c0 	mul.u %e12,%d2,1
8000aa5c:	6f 93 87 7b 	jz.t %d3,9,8000a16a <_svfprintf_r+0x89a>
8000aa60:	8f f2 0f 21 	and %d2,%d2,255
8000aa64:	53 12 40 c0 	mul.u %e12,%d2,1
8000aa68:	1d ff 81 fb 	j 8000a16a <_svfprintf_r+0x89a>
8000aa6c:	19 a2 10 00 	ld.w %d2,[%sp]16
8000aa70:	d4 33       	ld.a %a3,[%a3]
8000aa72:	0b 20 00 28 	mov %e2,%d2
8000aa76:	b5 a2 20 00 	st.a [%sp]32,%a2
8000aa7a:	89 32 40 09 	st.d [%a3],%e2
8000aa7e:	1d ff 62 f7 	j 80009942 <_svfprintf_r+0x72>
8000aa82:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000aa86:	19 a4 38 00 	ld.w %d4,[%sp]56
8000aa8a:	02 37       	mov %d7,%d3
8000aa8c:	02 46       	mov %d6,%d4
8000aa8e:	02 35       	mov %d5,%d3
8000aa90:	6d 00 74 2c 	call 80010378 <__unorddf2>
8000aa94:	df 02 f1 87 	jne %d2,0,8000ba76 <_svfprintf_r+0x21a6>
8000aa98:	19 a3 24 00 	ld.w %d3,[%sp]36
8000aa9c:	8f 03 c2 d1 	andn %d13,%d3,32
8000aaa0:	8b 1d 24 22 	ne %d2,%d13,65
8000aaa4:	df 02 17 84 	jne %d2,0,8000b2d2 <_svfprintf_r+0x1a02>
8000aaa8:	8b 13 06 92 	eq %d9,%d3,97
8000aaac:	3b 80 07 20 	mov %d2,120
8000aab0:	ab 82 85 29 	sel %d2,%d9,%d2,88
8000aab4:	da 30       	mov %d15,48
8000aab6:	82 03       	mov %d3,0
8000aab8:	e9 a2 25 10 	st.b [%sp]101,%d2
8000aabc:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000aac0:	e9 af 24 10 	st.b [%sp]100,%d15
8000aac4:	8b 42 46 22 	lt %d2,%d2,100
8000aac8:	59 a3 1c 00 	st.w [%sp]28,%d3
8000aacc:	d9 ae 0c 30 	lea %a14,[%sp]204
8000aad0:	df 02 b4 05 	jeq %d2,0,8000b638 <_svfprintf_r+0x1d68>
8000aad4:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000aad8:	c5 02 2d 00 	lea %a2,2d <__TRICORE_DERIVATE_MEMORY_MAP__-0x243>
8000aadc:	80 25       	mov.d %d5,%a2
8000aade:	8b 03 40 22 	lt %d2,%d3,0
8000aae2:	ab 05 80 22 	sel %d2,%d2,%d5,0
8000aae6:	99 a5 38 00 	ld.a %a5,[%sp]56
8000aaea:	9b 03 00 48 	addih %d4,%d3,32768
8000aaee:	02 35       	mov %d5,%d3
8000aaf0:	8b 03 80 32 	ge %d3,%d3,0
8000aaf4:	59 a2 20 00 	st.w [%sp]32,%d2
8000aaf8:	2b 45 40 23 	sel %d2,%d3,%d5,%d4
8000aafc:	d9 a4 28 10 	lea %a4,[%sp]104
8000ab00:	80 54       	mov.d %d4,%a5
8000ab02:	02 25       	mov %d5,%d2
8000ab04:	6d 00 c7 0c 	call 8000c492 <frexp>
8000ab08:	0b 23 10 48 	mov %e4,%d3,%d2
8000ab0c:	82 06       	mov %d6,0
8000ab0e:	7b 00 fc 73 	movh %d7,16320
8000ab12:	6d ff 77 e7 	call 80007a00 <__muldf3>
8000ab16:	d2 06       	mov %e6,0
8000ab18:	02 24       	mov %d4,%d2
8000ab1a:	02 35       	mov %d5,%d3
8000ab1c:	60 2c       	mov.a %a12,%d2
8000ab1e:	02 38       	mov %d8,%d3
8000ab20:	6d 00 cc 2b 	call 800102b8 <__eqdf2>
8000ab24:	df 02 47 05 	jeq %d2,0,8000b5b2 <_svfprintf_r+0x1ce2>
8000ab28:	91 00 00 28 	movh.a %a2,32768
8000ab2c:	80 22       	mov.d %d2,%a2
8000ab2e:	7b 00 00 38 	movh %d3,32768
8000ab32:	1b 02 85 20 	addi %d2,%d2,2128
8000ab36:	1b 13 86 30 	addi %d3,%d3,2145
8000ab3a:	2b 32 40 29 	sel %d2,%d9,%d2,%d3
8000ab3e:	19 ab 0c 00 	ld.w %d11,[%sp]12
8000ab42:	b5 ad 28 00 	st.a [%sp]40,%a13
8000ab46:	59 ad 2c 00 	st.w [%sp]44,%d13
8000ab4a:	58 02       	ld.w %d15,[%sp]8
8000ab4c:	02 cd       	mov %d13,%d12
8000ab4e:	60 8d       	mov.a %a13,%d8
8000ab50:	59 a2 14 00 	st.w [%sp]20,%d2
8000ab54:	c2 fb       	add %d11,-1
8000ab56:	80 ea       	mov.d %d10,%a14
8000ab58:	80 fc       	mov.d %d12,%a15
8000ab5a:	1d 00 0a 00 	j 8000ab6e <_svfprintf_r+0x129e>
8000ab5e:	d2 06       	mov %e6,0
8000ab60:	02 24       	mov %d4,%d2
8000ab62:	02 35       	mov %d5,%d3
8000ab64:	c2 fb       	add %d11,-1
8000ab66:	6d 00 c9 2b 	call 800102f8 <__nedf2>
8000ab6a:	df 02 25 00 	jeq %d2,0,8000abb4 <_svfprintf_r+0x12e4>
8000ab6e:	82 06       	mov %d6,0
8000ab70:	7b 00 03 74 	movh %d7,16432
8000ab74:	80 c4       	mov.d %d4,%a12
8000ab76:	80 d5       	mov.d %d5,%a13
8000ab78:	6d ff 44 e7 	call 80007a00 <__muldf3>
8000ab7c:	02 35       	mov %d5,%d3
8000ab7e:	02 24       	mov %d4,%d2
8000ab80:	60 3c       	mov.a %a12,%d3
8000ab82:	60 2d       	mov.a %a13,%d2
8000ab84:	6d 00 14 2c 	call 800103ac <__fixdfsi>
8000ab88:	02 24       	mov %d4,%d2
8000ab8a:	02 29       	mov %d9,%d2
8000ab8c:	6d ff 34 e9 	call 80007df4 <__floatsidf>
8000ab90:	0b 23 10 68 	mov %e6,%d3,%d2
8000ab94:	80 d4       	mov.d %d4,%a13
8000ab96:	80 c5       	mov.d %d5,%a12
8000ab98:	6d ff 11 e7 	call 800079ba <__subdf3>
8000ab9c:	99 a2 14 00 	ld.a %a2,[%sp]20
8000aba0:	40 ef       	mov.aa %a15,%a14
8000aba2:	60 2c       	mov.a %a12,%d2
8000aba4:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
8000aba8:	60 3d       	mov.a %a13,%d3
8000abaa:	14 24       	ld.bu %d4,[%a2]
8000abac:	24 e4       	st.b [%a14+],%d4
8000abae:	02 b8       	mov %d8,%d11
8000abb0:	df fb d7 ff 	jne %d11,-1,8000ab5e <_svfprintf_r+0x128e>
8000abb4:	80 e2       	mov.d %d2,%a14
8000abb6:	02 8b       	mov %d11,%d8
8000abb8:	60 ae       	mov.a %a14,%d10
8000abba:	80 d8       	mov.d %d8,%a13
8000abbc:	82 06       	mov %d6,0
8000abbe:	7b 00 fe 73 	movh %d7,16352
8000abc2:	80 c4       	mov.d %d4,%a12
8000abc4:	02 85       	mov %d5,%d8
8000abc6:	f8 03       	st.a [%sp]12,%a15
8000abc8:	99 ad 28 00 	ld.a %a13,[%sp]40
8000abcc:	60 cf       	mov.a %a15,%d12
8000abce:	78 02       	st.w [%sp]8,%d15
8000abd0:	02 dc       	mov %d12,%d13
8000abd2:	02 2a       	mov %d10,%d2
8000abd4:	19 ad 2c 00 	ld.w %d13,[%sp]44
8000abd8:	6d ff ce e8 	call 80007d74 <__gtdf2>
8000abdc:	ff 12 ca 06 	jge %d2,1,8000b970 <_svfprintf_r+0x20a0>
8000abe0:	82 06       	mov %d6,0
8000abe2:	7b 00 fe 73 	movh %d7,16352
8000abe6:	80 c4       	mov.d %d4,%a12
8000abe8:	02 85       	mov %d5,%d8
8000abea:	6d 00 67 2b 	call 800102b8 <__eqdf2>
8000abee:	df 02 04 80 	jne %d2,0,8000abf6 <_svfprintf_r+0x1326>
8000abf2:	6f 09 bf 86 	jnz.t %d9,0,8000b970 <_svfprintf_r+0x20a0>
8000abf6:	60 a2       	mov.a %a2,%d10
8000abf8:	1b 1b 00 20 	addi %d2,%d11,1
8000abfc:	99 a4 08 00 	ld.a %a4,[%sp]8
8000ac00:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000ac04:	60 a3       	mov.a %a3,%d10
8000ac06:	bf 0b 09 00 	jlt %d11,0,8000ac18 <_svfprintf_r+0x1348>
8000ac0a:	da 30       	mov %d15,48
8000ac0c:	24 3f       	st.b [%a3+],%d15
8000ac0e:	7d 32 fe ff 	jne.a %a2,%a3,8000ac0a <_svfprintf_r+0x133a>
8000ac12:	80 3a       	mov.d %d10,%a3
8000ac14:	b5 a4 08 00 	st.a [%sp]8,%a4
8000ac18:	19 a2 04 00 	ld.w %d2,[%sp]4
8000ac1c:	8f 22 40 21 	or %d2,%d2,2
8000ac20:	59 a2 04 00 	st.w [%sp]4,%d2
8000ac24:	80 e2       	mov.d %d2,%a14
8000ac26:	0b 2a 80 20 	sub %d2,%d10,%d2
8000ac2a:	59 a2 30 00 	st.w [%sp]48,%d2
8000ac2e:	19 a2 28 10 	ld.w %d2,[%sp]104
8000ac32:	59 a2 28 00 	st.w [%sp]40,%d2
8000ac36:	1d 00 c0 03 	j 8000b3b6 <_svfprintf_r+0x1ae6>
8000ac3a:	99 a2 20 00 	ld.a %a2,[%sp]32
8000ac3e:	1d ff 73 f8 	j 80009d24 <_svfprintf_r+0x454>
8000ac42:	59 a3 24 00 	st.w [%sp]36,%d3
8000ac46:	78 02       	st.w [%sp]8,%d15
8000ac48:	1d ff 53 fa 	j 8000a0ee <_svfprintf_r+0x81e>
8000ac4c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ac50:	b5 a2 20 00 	st.a [%sp]32,%a2
8000ac54:	32 52       	rsub %d2
8000ac56:	59 a2 18 00 	st.w [%sp]24,%d2
8000ac5a:	19 a2 04 00 	ld.w %d2,[%sp]4
8000ac5e:	79 d3 00 00 	ld.b %d3,[%a13]0
8000ac62:	8f 42 40 21 	or %d2,%d2,4
8000ac66:	59 a2 04 00 	st.w [%sp]4,%d2
8000ac6a:	1d ff bd f6 	j 800099e4 <_svfprintf_r+0x114>
8000ac6e:	99 a4 08 00 	ld.a %a4,[%sp]8
8000ac72:	60 e5       	mov.a %a5,%d14
8000ac74:	d9 a6 00 20 	lea %a6,[%sp]128
8000ac78:	6d 00 ff 1b 	call 8000e476 <__ssprint_r>
8000ac7c:	df 02 51 fc 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000ac80:	19 ab 08 20 	ld.w %d11,[%sp]136
8000ac84:	d9 af 0c 20 	lea %a15,[%sp]140
8000ac88:	1d ff 1a fb 	j 8000a2bc <_svfprintf_r+0x9ec>
8000ac8c:	b7 f2 81 24 	insert %d2,%d2,15,9,1
8000ac90:	79 d3 01 00 	ld.b %d3,[%a13]1
8000ac94:	b0 1d       	add.a %a13,1
8000ac96:	59 a2 04 00 	st.w [%sp]4,%d2
8000ac9a:	1d ff a5 f6 	j 800099e4 <_svfprintf_r+0x114>
8000ac9e:	8f 02 42 21 	or %d2,%d2,32
8000aca2:	79 d3 01 00 	ld.b %d3,[%a13]1
8000aca6:	b0 1d       	add.a %a13,1
8000aca8:	59 a2 04 00 	st.w [%sp]4,%d2
8000acac:	1d ff 9c f6 	j 800099e4 <_svfprintf_r+0x114>
8000acb0:	3b 00 04 40 	mov %d4,64
8000acb4:	40 f4       	mov.aa %a4,%a15
8000acb6:	6d ff a6 eb 	call 80008402 <_malloc_r>
8000acba:	60 f3       	mov.a %a3,%d15
8000acbc:	f4 32       	st.a [%a3],%a2
8000acbe:	b5 32 10 00 	st.a [%a3]16,%a2
8000acc2:	bd 02 57 07 	jz.a %a2,8000bb70 <_svfprintf_r+0x22a0>
8000acc6:	3b 00 04 20 	mov %d2,64
8000acca:	59 32 14 00 	st.w [%a3]20,%d2
8000acce:	1d ff 1b f6 	j 80009904 <_svfprintf_r+0x34>
8000acd2:	40 e4       	mov.aa %a4,%a14
8000acd4:	6d ff 1d f1 	call 80008f0e <strlen>
8000acd8:	79 a3 23 10 	ld.b %d3,[%sp]99
8000acdc:	59 a2 14 00 	st.w [%sp]20,%d2
8000ace0:	1d ff 0c f9 	j 80009ef8 <_svfprintf_r+0x628>
8000ace4:	8b 18 41 22 	lt %d2,%d8,17
8000ace8:	19 a3 04 20 	ld.w %d3,[%sp]132
8000acec:	df 02 21 87 	jne %d2,0,8000bb2e <_svfprintf_r+0x225e>
8000acf0:	1b f8 fe 2f 	addi %d2,%d8,-17
8000acf4:	8f f2 60 21 	nor %d2,%d2,15
8000acf8:	91 00 00 c8 	movh.a %a12,32768
8000acfc:	58 02       	ld.w %d15,[%sp]8
8000acfe:	0b 82 00 90 	add %d9,%d2,%d8
8000ad02:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000ad06:	3b 00 01 a0 	mov %d10,16
8000ad0a:	1d 00 06 00 	j 8000ad16 <_svfprintf_r+0x1446>
8000ad0e:	1b 08 ff 8f 	addi %d8,%d8,-16
8000ad12:	5f 89 e9 03 	jeq %d9,%d8,8000b4e4 <_svfprintf_r+0x1c14>
8000ad16:	c2 13       	add %d3,1
8000ad18:	1b 0b 01 b0 	addi %d11,%d11,16
8000ad1c:	e8 0c       	st.a [%a15]0,%a12
8000ad1e:	68 1a       	st.w [%a15]4,%d10
8000ad20:	59 ab 08 20 	st.w [%sp]136,%d11
8000ad24:	59 a3 04 20 	st.w [%sp]132,%d3
8000ad28:	8b 83 80 22 	ge %d2,%d3,8
8000ad2c:	d9 ff 08 00 	lea %a15,[%a15]8
8000ad30:	df 02 ef 7f 	jeq %d2,0,8000ad0e <_svfprintf_r+0x143e>
8000ad34:	60 e5       	mov.a %a5,%d14
8000ad36:	60 f4       	mov.a %a4,%d15
8000ad38:	d9 a6 00 20 	lea %a6,[%sp]128
8000ad3c:	6d 00 9d 1b 	call 8000e476 <__ssprint_r>
8000ad40:	df 02 64 fc 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000ad44:	19 ab 08 20 	ld.w %d11,[%sp]136
8000ad48:	19 a3 04 20 	ld.w %d3,[%sp]132
8000ad4c:	d9 af 0c 20 	lea %a15,[%sp]140
8000ad50:	1d ff df ff 	j 8000ad0e <_svfprintf_r+0x143e>
8000ad54:	91 00 00 28 	movh.a %a2,32768
8000ad58:	d9 22 90 10 	lea %a2,[%a2]2128 <80000850 <__thenan_df+0x24>>
8000ad5c:	59 a3 24 00 	st.w [%sp]36 <80000850 <__thenan_df+0x24>>,%d3
8000ad60:	78 02       	st.w [%sp]8,%d15
8000ad62:	b5 a2 08 10 	st.a [%sp]72 <80000850 <__thenan_df+0x24>>,%a2
8000ad66:	19 a2 04 00 	ld.w %d2,[%sp]4 <80000850 <__thenan_df+0x24>>
8000ad6a:	99 a2 20 00 	ld.a %a2,[%sp]32 <80000850 <__thenan_df+0x24>>
8000ad6e:	6f 52 b5 00 	jz.t %d2,5,8000aed8 <_svfprintf_r+0x1608>
8000ad72:	09 2c 48 01 	ld.d %e12,[%a2+]8
8000ad76:	b5 a2 20 00 	st.a [%sp]32,%a2
8000ad7a:	19 a3 04 00 	ld.w %d3,[%sp]4
8000ad7e:	0f dc a0 20 	or %d2,%d12,%d13
8000ad82:	8b 02 20 22 	ne %d2,%d2,0
8000ad86:	26 32       	and %d2,%d3
8000ad88:	df 02 d6 80 	jne %d2,0,8000af34 <_svfprintf_r+0x1664>
8000ad8c:	19 a2 04 00 	ld.w %d2,[%sp]4
8000ad90:	82 24       	mov %d4,2
8000ad92:	b7 02 01 15 	insert %d1,%d2,0,10,1
8000ad96:	1d ff 66 f9 	j 8000a062 <_svfprintf_r+0x792>
8000ad9a:	19 a1 04 00 	ld.w %d1,[%sp]4
8000ad9e:	59 a3 24 00 	st.w [%sp]36,%d3
8000ada2:	78 02       	st.w [%sp]8,%d15
8000ada4:	1d ff 56 f9 	j 8000a050 <_svfprintf_r+0x780>
8000ada8:	91 00 00 28 	movh.a %a2,32768
8000adac:	d9 22 a1 10 	lea %a2,[%a2]2145 <80000861 <__thenan_df+0x35>>
8000adb0:	59 a3 24 00 	st.w [%sp]36 <80000861 <__thenan_df+0x35>>,%d3
8000adb4:	78 02       	st.w [%sp]8,%d15
8000adb6:	b5 a2 08 10 	st.a [%sp]72 <80000861 <__thenan_df+0x35>>,%a2
8000adba:	1d ff d6 ff 	j 8000ad66 <_svfprintf_r+0x1496>
8000adbe:	60 fe       	mov.a %a14,%d15
8000adc0:	1d ff 4d ff 	j 8000ac5a <_svfprintf_r+0x138a>
8000adc4:	59 a3 24 00 	st.w [%sp]36,%d3
8000adc8:	78 02       	st.w [%sp]8,%d15
8000adca:	1d ff c6 f9 	j 8000a156 <_svfprintf_r+0x886>
8000adce:	19 a3 34 00 	ld.w %d3,[%sp]52
8000add2:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000add6:	8b 13 80 22 	ge %d2,%d3,1
8000adda:	8b 14 60 25 	or.ge %d2,%d4,1
8000adde:	df 02 b9 06 	jeq %d2,0,8000bb50 <_svfprintf_r+0x2280>
8000ade2:	19 a4 30 00 	ld.w %d4,[%sp]48
8000ade6:	80 e2       	mov.d %d2,%a14
8000ade8:	b5 ad 28 00 	st.a [%sp]40,%a13
8000adec:	99 ad 14 10 	ld.a %a13,[%sp]84
8000adf0:	0b 42 00 c0 	add %d12,%d2,%d4
8000adf4:	91 00 00 c8 	movh.a %a12,32768
8000adf8:	59 ad 24 00 	st.w [%sp]36,%d13
8000adfc:	58 02       	ld.w %d15,[%sp]8
8000adfe:	19 ad 18 10 	ld.w %d13,[%sp]88 <80000002 <BootModeHeader_0+0x2>>
8000ae02:	b5 ae 14 00 	st.a [%sp]20 <80000002 <BootModeHeader_0+0x2>>,%a14
8000ae06:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000ae0a:	60 ce       	mov.a %a14,%d12
8000ae0c:	3b 00 01 90 	mov %d9,16
8000ae10:	02 ac       	mov %d12,%d10
8000ae12:	02 3a       	mov %d10,%d3
8000ae14:	df 0a 75 00 	jeq %d10,0,8000aefe <_svfprintf_r+0x162e>
8000ae18:	c2 fa       	add %d10,-1
8000ae1a:	19 a2 10 10 	ld.w %d2,[%sp]80
8000ae1e:	68 02       	st.w [%a15]0,%d2
8000ae20:	19 a2 04 20 	ld.w %d2,[%sp]132 <80000000 <BootModeHeader_0>>
8000ae24:	42 db       	add %d11,%d13
8000ae26:	c2 12       	add %d2,1
8000ae28:	68 1d       	st.w [%a15]4,%d13
8000ae2a:	59 ab 08 20 	st.w [%sp]136 <80000001 <BootModeHeader_0+0x1>>,%d11
8000ae2e:	59 a2 04 20 	st.w [%sp]132 <80000001 <BootModeHeader_0+0x1>>,%d2
8000ae32:	8b 82 80 22 	ge %d2,%d2,8
8000ae36:	d9 ff 08 00 	lea %a15,[%a15]8
8000ae3a:	df 02 e3 80 	jne %d2,0,8000b000 <_svfprintf_r+0x1730>
8000ae3e:	79 d3 00 00 	ld.b %d3,[%a13]0
8000ae42:	80 e2       	mov.d %d2,%a14
8000ae44:	0b c2 80 80 	sub %d8,%d2,%d12
8000ae48:	b5 ae 0c 00 	st.a [%sp]12,%a14
8000ae4c:	0b 38 80 81 	min %d8,%d8,%d3
8000ae50:	bf 18 14 00 	jlt %d8,1,8000ae78 <_svfprintf_r+0x15a8>
8000ae54:	19 a2 04 20 	ld.w %d2,[%sp]132
8000ae58:	42 8b       	add %d11,%d8
8000ae5a:	c2 12       	add %d2,1
8000ae5c:	68 0c       	st.w [%a15]0,%d12
8000ae5e:	68 18       	st.w [%a15]4,%d8
8000ae60:	59 a2 04 20 	st.w [%sp]132 <80000001 <BootModeHeader_0+0x1>>,%d2
8000ae64:	59 ab 08 20 	st.w [%sp]136 <80000001 <BootModeHeader_0+0x1>>,%d11
8000ae68:	8b 82 80 22 	ge %d2,%d2,8
8000ae6c:	df 02 df 81 	jne %d2,0,8000b22a <_svfprintf_r+0x195a>
8000ae70:	79 d3 00 00 	ld.b %d3,[%a13]0
8000ae74:	d9 ff 08 00 	lea %a15,[%a15]8
8000ae78:	8b 08 40 83 	max %d8,%d8,0
8000ae7c:	0b 83 80 80 	sub %d8,%d3,%d8
8000ae80:	ff 18 67 00 	jge %d8,1,8000af4e <_svfprintf_r+0x167e>
8000ae84:	42 3c       	add %d12,%d3
8000ae86:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000ae8a:	8b 13 80 22 	ge %d2,%d3,1
8000ae8e:	8b 1a 60 25 	or.ge %d2,%d10,1
8000ae92:	df 02 c1 ff 	jne %d2,0,8000ae14 <_svfprintf_r+0x1544>
8000ae96:	b5 ad 14 10 	st.a [%sp]84,%a13
8000ae9a:	99 ae 14 00 	ld.a %a14,[%sp]20
8000ae9e:	99 ad 28 00 	ld.a %a13,[%sp]40
8000aea2:	19 ad 24 00 	ld.w %d13,[%sp]36
8000aea6:	02 ca       	mov %d10,%d12
8000aea8:	78 02       	st.w [%sp]8,%d15
8000aeaa:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000aeae:	0b 2a 90 a1 	min.u %d10,%d10,%d2
8000aeb2:	1d ff 82 fc 	j 8000a7b6 <_svfprintf_r+0xee6>
8000aeb6:	19 a2 08 20 	ld.w %d2,[%sp]136
8000aeba:	d8 02       	ld.a %a15,[%sp]8
8000aebc:	02 ef       	mov %d15,%d14
8000aebe:	df 02 b0 7b 	jeq %d2,0,8000a61e <_svfprintf_r+0xd4e>
8000aec2:	60 e5       	mov.a %a5,%d14
8000aec4:	d9 a6 00 20 	lea %a6,[%sp]128
8000aec8:	40 f4       	mov.aa %a4,%a15
8000aeca:	6d 00 d6 1a 	call 8000e476 <__ssprint_r>
8000aece:	60 e2       	mov.a %a2,%d14
8000aed0:	c9 23 0c 00 	ld.h %d3,[%a2]12
8000aed4:	1d ff a8 fb 	j 8000a624 <_svfprintf_r+0xd54>
8000aed8:	40 23       	mov.aa %a3,%a2
8000aeda:	19 a3 04 00 	ld.w %d3,[%sp]4
8000aede:	b0 42       	add.a %a2,4
8000aee0:	b5 a2 20 00 	st.a [%sp]32,%a2
8000aee4:	54 32       	ld.w %d2,[%a3]
8000aee6:	6f 43 1c 80 	jnz.t %d3,4,8000af1e <_svfprintf_r+0x164e>
8000aeea:	19 a3 04 00 	ld.w %d3,[%sp]4
8000aeee:	6f 63 10 00 	jz.t %d3,6,8000af0e <_svfprintf_r+0x163e>
8000aef2:	37 02 70 20 	extr.u %d2,%d2,0,16
8000aef6:	53 12 40 c0 	mul.u %e12,%d2,1
8000aefa:	1d ff 40 ff 	j 8000ad7a <_svfprintf_r+0x14aa>
8000aefe:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000af02:	b0 fd       	add.a %a13,-1
8000af04:	c2 f2       	add %d2,-1
8000af06:	59 a2 2c 00 	st.w [%sp]44,%d2
8000af0a:	1d ff 88 ff 	j 8000ae1a <_svfprintf_r+0x154a>
8000af0e:	19 a3 04 00 	ld.w %d3,[%sp]4
8000af12:	53 12 40 c0 	mul.u %e12,%d2,1
8000af16:	6f 93 32 7f 	jz.t %d3,9,8000ad7a <_svfprintf_r+0x14aa>
8000af1a:	8f f2 0f 21 	and %d2,%d2,255
8000af1e:	53 12 40 c0 	mul.u %e12,%d2,1
8000af22:	19 a3 04 00 	ld.w %d3,[%sp]4
8000af26:	0f dc a0 20 	or %d2,%d12,%d13
8000af2a:	8b 02 20 22 	ne %d2,%d2,0
8000af2e:	26 32       	and %d2,%d3
8000af30:	df 02 2e 7f 	jeq %d2,0,8000ad8c <_svfprintf_r+0x14bc>
8000af34:	19 a2 24 00 	ld.w %d2,[%sp]36
8000af38:	da 30       	mov %d15,48
8000af3a:	e9 a2 25 10 	st.b [%sp]101,%d2
8000af3e:	8f 23 40 21 	or %d2,%d3,2
8000af42:	e9 af 24 10 	st.b [%sp]100,%d15
8000af46:	59 a2 04 00 	st.w [%sp]4,%d2
8000af4a:	1d ff 21 ff 	j 8000ad8c <_svfprintf_r+0x14bc>
8000af4e:	8b 18 41 22 	lt %d2,%d8,17
8000af52:	19 a3 04 20 	ld.w %d3,[%sp]132
8000af56:	df 02 0a 00 	jeq %d2,0,8000af6a <_svfprintf_r+0x169a>
8000af5a:	1d 00 2b 00 	j 8000afb0 <_svfprintf_r+0x16e0>
8000af5e:	1b 08 ff 8f 	addi %d8,%d8,-16
8000af62:	8b 18 81 22 	ge %d2,%d8,17
8000af66:	df 02 25 00 	jeq %d2,0,8000afb0 <_svfprintf_r+0x16e0>
8000af6a:	c2 13       	add %d3,1
8000af6c:	1b 0b 01 b0 	addi %d11,%d11,16
8000af70:	e8 0c       	st.a [%a15]0,%a12
8000af72:	68 19       	st.w [%a15]4,%d9
8000af74:	59 ab 08 20 	st.w [%sp]136,%d11
8000af78:	59 a3 04 20 	st.w [%sp]132,%d3
8000af7c:	8b 83 80 22 	ge %d2,%d3,8
8000af80:	d9 ff 08 00 	lea %a15,[%a15]8
8000af84:	df 02 ed 7f 	jeq %d2,0,8000af5e <_svfprintf_r+0x168e>
8000af88:	60 e5       	mov.a %a5,%d14
8000af8a:	60 f4       	mov.a %a4,%d15
8000af8c:	d9 a6 00 20 	lea %a6,[%sp]128
8000af90:	6d 00 73 1a 	call 8000e476 <__ssprint_r>
8000af94:	df 02 3a fb 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000af98:	1b 08 ff 8f 	addi %d8,%d8,-16
8000af9c:	8b 18 81 22 	ge %d2,%d8,17
8000afa0:	19 ab 08 20 	ld.w %d11,[%sp]136
8000afa4:	19 a3 04 20 	ld.w %d3,[%sp]132
8000afa8:	d9 af 0c 20 	lea %a15,[%sp]140
8000afac:	df 02 df ff 	jne %d2,0,8000af6a <_svfprintf_r+0x169a>
8000afb0:	1b 13 00 20 	addi %d2,%d3,1
8000afb4:	42 8b       	add %d11,%d8
8000afb6:	e8 0c       	st.a [%a15]0,%a12
8000afb8:	59 a2 04 20 	st.w [%sp]132,%d2
8000afbc:	68 18       	st.w [%a15]4,%d8
8000afbe:	59 ab 08 20 	st.w [%sp]136,%d11
8000afc2:	8b 82 80 22 	ge %d2,%d2,8
8000afc6:	df 02 c2 83 	jne %d2,0,8000b74a <_svfprintf_r+0x1e7a>
8000afca:	79 d3 00 00 	ld.b %d3,[%a13]0
8000afce:	d9 ff 08 00 	lea %a15,[%a15]8
8000afd2:	1d ff 59 ff 	j 8000ae84 <_svfprintf_r+0x15b4>
8000afd6:	99 a4 08 00 	ld.a %a4,[%sp]8
8000afda:	60 e5       	mov.a %a5,%d14
8000afdc:	d9 a6 00 20 	lea %a6,[%sp]128
8000afe0:	59 a5 1c 10 	st.w [%sp]92,%d5
8000afe4:	6d 00 49 1a 	call 8000e476 <__ssprint_r>
8000afe8:	df 02 9b fa 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000afec:	79 a3 23 10 	ld.b %d3,[%sp]99
8000aff0:	19 ab 08 20 	ld.w %d11,[%sp]136
8000aff4:	19 a5 1c 10 	ld.w %d5,[%sp]92
8000aff8:	d9 af 0c 20 	lea %a15,[%sp]140
8000affc:	1d ff 28 f5 	j 80009a4c <_svfprintf_r+0x17c>
8000b000:	60 e5       	mov.a %a5,%d14
8000b002:	60 f4       	mov.a %a4,%d15
8000b004:	d9 a6 00 20 	lea %a6,[%sp]128
8000b008:	6d 00 37 1a 	call 8000e476 <__ssprint_r>
8000b00c:	df 02 fe fa 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000b010:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b014:	d9 af 0c 20 	lea %a15,[%sp]140
8000b018:	1d ff 13 ff 	j 8000ae3e <_svfprintf_r+0x156e>
8000b01c:	82 12       	mov %d2,1
8000b01e:	42 2b       	add %d11,%d2
8000b020:	91 00 00 28 	movh.a %a2,32768
8000b024:	68 12       	st.w [%a15]4,%d2
8000b026:	19 a2 04 20 	ld.w %d2,[%sp]132 <80000001 <BootModeHeader_0+0x1>>
8000b02a:	d9 22 b9 10 	lea %a2,[%a2]2169 <80000879 <__thenan_df+0x4d>>
8000b02e:	c2 12       	add %d2,1
8000b030:	e8 02       	st.a [%a15]0,%a2
8000b032:	59 ab 08 20 	st.w [%sp]136 <80000000 <BootModeHeader_0>>,%d11
8000b036:	59 a2 04 20 	st.w [%sp]132 <80000000 <BootModeHeader_0>>,%d2
8000b03a:	8b 82 80 22 	ge %d2,%d2,8
8000b03e:	d9 ff 08 00 	lea %a15,[%a15]8
8000b042:	df 02 70 82 	jne %d2,0,8000b522 <_svfprintf_r+0x1c52>
8000b046:	19 a2 30 00 	ld.w %d2,[%sp]48
8000b04a:	a6 42       	or %d2,%d4
8000b04c:	df 02 63 03 	jeq %d2,0,8000b712 <_svfprintf_r+0x1e42>
8000b050:	19 a2 04 10 	ld.w %d2,[%sp]68
8000b054:	19 a3 00 10 	ld.w %d3,[%sp]64
8000b058:	68 02       	st.w [%a15]0,%d2
8000b05a:	19 a2 04 20 	ld.w %d2,[%sp]132
8000b05e:	68 13       	st.w [%a15]4,%d3
8000b060:	0b b3 00 50 	add %d5,%d3,%d11
8000b064:	1b 12 00 30 	addi %d3,%d2,1
8000b068:	8b 83 80 22 	ge %d2,%d3,8
8000b06c:	59 a5 08 20 	st.w [%sp]136,%d5
8000b070:	59 a3 04 20 	st.w [%sp]132,%d3
8000b074:	d9 ff 08 00 	lea %a15,[%a15]8
8000b078:	df 02 75 82 	jne %d2,0,8000b562 <_svfprintf_r+0x1c92>
8000b07c:	bf 04 d1 03 	jlt %d4,0,8000b81e <_svfprintf_r+0x1f4e>
8000b080:	19 a4 30 00 	ld.w %d4,[%sp]48
8000b084:	e8 0e       	st.a [%a15]0,%a14
8000b086:	68 14       	st.w [%a15]4,%d4
8000b088:	0b 54 00 b0 	add %d11,%d4,%d5
8000b08c:	1b 13 00 20 	addi %d2,%d3,1
8000b090:	59 ab 08 20 	st.w [%sp]136,%d11
8000b094:	59 a2 04 20 	st.w [%sp]132,%d2
8000b098:	8b 82 80 22 	ge %d2,%d2,8
8000b09c:	df 02 22 75 	jeq %d2,0,80009ae0 <_svfprintf_r+0x210>
8000b0a0:	1d ff a5 fa 	j 8000a5ea <_svfprintf_r+0xd1a>
8000b0a4:	da 30       	mov %d15,48
8000b0a6:	b0 e2       	add.a %a2,-2
8000b0a8:	d9 a3 30 40 	lea %a3,[%sp]304
8000b0ac:	01 23 20 30 	sub.a %a3,%a3,%a2
8000b0b0:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000b0b4:	b5 a3 14 00 	st.a [%sp]20,%a3
8000b0b8:	59 a1 04 00 	st.w [%sp]4,%d1
8000b0bc:	40 2e       	mov.aa %a14,%a2
8000b0be:	1d ff fa f7 	j 8000a0b2 <_svfprintf_r+0x7e2>
8000b0c2:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b0c6:	60 e5       	mov.a %a5,%d14
8000b0c8:	d9 a6 00 20 	lea %a6,[%sp]128
8000b0cc:	6d 00 d5 19 	call 8000e476 <__ssprint_r>
8000b0d0:	df 02 27 fa 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000b0d4:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b0d8:	d9 af 0c 20 	lea %a15,[%sp]140
8000b0dc:	1d ff d6 f8 	j 8000a288 <_svfprintf_r+0x9b8>
8000b0e0:	3b 00 40 20 	mov %d2,1024
8000b0e4:	26 12       	and %d2,%d1
8000b0e6:	40 f6       	mov.aa %a6,%a15
8000b0e8:	59 ae 04 00 	st.w [%sp]4,%d14
8000b0ec:	b5 ad 14 00 	st.a [%sp]20,%a13
8000b0f0:	99 a7 08 00 	ld.a %a7,[%sp]8
8000b0f4:	99 ad 14 10 	ld.a %a13,[%sp]84
8000b0f8:	60 2f       	mov.a %a15,%d2
8000b0fa:	60 13       	mov.a %a3,%d1
8000b0fc:	82 0f       	mov %d15,0
8000b0fe:	d9 a2 30 40 	lea %a2,[%sp]304
8000b102:	80 4e       	mov.d %d14,%a4
8000b104:	1d 00 31 00 	j 8000b166 <_svfprintf_r+0x1896>
8000b108:	b7 08 04 2e 	insert %d2,%d8,0,28,4
8000b10c:	7b d0 cc 7c 	movh %d7,52429
8000b110:	42 12       	add %d2,%d1
8000b112:	42 2b       	add %d11,%d2
8000b114:	7b d0 cc 2c 	movh %d2,52429
8000b118:	1b d2 cc 2c 	addi %d2,%d2,-13107
8000b11c:	73 2b 68 20 	mul.u %e2,%d11,%d2
8000b120:	1b d7 cc 7c 	addi %d7,%d7,-13107
8000b124:	1b f7 ff 0f 	addi %d0,%d7,-1
8000b128:	8f e3 1f 20 	sh %d2,%d3,-2
8000b12c:	13 b2 3f 2b 	madd %d2,%d11,%d2,-5
8000b130:	82 03       	mov %d3,0
8000b132:	0b 2c c0 80 	subx %d8,%d12,%d2
8000b136:	0b 3d d0 90 	subc %d9,%d13,%d3
8000b13a:	73 78 68 20 	mul.u %e2,%d8,%d7
8000b13e:	03 08 0a 33 	madd %d3,%d3,%d8,%d0
8000b142:	03 79 0a 33 	madd %d3,%d3,%d9,%d7
8000b146:	77 23 80 af 	dextr %d10,%d3,%d2,31
8000b14a:	80 c2       	mov.d %d2,%a12
8000b14c:	0b c2 30 e2 	and.lt.u %d14,%d2,%d12
8000b150:	8b 0d 00 e5 	or.ne %d14,%d13,0
8000b154:	8f f3 1f 90 	sh %d9,%d3,-1
8000b158:	df 0e 4f 00 	jeq %d14,0,8000b1f6 <_svfprintf_r+0x1926>
8000b15c:	0b a9 10 c8 	mov %e12,%d9,%d10
8000b160:	40 e2       	mov.aa %a2,%a14
8000b162:	8b 0d 00 e2 	eq %d14,%d13,0
8000b166:	77 cd 00 82 	dextr %d8,%d13,%d12,4
8000b16a:	b7 0c 04 1e 	insert %d1,%d12,0,28,4
8000b16e:	b7 08 04 2e 	insert %d2,%d8,0,28,4
8000b172:	8f 8d 1e b0 	sh %d11,%d13,-24
8000b176:	42 12       	add %d2,%d1
8000b178:	0b b2 00 40 	add %d4,%d2,%d11
8000b17c:	7b d0 cc 2c 	movh %d2,52429
8000b180:	1b d2 cc 2c 	addi %d2,%d2,-13107
8000b184:	73 24 68 20 	mul.u %e2,%d4,%d2
8000b188:	7b d0 cc 7c 	movh %d7,52429
8000b18c:	1b d7 cc 7c 	addi %d7,%d7,-13107
8000b190:	8f e3 1f 20 	sh %d2,%d3,-2
8000b194:	13 b2 3f 24 	madd %d2,%d4,%d2,-5
8000b198:	82 03       	mov %d3,0
8000b19a:	1b f7 ff 0f 	addi %d0,%d7,-1
8000b19e:	0b 2c c0 20 	subx %d2,%d12,%d2
8000b1a2:	0b 3d d0 30 	subc %d3,%d13,%d3
8000b1a6:	60 24       	mov.a %a4,%d2
8000b1a8:	60 35       	mov.a %a5,%d3
8000b1aa:	73 72 68 20 	mul.u %e2,%d2,%d7
8000b1ae:	80 44       	mov.d %d4,%a4
8000b1b0:	80 55       	mov.d %d5,%a5
8000b1b2:	03 04 0a 33 	madd %d3,%d3,%d4,%d0
8000b1b6:	d9 2e ff ff 	lea %a14,[%a2]-1
8000b1ba:	c2 1f       	add %d15,1
8000b1bc:	03 75 0a 33 	madd %d3,%d3,%d5,%d7
8000b1c0:	77 23 80 af 	dextr %d10,%d3,%d2,31
8000b1c4:	8f f3 1f 90 	sh %d9,%d3,-1
8000b1c8:	33 aa 40 2c 	msub.u %e2,%e12,%d10,10
8000b1cc:	1b 02 03 20 	addi %d2,%d2,48
8000b1d0:	e9 22 ff ff 	st.b [%a2]-1,%d2
8000b1d4:	bd 0f 9a 7f 	jz.a %a15,8000b108 <_svfprintf_r+0x1838>
8000b1d8:	79 d2 00 00 	ld.b %d2,[%a13]0
8000b1dc:	8b f2 27 32 	ne %d3,%d2,127
8000b1e0:	0b f2 00 32 	and.eq %d3,%d2,%d15
8000b1e4:	df 03 92 7f 	jeq %d3,0,8000b108 <_svfprintf_r+0x1838>
8000b1e8:	80 c2       	mov.d %d2,%a12
8000b1ea:	0b c2 30 e2 	and.lt.u %d14,%d2,%d12
8000b1ee:	8b 0d 00 e5 	or.ne %d14,%d13,0
8000b1f2:	df 0e d4 82 	jne %d14,0,8000b79a <_svfprintf_r+0x1eca>
8000b1f6:	d9 a2 30 40 	lea %a2,[%sp]304
8000b1fa:	01 e2 20 20 	sub.a %a2,%a2,%a14
8000b1fe:	19 ae 04 00 	ld.w %d14,[%sp]4
8000b202:	b5 ad 14 10 	st.a [%sp]84,%a13
8000b206:	78 0c       	st.w [%sp]48,%d15
8000b208:	99 ad 14 00 	ld.a %a13,[%sp]20
8000b20c:	40 6f       	mov.aa %a15,%a6
8000b20e:	b5 a7 08 00 	st.a [%sp]8,%a7
8000b212:	b5 a2 14 00 	st.a [%sp]20,%a2
8000b216:	b5 a3 04 00 	st.a [%sp]4,%a3
8000b21a:	1d ff 4c f7 	j 8000a0b2 <_svfprintf_r+0x7e2>
8000b21e:	78 02       	st.w [%sp]8,%d15
8000b220:	e8 0c       	st.a [%a15]0,%a12
8000b222:	68 19       	st.w [%a15]4,%d9
8000b224:	42 9b       	add %d11,%d9
8000b226:	1d ff 33 ff 	j 8000b08c <_svfprintf_r+0x17bc>
8000b22a:	60 e5       	mov.a %a5,%d14
8000b22c:	60 f4       	mov.a %a4,%d15
8000b22e:	d9 a6 00 20 	lea %a6,[%sp]128
8000b232:	6d 00 22 19 	call 8000e476 <__ssprint_r>
8000b236:	df 02 e9 f9 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000b23a:	79 d3 00 00 	ld.b %d3,[%a13]0
8000b23e:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b242:	d9 af 0c 20 	lea %a15,[%sp]140
8000b246:	1d ff 19 fe 	j 8000ae78 <_svfprintf_r+0x15a8>
8000b24a:	99 a3 20 00 	ld.a %a3,[%sp]32
8000b24e:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b252:	d4 33       	ld.a %a3,[%a3]
8000b254:	74 32       	st.w [%a3],%d2
8000b256:	b5 a2 20 00 	st.a [%sp]32,%a2
8000b25a:	1d ff 74 f3 	j 80009942 <_svfprintf_r+0x72>
8000b25e:	8b 62 20 d3 	min.u %d13,%d2,6
8000b262:	82 02       	mov %d2,0
8000b264:	91 00 00 e8 	movh.a %a14,32768
8000b268:	b5 ac 20 00 	st.a [%sp]32,%a12
8000b26c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b270:	59 ad 14 00 	st.w [%sp]20,%d13
8000b274:	82 03       	mov %d3,0
8000b276:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b27a:	59 a2 34 00 	st.w [%sp]52,%d2
8000b27e:	59 a2 2c 00 	st.w [%sp]44,%d2
8000b282:	59 a2 28 00 	st.w [%sp]40,%d2
8000b286:	d9 ee b2 10 	lea %a14,[%a14]2162 <80000872 <__thenan_df+0x46>>
8000b28a:	1d ff cf f3 	j 80009a28 <_svfprintf_r+0x158>
8000b28e:	78 02       	st.w [%sp]8,%d15
8000b290:	c2 18       	add %d8,1
8000b292:	42 ba       	add %d10,%d11
8000b294:	f4 6c       	st.a [%a6],%a12
8000b296:	59 6b 04 00 	st.w [%a6]4,%d11
8000b29a:	59 aa 08 20 	st.w [%sp]136,%d10
8000b29e:	59 a8 04 20 	st.w [%sp]132,%d8
8000b2a2:	8b 88 80 22 	ge %d2,%d8,8
8000b2a6:	df 02 8b 79 	jeq %d2,0,8000a5bc <_svfprintf_r+0xcec>
8000b2aa:	1d ff 0c fb 	j 8000a8c2 <_svfprintf_r+0xff2>
8000b2ae:	53 12 40 c0 	mul.u %e12,%d2,1
8000b2b2:	82 14       	mov %d4,1
8000b2b4:	6f 91 d7 76 	jz.t %d1,9,8000a062 <_svfprintf_r+0x792>
8000b2b8:	8f f2 0f 21 	and %d2,%d2,255
8000b2bc:	53 12 40 c0 	mul.u %e12,%d2,1
8000b2c0:	1d ff d1 f6 	j 8000a062 <_svfprintf_r+0x792>
8000b2c4:	91 00 00 c8 	movh.a %a12,32768
8000b2c8:	02 89       	mov %d9,%d8
8000b2ca:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000b2ce:	1d ff d8 f8 	j 8000a47e <_svfprintf_r+0xbae>
8000b2d2:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000b2d6:	df f2 73 01 	jeq %d2,-1,8000b5bc <_svfprintf_r+0x1cec>
8000b2da:	02 23       	mov %d3,%d2
8000b2dc:	8b 7d 04 22 	eq %d2,%d13,71
8000b2e0:	8b 03 00 24 	and.eq %d2,%d3,0
8000b2e4:	df 02 6f 01 	jeq %d2,0,8000b5c2 <_svfprintf_r+0x1cf2>
8000b2e8:	19 a2 04 00 	ld.w %d2,[%sp]4
8000b2ec:	19 aa 3c 00 	ld.w %d10,[%sp]60
8000b2f0:	8f 02 50 b1 	or %d11,%d2,256
8000b2f4:	bf 0a 6d 03 	jlt %d10,0,8000b9ce <_svfprintf_r+0x20fe>
8000b2f8:	82 02       	mov %d2,0
8000b2fa:	59 a2 20 00 	st.w [%sp]32,%d2
8000b2fe:	82 12       	mov %d2,1
8000b300:	02 28       	mov %d8,%d2
8000b302:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b306:	99 ac 38 00 	ld.a %a12,[%sp]56
8000b30a:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b30e:	d9 a7 38 10 	lea %a7,[%sp]120
8000b312:	d9 a6 2c 10 	lea %a6,[%sp]108
8000b316:	d9 a5 28 10 	lea %a5,[%sp]104
8000b31a:	02 87       	mov %d7,%d8
8000b31c:	82 26       	mov %d6,2
8000b31e:	80 c4       	mov.d %d4,%a12
8000b320:	02 a5       	mov %d5,%d10
8000b322:	6d 00 91 09 	call 8000c644 <_dtoa_r>
8000b326:	8b 7d 24 92 	ne %d9,%d13,71
8000b32a:	40 2e       	mov.aa %a14,%a2
8000b32c:	df 09 08 80 	jne %d9,0,8000b33c <_svfprintf_r+0x1a6c>
8000b330:	19 a2 04 00 	ld.w %d2,[%sp]4
8000b334:	19 a3 38 10 	ld.w %d3,[%sp]120
8000b338:	6f 02 21 00 	jz.t %d2,0,8000b37a <_svfprintf_r+0x1aaa>
8000b33c:	80 e2       	mov.d %d2,%a14
8000b33e:	42 28       	add %d8,%d2
8000b340:	99 a5 38 00 	ld.a %a5,[%sp]56
8000b344:	d2 06       	mov %e6,0
8000b346:	02 a5       	mov %d5,%d10
8000b348:	80 54       	mov.d %d4,%a5
8000b34a:	6d 00 b7 27 	call 800102b8 <__eqdf2>
8000b34e:	02 83       	mov %d3,%d8
8000b350:	df 02 15 00 	jeq %d2,0,8000b37a <_svfprintf_r+0x1aaa>
8000b354:	19 a3 38 10 	ld.w %d3,[%sp]120
8000b358:	7f 83 11 80 	jge.u %d3,%d8,8000b37a <_svfprintf_r+0x1aaa>
8000b35c:	99 a3 08 00 	ld.a %a3,[%sp]8
8000b360:	1b 13 00 20 	addi %d2,%d3,1
8000b364:	da 30       	mov %d15,48
8000b366:	60 32       	mov.a %a2,%d3
8000b368:	59 a2 38 10 	st.w [%sp]120,%d2
8000b36c:	2c 20       	st.b [%a2]0,%d15
8000b36e:	19 a3 38 10 	ld.w %d3,[%sp]120
8000b372:	3f 83 f7 ff 	jlt.u %d3,%d8,8000b360 <_svfprintf_r+0x1a90>
8000b376:	b5 a3 08 00 	st.a [%sp]8,%a3
8000b37a:	80 e2       	mov.d %d2,%a14
8000b37c:	0b 23 80 20 	sub %d2,%d3,%d2
8000b380:	59 a2 30 00 	st.w [%sp]48,%d2
8000b384:	19 a2 28 10 	ld.w %d2,[%sp]104
8000b388:	59 a2 28 00 	st.w [%sp]40,%d2
8000b38c:	df 09 65 81 	jne %d9,0,8000b656 <_svfprintf_r+0x1d86>
8000b390:	19 a4 0c 00 	ld.w %d4,[%sp]12
8000b394:	02 23       	mov %d3,%d2
8000b396:	0b 24 20 21 	lt %d2,%d4,%d2
8000b39a:	8b d3 3f 25 	or.lt %d2,%d3,-3
8000b39e:	df 02 98 01 	jeq %d2,0,8000b6ce <_svfprintf_r+0x1dfe>
8000b3a2:	19 a2 24 00 	ld.w %d2,[%sp]36
8000b3a6:	82 03       	mov %d3,0
8000b3a8:	c2 e2       	add %d2,-2
8000b3aa:	8f 02 c2 d1 	andn %d13,%d2,32
8000b3ae:	59 a3 1c 00 	st.w [%sp]28,%d3
8000b3b2:	59 a2 24 00 	st.w [%sp]36,%d2
8000b3b6:	19 a2 24 00 	ld.w %d2,[%sp]36
8000b3ba:	19 a7 28 00 	ld.w %d7,[%sp]40
8000b3be:	1b f2 00 50 	addi %d5,%d2,15
8000b3c2:	37 05 48 50 	extr %d5,%d5,0,8
8000b3c6:	37 02 48 30 	extr %d3,%d2,0,8
8000b3ca:	8b 1d 24 62 	ne %d6,%d13,65
8000b3ce:	2b 53 40 26 	sel %d2,%d6,%d3,%d5
8000b3d2:	1b f7 ff 4f 	addi %d4,%d7,-1
8000b3d6:	e9 a2 30 10 	st.b [%sp]112,%d2
8000b3da:	59 a4 28 10 	st.w [%sp]104,%d4
8000b3de:	3b b0 02 20 	mov %d2,43
8000b3e2:	ff 04 06 00 	jge %d4,0,8000b3ee <_svfprintf_r+0x1b1e>
8000b3e6:	8b 17 00 41 	rsub %d4,%d7,1
8000b3ea:	3b d0 02 20 	mov %d2,45
8000b3ee:	e9 a2 31 10 	st.b [%sp]113,%d2
8000b3f2:	8b a4 40 22 	lt %d2,%d4,10
8000b3f6:	df 02 a1 82 	jne %d2,0,8000b938 <_svfprintf_r+0x2068>
8000b3fa:	d9 a5 3f 10 	lea %a5,[%sp]127
8000b3fe:	58 02       	ld.w %d15,[%sp]8
8000b400:	40 52       	mov.aa %a2,%a5
8000b402:	3b a0 00 60 	mov %d6,10
8000b406:	4b 64 01 22 	div %e2,%d4,%d6
8000b40a:	40 24       	mov.aa %a4,%a2
8000b40c:	02 45       	mov %d5,%d4
8000b40e:	1b 03 03 20 	addi %d2,%d3,48
8000b412:	8b 45 86 52 	ge %d5,%d5,100
8000b416:	b0 f2       	add.a %a2,-1
8000b418:	e9 42 ff ff 	st.b [%a4]-1,%d2
8000b41c:	7b 60 66 26 	movh %d2,26214
8000b420:	1b 72 66 26 	addi %d2,%d2,26215
8000b424:	73 24 6a 20 	mul %e2,%d4,%d2
8000b428:	8f 14 3e 40 	sha %d4,%d4,-31
8000b42c:	86 e3       	sha %d3,-2
8000b42e:	0b 43 80 40 	sub %d4,%d3,%d4
8000b432:	df 05 ea ff 	jne %d5,0,8000b406 <_svfprintf_r+0x1b36>
8000b436:	1b 04 03 30 	addi %d3,%d4,48
8000b43a:	82 22       	mov %d2,2
8000b43c:	37 03 48 30 	extr %d3,%d3,0,8
8000b440:	78 02       	st.w [%sp]8,%d15
8000b442:	59 a2 0c 10 	st.w [%sp]76,%d2
8000b446:	80 42       	mov.d %d2,%a4
8000b448:	e9 23 ff ff 	st.b [%a2]-1,%d3
8000b44c:	c2 e2       	add %d2,-2
8000b44e:	80 54       	mov.d %d4,%a5
8000b450:	7f 42 19 80 	jge.u %d2,%d4,8000b482 <_svfprintf_r+0x1bb2>
8000b454:	d9 a3 32 10 	lea %a3,[%sp]114
8000b458:	1d 00 04 00 	j 8000b460 <_svfprintf_r+0x1b90>
8000b45c:	09 23 01 00 	ld.b %d3,[%a2+]1
8000b460:	24 33       	st.b [%a3+],%d3
8000b462:	7d 25 fd ff 	jne.a %a5,%a2,8000b45c <_svfprintf_r+0x1b8c>
8000b466:	d9 a2 01 20 	lea %a2,[%sp]129
8000b46a:	01 42 20 20 	sub.a %a2,%a2,%a4
8000b46e:	d9 a3 32 10 	lea %a3,[%sp]114
8000b472:	30 23       	add.a %a3,%a2
8000b474:	d9 a2 30 10 	lea %a2,[%sp]112
8000b478:	01 23 20 20 	sub.a %a2,%a3,%a2
8000b47c:	78 02       	st.w [%sp]8,%d15
8000b47e:	b5 a2 0c 10 	st.a [%sp]76,%a2
8000b482:	19 a3 0c 10 	ld.w %d3,[%sp]76
8000b486:	19 a2 30 00 	ld.w %d2,[%sp]48
8000b48a:	42 23       	add %d3,%d2
8000b48c:	59 a3 14 00 	st.w [%sp]20,%d3
8000b490:	bf 22 6a 02 	jlt %d2,2,8000b964 <_svfprintf_r+0x2094>
8000b494:	19 a2 14 00 	ld.w %d2,[%sp]20
8000b498:	19 a3 00 10 	ld.w %d3,[%sp]64
8000b49c:	42 32       	add %d2,%d3
8000b49e:	59 a2 14 00 	st.w [%sp]20,%d2
8000b4a2:	19 a2 04 00 	ld.w %d2,[%sp]4
8000b4a6:	b7 02 01 25 	insert %d2,%d2,0,10,1
8000b4aa:	8f 02 50 21 	or %d2,%d2,256
8000b4ae:	59 a2 04 00 	st.w [%sp]4,%d2
8000b4b2:	19 a2 14 00 	ld.w %d2,[%sp]20
8000b4b6:	8b 02 40 d3 	max %d13,%d2,0
8000b4ba:	82 02       	mov %d2,0
8000b4bc:	59 a2 34 00 	st.w [%sp]52,%d2
8000b4c0:	59 a2 2c 00 	st.w [%sp]44,%d2
8000b4c4:	59 a2 28 00 	st.w [%sp]40,%d2
8000b4c8:	19 a2 20 00 	ld.w %d2,[%sp]32
8000b4cc:	df 02 f4 80 	jne %d2,0,8000b6b4 <_svfprintf_r+0x1de4>
8000b4d0:	79 a3 23 10 	ld.b %d3,[%sp]99
8000b4d4:	59 ac 20 00 	st.w [%sp]32,%d12
8000b4d8:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b4dc:	df 03 a6 72 	jeq %d3,0,80009a28 <_svfprintf_r+0x158>
8000b4e0:	1d ff 7a f4 	j 80009dd4 <_svfprintf_r+0x504>
8000b4e4:	78 02       	st.w [%sp]8,%d15
8000b4e6:	1b 13 00 20 	addi %d2,%d3,1
8000b4ea:	42 9b       	add %d11,%d9
8000b4ec:	e8 0c       	st.a [%a15]0,%a12
8000b4ee:	68 19       	st.w [%a15]4,%d9
8000b4f0:	59 a2 04 20 	st.w [%sp]132,%d2
8000b4f4:	59 ab 08 20 	st.w [%sp]136,%d11
8000b4f8:	8b 82 80 22 	ge %d2,%d2,8
8000b4fc:	d9 ff 08 00 	lea %a15,[%a15]8
8000b500:	df 02 53 79 	jeq %d2,0,8000a7a6 <_svfprintf_r+0xed6>
8000b504:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b508:	60 e5       	mov.a %a5,%d14
8000b50a:	d9 a6 00 20 	lea %a6,[%sp]128
8000b50e:	6d 00 b4 17 	call 8000e476 <__ssprint_r>
8000b512:	df 02 06 f8 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000b516:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b51a:	d9 af 0c 20 	lea %a15,[%sp]140
8000b51e:	1d ff 44 f9 	j 8000a7a6 <_svfprintf_r+0xed6>
8000b522:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b526:	60 e5       	mov.a %a5,%d14
8000b528:	d9 a6 00 20 	lea %a6,[%sp]128
8000b52c:	6d 00 a5 17 	call 8000e476 <__ssprint_r>
8000b530:	df 02 f7 f7 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000b534:	19 a4 28 10 	ld.w %d4,[%sp]104
8000b538:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b53c:	d9 af 0c 20 	lea %a15,[%sp]140
8000b540:	1d ff 83 fd 	j 8000b046 <_svfprintf_r+0x1776>
8000b544:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b548:	60 e5       	mov.a %a5,%d14
8000b54a:	d9 a6 00 20 	lea %a6,[%sp]128
8000b54e:	6d 00 94 17 	call 8000e476 <__ssprint_r>
8000b552:	df 02 e6 f7 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000b556:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b55a:	d9 af 0c 20 	lea %a15,[%sp]140
8000b55e:	1d ff 1c f9 	j 8000a796 <_svfprintf_r+0xec6>
8000b562:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b566:	60 e5       	mov.a %a5,%d14
8000b568:	d9 a6 00 20 	lea %a6,[%sp]128
8000b56c:	6d 00 85 17 	call 8000e476 <__ssprint_r>
8000b570:	df 02 d7 f7 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000b574:	19 a4 28 10 	ld.w %d4,[%sp]104
8000b578:	19 a5 08 20 	ld.w %d5,[%sp]136
8000b57c:	19 a3 04 20 	ld.w %d3,[%sp]132
8000b580:	d9 af 0c 20 	lea %a15,[%sp]140
8000b584:	1d ff 7c fd 	j 8000b07c <_svfprintf_r+0x17ac>
8000b588:	19 a4 30 00 	ld.w %d4,[%sp]48
8000b58c:	80 e2       	mov.d %d2,%a14
8000b58e:	42 42       	add %d2,%d4
8000b590:	0b 34 80 30 	sub %d3,%d4,%d3
8000b594:	a2 a2       	sub %d2,%d10
8000b596:	0b 32 80 81 	min %d8,%d2,%d3
8000b59a:	1d ff 47 f9 	j 8000a828 <_svfprintf_r+0xf58>
8000b59e:	99 a3 20 00 	ld.a %a3,[%sp]32
8000b5a2:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b5a6:	b5 a2 20 00 	st.a [%sp]32,%a2
8000b5aa:	d4 33       	ld.a %a3,[%a3]
8000b5ac:	b4 32       	st.h [%a3],%d2
8000b5ae:	1d ff ca f1 	j 80009942 <_svfprintf_r+0x72>
8000b5b2:	82 12       	mov %d2,1
8000b5b4:	59 a2 28 10 	st.w [%sp]104,%d2
8000b5b8:	1d ff b8 fa 	j 8000ab28 <_svfprintf_r+0x1258>
8000b5bc:	82 62       	mov %d2,6
8000b5be:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b5c2:	19 a2 04 00 	ld.w %d2,[%sp]4
8000b5c6:	8f 02 50 b1 	or %d11,%d2,256
8000b5ca:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000b5ce:	bf 02 03 02 	jlt %d2,0,8000b9d4 <_svfprintf_r+0x2104>
8000b5d2:	02 2a       	mov %d10,%d2
8000b5d4:	82 02       	mov %d2,0
8000b5d6:	59 a2 20 00 	st.w [%sp]32,%d2
8000b5da:	8b 6d 04 22 	eq %d2,%d13,70
8000b5de:	df 02 54 01 	jeq %d2,0,8000b886 <_svfprintf_r+0x1fb6>
8000b5e2:	19 a9 38 00 	ld.w %d9,[%sp]56
8000b5e6:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b5ea:	19 a7 0c 00 	ld.w %d7,[%sp]12
8000b5ee:	d9 a7 38 10 	lea %a7,[%sp]120
8000b5f2:	d9 a6 2c 10 	lea %a6,[%sp]108
8000b5f6:	d9 a5 28 10 	lea %a5,[%sp]104
8000b5fa:	82 36       	mov %d6,3
8000b5fc:	02 94       	mov %d4,%d9
8000b5fe:	02 a5       	mov %d5,%d10
8000b600:	6d 00 22 08 	call 8000c644 <_dtoa_r>
8000b604:	d2 06       	mov %e6,0
8000b606:	79 28 00 00 	ld.b %d8,[%a2]0
8000b60a:	40 2e       	mov.aa %a14,%a2
8000b60c:	02 94       	mov %d4,%d9
8000b60e:	02 a5       	mov %d5,%d10
8000b610:	6d 00 74 26 	call 800102f8 <__nedf2>
8000b614:	8b 08 03 82 	eq %d8,%d8,48
8000b618:	8b 02 20 22 	ne %d2,%d2,0
8000b61c:	26 82       	and %d2,%d8
8000b61e:	df 02 53 82 	jne %d2,0,8000bac4 <_svfprintf_r+0x21f4>
8000b622:	19 a2 28 10 	ld.w %d2,[%sp]104
8000b626:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000b62a:	82 19       	mov %d9,1
8000b62c:	42 32       	add %d2,%d3
8000b62e:	80 e3       	mov.d %d3,%a14
8000b630:	0b 23 00 80 	add %d8,%d3,%d2
8000b634:	1d ff 86 fe 	j 8000b340 <_svfprintf_r+0x1a70>
8000b638:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000b63c:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b640:	1b 12 00 40 	addi %d4,%d2,1
8000b644:	6d ff df e6 	call 80008402 <_malloc_r>
8000b648:	40 2e       	mov.aa %a14,%a2
8000b64a:	bd 02 79 02 	jz.a %a2,8000bb3c <_svfprintf_r+0x226c>
8000b64e:	b5 a2 1c 00 	st.a [%sp]28,%a2
8000b652:	1d ff 41 fa 	j 8000aad4 <_svfprintf_r+0x1204>
8000b656:	8b 6d 04 22 	eq %d2,%d13,70
8000b65a:	df 02 82 02 	jeq %d2,0,8000bb5e <_svfprintf_r+0x228e>
8000b65e:	19 a2 04 00 	ld.w %d2,[%sp]4
8000b662:	19 a5 0c 00 	ld.w %d5,[%sp]12
8000b666:	8f 12 00 41 	and %d4,%d2,1
8000b66a:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b66e:	a6 54       	or %d4,%d5
8000b670:	bf 12 39 02 	jlt %d2,1,8000bae2 <_svfprintf_r+0x2212>
8000b674:	19 a6 00 10 	ld.w %d6,[%sp]64
8000b678:	02 23       	mov %d3,%d2
8000b67a:	42 63       	add %d3,%d6
8000b67c:	42 53       	add %d3,%d5
8000b67e:	2b 23 40 24 	sel %d2,%d4,%d3,%d2
8000b682:	c5 02 26 10 	lea %a2,66 <__TRICORE_DERIVATE_MEMORY_MAP__-0x20a>
8000b686:	b5 a2 24 00 	st.a [%sp]36,%a2
8000b68a:	59 a2 14 00 	st.w [%sp]20,%d2
8000b68e:	19 a2 04 00 	ld.w %d2,[%sp]4
8000b692:	6f a2 af 81 	jnz.t %d2,10,8000b9f0 <_svfprintf_r+0x2120>
8000b696:	19 a2 14 00 	ld.w %d2,[%sp]20
8000b69a:	8b 02 40 d3 	max %d13,%d2,0
8000b69e:	82 02       	mov %d2,0
8000b6a0:	59 ab 04 00 	st.w [%sp]4,%d11
8000b6a4:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b6a8:	59 a2 34 00 	st.w [%sp]52,%d2
8000b6ac:	59 a2 2c 00 	st.w [%sp]44,%d2
8000b6b0:	1d ff 0c ff 	j 8000b4c8 <_svfprintf_r+0x1bf8>
8000b6b4:	da 2d       	mov %d15,45
8000b6b6:	82 02       	mov %d2,0
8000b6b8:	59 ac 20 00 	st.w [%sp]32,%d12
8000b6bc:	e9 af 23 10 	st.b [%sp]99,%d15
8000b6c0:	3b d0 02 30 	mov %d3,45
8000b6c4:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b6c8:	c2 1d       	add %d13,1
8000b6ca:	1d ff af f1 	j 80009a28 <_svfprintf_r+0x158>
8000b6ce:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b6d2:	19 a3 30 00 	ld.w %d3,[%sp]48
8000b6d6:	3f 32 f4 00 	jlt %d2,%d3,8000b8be <_svfprintf_r+0x1fee>
8000b6da:	19 a3 04 00 	ld.w %d3,[%sp]4
8000b6de:	19 a4 28 00 	ld.w %d4,[%sp]40
8000b6e2:	19 a5 00 10 	ld.w %d5,[%sp]64
8000b6e6:	8f 13 00 21 	and %d2,%d3,1
8000b6ea:	2b 54 00 22 	cadd %d2,%d2,%d4,%d5
8000b6ee:	59 a2 14 00 	st.w [%sp]20,%d2
8000b6f2:	6f a3 06 00 	jz.t %d3,10,8000b6fe <_svfprintf_r+0x1e2e>
8000b6f6:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b6fa:	ff 12 77 01 	jge %d2,1,8000b9e8 <_svfprintf_r+0x2118>
8000b6fe:	19 a2 14 00 	ld.w %d2,[%sp]20
8000b702:	c5 02 27 10 	lea %a2,67 <__TRICORE_DERIVATE_MEMORY_MAP__-0x209>
8000b706:	8b 02 40 d3 	max %d13,%d2,0
8000b70a:	b5 a2 24 00 	st.a [%sp]36,%a2
8000b70e:	1d ff c8 ff 	j 8000b69e <_svfprintf_r+0x1dce>
8000b712:	19 a2 04 00 	ld.w %d2,[%sp]4
8000b716:	6f 02 e7 71 	jz.t %d2,0,80009ae4 <_svfprintf_r+0x214>
8000b71a:	19 a2 04 10 	ld.w %d2,[%sp]68
8000b71e:	19 a3 00 10 	ld.w %d3,[%sp]64
8000b722:	68 02       	st.w [%a15]0,%d2
8000b724:	19 a2 04 20 	ld.w %d2,[%sp]132
8000b728:	0b b3 00 50 	add %d5,%d3,%d11
8000b72c:	68 13       	st.w [%a15]4,%d3
8000b72e:	1b 12 00 30 	addi %d3,%d2,1
8000b732:	59 a5 08 20 	st.w [%sp]136,%d5
8000b736:	8b 83 80 22 	ge %d2,%d3,8
8000b73a:	59 a3 04 20 	st.w [%sp]132,%d3
8000b73e:	df 02 12 ff 	jne %d2,0,8000b562 <_svfprintf_r+0x1c92>
8000b742:	d9 ff 08 00 	lea %a15,[%a15]8
8000b746:	1d ff 9d fc 	j 8000b080 <_svfprintf_r+0x17b0>
8000b74a:	60 e5       	mov.a %a5,%d14
8000b74c:	60 f4       	mov.a %a4,%d15
8000b74e:	d9 a6 00 20 	lea %a6,[%sp]128
8000b752:	6d 00 92 16 	call 8000e476 <__ssprint_r>
8000b756:	df 02 59 f7 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000b75a:	79 d3 00 00 	ld.b %d3,[%a13]0
8000b75e:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b762:	d9 af 0c 20 	lea %a15,[%sp]140
8000b766:	1d ff 8f fb 	j 8000ae84 <_svfprintf_r+0x15b4>
8000b76a:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b76e:	60 e5       	mov.a %a5,%d14
8000b770:	d9 a6 00 20 	lea %a6,[%sp]128
8000b774:	6d 00 81 16 	call 8000e476 <__ssprint_r>
8000b778:	df 02 d3 f6 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000b77c:	19 a3 28 10 	ld.w %d3,[%sp]104
8000b780:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b784:	d9 af 0c 20 	lea %a15,[%sp]140
8000b788:	1d ff 35 f8 	j 8000a7f2 <_svfprintf_r+0xf22>
8000b78c:	91 00 00 c8 	movh.a %a12,32768
8000b790:	02 89       	mov %d9,%d8
8000b792:	d9 cc 8c 20 	lea %a12,[%a12]2188 <8000088c <blanks.1>>
8000b796:	1d ff 67 f3 	j 80009e64 <_svfprintf_r+0x594>
8000b79a:	99 a2 18 10 	ld.a %a2,[%sp]88
8000b79e:	99 a5 10 10 	ld.a %a5,[%sp]80
8000b7a2:	b5 a7 28 00 	st.a [%sp]40,%a7
8000b7a6:	01 2e 20 e0 	sub.a %a14,%a14,%a2
8000b7aa:	80 24       	mov.d %d4,%a2
8000b7ac:	40 e4       	mov.aa %a4,%a14
8000b7ae:	b5 a6 1c 00 	st.a [%sp]28,%a6
8000b7b2:	b5 a3 08 00 	st.a [%sp]8,%a3
8000b7b6:	6d ff f0 eb 	call 80008f96 <strncpy>
8000b7ba:	79 d2 01 00 	ld.b %d2,[%a13]1
8000b7be:	80 d3       	mov.d %d3,%a13
8000b7c0:	ab 13 00 22 	cadd %d2,%d2,%d3,1
8000b7c4:	99 a3 08 00 	ld.a %a3,[%sp]8
8000b7c8:	99 a6 1c 00 	ld.a %a6,[%sp]28
8000b7cc:	99 a7 28 00 	ld.a %a7,[%sp]40
8000b7d0:	60 2d       	mov.a %a13,%d2
8000b7d2:	82 0f       	mov %d15,0
8000b7d4:	1d ff c4 fc 	j 8000b15c <_svfprintf_r+0x188c>
8000b7d8:	79 a3 23 10 	ld.b %d3,[%sp]99
8000b7dc:	19 ad 0c 00 	ld.w %d13,[%sp]12
8000b7e0:	b5 ac 20 00 	st.a [%sp]32,%a12
8000b7e4:	1d ff ec f2 	j 80009dbc <_svfprintf_r+0x4ec>
8000b7e8:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b7ec:	60 e5       	mov.a %a5,%d14
8000b7ee:	d9 a6 00 20 	lea %a6,[%sp]128
8000b7f2:	6d 00 42 16 	call 8000e476 <__ssprint_r>
8000b7f6:	df 02 94 f6 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000b7fa:	19 a2 28 10 	ld.w %d2,[%sp]104
8000b7fe:	19 a3 30 00 	ld.w %d3,[%sp]48
8000b802:	19 ab 08 20 	ld.w %d11,[%sp]136
8000b806:	a2 23       	sub %d3,%d2
8000b808:	d9 af 0c 20 	lea %a15,[%sp]140
8000b80c:	1d ff 0e f8 	j 8000a828 <_svfprintf_r+0xf58>
8000b810:	91 00 00 c8 	movh.a %a12,32768
8000b814:	02 89       	mov %d9,%d8
8000b816:	d9 cc 8c 20 	lea %a12,[%a12]2188 <8000088c <blanks.1>>
8000b81a:	1d ff 70 f7 	j 8000a6fa <_svfprintf_r+0xe2a>
8000b81e:	8b 04 00 81 	rsub %d8,%d4,0
8000b822:	91 00 00 c8 	movh.a %a12,32768
8000b826:	8b 04 9f 42 	ge %d4,%d4,-16
8000b82a:	58 02       	ld.w %d15,[%sp]8
8000b82c:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000b830:	3b 00 01 90 	mov %d9,16
8000b834:	df 04 0a 00 	jeq %d4,0,8000b848 <_svfprintf_r+0x1f78>
8000b838:	1d 00 5c 00 	j 8000b8f0 <_svfprintf_r+0x2020>
8000b83c:	1b 08 ff 8f 	addi %d8,%d8,-16
8000b840:	8b 18 81 22 	ge %d2,%d8,17
8000b844:	df 02 55 00 	jeq %d2,0,8000b8ee <_svfprintf_r+0x201e>
8000b848:	c2 13       	add %d3,1
8000b84a:	1b 05 01 50 	addi %d5,%d5,16
8000b84e:	e8 0c       	st.a [%a15]0,%a12
8000b850:	68 19       	st.w [%a15]4,%d9
8000b852:	59 a5 08 20 	st.w [%sp]136,%d5
8000b856:	59 a3 04 20 	st.w [%sp]132,%d3
8000b85a:	8b 83 80 22 	ge %d2,%d3,8
8000b85e:	d9 ff 08 00 	lea %a15,[%a15]8
8000b862:	df 02 ed 7f 	jeq %d2,0,8000b83c <_svfprintf_r+0x1f6c>
8000b866:	60 e5       	mov.a %a5,%d14
8000b868:	60 f4       	mov.a %a4,%d15
8000b86a:	d9 a6 00 20 	lea %a6,[%sp]128
8000b86e:	6d 00 04 16 	call 8000e476 <__ssprint_r>
8000b872:	df 02 cb f6 	jne %d2,0,8000a608 <_svfprintf_r+0xd38>
8000b876:	19 a5 08 20 	ld.w %d5,[%sp]136
8000b87a:	19 a3 04 20 	ld.w %d3,[%sp]132
8000b87e:	d9 af 0c 20 	lea %a15,[%sp]140
8000b882:	1d ff dd ff 	j 8000b83c <_svfprintf_r+0x1f6c>
8000b886:	8b 5d 24 22 	ne %d2,%d13,69
8000b88a:	df 02 6f 81 	jne %d2,0,8000bb68 <_svfprintf_r+0x2298>
8000b88e:	99 ac 38 00 	ld.a %a12,[%sp]56
8000b892:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000b896:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b89a:	1b 12 00 80 	addi %d8,%d2,1
8000b89e:	d9 a7 38 10 	lea %a7,[%sp]120
8000b8a2:	d9 a6 2c 10 	lea %a6,[%sp]108
8000b8a6:	d9 a5 28 10 	lea %a5,[%sp]104
8000b8aa:	02 87       	mov %d7,%d8
8000b8ac:	82 26       	mov %d6,2
8000b8ae:	80 c4       	mov.d %d4,%a12
8000b8b0:	02 a5       	mov %d5,%d10
8000b8b2:	6d 00 c9 06 	call 8000c644 <_dtoa_r>
8000b8b6:	40 2e       	mov.aa %a14,%a2
8000b8b8:	82 19       	mov %d9,1
8000b8ba:	1d ff 41 fd 	j 8000b33c <_svfprintf_r+0x1a6c>
8000b8be:	19 a2 30 00 	ld.w %d2,[%sp]48
8000b8c2:	19 a3 00 10 	ld.w %d3,[%sp]64
8000b8c6:	c5 02 27 10 	lea %a2,67 <__TRICORE_DERIVATE_MEMORY_MAP__-0x209>
8000b8ca:	42 23       	add %d3,%d2
8000b8cc:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b8d0:	b5 a2 24 00 	st.a [%sp]36,%a2
8000b8d4:	59 a3 14 00 	st.w [%sp]20,%d3
8000b8d8:	ff 12 db 7e 	jge %d2,1,8000b68e <_svfprintf_r+0x1dbe>
8000b8dc:	8b 12 00 21 	rsub %d2,%d2,1
8000b8e0:	42 23       	add %d3,%d2
8000b8e2:	8b 03 40 d3 	max %d13,%d3,0
8000b8e6:	59 a3 14 00 	st.w [%sp]20,%d3
8000b8ea:	1d ff da fe 	j 8000b69e <_svfprintf_r+0x1dce>
8000b8ee:	78 02       	st.w [%sp]8,%d15
8000b8f0:	c2 13       	add %d3,1
8000b8f2:	42 85       	add %d5,%d8
8000b8f4:	e8 0c       	st.a [%a15]0,%a12
8000b8f6:	68 18       	st.w [%a15]4,%d8
8000b8f8:	59 a5 08 20 	st.w [%sp]136,%d5
8000b8fc:	59 a3 04 20 	st.w [%sp]132,%d3
8000b900:	8b 83 80 22 	ge %d2,%d3,8
8000b904:	df 02 1f 7f 	jeq %d2,0,8000b742 <_svfprintf_r+0x1e72>
8000b908:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b90c:	60 e5       	mov.a %a5,%d14
8000b90e:	d9 a6 00 20 	lea %a6,[%sp]128
8000b912:	6d 00 b2 15 	call 8000e476 <__ssprint_r>
8000b916:	df 02 04 f6 	jne %d2,0,8000a51e <_svfprintf_r+0xc4e>
8000b91a:	19 a5 08 20 	ld.w %d5,[%sp]136
8000b91e:	19 a3 04 20 	ld.w %d3,[%sp]132
8000b922:	d9 af 0c 20 	lea %a15,[%sp]140
8000b926:	1d ff ad fb 	j 8000b080 <_svfprintf_r+0x17b0>
8000b92a:	91 00 00 c8 	movh.a %a12,32768
8000b92e:	02 89       	mov %d9,%d8
8000b930:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000b934:	1d ff 47 f5 	j 8000a3c2 <_svfprintf_r+0xaf2>
8000b938:	8b 1d 04 d2 	eq %d13,%d13,65
8000b93c:	d9 a3 32 10 	lea %a3,[%sp]114
8000b940:	df 0d 07 80 	jne %d13,0,8000b94e <_svfprintf_r+0x207e>
8000b944:	da 30       	mov %d15,48
8000b946:	d9 a3 33 10 	lea %a3,[%sp]115
8000b94a:	e9 af 32 10 	st.b [%sp]114,%d15
8000b94e:	1b 04 03 40 	addi %d4,%d4,48
8000b952:	d9 a2 30 10 	lea %a2,[%sp]112
8000b956:	24 34       	st.b [%a3+],%d4
8000b958:	01 23 20 20 	sub.a %a2,%a3,%a2
8000b95c:	b5 a2 0c 10 	st.a [%sp]76,%a2
8000b960:	1d ff 91 fd 	j 8000b482 <_svfprintf_r+0x1bb2>
8000b964:	19 a2 04 00 	ld.w %d2,[%sp]4
8000b968:	6f 02 9d 7d 	jz.t %d2,0,8000b4a2 <_svfprintf_r+0x1bd2>
8000b96c:	1d ff 94 fd 	j 8000b494 <_svfprintf_r+0x1bc4>
8000b970:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000b974:	60 a2       	mov.a %a2,%d10
8000b976:	59 a2 38 10 	st.w [%sp]120,%d2
8000b97a:	79 22 ff ff 	ld.b %d2,[%a2]-1
8000b97e:	99 a2 14 00 	ld.a %a2,[%sp]20
8000b982:	60 a3       	mov.a %a3,%d10
8000b984:	79 23 0f 00 	ld.b %d3,[%a2]15
8000b988:	5f 32 13 80 	jne %d2,%d3,8000b9ae <_svfprintf_r+0x20de>
8000b98c:	99 a4 08 00 	ld.a %a4,[%sp]8
8000b990:	da 30       	mov %d15,48
8000b992:	e9 3f ff ff 	st.b [%a3]-1,%d15
8000b996:	99 a3 38 10 	ld.a %a3,[%sp]120
8000b99a:	d9 32 ff ff 	lea %a2,[%a3]-1
8000b99e:	b5 a2 38 10 	st.a [%sp]120,%a2
8000b9a2:	79 32 ff ff 	ld.b %d2,[%a3]-1
8000b9a6:	5f 23 f5 7f 	jeq %d3,%d2,8000b990 <_svfprintf_r+0x20c0>
8000b9aa:	b5 a4 08 00 	st.a [%sp]8,%a4
8000b9ae:	1b 12 00 30 	addi %d3,%d2,1
8000b9b2:	3b 90 03 40 	mov %d4,57
8000b9b6:	37 03 48 30 	extr %d3,%d3,0,8
8000b9ba:	5f 42 06 80 	jne %d2,%d4,8000b9c6 <_svfprintf_r+0x20f6>
8000b9be:	99 a2 14 00 	ld.a %a2,[%sp]20
8000b9c2:	79 23 0a 00 	ld.b %d3,[%a2]10
8000b9c6:	e9 33 ff ff 	st.b [%a3]-1,%d3
8000b9ca:	1d ff 27 f9 	j 8000ac18 <_svfprintf_r+0x1348>
8000b9ce:	82 12       	mov %d2,1
8000b9d0:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b9d4:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000b9d8:	c5 02 2d 00 	lea %a2,2d <__TRICORE_DERIVATE_MEMORY_MAP__-0x243>
8000b9dc:	9b 02 00 a8 	addih %d10,%d2,32768
8000b9e0:	b5 a2 20 00 	st.a [%sp]32,%a2
8000b9e4:	1d ff fb fd 	j 8000b5da <_svfprintf_r+0x1d0a>
8000b9e8:	c5 02 27 10 	lea %a2,67 <__TRICORE_DERIVATE_MEMORY_MAP__-0x209>
8000b9ec:	b5 a2 24 00 	st.a [%sp]36,%a2
8000b9f0:	99 a2 14 10 	ld.a %a2,[%sp]84
8000b9f4:	82 04       	mov %d4,0
8000b9f6:	3b f0 07 30 	mov %d3,127
8000b9fa:	79 22 00 00 	ld.b %d2,[%a2]0
8000b9fe:	59 a4 34 00 	st.w [%sp]52,%d4
8000ba02:	59 a4 2c 00 	st.w [%sp]44,%d4
8000ba06:	5f 32 19 00 	jeq %d2,%d3,8000ba38 <_svfprintf_r+0x2168>
8000ba0a:	19 a4 28 00 	ld.w %d4,[%sp]40
8000ba0e:	58 02       	ld.w %d15,[%sp]8
8000ba10:	7f 42 0f 00 	jge %d2,%d4,8000ba2e <_svfprintf_r+0x215e>
8000ba14:	a2 24       	sub %d4,%d2
8000ba16:	79 22 01 00 	ld.b %d2,[%a2]1
8000ba1a:	df 02 25 00 	jeq %d2,0,8000ba64 <_svfprintf_r+0x2194>
8000ba1e:	19 a5 2c 00 	ld.w %d5,[%sp]44
8000ba22:	b0 12       	add.a %a2,1
8000ba24:	c2 15       	add %d5,1
8000ba26:	59 a5 2c 00 	st.w [%sp]44,%d5
8000ba2a:	5f 32 f3 ff 	jne %d2,%d3,8000ba10 <_svfprintf_r+0x2140>
8000ba2e:	b5 a2 14 10 	st.a [%sp]84,%a2
8000ba32:	59 a4 28 00 	st.w [%sp]40,%d4
8000ba36:	78 02       	st.w [%sp]8,%d15
8000ba38:	19 a3 34 00 	ld.w %d3,[%sp]52
8000ba3c:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000ba40:	19 a4 14 00 	ld.w %d4,[%sp]20
8000ba44:	42 32       	add %d2,%d3
8000ba46:	19 a3 18 10 	ld.w %d3,[%sp]88
8000ba4a:	59 ab 04 00 	st.w [%sp]4,%d11
8000ba4e:	03 32 0a 24 	madd %d2,%d4,%d2,%d3
8000ba52:	59 a2 14 00 	st.w [%sp]20,%d2
8000ba56:	8b 02 40 d3 	max %d13,%d2,0
8000ba5a:	82 02       	mov %d2,0
8000ba5c:	59 a2 1c 00 	st.w [%sp]28,%d2
8000ba60:	1d ff 34 fd 	j 8000b4c8 <_svfprintf_r+0x1bf8>
8000ba64:	19 a2 34 00 	ld.w %d2,[%sp]52
8000ba68:	c2 12       	add %d2,1
8000ba6a:	59 a2 34 00 	st.w [%sp]52,%d2
8000ba6e:	79 22 00 00 	ld.b %d2,[%a2]0
8000ba72:	1d ff dc ff 	j 8000ba2a <_svfprintf_r+0x215a>
8000ba76:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000ba7a:	79 a3 23 10 	ld.b %d3,[%sp]99
8000ba7e:	ff 02 07 00 	jge %d2,0,8000ba8c <_svfprintf_r+0x21bc>
8000ba82:	da 2d       	mov %d15,45
8000ba84:	3b d0 02 30 	mov %d3,45
8000ba88:	e9 af 23 10 	st.b [%sp]99,%d15
8000ba8c:	91 00 00 38 	movh.a %a3,32768
8000ba90:	80 34       	mov.d %d4,%a3
8000ba92:	19 a2 24 00 	ld.w %d2,[%sp]36
8000ba96:	91 00 00 28 	movh.a %a2,32768
8000ba9a:	1b c4 84 50 	addi %d5,%d4,2124
8000ba9e:	80 24       	mov.d %d4,%a2
8000baa0:	8b 82 44 22 	lt %d2,%d2,72
8000baa4:	1b 84 84 40 	addi %d4,%d4,2120
8000baa8:	1d ff 7b f1 	j 80009d9e <_svfprintf_r+0x4ce>
8000baac:	60 e2       	mov.a %a2,%d14
8000baae:	c9 23 0c 00 	ld.h %d3,[%a2]12
8000bab2:	1d ff b9 f5 	j 8000a624 <_svfprintf_r+0xd54>
8000bab6:	91 00 00 c8 	movh.a %a12,32768
8000baba:	02 9b       	mov %d11,%d9
8000babc:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000bac0:	1d ff e8 fb 	j 8000b290 <_svfprintf_r+0x19c0>
8000bac4:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000bac8:	8b 12 00 21 	rsub %d2,%d2,1
8000bacc:	59 a2 28 10 	st.w [%sp]104,%d2
8000bad0:	1d ff ab fd 	j 8000b626 <_svfprintf_r+0x1d56>
8000bad4:	91 00 00 c8 	movh.a %a12,32768
8000bad8:	02 89       	mov %d9,%d8
8000bada:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000bade:	1d ff a1 fb 	j 8000b220 <_svfprintf_r+0x1950>
8000bae2:	82 1d       	mov %d13,1
8000bae4:	c5 02 26 10 	lea %a2,66 <__TRICORE_DERIVATE_MEMORY_MAP__-0x20a>
8000bae8:	b5 a2 24 00 	st.a [%sp]36,%a2
8000baec:	59 ad 14 00 	st.w [%sp]20,%d13
8000baf0:	df 04 d7 7d 	jeq %d4,0,8000b69e <_svfprintf_r+0x1dce>
8000baf4:	19 a2 00 10 	ld.w %d2,[%sp]64
8000baf8:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000bafc:	42 d2       	add %d2,%d13
8000bafe:	42 23       	add %d3,%d2
8000bb00:	8b 03 40 d3 	max %d13,%d3,0
8000bb04:	59 a3 14 00 	st.w [%sp]20,%d3
8000bb08:	1d ff cb fd 	j 8000b69e <_svfprintf_r+0x1dce>
8000bb0c:	99 a3 20 00 	ld.a %a3,[%sp]32
8000bb10:	79 d3 01 00 	ld.b %d3,[%a13]1
8000bb14:	60 fe       	mov.a %a14,%d15
8000bb16:	40 34       	mov.aa %a4,%a3
8000bb18:	54 42       	ld.w %d2,[%a4]
8000bb1a:	b0 43       	add.a %a3,4
8000bb1c:	8b f2 5f 23 	max %d2,%d2,-1
8000bb20:	b5 a3 20 00 	st.a [%sp]32,%a3
8000bb24:	40 2d       	mov.aa %a13,%a2
8000bb26:	59 a2 0c 00 	st.w [%sp]12,%d2
8000bb2a:	1d ff 5d ef 	j 800099e4 <_svfprintf_r+0x114>
8000bb2e:	91 00 00 c8 	movh.a %a12,32768
8000bb32:	02 89       	mov %d9,%d8
8000bb34:	d9 cc bc 10 	lea %a12,[%a12]2172 <8000087c <zeroes.0>>
8000bb38:	1d ff d7 fc 	j 8000b4e6 <_svfprintf_r+0x1c16>
8000bb3c:	60 e2       	mov.a %a2,%d14
8000bb3e:	c9 23 0c 00 	ld.h %d3,[%a2]12
8000bb42:	8f 03 44 21 	or %d2,%d3,64
8000bb46:	02 23       	mov %d3,%d2
8000bb48:	f9 22 0c 00 	st.h [%a2]12,%d2
8000bb4c:	1d ff 6c f5 	j 8000a624 <_svfprintf_r+0xd54>
8000bb50:	99 a2 30 00 	ld.a %a2,[%sp]48
8000bb54:	30 e2       	add.a %a2,%a14
8000bb56:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000bb5a:	1d ff a8 f9 	j 8000aeaa <_svfprintf_r+0x15da>
8000bb5e:	82 02       	mov %d2,0
8000bb60:	59 a2 1c 00 	st.w [%sp]28,%d2
8000bb64:	1d ff 29 fc 	j 8000b3b6 <_svfprintf_r+0x1ae6>
8000bb68:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000bb6c:	1d ff cd fb 	j 8000b306 <_svfprintf_r+0x1a36>
8000bb70:	3b c0 00 20 	mov %d2,12
8000bb74:	68 02       	st.w [%a15]0,%d2
8000bb76:	82 f2       	mov %d2,-1
8000bb78:	59 a2 10 00 	st.w [%sp]16,%d2
8000bb7c:	1d ff 5c f5 	j 8000a634 <_svfprintf_r+0xd64>

8000bb80 <_fclose_r>:
8000bb80:	40 4d       	mov.aa %a13,%a4
8000bb82:	40 5c       	mov.aa %a12,%a5
8000bb84:	bd 05 0c 00 	jz.a %a5,8000bb9c <_fclose_r+0x1c>
8000bb88:	bd 04 06 00 	jz.a %a4,8000bb94 <_fclose_r+0x14>
8000bb8c:	19 42 34 00 	ld.w %d2,[%a4]52
8000bb90:	df 02 40 00 	jeq %d2,0,8000bc10 <_fclose_r+0x90>
8000bb94:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000bb98:	df 02 05 80 	jne %d2,0,8000bba2 <_fclose_r+0x22>
8000bb9c:	82 08       	mov %d8,0
8000bb9e:	02 82       	mov %d2,%d8
8000bba0:	00 90       	ret 
8000bba2:	40 c5       	mov.aa %a5,%a12
8000bba4:	40 d4       	mov.aa %a4,%a13
8000bba6:	6d ff 70 e7 	call 80008a86 <__sflush_r>
8000bbaa:	99 c2 2c 00 	ld.a %a2,[%a12]44
8000bbae:	02 28       	mov %d8,%d2
8000bbb0:	bd 02 0b 00 	jz.a %a2,8000bbc6 <_fclose_r+0x46>
8000bbb4:	99 c5 1c 00 	ld.a %a5,[%a12]28
8000bbb8:	40 d4       	mov.aa %a4,%a13
8000bbba:	2d 02 00 00 	calli %a2
8000bbbe:	8b 02 80 22 	ge %d2,%d2,0
8000bbc2:	ab f8 9f 82 	sel %d8,%d2,%d8,-1
8000bbc6:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000bbca:	6f 72 27 80 	jnz.t %d2,7,8000bc18 <_fclose_r+0x98>
8000bbce:	99 c5 30 00 	ld.a %a5,[%a12]48
8000bbd2:	bd 05 0c 00 	jz.a %a5,8000bbea <_fclose_r+0x6a>
8000bbd6:	d9 c2 00 10 	lea %a2,[%a12]64
8000bbda:	7d 25 05 00 	jeq.a %a5,%a2,8000bbe4 <_fclose_r+0x64>
8000bbde:	40 d4       	mov.aa %a4,%a13
8000bbe0:	6d ff 30 ed 	call 80009640 <_free_r>
8000bbe4:	82 02       	mov %d2,0
8000bbe6:	59 c2 30 00 	st.w [%a12]48,%d2
8000bbea:	99 c5 04 10 	ld.a %a5,[%a12]68
8000bbee:	bd 05 08 00 	jz.a %a5,8000bbfe <_fclose_r+0x7e>
8000bbf2:	40 d4       	mov.aa %a4,%a13
8000bbf4:	6d ff 26 ed 	call 80009640 <_free_r>
8000bbf8:	82 02       	mov %d2,0
8000bbfa:	59 c2 04 10 	st.w [%a12]68,%d2
8000bbfe:	6d ff f4 e8 	call 80008de6 <__sfp_lock_acquire>
8000bc02:	82 02       	mov %d2,0
8000bc04:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000bc08:	6d ff f0 e8 	call 80008de8 <__sfp_lock_release>
8000bc0c:	02 82       	mov %d2,%d8
8000bc0e:	00 90       	ret 
8000bc10:	6d ff d7 e8 	call 80008dbe <__sinit>
8000bc14:	1d ff c0 ff 	j 8000bb94 <_fclose_r+0x14>
8000bc18:	99 c5 10 00 	ld.a %a5,[%a12]16
8000bc1c:	40 d4       	mov.aa %a4,%a13
8000bc1e:	6d ff 11 ed 	call 80009640 <_free_r>
8000bc22:	1d ff d6 ff 	j 8000bbce <_fclose_r+0x4e>

8000bc26 <__sfvwrite_r>:
8000bc26:	19 62 08 00 	ld.w %d2,[%a6]8
8000bc2a:	40 4f       	mov.aa %a15,%a4
8000bc2c:	40 5c       	mov.aa %a12,%a5
8000bc2e:	40 6d       	mov.aa %a13,%a6
8000bc30:	df 02 2b 00 	jeq %d2,0,8000bc86 <__sfvwrite_r+0x60>
8000bc34:	c9 55 0c 00 	ld.h %d5,[%a5]12
8000bc38:	6f 35 29 00 	jz.t %d5,3,8000bc8a <__sfvwrite_r+0x64>
8000bc3c:	19 52 10 00 	ld.w %d2,[%a5]16
8000bc40:	df 02 25 00 	jeq %d2,0,8000bc8a <__sfvwrite_r+0x64>
8000bc44:	d4 de       	ld.a %a14,[%a13]
8000bc46:	6f 15 2f 00 	jz.t %d5,1,8000bca4 <__sfvwrite_r+0x7e>
8000bc4a:	d2 08       	mov %e8,0
8000bc4c:	99 c2 24 00 	ld.a %a2,[%a12]36
8000bc50:	99 c5 1c 00 	ld.a %a5,[%a12]28
8000bc54:	df 08 a9 00 	jeq %d8,0,8000bda6 <__sfvwrite_r+0x180>
8000bc58:	7b 00 00 28 	movh %d2,32768
8000bc5c:	1b 02 c0 2f 	addi %d2,%d2,-1024
8000bc60:	60 96       	mov.a %a6,%d9
8000bc62:	0b 28 90 41 	min.u %d4,%d8,%d2
8000bc66:	40 f4       	mov.aa %a4,%a15
8000bc68:	2d 02 00 00 	calli %a2
8000bc6c:	bf 12 aa 00 	jlt %d2,1,8000bdc0 <__sfvwrite_r+0x19a>
8000bc70:	19 d3 08 00 	ld.w %d3,[%a13]8
8000bc74:	42 29       	add %d9,%d2
8000bc76:	a2 28       	sub %d8,%d2
8000bc78:	0b 23 80 20 	sub %d2,%d3,%d2
8000bc7c:	d9 d2 08 00 	lea %a2,[%a13]8
8000bc80:	74 22       	st.w [%a2],%d2
8000bc82:	df 02 e5 ff 	jne %d2,0,8000bc4c <__sfvwrite_r+0x26>
8000bc86:	82 02       	mov %d2,0
8000bc88:	00 90       	ret 
8000bc8a:	40 c5       	mov.aa %a5,%a12
8000bc8c:	40 f4       	mov.aa %a4,%a15
8000bc8e:	6d 00 66 01 	call 8000bf5a <__swsetup_r>
8000bc92:	02 23       	mov %d3,%d2
8000bc94:	82 f2       	mov %d2,-1
8000bc96:	df 03 9c 80 	jne %d3,0,8000bdce <__sfvwrite_r+0x1a8>
8000bc9a:	c9 c5 0c 00 	ld.h %d5,[%a12]12
8000bc9e:	d4 de       	ld.a %a14,[%a13]
8000bca0:	6f 15 d5 ff 	jnz.t %d5,1,8000bc4a <__sfvwrite_r+0x24>
8000bca4:	82 0c       	mov %d12,0
8000bca6:	82 02       	mov %d2,0
8000bca8:	82 0a       	mov %d10,0
8000bcaa:	82 09       	mov %d9,0
8000bcac:	6f 05 d8 80 	jnz.t %d5,0,8000be5c <__sfvwrite_r+0x236>
8000bcb0:	54 c3       	ld.w %d3,[%a12]
8000bcb2:	19 c2 08 00 	ld.w %d2,[%a12]8
8000bcb6:	82 0a       	mov %d10,0
8000bcb8:	82 08       	mov %d8,0
8000bcba:	3b 00 20 c0 	mov %d12,512
8000bcbe:	3b 00 48 e0 	mov %d14,1152
8000bcc2:	3b 00 40 f0 	mov %d15,1024
8000bcc6:	02 36       	mov %d6,%d3
8000bcc8:	02 29       	mov %d9,%d2
8000bcca:	df 08 67 00 	jeq %d8,0,8000bd98 <__sfvwrite_r+0x172>
8000bcce:	0f c5 80 40 	and %d4,%d5,%d12
8000bcd2:	df 04 ec 00 	jeq %d4,0,8000beaa <__sfvwrite_r+0x284>
8000bcd6:	02 2b       	mov %d11,%d2
8000bcd8:	3f 28 21 81 	jlt.u %d8,%d2,8000bf1a <__sfvwrite_r+0x2f4>
8000bcdc:	0f e5 80 20 	and %d2,%d5,%d14
8000bce0:	df 02 39 00 	jeq %d2,0,8000bd52 <__sfvwrite_r+0x12c>
8000bce4:	19 c2 14 00 	ld.w %d2,[%a12]20
8000bce8:	19 c6 10 00 	ld.w %d6,[%a12]16
8000bcec:	53 32 20 20 	mul %d2,%d2,3
8000bcf0:	0b 63 80 b0 	sub %d11,%d3,%d6
8000bcf4:	26 f5       	and %d5,%d15
8000bcf6:	8f 12 1e 30 	sh %d3,%d2,-31
8000bcfa:	42 32       	add %d2,%d3
8000bcfc:	1b 1b 00 30 	addi %d3,%d11,1
8000bd00:	86 f2       	sha %d2,-1
8000bd02:	42 83       	add %d3,%d8
8000bd04:	0b 32 b0 d1 	max.u %d13,%d2,%d3
8000bd08:	02 d4       	mov %d4,%d13
8000bd0a:	df 05 0c 01 	jeq %d5,0,8000bf22 <__sfvwrite_r+0x2fc>
8000bd0e:	40 f4       	mov.aa %a4,%a15
8000bd10:	6d ff 79 e3 	call 80008402 <_malloc_r>
8000bd14:	80 29       	mov.d %d9,%a2
8000bd16:	df 09 1b 01 	jeq %d9,0,8000bf4c <__sfvwrite_r+0x326>
8000bd1a:	99 c5 10 00 	ld.a %a5,[%a12]16
8000bd1e:	02 b4       	mov %d4,%d11
8000bd20:	40 24       	mov.aa %a4,%a2
8000bd22:	6d 00 27 02 	call 8000c170 <memcpy>
8000bd26:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000bd2a:	3b f0 b7 3f 	mov %d3,-1153
8000bd2e:	26 32       	and %d2,%d3
8000bd30:	8f 02 48 21 	or %d2,%d2,128
8000bd34:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000bd38:	0b b9 00 60 	add %d6,%d9,%d11
8000bd3c:	0b bd 80 b0 	sub %d11,%d13,%d11
8000bd40:	59 c9 10 00 	st.w [%a12]16,%d9
8000bd44:	74 c6       	st.w [%a12],%d6
8000bd46:	59 cb 08 00 	st.w [%a12]8,%d11
8000bd4a:	59 cd 14 00 	st.w [%a12]20,%d13
8000bd4e:	02 89       	mov %d9,%d8
8000bd50:	02 8b       	mov %d11,%d8
8000bd52:	60 a5       	mov.a %a5,%d10
8000bd54:	60 64       	mov.a %a4,%d6
8000bd56:	02 b4       	mov %d4,%d11
8000bd58:	6d 00 6f 02 	call 8000c236 <memmove>
8000bd5c:	19 c2 08 00 	ld.w %d2,[%a12]8
8000bd60:	54 c3       	ld.w %d3,[%a12]
8000bd62:	a2 92       	sub %d2,%d9
8000bd64:	42 b3       	add %d3,%d11
8000bd66:	d9 c2 08 00 	lea %a2,[%a12]8
8000bd6a:	74 22       	st.w [%a2],%d2
8000bd6c:	02 89       	mov %d9,%d8
8000bd6e:	74 c3       	st.w [%a12],%d3
8000bd70:	82 08       	mov %d8,0
8000bd72:	19 d2 08 00 	ld.w %d2,[%a13]8
8000bd76:	42 9a       	add %d10,%d9
8000bd78:	0b 92 80 90 	sub %d9,%d2,%d9
8000bd7c:	d9 d2 08 00 	lea %a2,[%a13]8
8000bd80:	74 29       	st.w [%a2],%d9
8000bd82:	df 09 82 7f 	jeq %d9,0,8000bc86 <__sfvwrite_r+0x60>
8000bd86:	54 c3       	ld.w %d3,[%a12]
8000bd88:	19 c2 08 00 	ld.w %d2,[%a12]8
8000bd8c:	c9 c5 0c 00 	ld.h %d5,[%a12]12
8000bd90:	02 36       	mov %d6,%d3
8000bd92:	02 29       	mov %d9,%d2
8000bd94:	df 08 9d ff 	jne %d8,0,8000bcce <__sfvwrite_r+0xa8>
8000bd98:	54 ea       	ld.w %d10,[%a14]
8000bd9a:	19 e8 04 00 	ld.w %d8,[%a14]4
8000bd9e:	d9 ee 08 00 	lea %a14,[%a14]8
8000bda2:	1d ff 92 ff 	j 8000bcc6 <__sfvwrite_r+0xa0>
8000bda6:	54 e9       	ld.w %d9,[%a14]
8000bda8:	19 e8 04 00 	ld.w %d8,[%a14]4
8000bdac:	d9 ee 08 00 	lea %a14,[%a14]8
8000bdb0:	1d ff 52 ff 	j 8000bc54 <__sfvwrite_r+0x2e>
8000bdb4:	40 c5       	mov.aa %a5,%a12
8000bdb6:	40 f4       	mov.aa %a4,%a15
8000bdb8:	6d ff 2d e7 	call 80008c12 <_fflush_r>
8000bdbc:	df 02 45 00 	jeq %d2,0,8000be46 <__sfvwrite_r+0x220>
8000bdc0:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000bdc4:	8f 02 44 21 	or %d2,%d2,64
8000bdc8:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000bdcc:	82 f2       	mov %d2,-1
8000bdce:	00 90       	ret 
8000bdd0:	19 e9 04 00 	ld.w %d9,[%a14]4
8000bdd4:	40 e2       	mov.aa %a2,%a14
8000bdd6:	d9 ee 08 00 	lea %a14,[%a14]8
8000bdda:	df 09 fb 7f 	jeq %d9,0,8000bdd0 <__sfvwrite_r+0x1aa>
8000bdde:	54 2a       	ld.w %d10,[%a2]
8000bde0:	60 a4       	mov.a %a4,%d10
8000bde2:	02 95       	mov %d5,%d9
8000bde4:	3b a0 00 40 	mov %d4,10
8000bde8:	6d 00 30 01 	call 8000c048 <memchr>
8000bdec:	1b 19 00 b0 	addi %d11,%d9,1
8000bdf0:	80 23       	mov.d %d3,%a2
8000bdf2:	02 bc       	mov %d12,%d11
8000bdf4:	df 03 07 00 	jeq %d3,0,8000be02 <__sfvwrite_r+0x1dc>
8000bdf8:	1b 13 00 20 	addi %d2,%d3,1
8000bdfc:	0b a2 80 c0 	sub %d12,%d2,%d10
8000be00:	02 cb       	mov %d11,%d12
8000be02:	19 c2 08 00 	ld.w %d2,[%a12]8
8000be06:	19 c4 14 00 	ld.w %d4,[%a12]20
8000be0a:	19 c5 10 00 	ld.w %d5,[%a12]16
8000be0e:	0b 24 00 80 	add %d8,%d4,%d2
8000be12:	0b 9b 90 b1 	min.u %d11,%d11,%d9
8000be16:	54 c2       	ld.w %d2,[%a12]
8000be18:	0b b8 20 31 	lt %d3,%d8,%d11
8000be1c:	0b 25 30 32 	and.lt.u %d3,%d5,%d2
8000be20:	df 03 35 80 	jne %d3,0,8000be8a <__sfvwrite_r+0x264>
8000be24:	3f 4b 22 00 	jlt %d11,%d4,8000be68 <__sfvwrite_r+0x242>
8000be28:	99 c2 24 00 	ld.a %a2,[%a12]36
8000be2c:	99 c5 1c 00 	ld.a %a5,[%a12]28
8000be30:	60 a6       	mov.a %a6,%d10
8000be32:	40 f4       	mov.aa %a4,%a15
8000be34:	2d 02 00 00 	calli %a2
8000be38:	02 28       	mov %d8,%d2
8000be3a:	bf 12 c3 7f 	jlt %d2,1,8000bdc0 <__sfvwrite_r+0x19a>
8000be3e:	a2 8c       	sub %d12,%d8
8000be40:	82 12       	mov %d2,1
8000be42:	df 0c b9 7f 	jeq %d12,0,8000bdb4 <__sfvwrite_r+0x18e>
8000be46:	19 d3 08 00 	ld.w %d3,[%a13]8
8000be4a:	42 8a       	add %d10,%d8
8000be4c:	a2 89       	sub %d9,%d8
8000be4e:	0b 83 80 80 	sub %d8,%d3,%d8
8000be52:	d9 d2 08 00 	lea %a2,[%a13]8
8000be56:	74 28       	st.w [%a2],%d8
8000be58:	df 08 17 7f 	jeq %d8,0,8000bc86 <__sfvwrite_r+0x60>
8000be5c:	df 09 ba 7f 	jeq %d9,0,8000bdd0 <__sfvwrite_r+0x1aa>
8000be60:	df 02 d0 ff 	jne %d2,0,8000be00 <__sfvwrite_r+0x1da>
8000be64:	1d ff be ff 	j 8000bde0 <__sfvwrite_r+0x1ba>
8000be68:	60 24       	mov.a %a4,%d2
8000be6a:	60 a5       	mov.a %a5,%d10
8000be6c:	02 b4       	mov %d4,%d11
8000be6e:	6d 00 e4 01 	call 8000c236 <memmove>
8000be72:	19 c2 08 00 	ld.w %d2,[%a12]8
8000be76:	d9 c2 08 00 	lea %a2,[%a12]8
8000be7a:	a2 b2       	sub %d2,%d11
8000be7c:	02 b8       	mov %d8,%d11
8000be7e:	74 22       	st.w [%a2],%d2
8000be80:	54 c2       	ld.w %d2,[%a12]
8000be82:	42 b2       	add %d2,%d11
8000be84:	74 c2       	st.w [%a12],%d2
8000be86:	1d ff dc ff 	j 8000be3e <__sfvwrite_r+0x218>
8000be8a:	60 24       	mov.a %a4,%d2
8000be8c:	60 a5       	mov.a %a5,%d10
8000be8e:	02 84       	mov %d4,%d8
8000be90:	6d 00 d3 01 	call 8000c236 <memmove>
8000be94:	54 c2       	ld.w %d2,[%a12]
8000be96:	40 c5       	mov.aa %a5,%a12
8000be98:	42 82       	add %d2,%d8
8000be9a:	40 f4       	mov.aa %a4,%a15
8000be9c:	74 c2       	st.w [%a12],%d2
8000be9e:	6d ff ba e6 	call 80008c12 <_fflush_r>
8000bea2:	df 02 ce 7f 	jeq %d2,0,8000be3e <__sfvwrite_r+0x218>
8000bea6:	1d ff 8d ff 	j 8000bdc0 <__sfvwrite_r+0x19a>
8000beaa:	19 c4 10 00 	ld.w %d4,[%a12]16
8000beae:	3f 34 1b 80 	jlt.u %d4,%d3,8000bee4 <__sfvwrite_r+0x2be>
8000beb2:	19 c4 14 00 	ld.w %d4,[%a12]20
8000beb6:	3f 48 17 80 	jlt.u %d8,%d4,8000bee4 <__sfvwrite_r+0x2be>
8000beba:	82 f2       	mov %d2,-1
8000bebc:	06 f2       	sh %d2,-1
8000bebe:	0b 28 90 21 	min.u %d2,%d8,%d2
8000bec2:	4b 42 01 22 	div %e2,%d2,%d4
8000bec6:	99 c2 24 00 	ld.a %a2,[%a12]36
8000beca:	99 c5 1c 00 	ld.a %a5,[%a12]28
8000bece:	e2 24       	mul %d4,%d2
8000bed0:	60 a6       	mov.a %a6,%d10
8000bed2:	40 f4       	mov.aa %a4,%a15
8000bed4:	2d 02 00 00 	calli %a2
8000bed8:	bf 12 74 7f 	jlt %d2,1,8000bdc0 <__sfvwrite_r+0x19a>
8000bedc:	02 29       	mov %d9,%d2
8000bede:	a2 98       	sub %d8,%d9
8000bee0:	1d ff 49 ff 	j 8000bd72 <__sfvwrite_r+0x14c>
8000bee4:	0b 82 90 91 	min.u %d9,%d2,%d8
8000bee8:	60 34       	mov.a %a4,%d3
8000beea:	60 a5       	mov.a %a5,%d10
8000beec:	02 94       	mov %d4,%d9
8000beee:	6d 00 a4 01 	call 8000c236 <memmove>
8000bef2:	19 c2 08 00 	ld.w %d2,[%a12]8
8000bef6:	54 c3       	ld.w %d3,[%a12]
8000bef8:	a2 92       	sub %d2,%d9
8000befa:	42 93       	add %d3,%d9
8000befc:	d9 c2 08 00 	lea %a2,[%a12]8
8000bf00:	74 22       	st.w [%a2],%d2
8000bf02:	74 c3       	st.w [%a12],%d3
8000bf04:	df 02 ed ff 	jne %d2,0,8000bede <__sfvwrite_r+0x2b8>
8000bf08:	40 c5       	mov.aa %a5,%a12
8000bf0a:	40 f4       	mov.aa %a4,%a15
8000bf0c:	6d ff 83 e6 	call 80008c12 <_fflush_r>
8000bf10:	df 02 58 ff 	jne %d2,0,8000bdc0 <__sfvwrite_r+0x19a>
8000bf14:	a2 98       	sub %d8,%d9
8000bf16:	1d ff 2e ff 	j 8000bd72 <__sfvwrite_r+0x14c>
8000bf1a:	02 89       	mov %d9,%d8
8000bf1c:	02 8b       	mov %d11,%d8
8000bf1e:	1d ff 1a ff 	j 8000bd52 <__sfvwrite_r+0x12c>
8000bf22:	60 65       	mov.a %a5,%d6
8000bf24:	40 f4       	mov.aa %a4,%a15
8000bf26:	6d 00 86 10 	call 8000e032 <_realloc_r>
8000bf2a:	80 29       	mov.d %d9,%a2
8000bf2c:	df 09 06 ff 	jne %d9,0,8000bd38 <__sfvwrite_r+0x112>
8000bf30:	99 c5 10 00 	ld.a %a5,[%a12]16
8000bf34:	40 f4       	mov.aa %a4,%a15
8000bf36:	6d ff 85 eb 	call 80009640 <_free_r>
8000bf3a:	3b c0 00 30 	mov %d3,12
8000bf3e:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000bf42:	68 03       	st.w [%a15]0,%d3
8000bf44:	8f 02 c8 21 	andn %d2,%d2,128
8000bf48:	1d ff 3e ff 	j 8000bdc4 <__sfvwrite_r+0x19e>
8000bf4c:	3b c0 00 20 	mov %d2,12
8000bf50:	68 02       	st.w [%a15]0,%d2
8000bf52:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000bf56:	1d ff 37 ff 	j 8000bdc4 <__sfvwrite_r+0x19e>

8000bf5a <__swsetup_r>:
8000bf5a:	40 4d       	mov.aa %a13,%a4
8000bf5c:	91 00 00 46 	movh.a %a4,24576
8000bf60:	99 44 68 10 	ld.a %a4,[%a4]1128 <60000468 <_impure_ptr>>
8000bf64:	40 5c       	mov.aa %a12,%a5
8000bf66:	bd 04 06 00 	jz.a %a4,8000bf72 <__swsetup_r+0x18>
8000bf6a:	19 42 34 00 	ld.w %d2,[%a4]52
8000bf6e:	df 02 60 00 	jeq %d2,0,8000c02e <__swsetup_r+0xd4>
8000bf72:	c9 c3 0c 00 	ld.h %d3,[%a12]12
8000bf76:	6f 33 25 00 	jz.t %d3,3,8000bfc0 <__swsetup_r+0x66>
8000bf7a:	19 c4 10 00 	ld.w %d4,[%a12]16
8000bf7e:	df 04 2d 00 	jeq %d4,0,8000bfd8 <__swsetup_r+0x7e>
8000bf82:	82 02       	mov %d2,0
8000bf84:	6f 03 0c 80 	jnz.t %d3,0,8000bf9c <__swsetup_r+0x42>
8000bf88:	6f 13 04 80 	jnz.t %d3,1,8000bf90 <__swsetup_r+0x36>
8000bf8c:	19 c2 14 00 	ld.w %d2,[%a12]20
8000bf90:	59 c2 08 00 	st.w [%a12]8,%d2
8000bf94:	82 02       	mov %d2,0
8000bf96:	df 04 0d 00 	jeq %d4,0,8000bfb0 <__swsetup_r+0x56>
8000bf9a:	00 90       	ret 
8000bf9c:	59 c2 08 00 	st.w [%a12]8,%d2
8000bfa0:	19 c2 14 00 	ld.w %d2,[%a12]20
8000bfa4:	32 52       	rsub %d2
8000bfa6:	59 c2 18 00 	st.w [%a12]24,%d2
8000bfaa:	82 02       	mov %d2,0
8000bfac:	df 04 f7 ff 	jne %d4,0,8000bf9a <__swsetup_r+0x40>
8000bfb0:	6f 73 f5 7f 	jz.t %d3,7,8000bf9a <__swsetup_r+0x40>
8000bfb4:	8f 03 44 31 	or %d3,%d3,64
8000bfb8:	82 f2       	mov %d2,-1
8000bfba:	f9 c3 0c 00 	st.h [%a12]12,%d3
8000bfbe:	00 90       	ret 
8000bfc0:	6f 43 3b 00 	jz.t %d3,4,8000c036 <__swsetup_r+0xdc>
8000bfc4:	6f 23 1b 80 	jnz.t %d3,2,8000bffa <__swsetup_r+0xa0>
8000bfc8:	19 c4 10 00 	ld.w %d4,[%a12]16
8000bfcc:	8f 83 40 31 	or %d3,%d3,8
8000bfd0:	f9 c3 0c 00 	st.h [%a12]12,%d3
8000bfd4:	df 04 d7 ff 	jne %d4,0,8000bf82 <__swsetup_r+0x28>
8000bfd8:	3b 00 28 20 	mov %d2,640
8000bfdc:	26 32       	and %d2,%d3
8000bfde:	3b 00 20 50 	mov %d5,512
8000bfe2:	5f 52 d0 7f 	jeq %d2,%d5,8000bf82 <__swsetup_r+0x28>
8000bfe6:	40 c5       	mov.aa %a5,%a12
8000bfe8:	40 d4       	mov.aa %a4,%a13
8000bfea:	6d 00 dd 12 	call 8000e5a4 <__smakebuf_r>
8000bfee:	c9 c3 0c 00 	ld.h %d3,[%a12]12
8000bff2:	19 c4 10 00 	ld.w %d4,[%a12]16
8000bff6:	1d ff c6 ff 	j 8000bf82 <__swsetup_r+0x28>
8000bffa:	99 c5 30 00 	ld.a %a5,[%a12]48
8000bffe:	bd 05 0e 00 	jz.a %a5,8000c01a <__swsetup_r+0xc0>
8000c002:	d9 c2 00 10 	lea %a2,[%a12]64
8000c006:	7d 25 07 00 	jeq.a %a5,%a2,8000c014 <__swsetup_r+0xba>
8000c00a:	40 d4       	mov.aa %a4,%a13
8000c00c:	6d ff 1a eb 	call 80009640 <_free_r>
8000c010:	c9 c3 0c 00 	ld.h %d3,[%a12]12
8000c014:	82 02       	mov %d2,0
8000c016:	59 c2 30 00 	st.w [%a12]48,%d2
8000c01a:	82 02       	mov %d2,0
8000c01c:	19 c4 10 00 	ld.w %d4,[%a12]16
8000c020:	8f 43 c2 31 	andn %d3,%d3,36
8000c024:	59 c2 04 00 	st.w [%a12]4,%d2
8000c028:	74 c4       	st.w [%a12],%d4
8000c02a:	1d ff d1 ff 	j 8000bfcc <__swsetup_r+0x72>
8000c02e:	6d ff c8 e6 	call 80008dbe <__sinit>
8000c032:	1d ff a0 ff 	j 8000bf72 <__swsetup_r+0x18>
8000c036:	3b 90 00 20 	mov %d2,9
8000c03a:	8f 03 44 31 	or %d3,%d3,64
8000c03e:	74 d2       	st.w [%a13],%d2
8000c040:	f9 c3 0c 00 	st.h [%a12]12,%d3
8000c044:	82 f2       	mov %d2,-1
8000c046:	00 90       	ret 

8000c048 <memchr>:
8000c048:	80 42       	mov.d %d2,%a4
8000c04a:	8f 32 00 21 	and %d2,%d2,3
8000c04e:	8f f4 0f 61 	and %d6,%d4,255
8000c052:	40 43       	mov.aa %a3,%a4
8000c054:	df 02 19 00 	jeq %d2,0,8000c086 <memchr+0x3e>
8000c058:	1b f5 ff 2f 	addi %d2,%d5,-1
8000c05c:	a0 02       	mov.a %a2,0
8000c05e:	df 05 0d 80 	jne %d5,0,8000c078 <memchr+0x30>
8000c062:	1d 00 4f 00 	j 8000c100 <memchr+0xb8>
8000c066:	80 33       	mov.d %d3,%a3
8000c068:	8f 33 00 31 	and %d3,%d3,3
8000c06c:	40 34       	mov.aa %a4,%a3
8000c06e:	df 03 0d 00 	jeq %d3,0,8000c088 <memchr+0x40>
8000c072:	c2 f2       	add %d2,-1
8000c074:	df f2 07 00 	jeq %d2,-1,8000c082 <memchr+0x3a>
8000c078:	40 32       	mov.aa %a2,%a3
8000c07a:	04 33       	ld.bu %d3,[%a3+]
8000c07c:	5f 63 f5 ff 	jne %d3,%d6,8000c066 <memchr+0x1e>
8000c080:	00 90       	ret 
8000c082:	a0 02       	mov.a %a2,0
8000c084:	00 90       	ret 
8000c086:	02 52       	mov %d2,%d5
8000c088:	ff 42 11 80 	jge.u %d2,4,8000c0aa <memchr+0x62>
8000c08c:	a0 02       	mov.a %a2,0
8000c08e:	df 02 f9 7f 	jeq %d2,0,8000c080 <memchr+0x38>
8000c092:	40 43       	mov.aa %a3,%a4
8000c094:	01 42 00 46 	addsc.a %a4,%a4,%d2,0
8000c098:	1d 00 04 00 	j 8000c0a0 <memchr+0x58>
8000c09c:	7d 43 f3 7f 	jeq.a %a3,%a4,8000c082 <memchr+0x3a>
8000c0a0:	40 32       	mov.aa %a2,%a3
8000c0a2:	04 32       	ld.bu %d2,[%a3+]
8000c0a4:	5f 62 fc ff 	jne %d2,%d6,8000c09c <memchr+0x54>
8000c0a8:	00 90       	ret 
8000c0aa:	8f f4 0f 31 	and %d3,%d4,255
8000c0ae:	8f 83 00 40 	sh %d4,%d3,8
8000c0b2:	a6 43       	or %d3,%d4
8000c0b4:	8f 03 01 50 	sh %d5,%d3,16
8000c0b8:	a6 35       	or %d5,%d3
8000c0ba:	80 44       	mov.d %d4,%a4
8000c0bc:	1b c2 ff 3f 	addi %d3,%d2,-4
8000c0c0:	8f 33 c0 31 	andn %d3,%d3,3
8000c0c4:	c2 44       	add %d4,4
8000c0c6:	7b f0 ef 1f 	movh %d1,65279
8000c0ca:	7b 10 08 78 	movh %d7,32897
8000c0ce:	40 42       	mov.aa %a2,%a4
8000c0d0:	0b 43 00 00 	add %d0,%d3,%d4
8000c0d4:	1b f1 ef 1f 	addi %d1,%d1,-257
8000c0d8:	1b 07 08 78 	addi %d7,%d7,-32640
8000c0dc:	40 24       	mov.aa %a4,%a2
8000c0de:	54 43       	ld.w %d3,[%a4]
8000c0e0:	b0 42       	add.a %a2,4
8000c0e2:	c6 53       	xor %d3,%d5
8000c0e4:	0b 13 00 40 	add %d4,%d3,%d1
8000c0e8:	0f 34 e0 30 	andn %d3,%d4,%d3
8000c0ec:	26 73       	and %d3,%d7
8000c0ee:	df 03 cf ff 	jne %d3,0,8000c08c <memchr+0x44>
8000c0f2:	80 23       	mov.d %d3,%a2
8000c0f4:	c2 c2       	add %d2,-4
8000c0f6:	40 24       	mov.aa %a4,%a2
8000c0f8:	5f 03 f2 ff 	jne %d3,%d0,8000c0dc <memchr+0x94>
8000c0fc:	1d ff c8 ff 	j 8000c08c <memchr+0x44>
8000c100:	00 90       	ret 

8000c102 <memcmp>:
8000c102:	bf 44 1f 80 	jlt.u %d4,4,8000c140 <memcmp+0x3e>
8000c106:	80 42       	mov.d %d2,%a4
8000c108:	80 53       	mov.d %d3,%a5
8000c10a:	a6 32       	or %d2,%d3
8000c10c:	8f 32 00 21 	and %d2,%d2,3
8000c110:	df 02 2c 80 	jne %d2,0,8000c168 <memcmp+0x66>
8000c114:	1b c4 ff 2f 	addi %d2,%d4,-4
8000c118:	8f 32 c0 21 	andn %d2,%d2,3
8000c11c:	80 43       	mov.d %d3,%a4
8000c11e:	40 42       	mov.aa %a2,%a4
8000c120:	40 53       	mov.aa %a3,%a5
8000c122:	42 23       	add %d3,%d2
8000c124:	40 35       	mov.aa %a5,%a3
8000c126:	40 24       	mov.aa %a4,%a2
8000c128:	54 46       	ld.w %d6,[%a4]
8000c12a:	54 55       	ld.w %d5,[%a5]
8000c12c:	80 22       	mov.d %d2,%a2
8000c12e:	b0 43       	add.a %a3,4
8000c130:	b0 42       	add.a %a2,4
8000c132:	5f 56 07 80 	jne %d6,%d5,8000c140 <memcmp+0x3e>
8000c136:	40 24       	mov.aa %a4,%a2
8000c138:	40 35       	mov.aa %a5,%a3
8000c13a:	c2 c4       	add %d4,-4
8000c13c:	5f 32 f4 ff 	jne %d2,%d3,8000c124 <memcmp+0x22>
8000c140:	1b f4 ff 2f 	addi %d2,%d4,-1
8000c144:	df 04 10 00 	jeq %d4,0,8000c164 <memcmp+0x62>
8000c148:	c2 12       	add %d2,1
8000c14a:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
8000c14e:	1d 00 04 00 	j 8000c156 <memcmp+0x54>
8000c152:	7d 24 09 00 	jeq.a %a4,%a2,8000c164 <memcmp+0x62>
8000c156:	04 43       	ld.bu %d3,[%a4+]
8000c158:	04 52       	ld.bu %d2,[%a5+]
8000c15a:	5f 23 fc 7f 	jeq %d3,%d2,8000c152 <memcmp+0x50>
8000c15e:	0b 23 80 20 	sub %d2,%d3,%d2
8000c162:	00 90       	ret 
8000c164:	82 02       	mov %d2,0
8000c166:	00 90       	ret 
8000c168:	1b f4 ff 2f 	addi %d2,%d4,-1
8000c16c:	1d ff ee ff 	j 8000c148 <memcmp+0x46>

8000c170 <memcpy>:
8000c170:	8b 04 61 22 	lt.u %d2,%d4,16
8000c174:	80 43       	mov.d %d3,%a4
8000c176:	df 02 49 80 	jne %d2,0,8000c208 <memcpy+0x98>
8000c17a:	80 52       	mov.d %d2,%a5
8000c17c:	a6 32       	or %d2,%d3
8000c17e:	8f 32 00 21 	and %d2,%d2,3
8000c182:	df 02 51 80 	jne %d2,0,8000c224 <memcpy+0xb4>
8000c186:	1b 04 ff 2f 	addi %d2,%d4,-16
8000c18a:	8f f2 c0 21 	andn %d2,%d2,15
8000c18e:	1b 02 01 50 	addi %d5,%d2,16
8000c192:	01 45 00 26 	addsc.a %a2,%a4,%d5,0
8000c196:	40 56       	mov.aa %a6,%a5
8000c198:	40 43       	mov.aa %a3,%a4
8000c19a:	54 62       	ld.w %d2,[%a6]
8000c19c:	74 32       	st.w [%a3],%d2
8000c19e:	19 62 04 00 	ld.w %d2,[%a6]4
8000c1a2:	59 32 04 00 	st.w [%a3]4,%d2
8000c1a6:	19 62 08 00 	ld.w %d2,[%a6]8
8000c1aa:	59 32 08 00 	st.w [%a3]8,%d2
8000c1ae:	19 62 0c 00 	ld.w %d2,[%a6]12
8000c1b2:	d9 33 10 00 	lea %a3,[%a3]16
8000c1b6:	59 32 fc ff 	st.w [%a3]-4,%d2
8000c1ba:	d9 66 10 00 	lea %a6,[%a6]16
8000c1be:	40 34       	mov.aa %a4,%a3
8000c1c0:	7d 32 ed ff 	jne.a %a2,%a3,8000c19a <memcpy+0x2a>
8000c1c4:	8f c4 00 21 	and %d2,%d4,12
8000c1c8:	01 55 00 26 	addsc.a %a2,%a5,%d5,0
8000c1cc:	8f f4 00 51 	and %d5,%d4,15
8000c1d0:	df 02 2f 00 	jeq %d2,0,8000c22e <memcpy+0xbe>
8000c1d4:	1b c5 ff 2f 	addi %d2,%d5,-4
8000c1d8:	8f 32 c0 21 	andn %d2,%d2,3
8000c1dc:	1b 42 00 50 	addi %d5,%d2,4
8000c1e0:	01 25 00 56 	addsc.a %a5,%a2,%d5,0
8000c1e4:	40 26       	mov.aa %a6,%a2
8000c1e6:	54 62       	ld.w %d2,[%a6]
8000c1e8:	40 46       	mov.aa %a6,%a4
8000c1ea:	b0 42       	add.a %a2,4
8000c1ec:	74 62       	st.w [%a6],%d2
8000c1ee:	b0 44       	add.a %a4,4
8000c1f0:	7d 52 fa ff 	jne.a %a2,%a5,8000c1e4 <memcpy+0x74>
8000c1f4:	8f 34 00 41 	and %d4,%d4,3
8000c1f8:	01 35 00 36 	addsc.a %a3,%a3,%d5,0
8000c1fc:	1b f4 ff 2f 	addi %d2,%d4,-1
8000c200:	df 04 09 80 	jne %d4,0,8000c212 <memcpy+0xa2>
8000c204:	60 32       	mov.a %a2,%d3
8000c206:	00 90       	ret 
8000c208:	40 43       	mov.aa %a3,%a4
8000c20a:	1b f4 ff 2f 	addi %d2,%d4,-1
8000c20e:	df 04 fb 7f 	jeq %d4,0,8000c204 <memcpy+0x94>
8000c212:	c2 12       	add %d2,1
8000c214:	01 52 00 66 	addsc.a %a6,%a5,%d2,0
8000c218:	04 52       	ld.bu %d2,[%a5+]
8000c21a:	24 32       	st.b [%a3+],%d2
8000c21c:	7d 65 fe ff 	jne.a %a5,%a6,8000c218 <memcpy+0xa8>
8000c220:	60 32       	mov.a %a2,%d3
8000c222:	00 90       	ret 
8000c224:	1b f4 ff 2f 	addi %d2,%d4,-1
8000c228:	40 43       	mov.aa %a3,%a4
8000c22a:	1d ff f4 ff 	j 8000c212 <memcpy+0xa2>
8000c22e:	40 25       	mov.aa %a5,%a2
8000c230:	02 54       	mov %d4,%d5
8000c232:	1d ff ec ff 	j 8000c20a <memcpy+0x9a>

8000c236 <memmove>:
8000c236:	80 43       	mov.d %d3,%a4
8000c238:	80 52       	mov.d %d2,%a5
8000c23a:	7f 32 13 80 	jge.u %d2,%d3,8000c260 <memmove+0x2a>
8000c23e:	01 54 00 26 	addsc.a %a2,%a5,%d4,0
8000c242:	80 22       	mov.d %d2,%a2
8000c244:	7f 23 0e 80 	jge.u %d3,%d2,8000c260 <memmove+0x2a>
8000c248:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
8000c24c:	df 04 08 00 	jeq %d4,0,8000c25c <memmove+0x26>
8000c250:	09 22 3f f4 	ld.b %d2,[+%a2]-1
8000c254:	89 32 3f f4 	st.b [+%a3]-1,%d2
8000c258:	7d 25 fc ff 	jne.a %a5,%a2,8000c250 <memmove+0x1a>
8000c25c:	60 32       	mov.a %a2,%d3
8000c25e:	00 90       	ret 
8000c260:	8b 04 61 22 	lt.u %d2,%d4,16
8000c264:	df 02 11 00 	jeq %d2,0,8000c286 <memmove+0x50>
8000c268:	60 33       	mov.a %a3,%d3
8000c26a:	1b f4 ff 2f 	addi %d2,%d4,-1
8000c26e:	df 04 f7 7f 	jeq %d4,0,8000c25c <memmove+0x26>
8000c272:	c2 12       	add %d2,1
8000c274:	01 52 00 26 	addsc.a %a2,%a5,%d2,0
8000c278:	09 52 01 00 	ld.b %d2,[%a5+]1
8000c27c:	24 32       	st.b [%a3+],%d2
8000c27e:	7d 25 fd ff 	jne.a %a5,%a2,8000c278 <memmove+0x42>
8000c282:	60 32       	mov.a %a2,%d3
8000c284:	00 90       	ret 
8000c286:	80 52       	mov.d %d2,%a5
8000c288:	a6 32       	or %d2,%d3
8000c28a:	8f 32 00 21 	and %d2,%d2,3
8000c28e:	df 02 40 80 	jne %d2,0,8000c30e <memmove+0xd8>
8000c292:	1b 04 ff 2f 	addi %d2,%d4,-16
8000c296:	60 32       	mov.a %a2,%d3
8000c298:	8f f2 c0 21 	andn %d2,%d2,15
8000c29c:	1b 02 01 50 	addi %d5,%d2,16
8000c2a0:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000c2a4:	60 33       	mov.a %a3,%d3
8000c2a6:	40 56       	mov.aa %a6,%a5
8000c2a8:	54 62       	ld.w %d2,[%a6]
8000c2aa:	74 32       	st.w [%a3],%d2
8000c2ac:	19 62 04 00 	ld.w %d2,[%a6]4
8000c2b0:	59 32 04 00 	st.w [%a3]4,%d2
8000c2b4:	19 62 08 00 	ld.w %d2,[%a6]8
8000c2b8:	59 32 08 00 	st.w [%a3]8,%d2
8000c2bc:	19 62 0c 00 	ld.w %d2,[%a6]12
8000c2c0:	d9 33 10 00 	lea %a3,[%a3]16
8000c2c4:	59 32 fc ff 	st.w [%a3]-4,%d2
8000c2c8:	d9 66 10 00 	lea %a6,[%a6]16
8000c2cc:	40 34       	mov.aa %a4,%a3
8000c2ce:	7d 32 ed ff 	jne.a %a2,%a3,8000c2a8 <memmove+0x72>
8000c2d2:	8f c4 00 21 	and %d2,%d4,12
8000c2d6:	01 55 00 26 	addsc.a %a2,%a5,%d5,0
8000c2da:	8f f4 00 51 	and %d5,%d4,15
8000c2de:	df 02 1d 00 	jeq %d2,0,8000c318 <memmove+0xe2>
8000c2e2:	1b c5 ff 2f 	addi %d2,%d5,-4
8000c2e6:	8f 32 c0 21 	andn %d2,%d2,3
8000c2ea:	1b 42 00 50 	addi %d5,%d2,4
8000c2ee:	01 25 00 56 	addsc.a %a5,%a2,%d5,0
8000c2f2:	40 26       	mov.aa %a6,%a2
8000c2f4:	54 62       	ld.w %d2,[%a6]
8000c2f6:	40 46       	mov.aa %a6,%a4
8000c2f8:	b0 42       	add.a %a2,4
8000c2fa:	74 62       	st.w [%a6],%d2
8000c2fc:	b0 44       	add.a %a4,4
8000c2fe:	7d 52 fa ff 	jne.a %a2,%a5,8000c2f2 <memmove+0xbc>
8000c302:	01 35 00 36 	addsc.a %a3,%a3,%d5,0
8000c306:	8f 34 00 41 	and %d4,%d4,3
8000c30a:	1d ff b0 ff 	j 8000c26a <memmove+0x34>
8000c30e:	60 33       	mov.a %a3,%d3
8000c310:	1b f4 ff 2f 	addi %d2,%d4,-1
8000c314:	1d ff af ff 	j 8000c272 <memmove+0x3c>
8000c318:	40 25       	mov.aa %a5,%a2
8000c31a:	02 54       	mov %d4,%d5
8000c31c:	1d ff a7 ff 	j 8000c26a <memmove+0x34>

8000c320 <strchr>:
8000c320:	80 42       	mov.d %d2,%a4
8000c322:	8f f4 0f 31 	and %d3,%d4,255
8000c326:	02 46       	mov %d6,%d4
8000c328:	40 43       	mov.aa %a3,%a4
8000c32a:	8f 32 00 41 	and %d4,%d2,3
8000c32e:	df 03 55 00 	jeq %d3,0,8000c3d8 <strchr+0xb8>
8000c332:	df 04 4d 80 	jne %d4,0,8000c3cc <strchr+0xac>
8000c336:	8f f6 0f 41 	and %d4,%d6,255
8000c33a:	8f 84 00 50 	sh %d5,%d4,8
8000c33e:	60 22       	mov.a %a2,%d2
8000c340:	a6 54       	or %d4,%d5
8000c342:	54 26       	ld.w %d6,[%a2]
8000c344:	8f 04 01 70 	sh %d7,%d4,16
8000c348:	a6 47       	or %d7,%d4
8000c34a:	7b f0 ef 1f 	movh %d1,65279
8000c34e:	0f 67 c0 40 	xor %d4,%d7,%d6
8000c352:	1b f1 ef 1f 	addi %d1,%d1,-257
8000c356:	0b 14 00 50 	add %d5,%d4,%d1
8000c35a:	0f 45 e0 50 	andn %d5,%d5,%d4
8000c35e:	0b 16 00 40 	add %d4,%d6,%d1
8000c362:	0f 64 e0 40 	andn %d4,%d4,%d6
8000c366:	7b 10 08 08 	movh %d0,32897
8000c36a:	a6 54       	or %d4,%d5
8000c36c:	1b 00 08 08 	addi %d0,%d0,-32640
8000c370:	26 04       	and %d4,%d0
8000c372:	df 04 15 80 	jne %d4,0,8000c39c <strchr+0x7c>
8000c376:	b0 42       	add.a %a2,4
8000c378:	40 23       	mov.aa %a3,%a2
8000c37a:	54 35       	ld.w %d5,[%a3]
8000c37c:	80 22       	mov.d %d2,%a2
8000c37e:	0f 75 c0 60 	xor %d6,%d5,%d7
8000c382:	0b 15 00 40 	add %d4,%d5,%d1
8000c386:	0f 54 e0 50 	andn %d5,%d4,%d5
8000c38a:	0b 16 00 40 	add %d4,%d6,%d1
8000c38e:	0f 64 e0 40 	andn %d4,%d4,%d6
8000c392:	a6 54       	or %d4,%d5
8000c394:	26 04       	and %d4,%d0
8000c396:	b0 42       	add.a %a2,4
8000c398:	df 04 f0 7f 	jeq %d4,0,8000c378 <strchr+0x58>
8000c39c:	60 22       	mov.a %a2,%d2
8000c39e:	60 23       	mov.a %a3,%d2
8000c3a0:	14 24       	ld.bu %d4,[%a2]
8000c3a2:	b0 13       	add.a %a3,1
8000c3a4:	a0 02       	mov.a %a2,0
8000c3a6:	df 04 07 80 	jne %d4,0,8000c3b4 <strchr+0x94>
8000c3aa:	1d 00 16 00 	j 8000c3d6 <strchr+0xb6>
8000c3ae:	04 34       	ld.bu %d4,[%a3+]
8000c3b0:	df 04 12 00 	jeq %d4,0,8000c3d4 <strchr+0xb4>
8000c3b4:	d9 32 ff ff 	lea %a2,[%a3]-1
8000c3b8:	5f 43 fb ff 	jne %d3,%d4,8000c3ae <strchr+0x8e>
8000c3bc:	00 90       	ret 
8000c3be:	5f 32 0c 00 	jeq %d2,%d3,8000c3d6 <strchr+0xb6>
8000c3c2:	80 32       	mov.d %d2,%a3
8000c3c4:	8f 32 00 51 	and %d5,%d2,3
8000c3c8:	df 05 b7 7f 	jeq %d5,0,8000c336 <strchr+0x16>
8000c3cc:	40 32       	mov.aa %a2,%a3
8000c3ce:	04 32       	ld.bu %d2,[%a3+]
8000c3d0:	df 02 f7 ff 	jne %d2,0,8000c3be <strchr+0x9e>
8000c3d4:	a0 02       	mov.a %a2,0
8000c3d6:	00 90       	ret 
8000c3d8:	df 04 30 80 	jne %d4,0,8000c438 <strchr+0x118>
8000c3dc:	40 42       	mov.aa %a2,%a4
8000c3de:	54 23       	ld.w %d3,[%a2]
8000c3e0:	7b f0 ef 5f 	movh %d5,65279
8000c3e4:	1b f5 ef 5f 	addi %d5,%d5,-257
8000c3e8:	0b 53 00 20 	add %d2,%d3,%d5
8000c3ec:	7b 10 08 48 	movh %d4,32897
8000c3f0:	0f 32 e0 20 	andn %d2,%d2,%d3
8000c3f4:	1b 04 08 48 	addi %d4,%d4,-32640
8000c3f8:	26 42       	and %d2,%d4
8000c3fa:	df 02 0e 80 	jne %d2,0,8000c416 <strchr+0xf6>
8000c3fe:	d9 23 04 00 	lea %a3,[%a2]4
8000c402:	40 32       	mov.aa %a2,%a3
8000c404:	54 22       	ld.w %d2,[%a2]
8000c406:	b0 43       	add.a %a3,4
8000c408:	0b 52 00 30 	add %d3,%d2,%d5
8000c40c:	0f 23 e0 20 	andn %d2,%d3,%d2
8000c410:	26 42       	and %d2,%d4
8000c412:	df 02 f8 7f 	jeq %d2,0,8000c402 <strchr+0xe2>
8000c416:	14 22       	ld.bu %d2,[%a2]
8000c418:	df 02 df 7f 	jeq %d2,0,8000c3d6 <strchr+0xb6>
8000c41c:	d9 23 01 00 	lea %a3,[%a2]1
8000c420:	40 32       	mov.aa %a2,%a3
8000c422:	14 22       	ld.bu %d2,[%a2]
8000c424:	b0 13       	add.a %a3,1
8000c426:	df 02 fd ff 	jne %d2,0,8000c420 <strchr+0x100>
8000c42a:	00 90       	ret 
8000c42c:	80 32       	mov.d %d2,%a3
8000c42e:	8f 32 00 21 	and %d2,%d2,3
8000c432:	40 32       	mov.aa %a2,%a3
8000c434:	df 02 d5 7f 	jeq %d2,0,8000c3de <strchr+0xbe>
8000c438:	40 32       	mov.aa %a2,%a3
8000c43a:	14 22       	ld.bu %d2,[%a2]
8000c43c:	b0 13       	add.a %a3,1
8000c43e:	df 02 f7 ff 	jne %d2,0,8000c42c <strchr+0x10c>
8000c442:	00 90       	ret 

8000c444 <strnlen>:
8000c444:	80 43       	mov.d %d3,%a4
8000c446:	02 42       	mov %d2,%d4
8000c448:	40 42       	mov.aa %a2,%a4
8000c44a:	0b 43 00 50 	add %d5,%d3,%d4
8000c44e:	df 04 07 80 	jne %d4,0,8000c45c <strnlen+0x18>
8000c452:	1d 00 13 00 	j 8000c478 <strnlen+0x34>
8000c456:	80 22       	mov.d %d2,%a2
8000c458:	5f 52 0c 00 	jeq %d2,%d5,8000c470 <strnlen+0x2c>
8000c45c:	40 23       	mov.aa %a3,%a2
8000c45e:	79 33 00 00 	ld.b %d3,[%a3]0
8000c462:	b0 12       	add.a %a2,1
8000c464:	df 03 f9 ff 	jne %d3,0,8000c456 <strnlen+0x12>
8000c468:	01 43 20 20 	sub.a %a2,%a3,%a4
8000c46c:	80 22       	mov.d %d2,%a2
8000c46e:	00 90       	ret 
8000c470:	01 42 20 20 	sub.a %a2,%a2,%a4
8000c474:	80 22       	mov.d %d2,%a2
8000c476:	00 90       	ret 
8000c478:	00 90       	ret 

8000c47a <__locale_mb_cur_max>:
8000c47a:	91 00 00 26 	movh.a %a2,24576
8000c47e:	d9 22 48 60 	lea %a2,[%a2]1416 <60000588 <__global_locale>>
8000c482:	79 22 28 40 	ld.b %d2,[%a2]296 <60000128 <__malloc_av_+0xd8>>
8000c486:	00 90       	ret 

8000c488 <_localeconv_r>:
8000c488:	91 00 00 26 	movh.a %a2,24576
8000c48c:	d9 22 78 90 	lea %a2,[%a2]1656 <60000678 <__global_locale+0xf0>>
8000c490:	00 90       	ret 

8000c492 <frexp>:
8000c492:	82 00       	mov %d0,0
8000c494:	0b 45 10 28 	mov %e2,%d5,%d4
8000c498:	b7 03 81 6f 	insert %d6,%d3,0,31,1
8000c49c:	74 40       	st.w [%a4],%d0
8000c49e:	7b 00 ff 07 	movh %d0,32752
8000c4a2:	40 4c       	mov.aa %a12,%a4
8000c4a4:	02 37       	mov %d7,%d3
8000c4a6:	7f 06 1f 00 	jge %d6,%d0,8000c4e4 <frexp+0x52>
8000c4aa:	0f 26 a0 10 	or %d1,%d6,%d2
8000c4ae:	df 01 1b 00 	jeq %d1,0,8000c4e4 <frexp+0x52>
8000c4b2:	26 03       	and %d3,%d0
8000c4b4:	82 00       	mov %d0,0
8000c4b6:	df 03 0c 80 	jne %d3,0,8000c4ce <frexp+0x3c>
8000c4ba:	82 06       	mov %d6,0
8000c4bc:	7b 00 35 74 	movh %d7,17232
8000c4c0:	6d ff a0 da 	call 80007a00 <__muldf3>
8000c4c4:	b7 03 81 6f 	insert %d6,%d3,0,31,1
8000c4c8:	02 37       	mov %d7,%d3
8000c4ca:	3b a0 fc 0f 	mov %d0,-54
8000c4ce:	8f c6 3e 30 	sha %d3,%d6,-20
8000c4d2:	1b 23 c0 3f 	addi %d3,%d3,-1022
8000c4d6:	42 03       	add %d3,%d0
8000c4d8:	b7 07 0b 7a 	insert %d7,%d7,0,20,11
8000c4dc:	74 c3       	st.w [%a12],%d3
8000c4de:	7b 00 fe 33 	movh %d3,16352
8000c4e2:	a6 73       	or %d3,%d7
8000c4e4:	00 90       	ret 

8000c4e6 <quorem>:
8000c4e6:	19 57 10 00 	ld.w %d7,[%a5]16
8000c4ea:	19 43 10 00 	ld.w %d3,[%a4]16
8000c4ee:	40 4d       	mov.aa %a13,%a4
8000c4f0:	82 02       	mov %d2,0
8000c4f2:	3f 73 a7 00 	jlt %d3,%d7,8000c640 <quorem+0x15a>
8000c4f6:	1b f7 ff 8f 	addi %d8,%d7,-1
8000c4fa:	8f 28 00 20 	sh %d2,%d8,2
8000c4fe:	60 24       	mov.a %a4,%d2
8000c500:	80 d2       	mov.d %d2,%a13
8000c502:	1b 42 01 b0 	addi %d11,%d2,20
8000c506:	d9 5c 14 00 	lea %a12,[%a5]20
8000c50a:	01 4c 10 20 	add.a %a2,%a12,%a4
8000c50e:	01 4b 00 46 	addsc.a %a4,%a4,%d11,0
8000c512:	54 22       	ld.w %d2,[%a2]
8000c514:	54 43       	ld.w %d3,[%a4]
8000c516:	c2 12       	add %d2,1
8000c518:	4b 23 11 c2 	div.u %e12,%d3,%d2
8000c51c:	80 29       	mov.d %d9,%a2
8000c51e:	02 ca       	mov %d10,%d12
8000c520:	3f 23 49 80 	jlt.u %d3,%d2,8000c5b2 <quorem+0xcc>
8000c524:	60 b2       	mov.a %a2,%d11
8000c526:	40 c3       	mov.aa %a3,%a12
8000c528:	d2 04       	mov %e4,0
8000c52a:	40 36       	mov.aa %a6,%a3
8000c52c:	54 62       	ld.w %d2,[%a6]
8000c52e:	54 26       	ld.w %d6,[%a2]
8000c530:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000c534:	40 26       	mov.aa %a6,%a2
8000c536:	03 a3 0a 34 	madd %d3,%d4,%d3,%d10
8000c53a:	8f 02 1f 40 	sh %d4,%d2,-16
8000c53e:	b0 43       	add.a %a3,4
8000c540:	8f 03 1f 20 	sh %d2,%d3,-16
8000c544:	03 a4 0a 22 	madd %d2,%d2,%d4,%d10
8000c548:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000c54c:	b0 42       	add.a %a2,4
8000c54e:	a2 35       	sub %d5,%d3
8000c550:	b7 06 10 38 	insert %d3,%d6,0,16,16
8000c554:	8f 02 1f 40 	sh %d4,%d2,-16
8000c558:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000c55c:	42 53       	add %d3,%d5
8000c55e:	8f 06 1f 50 	sh %d5,%d6,-16
8000c562:	a2 25       	sub %d5,%d2
8000c564:	8f 03 3f 20 	sha %d2,%d3,-16
8000c568:	42 52       	add %d2,%d5
8000c56a:	8f 02 3f 50 	sha %d5,%d2,-16
8000c56e:	37 23 10 28 	insert %d2,%d3,%d2,16,16
8000c572:	74 62       	st.w [%a6],%d2
8000c574:	80 32       	mov.d %d2,%a3
8000c576:	7f 29 da ff 	jge.u %d9,%d2,8000c52a <quorem+0x44>
8000c57a:	54 42       	ld.w %d2,[%a4]
8000c57c:	df 02 1b 80 	jne %d2,0,8000c5b2 <quorem+0xcc>
8000c580:	80 42       	mov.d %d2,%a4
8000c582:	c2 c2       	add %d2,-4
8000c584:	7f 2b 15 80 	jge.u %d11,%d2,8000c5ae <quorem+0xc8>
8000c588:	80 d2       	mov.d %d2,%a13
8000c58a:	8b 72 1e 21 	rsub %d2,%d2,-25
8000c58e:	80 44       	mov.d %d4,%a4
8000c590:	42 42       	add %d2,%d4
8000c592:	1b e7 ff 3f 	addi %d3,%d7,-2
8000c596:	06 e2       	sh %d2,-2
8000c598:	a2 23       	sub %d3,%d2
8000c59a:	1d 00 05 00 	j 8000c5a4 <quorem+0xbe>
8000c59e:	c2 f8       	add %d8,-1
8000c5a0:	5f 38 07 00 	jeq %d8,%d3,8000c5ae <quorem+0xc8>
8000c5a4:	19 42 fc ff 	ld.w %d2,[%a4]-4
8000c5a8:	b0 c4       	add.a %a4,-4
8000c5aa:	df 02 fa 7f 	jeq %d2,0,8000c59e <quorem+0xb8>
8000c5ae:	59 d8 10 00 	st.w [%a13]16,%d8
8000c5b2:	40 d4       	mov.aa %a4,%a13
8000c5b4:	6d 00 d7 0b 	call 8000dd62 <__mcmp>
8000c5b8:	bf 02 43 00 	jlt %d2,0,8000c63e <quorem+0x158>
8000c5bc:	60 b2       	mov.a %a2,%d11
8000c5be:	1b 1c 00 a0 	addi %d10,%d12,1
8000c5c2:	82 04       	mov %d4,0
8000c5c4:	40 c3       	mov.aa %a3,%a12
8000c5c6:	54 33       	ld.w %d3,[%a3]
8000c5c8:	54 25       	ld.w %d5,[%a2]
8000c5ca:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000c5ce:	8f 03 1f 30 	sh %d3,%d3,-16
8000c5d2:	a2 24       	sub %d4,%d2
8000c5d4:	b7 05 10 28 	insert %d2,%d5,0,16,16
8000c5d8:	40 23       	mov.aa %a3,%a2
8000c5da:	42 42       	add %d2,%d4
8000c5dc:	8f 05 1f 40 	sh %d4,%d5,-16
8000c5e0:	a2 34       	sub %d4,%d3
8000c5e2:	8f 02 3f 30 	sha %d3,%d2,-16
8000c5e6:	42 43       	add %d3,%d4
8000c5e8:	37 32 10 28 	insert %d2,%d2,%d3,16,16
8000c5ec:	b0 4c       	add.a %a12,4
8000c5ee:	8f 03 3f 40 	sha %d4,%d3,-16
8000c5f2:	b0 42       	add.a %a2,4
8000c5f4:	74 32       	st.w [%a3],%d2
8000c5f6:	80 c2       	mov.d %d2,%a12
8000c5f8:	7f 29 e6 ff 	jge.u %d9,%d2,8000c5c4 <quorem+0xde>
8000c5fc:	8f 28 00 20 	sh %d2,%d8,2
8000c600:	60 22       	mov.a %a2,%d2
8000c602:	01 2b 00 26 	addsc.a %a2,%a2,%d11,0
8000c606:	54 22       	ld.w %d2,[%a2]
8000c608:	df 02 1b 80 	jne %d2,0,8000c63e <quorem+0x158>
8000c60c:	80 22       	mov.d %d2,%a2
8000c60e:	c2 c2       	add %d2,-4
8000c610:	7f 2b 15 80 	jge.u %d11,%d2,8000c63a <quorem+0x154>
8000c614:	80 d2       	mov.d %d2,%a13
8000c616:	8b 72 1e 21 	rsub %d2,%d2,-25
8000c61a:	80 24       	mov.d %d4,%a2
8000c61c:	42 42       	add %d2,%d4
8000c61e:	1b f8 ff 3f 	addi %d3,%d8,-1
8000c622:	06 e2       	sh %d2,-2
8000c624:	a2 23       	sub %d3,%d2
8000c626:	1d 00 05 00 	j 8000c630 <quorem+0x14a>
8000c62a:	c2 f8       	add %d8,-1
8000c62c:	5f 38 07 00 	jeq %d8,%d3,8000c63a <quorem+0x154>
8000c630:	19 22 fc ff 	ld.w %d2,[%a2]-4
8000c634:	b0 c2       	add.a %a2,-4
8000c636:	df 02 fa 7f 	jeq %d2,0,8000c62a <quorem+0x144>
8000c63a:	59 d8 10 00 	st.w [%a13]16,%d8
8000c63e:	02 a2       	mov %d2,%d10
8000c640:	00 90       	ret 
	...

8000c644 <_dtoa_r>:
8000c644:	20 58       	sub.a %sp,88
8000c646:	b5 a5 0c 00 	st.a [%sp]12,%a5
8000c64a:	99 45 38 00 	ld.a %a5,[%a4]56
8000c64e:	74 a6       	st.w [%sp],%d6
8000c650:	59 a7 14 00 	st.w [%sp]20,%d7
8000c654:	b5 a7 04 00 	st.a [%sp]4,%a7
8000c658:	59 a4 28 00 	st.w [%sp]40,%d4
8000c65c:	80 4d       	mov.d %d13,%a4
8000c65e:	02 4a       	mov %d10,%d4
8000c660:	02 59       	mov %d9,%d5
8000c662:	40 6c       	mov.aa %a12,%a6
8000c664:	02 5b       	mov %d11,%d5
8000c666:	bd 05 11 00 	jz.a %a5,8000c688 <_dtoa_r+0x44>
8000c66a:	19 42 3c 00 	ld.w %d2,[%a4]60
8000c66e:	82 13       	mov %d3,1
8000c670:	0f 23 00 30 	sh %d3,%d3,%d2
8000c674:	59 52 04 00 	st.w [%a5]4,%d2
8000c678:	59 53 08 00 	st.w [%a5]8,%d3
8000c67c:	6d 00 8b 08 	call 8000d792 <_Bfree>
8000c680:	82 02       	mov %d2,0
8000c682:	60 d2       	mov.a %a2,%d13
8000c684:	59 22 38 00 	st.w [%a2]56,%d2
8000c688:	02 98       	mov %d8,%d9
8000c68a:	bf 09 11 01 	jlt %d9,0,8000c8ac <_dtoa_r+0x268>
8000c68e:	82 02       	mov %d2,0
8000c690:	74 c2       	st.w [%a12],%d2
8000c692:	7b 00 ff 27 	movh %d2,32752
8000c696:	0f 28 80 30 	and %d3,%d8,%d2
8000c69a:	5f 23 14 01 	jeq %d3,%d2,8000c8c2 <_dtoa_r+0x27e>
8000c69e:	d2 06       	mov %e6,0
8000c6a0:	02 a4       	mov %d4,%d10
8000c6a2:	02 b5       	mov %d5,%d11
8000c6a4:	59 aa 20 00 	st.w [%sp]32,%d10
8000c6a8:	59 ab 24 00 	st.w [%sp]36,%d11
8000c6ac:	6d 00 06 1e 	call 800102b8 <__eqdf2>
8000c6b0:	df 02 14 80 	jne %d2,0,8000c6d8 <_dtoa_r+0x94>
8000c6b4:	82 12       	mov %d2,1
8000c6b6:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000c6ba:	91 00 00 d8 	movh.a %a13,32768
8000c6be:	d9 dd b4 20 	lea %a13,[%a13]2228 <800008b4 <blanks.1+0x28>>
8000c6c2:	74 22       	st.w [%a2],%d2
8000c6c4:	19 a2 04 00 	ld.w %d2,[%sp]4 <800008b4 <blanks.1+0x28>>
8000c6c8:	df 02 06 00 	jeq %d2,0,8000c6d4 <_dtoa_r+0x90>
8000c6cc:	60 23       	mov.a %a3,%d2
8000c6ce:	d9 d2 01 00 	lea %a2,[%a13]1 <80000001 <BootModeHeader_0+0x1>>
8000c6d2:	f4 32       	st.a [%a3],%a2
8000c6d4:	40 d2       	mov.aa %a2,%a13
8000c6d6:	00 90       	ret 
8000c6d8:	60 d4       	mov.a %a4,%d13
8000c6da:	02 a4       	mov %d4,%d10
8000c6dc:	d9 a6 10 10 	lea %a6,[%sp]80
8000c6e0:	d9 a5 14 10 	lea %a5,[%sp]84
8000c6e4:	02 b5       	mov %d5,%d11
8000c6e6:	6d 00 36 0c 	call 8000df52 <__d2b>
8000c6ea:	8f c8 1e 40 	sh %d4,%d8,-20
8000c6ee:	80 2e       	mov.d %d14,%a2
8000c6f0:	df 04 02 81 	jne %d4,0,8000c8f4 <_dtoa_r+0x2b0>
8000c6f4:	19 a2 14 10 	ld.w %d2,[%sp]84
8000c6f8:	19 a9 10 10 	ld.w %d9,[%sp]80
8000c6fc:	0b 29 00 c0 	add %d12,%d9,%d2
8000c700:	1b 2c 43 20 	addi %d2,%d12,1074
8000c704:	8b 02 02 41 	rsub %d4,%d2,32
8000c708:	8b 12 42 32 	lt %d3,%d2,33
8000c70c:	0f 4a 00 40 	sh %d4,%d10,%d4
8000c710:	df 03 0e 80 	jne %d3,0,8000c72c <_dtoa_r+0xe8>
8000c714:	8b 02 04 21 	rsub %d2,%d2,64
8000c718:	1b 2c 41 40 	addi %d4,%d12,1042
8000c71c:	0f 28 00 80 	sh %d8,%d8,%d2
8000c720:	8b 04 00 21 	rsub %d2,%d4,0
8000c724:	0f 2a 00 20 	sh %d2,%d10,%d2
8000c728:	0f 28 a0 40 	or %d4,%d8,%d2
8000c72c:	6d ff ce db 	call 80007ec8 <__floatunsidf>
8000c730:	82 14       	mov %d4,1
8000c732:	9b 03 e1 3f 	addih %d3,%d3,65040
8000c736:	1b fc ff 8f 	addi %d8,%d12,-1
8000c73a:	59 a4 38 00 	st.w [%sp]56,%d4
8000c73e:	82 06       	mov %d6,0
8000c740:	7b 80 ff 73 	movh %d7,16376
8000c744:	02 24       	mov %d4,%d2
8000c746:	02 35       	mov %d5,%d3
8000c748:	6d ff 39 d9 	call 800079ba <__subdf3>
8000c74c:	0b 23 10 48 	mov %e4,%d3,%d2
8000c750:	7b f0 36 66 	movh %d6,25455
8000c754:	7b 30 fd 73 	movh %d7,16339
8000c758:	1b 16 36 64 	addi %d6,%d6,17249
8000c75c:	1b 77 7a 78 	addi %d7,%d7,-30809
8000c760:	6d ff 50 d9 	call 80007a00 <__muldf3>
8000c764:	0b 23 10 48 	mov %e4,%d3,%d2
8000c768:	7b 10 b6 68 	movh %d6,35681
8000c76c:	7b 70 fc 73 	movh %d7,16327
8000c770:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000c774:	1b 87 a2 78 	addi %d7,%d7,-30168
8000c778:	6d ff 04 d9 	call 80007980 <__adddf3>
8000c77c:	02 84       	mov %d4,%d8
8000c77e:	60 2d       	mov.a %a13,%d2
8000c780:	60 3c       	mov.a %a12,%d3
8000c782:	6d ff 39 db 	call 80007df4 <__floatsidf>
8000c786:	0b 23 10 48 	mov %e4,%d3,%d2
8000c78a:	7b f0 09 65 	movh %d6,20639
8000c78e:	7b 30 fd 73 	movh %d7,16339
8000c792:	1b b6 9f 67 	addi %d6,%d6,31227
8000c796:	1b 37 41 74 	addi %d7,%d7,17427
8000c79a:	6d ff 33 d9 	call 80007a00 <__muldf3>
8000c79e:	0b 23 10 68 	mov %e6,%d3,%d2
8000c7a2:	80 d4       	mov.d %d4,%a13
8000c7a4:	80 c5       	mov.d %d5,%a12
8000c7a6:	6d ff ed d8 	call 80007980 <__adddf3>
8000c7aa:	02 24       	mov %d4,%d2
8000c7ac:	02 35       	mov %d5,%d3
8000c7ae:	60 2d       	mov.a %a13,%d2
8000c7b0:	60 3c       	mov.a %a12,%d3
8000c7b2:	6d 00 fd 1d 	call 800103ac <__fixdfsi>
8000c7b6:	d2 06       	mov %e6,0
8000c7b8:	80 d4       	mov.d %d4,%a13
8000c7ba:	80 c5       	mov.d %d5,%a12
8000c7bc:	02 2c       	mov %d12,%d2
8000c7be:	6d ff fb da 	call 80007db4 <__ltdf2>
8000c7c2:	ff 02 0d 00 	jge %d2,0,8000c7dc <_dtoa_r+0x198>
8000c7c6:	02 c4       	mov %d4,%d12
8000c7c8:	6d ff 16 db 	call 80007df4 <__floatsidf>
8000c7cc:	0b 23 10 48 	mov %e4,%d3,%d2
8000c7d0:	80 d6       	mov.d %d6,%a13
8000c7d2:	80 c7       	mov.d %d7,%a12
8000c7d4:	6d 00 92 1d 	call 800102f8 <__nedf2>
8000c7d8:	ab fc 1f c2 	cadd %d12,%d2,%d12,-1
8000c7dc:	0b 89 80 80 	sub %d8,%d9,%d8
8000c7e0:	1b f8 ff 2f 	addi %d2,%d8,-1
8000c7e4:	59 a2 08 00 	st.w [%sp]8,%d2
8000c7e8:	8b 7c a1 22 	ge.u %d2,%d12,23
8000c7ec:	df 02 41 82 	jne %d2,0,8000cc6e <_dtoa_r+0x62a>
8000c7f0:	91 00 00 38 	movh.a %a3,32768
8000c7f4:	8f 3c 00 20 	sh %d2,%d12,3
8000c7f8:	d9 33 bc 80 	lea %a3,[%a3]2620 <80000a3c <__mprec_tens>>
8000c7fc:	99 a6 20 00 	ld.a %a6,[%sp]32 <80000a3c <__mprec_tens>>
8000c800:	99 a7 24 00 	ld.a %a7,[%sp]36 <80000a3c <__mprec_tens>>
8000c804:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
8000c808:	80 64       	mov.d %d4,%a6
8000c80a:	09 36 40 09 	ld.d %e6,[%a3]
8000c80e:	80 75       	mov.d %d5,%a7
8000c810:	6d ff d2 da 	call 80007db4 <__ltdf2>
8000c814:	ff 02 82 00 	jge %d2,0,8000c918 <_dtoa_r+0x2d4>
8000c818:	82 02       	mov %d2,0
8000c81a:	c2 fc       	add %d12,-1
8000c81c:	59 a2 34 00 	st.w [%sp]52,%d2
8000c820:	82 02       	mov %d2,0
8000c822:	59 a2 10 00 	st.w [%sp]16,%d2
8000c826:	1b f8 ff 2f 	addi %d2,%d8,-1
8000c82a:	bf 02 80 00 	jlt %d2,0,8000c92a <_dtoa_r+0x2e6>
8000c82e:	ff 0c 87 00 	jge %d12,0,8000c93c <_dtoa_r+0x2f8>
8000c832:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c836:	59 ac 1c 00 	st.w [%sp]28,%d12
8000c83a:	a2 c2       	sub %d2,%d12
8000c83c:	82 19       	mov %d9,1
8000c83e:	59 a2 10 00 	st.w [%sp]16,%d2
8000c842:	8b 0c 00 21 	rsub %d2,%d12,0
8000c846:	82 0c       	mov %d12,0
8000c848:	59 a2 2c 00 	st.w [%sp]44,%d2
8000c84c:	54 a2       	ld.w %d2,[%sp]
8000c84e:	ff a2 85 80 	jge.u %d2,10,8000c958 <_dtoa_r+0x314>
8000c852:	bf 62 05 00 	jlt %d2,6,8000c85c <_dtoa_r+0x218>
8000c856:	c2 c2       	add %d2,-4
8000c858:	82 09       	mov %d9,0
8000c85a:	74 a2       	st.w [%sp],%d2
8000c85c:	54 a2       	ld.w %d2,[%sp]
8000c85e:	c2 e2       	add %d2,-2
8000c860:	bf 42 15 82 	jlt.u %d2,4,8000cc8a <_dtoa_r+0x646>
8000c864:	82 02       	mov %d2,0
8000c866:	60 d2       	mov.a %a2,%d13
8000c868:	60 d4       	mov.a %a4,%d13
8000c86a:	59 22 3c 00 	st.w [%a2]60,%d2
8000c86e:	82 04       	mov %d4,0
8000c870:	6d 00 5b 07 	call 8000d726 <_Balloc>
8000c874:	80 2f       	mov.d %d15,%a2
8000c876:	df 0f 24 07 	jeq %d15,0,8000d6be <_dtoa_r+0x107a>
8000c87a:	19 a3 14 10 	ld.w %d3,[%sp]84
8000c87e:	60 d2       	mov.a %a2,%d13
8000c880:	19 a4 1c 00 	ld.w %d4,[%sp]28
8000c884:	8b 03 80 22 	ge %d2,%d3,0
8000c888:	6c 2e       	st.w [%a2]56,%d15
8000c88a:	8b f4 40 24 	and.lt %d2,%d4,15
8000c88e:	df 02 80 85 	jne %d2,0,8000d38e <_dtoa_r+0xd4a>
8000c892:	82 f2       	mov %d2,-1
8000c894:	59 a2 18 00 	st.w [%sp]24,%d2
8000c898:	59 a2 3c 00 	st.w [%sp]60,%d2
8000c89c:	82 02       	mov %d2,0
8000c89e:	59 a2 14 00 	st.w [%sp]20,%d2
8000c8a2:	82 12       	mov %d2,1
8000c8a4:	59 a2 30 00 	st.w [%sp]48,%d2
8000c8a8:	1d 00 1d 01 	j 8000cae2 <_dtoa_r+0x49e>
8000c8ac:	82 12       	mov %d2,1
8000c8ae:	b7 09 81 bf 	insert %d11,%d9,0,31,1
8000c8b2:	74 c2       	st.w [%a12],%d2
8000c8b4:	02 b8       	mov %d8,%d11
8000c8b6:	7b 00 ff 27 	movh %d2,32752
8000c8ba:	0f 28 80 30 	and %d3,%d8,%d2
8000c8be:	5f 23 f0 fe 	jne %d3,%d2,8000c69e <_dtoa_r+0x5a>
8000c8c2:	3b f0 70 22 	mov %d2,9999
8000c8c6:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000c8ca:	74 22       	st.w [%a2],%d2
8000c8cc:	b7 08 0c 2a 	insert %d2,%d8,0,20,12
8000c8d0:	a6 a2       	or %d2,%d10
8000c8d2:	df 02 c2 01 	jeq %d2,0,8000cc56 <_dtoa_r+0x612>
8000c8d6:	19 a2 04 00 	ld.w %d2,[%sp]4
8000c8da:	91 00 00 d8 	movh.a %a13,32768
8000c8de:	d9 dd b0 20 	lea %a13,[%a13]2224 <800008b0 <blanks.1+0x24>>
8000c8e2:	df 02 f9 7e 	jeq %d2,0,8000c6d4 <_dtoa_r+0x90>
8000c8e6:	d9 d2 03 00 	lea %a2,[%a13]3 <80000003 <BootModeHeader_0+0x3>>
8000c8ea:	99 a3 04 00 	ld.a %a3,[%sp]4 <80000003 <BootModeHeader_0+0x3>>
8000c8ee:	f4 32       	st.a [%a3],%a2
8000c8f0:	40 d2       	mov.aa %a2,%a13
8000c8f2:	00 90       	ret 
8000c8f4:	19 a3 24 00 	ld.w %d3,[%sp]36
8000c8f8:	1b 14 c0 8f 	addi %d8,%d4,-1023
8000c8fc:	82 04       	mov %d4,0
8000c8fe:	b7 03 0c 3a 	insert %d3,%d3,0,20,12
8000c902:	7b 00 ff 53 	movh %d5,16368
8000c906:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c90a:	19 a9 10 10 	ld.w %d9,[%sp]80
8000c90e:	a6 53       	or %d3,%d5
8000c910:	59 a4 38 00 	st.w [%sp]56,%d4
8000c914:	1d ff 15 ff 	j 8000c73e <_dtoa_r+0xfa>
8000c918:	82 02       	mov %d2,0
8000c91a:	59 a2 34 00 	st.w [%sp]52,%d2
8000c91e:	59 a2 10 00 	st.w [%sp]16,%d2
8000c922:	1b f8 ff 2f 	addi %d2,%d8,-1
8000c926:	ff 02 0b 00 	jge %d2,0,8000c93c <_dtoa_r+0x2f8>
8000c92a:	8b 18 00 21 	rsub %d2,%d8,1
8000c92e:	59 a2 10 00 	st.w [%sp]16,%d2
8000c932:	82 02       	mov %d2,0
8000c934:	59 a2 08 00 	st.w [%sp]8,%d2
8000c938:	bf 0c 7d 7f 	jlt %d12,0,8000c832 <_dtoa_r+0x1ee>
8000c93c:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c940:	59 ac 1c 00 	st.w [%sp]28,%d12
8000c944:	42 c2       	add %d2,%d12
8000c946:	82 19       	mov %d9,1
8000c948:	59 a2 08 00 	st.w [%sp]8,%d2
8000c94c:	82 02       	mov %d2,0
8000c94e:	59 a2 2c 00 	st.w [%sp]44,%d2
8000c952:	54 a2       	ld.w %d2,[%sp]
8000c954:	bf a2 7f ff 	jlt.u %d2,10,8000c852 <_dtoa_r+0x20e>
8000c958:	82 02       	mov %d2,0
8000c95a:	59 a9 30 00 	st.w [%sp]48,%d9
8000c95e:	74 a2       	st.w [%sp],%d2
8000c960:	82 f2       	mov %d2,-1
8000c962:	59 a2 18 00 	st.w [%sp]24,%d2
8000c966:	82 02       	mov %d2,0
8000c968:	59 a2 14 00 	st.w [%sp]20,%d2
8000c96c:	82 02       	mov %d2,0
8000c96e:	60 d2       	mov.a %a2,%d13
8000c970:	82 04       	mov %d4,0
8000c972:	59 22 3c 00 	st.w [%a2]60,%d2
8000c976:	19 a2 18 00 	ld.w %d2,[%sp]24
8000c97a:	59 a2 3c 00 	st.w [%sp]60,%d2
8000c97e:	60 d4       	mov.a %a4,%d13
8000c980:	6d 00 d3 06 	call 8000d726 <_Balloc>
8000c984:	80 2f       	mov.d %d15,%a2
8000c986:	df 0f 9c 06 	jeq %d15,0,8000d6be <_dtoa_r+0x107a>
8000c98a:	19 a2 18 00 	ld.w %d2,[%sp]24
8000c98e:	60 d2       	mov.a %a2,%d13
8000c990:	8b f2 60 22 	lt.u %d2,%d2,15
8000c994:	6c 2e       	st.w [%a2]56,%d15
8000c996:	26 29       	and %d9,%d2
8000c998:	df 09 92 00 	jeq %d9,0,8000cabc <_dtoa_r+0x478>
8000c99c:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000c9a0:	bf 13 ce 02 	jlt %d3,1,8000cf3c <_dtoa_r+0x8f8>
8000c9a4:	8f f3 00 21 	and %d2,%d3,15
8000c9a8:	91 00 00 38 	movh.a %a3,32768
8000c9ac:	06 32       	sh %d2,3
8000c9ae:	d9 33 bc 80 	lea %a3,[%a3]2620 <80000a3c <__mprec_tens>>
8000c9b2:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
8000c9b6:	19 a4 20 00 	ld.w %d4,[%sp]32
8000c9ba:	19 a2 24 00 	ld.w %d2,[%sp]36
8000c9be:	d4 3d       	ld.a %a13,[%a3]
8000c9c0:	99 3e 04 00 	ld.a %a14,[%a3]4
8000c9c4:	60 4f       	mov.a %a15,%d4
8000c9c6:	8f c3 3f 80 	sha %d8,%d3,-4
8000c9ca:	02 29       	mov %d9,%d2
8000c9cc:	82 2a       	mov %d10,2
8000c9ce:	6f 83 11 00 	jz.t %d3,8,8000c9f0 <_dtoa_r+0x3ac>
8000c9d2:	91 00 00 38 	movh.a %a3,32768
8000c9d6:	d9 33 94 80 	lea %a3,[%a3]2580 <80000a14 <__mprec_bigtens>>
8000c9da:	09 36 60 09 	ld.d %e6,[%a3]32 <80000020 <_START>>
8000c9de:	80 f4       	mov.d %d4,%a15
8000c9e0:	02 25       	mov %d5,%d2
8000c9e2:	6d ff 21 d9 	call 80007c24 <__divdf3>
8000c9e6:	60 2f       	mov.a %a15,%d2
8000c9e8:	8f f8 00 81 	and %d8,%d8,15
8000c9ec:	02 39       	mov %d9,%d3
8000c9ee:	82 3a       	mov %d10,3
8000c9f0:	df 08 16 00 	jeq %d8,0,8000ca1c <_dtoa_r+0x3d8>
8000c9f4:	91 00 00 c8 	movh.a %a12,32768
8000c9f8:	d9 cc 94 80 	lea %a12,[%a12]2580 <80000a14 <__mprec_bigtens>>
8000c9fc:	6f 08 0b 00 	jz.t %d8,0,8000ca12 <_dtoa_r+0x3ce>
8000ca00:	09 c6 40 09 	ld.d %e6,[%a12]
8000ca04:	80 d4       	mov.d %d4,%a13
8000ca06:	80 e5       	mov.d %d5,%a14
8000ca08:	6d ff fc d7 	call 80007a00 <__muldf3>
8000ca0c:	60 2d       	mov.a %a13,%d2
8000ca0e:	60 3e       	mov.a %a14,%d3
8000ca10:	c2 1a       	add %d10,1
8000ca12:	86 f8       	sha %d8,-1
8000ca14:	d9 cc 08 00 	lea %a12,[%a12]8 <80000008 <BootModeHeader_0+0x8>>
8000ca18:	df 08 f2 ff 	jne %d8,0,8000c9fc <_dtoa_r+0x3b8>
8000ca1c:	80 e7       	mov.d %d7,%a14
8000ca1e:	80 f4       	mov.d %d4,%a15
8000ca20:	80 d6       	mov.d %d6,%a13
8000ca22:	02 95       	mov %d5,%d9
8000ca24:	6d ff 00 d9 	call 80007c24 <__divdf3>
8000ca28:	60 2e       	mov.a %a14,%d2
8000ca2a:	60 3f       	mov.a %a15,%d3
8000ca2c:	19 a2 34 00 	ld.w %d2,[%sp]52
8000ca30:	df 02 0b 00 	jeq %d2,0,8000ca46 <_dtoa_r+0x402>
8000ca34:	82 06       	mov %d6,0
8000ca36:	7b 00 ff 73 	movh %d7,16368
8000ca3a:	80 e4       	mov.d %d4,%a14
8000ca3c:	80 f5       	mov.d %d5,%a15
8000ca3e:	6d ff bb d9 	call 80007db4 <__ltdf2>
8000ca42:	bf 02 33 01 	jlt %d2,0,8000cca8 <_dtoa_r+0x664>
8000ca46:	02 a4       	mov %d4,%d10
8000ca48:	6d ff d6 d9 	call 80007df4 <__floatsidf>
8000ca4c:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca50:	80 e6       	mov.d %d6,%a14
8000ca52:	80 f7       	mov.d %d7,%a15
8000ca54:	6d ff d6 d7 	call 80007a00 <__muldf3>
8000ca58:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca5c:	82 06       	mov %d6,0
8000ca5e:	7b c0 01 74 	movh %d7,16412
8000ca62:	6d ff 8f d7 	call 80007980 <__adddf3>
8000ca66:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca6a:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ca6e:	59 a2 04 10 	st.w [%sp]68,%d2
8000ca72:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ca76:	59 a2 00 10 	st.w [%sp]64,%d2
8000ca7a:	02 48       	mov %d8,%d4
8000ca7c:	9b 05 cc 9f 	addih %d9,%d5,64704
8000ca80:	df 02 42 81 	jne %d2,0,8000cd04 <_dtoa_r+0x6c0>
8000ca84:	82 06       	mov %d6,0
8000ca86:	7b 40 01 74 	movh %d7,16404
8000ca8a:	80 e4       	mov.d %d4,%a14
8000ca8c:	80 f5       	mov.d %d5,%a15
8000ca8e:	6d ff 96 d7 	call 800079ba <__subdf3>
8000ca92:	02 86       	mov %d6,%d8
8000ca94:	02 97       	mov %d7,%d9
8000ca96:	02 24       	mov %d4,%d2
8000ca98:	02 35       	mov %d5,%d3
8000ca9a:	60 2d       	mov.a %a13,%d2
8000ca9c:	60 3c       	mov.a %a12,%d3
8000ca9e:	6d ff 6b d9 	call 80007d74 <__gtdf2>
8000caa2:	ff 12 72 04 	jge %d2,1,8000d386 <_dtoa_r+0xd42>
8000caa6:	60 92       	mov.a %a2,%d9
8000caa8:	02 86       	mov %d6,%d8
8000caaa:	11 02 00 48 	addih.a %a4,%a2,32768
8000caae:	80 47       	mov.d %d7,%a4
8000cab0:	80 d4       	mov.d %d4,%a13
8000cab2:	80 c5       	mov.d %d5,%a12
8000cab4:	6d ff 80 d9 	call 80007db4 <__ltdf2>
8000cab8:	bf 02 d8 03 	jlt %d2,0,8000d268 <_dtoa_r+0xc24>
8000cabc:	19 a4 1c 00 	ld.w %d4,[%sp]28
8000cac0:	19 a3 14 10 	ld.w %d3,[%sp]84
8000cac4:	8b f4 40 22 	lt %d2,%d4,15
8000cac8:	8b 03 80 24 	and.ge %d2,%d3,0
8000cacc:	df 02 79 82 	jne %d2,0,8000cfbe <_dtoa_r+0x97a>
8000cad0:	19 a2 30 00 	ld.w %d2,[%sp]48
8000cad4:	19 aa 2c 00 	ld.w %d10,[%sp]44
8000cad8:	19 a9 10 00 	ld.w %d9,[%sp]16
8000cadc:	82 08       	mov %d8,0
8000cade:	df 02 2b 00 	jeq %d2,0,8000cb34 <_dtoa_r+0x4f0>
8000cae2:	54 a2       	ld.w %d2,[%sp]
8000cae4:	bf 22 3c 04 	jlt %d2,2,8000d35c <_dtoa_r+0xd18>
8000cae8:	19 a2 18 00 	ld.w %d2,[%sp]24
8000caec:	1b f2 ff af 	addi %d10,%d2,-1
8000caf0:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000caf4:	7f a2 be 03 	jge %d2,%d10,8000d270 <_dtoa_r+0xc2c>
8000caf8:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000cafc:	59 aa 2c 00 	st.w [%sp]44,%d10
8000cb00:	0b 2a 80 30 	sub %d3,%d10,%d2
8000cb04:	42 3c       	add %d12,%d3
8000cb06:	82 0a       	mov %d10,0
8000cb08:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cb0c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cb10:	0b 23 80 90 	sub %d9,%d3,%d2
8000cb14:	bf 02 0b 00 	jlt %d2,0,8000cb2a <_dtoa_r+0x4e6>
8000cb18:	19 a4 08 00 	ld.w %d4,[%sp]8
8000cb1c:	02 39       	mov %d9,%d3
8000cb1e:	42 24       	add %d4,%d2
8000cb20:	42 23       	add %d3,%d2
8000cb22:	59 a4 08 00 	st.w [%sp]8,%d4
8000cb26:	59 a3 10 00 	st.w [%sp]16,%d3
8000cb2a:	60 d4       	mov.a %a4,%d13
8000cb2c:	82 14       	mov %d4,1
8000cb2e:	6d 00 15 07 	call 8000d958 <__i2b>
8000cb32:	80 28       	mov.d %d8,%a2
8000cb34:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cb38:	8b 13 80 22 	ge %d2,%d3,1
8000cb3c:	8b 19 80 24 	and.ge %d2,%d9,1
8000cb40:	df 02 0e 00 	jeq %d2,0,8000cb5c <_dtoa_r+0x518>
8000cb44:	19 a4 10 00 	ld.w %d4,[%sp]16
8000cb48:	0b 39 80 21 	min %d2,%d9,%d3
8000cb4c:	a2 24       	sub %d4,%d2
8000cb4e:	a2 29       	sub %d9,%d2
8000cb50:	0b 23 80 20 	sub %d2,%d3,%d2
8000cb54:	59 a4 10 00 	st.w [%sp]16,%d4
8000cb58:	59 a2 08 00 	st.w [%sp]8,%d2
8000cb5c:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000cb60:	df 02 0e 00 	jeq %d2,0,8000cb7c <_dtoa_r+0x538>
8000cb64:	19 a2 30 00 	ld.w %d2,[%sp]48
8000cb68:	df 02 88 00 	jeq %d2,0,8000cc78 <_dtoa_r+0x634>
8000cb6c:	ff 1a 86 03 	jge %d10,1,8000d278 <_dtoa_r+0xc34>
8000cb70:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000cb74:	0b a2 80 40 	sub %d4,%d2,%d10
8000cb78:	5f a2 82 80 	jne %d2,%d10,8000cc7c <_dtoa_r+0x638>
8000cb7c:	60 d4       	mov.a %a4,%d13
8000cb7e:	82 14       	mov %d4,1
8000cb80:	6d 00 ec 06 	call 8000d958 <__i2b>
8000cb84:	40 2c       	mov.aa %a12,%a2
8000cb86:	ff 1c 49 02 	jge %d12,1,8000d018 <_dtoa_r+0x9d4>
8000cb8a:	54 a2       	ld.w %d2,[%sp]
8000cb8c:	a0 0d       	mov.a %a13,0
8000cb8e:	bf 22 dd 03 	jlt %d2,2,8000d348 <_dtoa_r+0xd04>
8000cb92:	82 12       	mov %d2,1
8000cb94:	df 0c 4c 82 	jne %d12,0,8000d02c <_dtoa_r+0x9e8>
8000cb98:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cb9c:	42 32       	add %d2,%d3
8000cb9e:	8f f2 01 21 	and %d2,%d2,31
8000cba2:	df 02 cf 03 	jeq %d2,0,8000d340 <_dtoa_r+0xcfc>
8000cba6:	8b 02 02 31 	rsub %d3,%d2,32
8000cbaa:	bf 53 cf 02 	jlt %d3,5,8000d148 <_dtoa_r+0xb04>
8000cbae:	8b c2 01 21 	rsub %d2,%d2,28
8000cbb2:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cbb6:	42 29       	add %d9,%d2
8000cbb8:	42 23       	add %d3,%d2
8000cbba:	59 a3 10 00 	st.w [%sp]16,%d3
8000cbbe:	19 a3 08 00 	ld.w %d3,[%sp]8
8000cbc2:	42 23       	add %d3,%d2
8000cbc4:	59 a3 08 00 	st.w [%sp]8,%d3
8000cbc8:	19 a2 10 00 	ld.w %d2,[%sp]16
8000cbcc:	bf 12 08 00 	jlt %d2,1,8000cbdc <_dtoa_r+0x598>
8000cbd0:	60 e5       	mov.a %a5,%d14
8000cbd2:	60 d4       	mov.a %a4,%d13
8000cbd4:	02 24       	mov %d4,%d2
8000cbd6:	6d 00 3f 08 	call 8000dc54 <__lshift>
8000cbda:	80 2e       	mov.d %d14,%a2
8000cbdc:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cbe0:	bf 12 08 00 	jlt %d2,1,8000cbf0 <_dtoa_r+0x5ac>
8000cbe4:	60 d4       	mov.a %a4,%d13
8000cbe6:	40 c5       	mov.aa %a5,%a12
8000cbe8:	02 24       	mov %d4,%d2
8000cbea:	6d 00 35 08 	call 8000dc54 <__lshift>
8000cbee:	40 2c       	mov.aa %a12,%a2
8000cbf0:	54 a2       	ld.w %d2,[%sp]
8000cbf2:	8b 32 80 a2 	ge %d10,%d2,3
8000cbf6:	19 a2 34 00 	ld.w %d2,[%sp]52
8000cbfa:	df 02 26 82 	jne %d2,0,8000d046 <_dtoa_r+0xa02>
8000cbfe:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cc02:	8b 12 40 22 	lt %d2,%d2,1
8000cc06:	26 a2       	and %d2,%d10
8000cc08:	df 02 2b 01 	jeq %d2,0,8000ce5e <_dtoa_r+0x81a>
8000cc0c:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cc10:	df 02 a2 02 	jeq %d2,0,8000d154 <_dtoa_r+0xb10>
8000cc14:	19 ab 14 00 	ld.w %d11,[%sp]20
8000cc18:	60 fd       	mov.a %a13,%d15
8000cc1a:	46 0b       	not %d11
8000cc1c:	60 d4       	mov.a %a4,%d13
8000cc1e:	40 c5       	mov.aa %a5,%a12
8000cc20:	6d 00 b9 05 	call 8000d792 <_Bfree>
8000cc24:	c2 1b       	add %d11,1
8000cc26:	df 08 06 00 	jeq %d8,0,8000cc32 <_dtoa_r+0x5ee>
8000cc2a:	60 85       	mov.a %a5,%d8
8000cc2c:	60 d4       	mov.a %a4,%d13
8000cc2e:	6d 00 b2 05 	call 8000d792 <_Bfree>
8000cc32:	60 e5       	mov.a %a5,%d14
8000cc34:	60 d4       	mov.a %a4,%d13
8000cc36:	6d 00 ae 05 	call 8000d792 <_Bfree>
8000cc3a:	82 02       	mov %d2,0
8000cc3c:	60 f2       	mov.a %a2,%d15
8000cc3e:	34 22       	st.b [%a2],%d2
8000cc40:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000cc44:	19 a2 04 00 	ld.w %d2,[%sp]4
8000cc48:	74 2b       	st.w [%a2],%d11
8000cc4a:	df 02 45 7d 	jeq %d2,0,8000c6d4 <_dtoa_r+0x90>
8000cc4e:	60 22       	mov.a %a2,%d2
8000cc50:	6c 20       	st.w [%a2]0,%d15
8000cc52:	40 d2       	mov.aa %a2,%a13
8000cc54:	00 90       	ret 
8000cc56:	91 00 00 d8 	movh.a %a13,32768
8000cc5a:	19 a2 04 00 	ld.w %d2,[%sp]4
8000cc5e:	d9 dd a7 20 	lea %a13,[%a13]2215 <800008a7 <blanks.1+0x1b>>
8000cc62:	d9 d2 08 00 	lea %a2,[%a13]8 <80000008 <BootModeHeader_0+0x8>>
8000cc66:	df 02 42 fe 	jne %d2,0,8000c8ea <_dtoa_r+0x2a6>
8000cc6a:	1d ff 35 fd 	j 8000c6d4 <_dtoa_r+0x90>
8000cc6e:	82 12       	mov %d2,1
8000cc70:	59 a2 34 00 	st.w [%sp]52,%d2
8000cc74:	1d ff d6 fd 	j 8000c820 <_dtoa_r+0x1dc>
8000cc78:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000cc7c:	60 e5       	mov.a %a5,%d14
8000cc7e:	60 d4       	mov.a %a4,%d13
8000cc80:	6d 00 7a 07 	call 8000db74 <__pow5mult>
8000cc84:	80 2e       	mov.d %d14,%a2
8000cc86:	1d ff 7b ff 	j 8000cb7c <_dtoa_r+0x538>
8000cc8a:	91 10 00 38 	movh.a %a3,32769
8000cc8e:	d9 33 d8 2c 	lea %a3,[%a3]-13160 <8000cc98 <_dtoa_r+0x654>>
8000cc92:	01 32 02 36 	addsc.a %a3,%a3,%d2,2
8000cc96:	dc 03       	ji %a3
8000cc98:	1d 00 3b 03 	j 8000d30e <_dtoa_r+0xcca>
8000cc9c:	1d 00 34 03 	j 8000d304 <_dtoa_r+0xcc0>
8000cca0:	1d 00 ff 02 	j 8000d29e <_dtoa_r+0xc5a>
8000cca4:	1d 00 1f 03 	j 8000d2e2 <_dtoa_r+0xc9e>
8000cca8:	19 a2 18 00 	ld.w %d2,[%sp]24
8000ccac:	df 02 0d 04 	jeq %d2,0,8000d4c6 <_dtoa_r+0xe82>
8000ccb0:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000ccb4:	bf 12 04 7f 	jlt %d2,1,8000cabc <_dtoa_r+0x478>
8000ccb8:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000ccbc:	80 f5       	mov.d %d5,%a15
8000ccbe:	c2 f3       	add %d3,-1
8000ccc0:	82 06       	mov %d6,0
8000ccc2:	7b 40 02 74 	movh %d7,16420
8000ccc6:	80 e4       	mov.d %d4,%a14
8000ccc8:	59 a3 04 10 	st.w [%sp]68,%d3
8000cccc:	6d ff 9a d6 	call 80007a00 <__muldf3>
8000ccd0:	60 2e       	mov.a %a14,%d2
8000ccd2:	1b 1a 00 40 	addi %d4,%d10,1
8000ccd6:	60 3f       	mov.a %a15,%d3
8000ccd8:	6d ff 8e d8 	call 80007df4 <__floatsidf>
8000ccdc:	0b 23 10 48 	mov %e4,%d3,%d2
8000cce0:	80 e6       	mov.d %d6,%a14
8000cce2:	80 f7       	mov.d %d7,%a15
8000cce4:	6d ff 8e d6 	call 80007a00 <__muldf3>
8000cce8:	0b 23 10 48 	mov %e4,%d3,%d2
8000ccec:	82 06       	mov %d6,0
8000ccee:	7b c0 01 74 	movh %d7,16412
8000ccf2:	6d ff 47 d6 	call 80007980 <__adddf3>
8000ccf6:	02 28       	mov %d8,%d2
8000ccf8:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000ccfc:	9b 03 cc 9f 	addih %d9,%d3,64704
8000cd00:	59 a2 00 10 	st.w [%sp]64,%d2
8000cd04:	80 e4       	mov.d %d4,%a14
8000cd06:	80 f5       	mov.d %d5,%a15
8000cd08:	6d 00 52 1b 	call 800103ac <__fixdfsi>
8000cd0c:	02 24       	mov %d4,%d2
8000cd0e:	19 a2 00 10 	ld.w %d2,[%sp]64
8000cd12:	91 00 00 38 	movh.a %a3,32768
8000cd16:	1b f2 ff 5f 	addi %d5,%d2,-1
8000cd1a:	06 35       	sh %d5,3
8000cd1c:	d9 33 bc 80 	lea %a3,[%a3]2620 <80000a3c <__mprec_tens>>
8000cd20:	01 35 00 36 	addsc.a %a3,%a3,%d5,0
8000cd24:	02 8a       	mov %d10,%d8
8000cd26:	09 3c c0 09 	ld.da %a12,[%a3]
8000cd2a:	1b 04 03 80 	addi %d8,%d4,48
8000cd2e:	59 a9 08 10 	st.w [%sp]72,%d9
8000cd32:	6d ff 61 d8 	call 80007df4 <__floatsidf>
8000cd36:	0b 23 10 68 	mov %e6,%d3,%d2
8000cd3a:	80 e4       	mov.d %d4,%a14
8000cd3c:	80 f5       	mov.d %d5,%a15
8000cd3e:	6d ff 3e d6 	call 800079ba <__subdf3>
8000cd42:	60 2e       	mov.a %a14,%d2
8000cd44:	19 a2 30 00 	ld.w %d2,[%sp]48
8000cd48:	37 08 48 80 	extr %d8,%d8,0,8
8000cd4c:	60 3f       	mov.a %a15,%d3
8000cd4e:	92 19       	add %d9,%d15,1
8000cd50:	80 c6       	mov.d %d6,%a12
8000cd52:	80 d7       	mov.d %d7,%a13
8000cd54:	df 02 9d 01 	jeq %d2,0,8000d08e <_dtoa_r+0xa4a>
8000cd58:	82 04       	mov %d4,0
8000cd5a:	7b 00 fe 53 	movh %d5,16352
8000cd5e:	6d ff 63 d7 	call 80007c24 <__divdf3>
8000cd62:	99 a5 08 10 	ld.a %a5,[%sp]72
8000cd66:	0b 23 10 48 	mov %e4,%d3,%d2
8000cd6a:	02 a6       	mov %d6,%d10
8000cd6c:	80 57       	mov.d %d7,%a5
8000cd6e:	6d ff 26 d6 	call 800079ba <__subdf3>
8000cd72:	60 f2       	mov.a %a2,%d15
8000cd74:	80 e6       	mov.d %d6,%a14
8000cd76:	34 28       	st.b [%a2],%d8
8000cd78:	80 f7       	mov.d %d7,%a15
8000cd7a:	02 24       	mov %d4,%d2
8000cd7c:	02 35       	mov %d5,%d3
8000cd7e:	60 3c       	mov.a %a12,%d3
8000cd80:	02 2a       	mov %d10,%d2
8000cd82:	6d ff f9 d7 	call 80007d74 <__gtdf2>
8000cd86:	ff 12 e8 03 	jge %d2,1,8000d556 <_dtoa_r+0xf12>
8000cd8a:	82 02       	mov %d2,0
8000cd8c:	59 ac 08 10 	st.w [%sp]72,%d12
8000cd90:	19 ac 00 10 	ld.w %d12,[%sp]64
8000cd94:	59 ab 00 10 	st.w [%sp]64,%d11
8000cd98:	02 2b       	mov %d11,%d2
8000cd9a:	80 c2       	mov.d %d2,%a12
8000cd9c:	60 ac       	mov.a %a12,%d10
8000cd9e:	02 2a       	mov %d10,%d2
8000cda0:	1d 00 34 00 	j 8000ce08 <_dtoa_r+0x7c4>
8000cda4:	c2 1b       	add %d11,1
8000cda6:	7f cb fc 03 	jge %d11,%d12,8000d59e <_dtoa_r+0xf5a>
8000cdaa:	80 c4       	mov.d %d4,%a12
8000cdac:	02 a5       	mov %d5,%d10
8000cdae:	82 06       	mov %d6,0
8000cdb0:	7b 40 02 74 	movh %d7,16420
8000cdb4:	6d ff 26 d6 	call 80007a00 <__muldf3>
8000cdb8:	82 06       	mov %d6,0
8000cdba:	7b 40 02 74 	movh %d7,16420
8000cdbe:	80 e4       	mov.d %d4,%a14
8000cdc0:	80 f5       	mov.d %d5,%a15
8000cdc2:	60 2c       	mov.a %a12,%d2
8000cdc4:	02 3a       	mov %d10,%d3
8000cdc6:	6d ff 1d d6 	call 80007a00 <__muldf3>
8000cdca:	60 2e       	mov.a %a14,%d2
8000cdcc:	02 35       	mov %d5,%d3
8000cdce:	02 24       	mov %d4,%d2
8000cdd0:	60 3d       	mov.a %a13,%d3
8000cdd2:	6d 00 ed 1a 	call 800103ac <__fixdfsi>
8000cdd6:	02 24       	mov %d4,%d2
8000cdd8:	02 28       	mov %d8,%d2
8000cdda:	6d ff 0d d8 	call 80007df4 <__floatsidf>
8000cdde:	0b 23 10 68 	mov %e6,%d3,%d2
8000cde2:	80 e4       	mov.d %d4,%a14
8000cde4:	80 d5       	mov.d %d5,%a13
8000cde6:	6d ff ea d5 	call 800079ba <__subdf3>
8000cdea:	1b 08 03 80 	addi %d8,%d8,48
8000cdee:	60 92       	mov.a %a2,%d9
8000cdf0:	60 2e       	mov.a %a14,%d2
8000cdf2:	24 28       	st.b [%a2+],%d8
8000cdf4:	80 c6       	mov.d %d6,%a12
8000cdf6:	02 a7       	mov %d7,%d10
8000cdf8:	02 24       	mov %d4,%d2
8000cdfa:	02 35       	mov %d5,%d3
8000cdfc:	60 3f       	mov.a %a15,%d3
8000cdfe:	80 29       	mov.d %d9,%a2
8000ce00:	6d ff da d7 	call 80007db4 <__ltdf2>
8000ce04:	bf 02 a9 03 	jlt %d2,0,8000d556 <_dtoa_r+0xf12>
8000ce08:	80 e6       	mov.d %d6,%a14
8000ce0a:	80 f7       	mov.d %d7,%a15
8000ce0c:	82 04       	mov %d4,0
8000ce0e:	7b 00 ff 53 	movh %d5,16368
8000ce12:	6d ff d4 d5 	call 800079ba <__subdf3>
8000ce16:	0b 23 10 48 	mov %e4,%d3,%d2
8000ce1a:	80 c6       	mov.d %d6,%a12
8000ce1c:	02 a7       	mov %d7,%d10
8000ce1e:	6d ff cb d7 	call 80007db4 <__ltdf2>
8000ce22:	ff 02 c1 7f 	jge %d2,0,8000cda4 <_dtoa_r+0x760>
8000ce26:	02 9a       	mov %d10,%d9
8000ce28:	60 a2       	mov.a %a2,%d10
8000ce2a:	60 f4       	mov.a %a4,%d15
8000ce2c:	3b 90 03 30 	mov %d3,57
8000ce30:	1d 00 04 00 	j 8000ce38 <_dtoa_r+0x7f4>
8000ce34:	7d 42 3e 03 	jeq.a %a2,%a4,8000d4b0 <_dtoa_r+0xe6c>
8000ce38:	40 23       	mov.aa %a3,%a2
8000ce3a:	09 22 3f f4 	ld.b %d2,[+%a2]-1
8000ce3e:	5f 32 fb 7f 	jeq %d2,%d3,8000ce34 <_dtoa_r+0x7f0>
8000ce42:	c2 12       	add %d2,1
8000ce44:	37 02 48 20 	extr %d2,%d2,0,8
8000ce48:	80 2a       	mov.d %d10,%a2
8000ce4a:	80 4f       	mov.d %d15,%a4
8000ce4c:	60 a2       	mov.a %a2,%d10
8000ce4e:	34 22       	st.b [%a2],%d2
8000ce50:	19 ab 04 10 	ld.w %d11,[%sp]68
8000ce54:	60 fd       	mov.a %a13,%d15
8000ce56:	c2 1b       	add %d11,1
8000ce58:	80 3f       	mov.d %d15,%a3
8000ce5a:	1d ff ec fe 	j 8000cc32 <_dtoa_r+0x5ee>
8000ce5e:	19 a2 30 00 	ld.w %d2,[%sp]48
8000ce62:	df 02 90 01 	jeq %d2,0,8000d182 <_dtoa_r+0xb3e>
8000ce66:	bf 19 08 00 	jlt %d9,1,8000ce76 <_dtoa_r+0x832>
8000ce6a:	60 85       	mov.a %a5,%d8
8000ce6c:	60 d4       	mov.a %a4,%d13
8000ce6e:	02 94       	mov %d4,%d9
8000ce70:	6d 00 f2 06 	call 8000dc54 <__lshift>
8000ce74:	80 28       	mov.d %d8,%a2
8000ce76:	02 89       	mov %d9,%d8
8000ce78:	bd 0d 76 83 	jnz.a %a13,8000d564 <_dtoa_r+0xf20>
8000ce7c:	60 f2       	mov.a %a2,%d15
8000ce7e:	99 a3 18 00 	ld.a %a3,[%sp]24
8000ce82:	19 a2 28 00 	ld.w %d2,[%sp]40
8000ce86:	b0 f2       	add.a %a2,-1
8000ce88:	30 23       	add.a %a3,%a2
8000ce8a:	8f 12 00 21 	and %d2,%d2,1
8000ce8e:	54 aa       	ld.w %d10,[%sp]
8000ce90:	60 ff       	mov.a %a15,%d15
8000ce92:	78 04       	st.w [%sp]16,%d15
8000ce94:	b5 a3 08 00 	st.a [%sp]8,%a3
8000ce98:	02 2f       	mov %d15,%d2
8000ce9a:	60 e4       	mov.a %a4,%d14
8000ce9c:	40 c5       	mov.aa %a5,%a12
8000ce9e:	6d ff 24 fb 	call 8000c4e6 <quorem>
8000cea2:	60 22       	mov.a %a2,%d2
8000cea4:	60 85       	mov.a %a5,%d8
8000cea6:	60 e4       	mov.a %a4,%d14
8000cea8:	d9 2e 30 00 	lea %a14,[%a2]48
8000ceac:	74 a2       	st.w [%sp],%d2
8000ceae:	6d 00 5a 07 	call 8000dd62 <__mcmp>
8000ceb2:	60 96       	mov.a %a6,%d9
8000ceb4:	60 d4       	mov.a %a4,%d13
8000ceb6:	40 c5       	mov.aa %a5,%a12
8000ceb8:	02 2b       	mov %d11,%d2
8000ceba:	6d 00 7a 07 	call 8000ddae <__mdiff>
8000cebe:	19 22 0c 00 	ld.w %d2,[%a2]12
8000cec2:	40 2d       	mov.aa %a13,%a2
8000cec4:	40 25       	mov.aa %a5,%a2
8000cec6:	df 02 29 82 	jne %d2,0,8000d318 <_dtoa_r+0xcd4>
8000ceca:	60 e4       	mov.a %a4,%d14
8000cecc:	6d 00 4b 07 	call 8000dd62 <__mcmp>
8000ced0:	60 d4       	mov.a %a4,%d13
8000ced2:	40 d5       	mov.aa %a5,%a13
8000ced4:	02 2c       	mov %d12,%d2
8000ced6:	6d 00 5e 04 	call 8000d792 <_Bfree>
8000ceda:	0f ac a0 20 	or %d2,%d12,%d10
8000cede:	a6 f2       	or %d2,%d15
8000cee0:	df 02 b5 03 	jeq %d2,0,8000d64a <_dtoa_r+0x1006>
8000cee4:	d9 f2 01 00 	lea %a2,[%a15]1
8000cee8:	40 2d       	mov.aa %a13,%a2
8000ceea:	bf 0b 16 03 	jlt %d11,0,8000d516 <_dtoa_r+0xed2>
8000ceee:	0f ab a0 20 	or %d2,%d11,%d10
8000cef2:	a6 f2       	or %d2,%d15
8000cef4:	df 02 11 03 	jeq %d2,0,8000d516 <_dtoa_r+0xed2>
8000cef8:	ff 1c 7c 03 	jge %d12,1,8000d5f0 <_dtoa_r+0xfac>
8000cefc:	99 a3 08 00 	ld.a %a3,[%sp]8
8000cf00:	80 e2       	mov.d %d2,%a14
8000cf02:	28 02       	st.b [%a15]0,%d2
8000cf04:	7d f3 86 03 	jeq.a %a3,%a15,8000d610 <_dtoa_r+0xfcc>
8000cf08:	60 e5       	mov.a %a5,%d14
8000cf0a:	60 d4       	mov.a %a4,%d13
8000cf0c:	fb a0 00 40 	mov %e4,10
8000cf10:	6d 00 4f 04 	call 8000d7ae <__multadd>
8000cf14:	60 85       	mov.a %a5,%d8
8000cf16:	60 d4       	mov.a %a4,%d13
8000cf18:	80 2e       	mov.d %d14,%a2
8000cf1a:	fb a0 00 40 	mov %e4,10
8000cf1e:	5f 98 03 02 	jeq %d8,%d9,8000d324 <_dtoa_r+0xce0>
8000cf22:	6d 00 46 04 	call 8000d7ae <__multadd>
8000cf26:	60 95       	mov.a %a5,%d9
8000cf28:	60 d4       	mov.a %a4,%d13
8000cf2a:	fb a0 00 40 	mov %e4,10
8000cf2e:	80 28       	mov.d %d8,%a2
8000cf30:	6d 00 3f 04 	call 8000d7ae <__multadd>
8000cf34:	80 29       	mov.d %d9,%a2
8000cf36:	40 df       	mov.aa %a15,%a13
8000cf38:	1d ff b1 ff 	j 8000ce9a <_dtoa_r+0x856>
8000cf3c:	19 a4 20 00 	ld.w %d4,[%sp]32
8000cf40:	19 a3 24 00 	ld.w %d3,[%sp]36
8000cf44:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cf48:	60 4e       	mov.a %a14,%d4
8000cf4a:	60 3f       	mov.a %a15,%d3
8000cf4c:	82 2a       	mov %d10,2
8000cf4e:	df 02 6f 7d 	jeq %d2,0,8000ca2c <_dtoa_r+0x3e8>
8000cf52:	8b 02 00 81 	rsub %d8,%d2,0
8000cf56:	8f f8 00 21 	and %d2,%d8,15
8000cf5a:	91 00 00 38 	movh.a %a3,32768
8000cf5e:	06 32       	sh %d2,3
8000cf60:	d9 33 bc 80 	lea %a3,[%a3]2620 <80000a3c <__mprec_tens>>
8000cf64:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
8000cf68:	80 e4       	mov.d %d4,%a14
8000cf6a:	09 36 40 09 	ld.d %e6,[%a3]
8000cf6e:	80 f5       	mov.d %d5,%a15
8000cf70:	6d ff 48 d5 	call 80007a00 <__muldf3>
8000cf74:	59 a2 00 10 	st.w [%sp]64,%d2
8000cf78:	86 c8       	sha %d8,-4
8000cf7a:	60 3d       	mov.a %a13,%d3
8000cf7c:	60 2e       	mov.a %a14,%d2
8000cf7e:	60 3f       	mov.a %a15,%d3
8000cf80:	df 08 56 7d 	jeq %d8,0,8000ca2c <_dtoa_r+0x3e8>
8000cf84:	91 00 00 c8 	movh.a %a12,32768
8000cf88:	d9 cc 94 80 	lea %a12,[%a12]2580 <80000a14 <__mprec_bigtens>>
8000cf8c:	82 02       	mov %d2,0
8000cf8e:	6f 08 0c 00 	jz.t %d8,0,8000cfa6 <_dtoa_r+0x962>
8000cf92:	09 c6 40 09 	ld.d %e6,[%a12]
8000cf96:	80 e4       	mov.d %d4,%a14
8000cf98:	80 f5       	mov.d %d5,%a15
8000cf9a:	6d ff 33 d5 	call 80007a00 <__muldf3>
8000cf9e:	60 3f       	mov.a %a15,%d3
8000cfa0:	60 2e       	mov.a %a14,%d2
8000cfa2:	c2 1a       	add %d10,1
8000cfa4:	02 92       	mov %d2,%d9
8000cfa6:	86 f8       	sha %d8,-1
8000cfa8:	d9 cc 08 00 	lea %a12,[%a12]8 <80000008 <BootModeHeader_0+0x8>>
8000cfac:	df 08 f1 ff 	jne %d8,0,8000cf8e <_dtoa_r+0x94a>
8000cfb0:	df 02 3e fd 	jne %d2,0,8000ca2c <_dtoa_r+0x3e8>
8000cfb4:	99 ae 00 10 	ld.a %a14,[%sp]64
8000cfb8:	40 df       	mov.aa %a15,%a13
8000cfba:	1d ff 39 fd 	j 8000ca2c <_dtoa_r+0x3e8>
8000cfbe:	02 42       	mov %d2,%d4
8000cfc0:	19 a3 18 00 	ld.w %d3,[%sp]24
8000cfc4:	91 00 00 38 	movh.a %a3,32768
8000cfc8:	06 32       	sh %d2,3
8000cfca:	19 a4 14 00 	ld.w %d4,[%sp]20
8000cfce:	d9 33 bc 80 	lea %a3,[%a3]2620 <80000a3c <__mprec_tens>>
8000cfd2:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
8000cfd6:	8b 13 40 22 	lt %d2,%d3,1
8000cfda:	87 24 1f 20 	and.t %d2,%d4,31,%d2,0
8000cfde:	09 3c c0 09 	ld.da %a12,[%a3]
8000cfe2:	df 02 e4 01 	jeq %d2,0,8000d3aa <_dtoa_r+0xd66>
8000cfe6:	df 03 41 81 	jne %d3,0,8000d268 <_dtoa_r+0xc24>
8000cfea:	80 c4       	mov.d %d4,%a12
8000cfec:	82 06       	mov %d6,0
8000cfee:	7b 40 01 74 	movh %d7,16404
8000cff2:	80 d5       	mov.d %d5,%a13
8000cff4:	6d ff 06 d5 	call 80007a00 <__muldf3>
8000cff8:	99 a6 20 00 	ld.a %a6,[%sp]32
8000cffc:	99 a7 24 00 	ld.a %a7,[%sp]36
8000d000:	0b 23 10 68 	mov %e6,%d3,%d2
8000d004:	80 64       	mov.d %d4,%a6
8000d006:	80 75       	mov.d %d5,%a7
8000d008:	6d 00 98 19 	call 80010338 <__ledf2>
8000d00c:	a0 0c       	mov.a %a12,0
8000d00e:	82 08       	mov %d8,0
8000d010:	bf 12 02 7e 	jlt %d2,1,8000cc14 <_dtoa_r+0x5d0>
8000d014:	1d 00 ac 00 	j 8000d16c <_dtoa_r+0xb28>
8000d018:	60 d4       	mov.a %a4,%d13
8000d01a:	02 c4       	mov %d4,%d12
8000d01c:	40 25       	mov.aa %a5,%a2
8000d01e:	6d 00 ab 05 	call 8000db74 <__pow5mult>
8000d022:	54 a2       	ld.w %d2,[%sp]
8000d024:	40 2c       	mov.aa %a12,%a2
8000d026:	bf 22 06 01 	jlt %d2,2,8000d232 <_dtoa_r+0xbee>
8000d02a:	a0 0d       	mov.a %a13,0
8000d02c:	19 c2 10 00 	ld.w %d2,[%a12]16
8000d030:	c2 42       	add %d2,4
8000d032:	06 22       	sh %d2,2
8000d034:	01 c2 00 36 	addsc.a %a3,%a12,%d2,0
8000d038:	54 34       	ld.w %d4,[%a3]
8000d03a:	6d 00 1b 04 	call 8000d870 <__hi0bits>
8000d03e:	8b 02 02 21 	rsub %d2,%d2,32
8000d042:	1d ff ab fd 	j 8000cb98 <_dtoa_r+0x554>
8000d046:	60 e4       	mov.a %a4,%d14
8000d048:	40 c5       	mov.aa %a5,%a12
8000d04a:	6d 00 8c 06 	call 8000dd62 <__mcmp>
8000d04e:	ff 02 d8 7d 	jge %d2,0,8000cbfe <_dtoa_r+0x5ba>
8000d052:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d056:	60 e5       	mov.a %a5,%d14
8000d058:	60 d4       	mov.a %a4,%d13
8000d05a:	fb a0 00 40 	mov %e4,10
8000d05e:	1b f2 ff cf 	addi %d12,%d2,-1
8000d062:	6d 00 a6 03 	call 8000d7ae <__multadd>
8000d066:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000d06a:	80 2e       	mov.d %d14,%a2
8000d06c:	8b 12 40 22 	lt %d2,%d2,1
8000d070:	26 2a       	and %d10,%d2
8000d072:	19 a2 30 00 	ld.w %d2,[%sp]48
8000d076:	df 02 0d 83 	jne %d2,0,8000d690 <_dtoa_r+0x104c>
8000d07a:	df 0a 03 83 	jne %d10,0,8000d680 <_dtoa_r+0x103c>
8000d07e:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000d082:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d086:	59 a2 18 00 	st.w [%sp]24,%d2
8000d08a:	1d 00 7f 00 	j 8000d188 <_dtoa_r+0xb44>
8000d08e:	99 a5 08 10 	ld.a %a5,[%sp]72
8000d092:	02 a4       	mov %d4,%d10
8000d094:	80 55       	mov.d %d5,%a5
8000d096:	6d ff b5 d4 	call 80007a00 <__muldf3>
8000d09a:	60 f2       	mov.a %a2,%d15
8000d09c:	59 a2 08 10 	st.w [%sp]72,%d2
8000d0a0:	19 a2 00 10 	ld.w %d2,[%sp]64
8000d0a4:	59 a3 0c 10 	st.w [%sp]76,%d3
8000d0a8:	34 28       	st.b [%a2],%d8
8000d0aa:	12 2a       	add %d10,%d15,%d2
8000d0ac:	df 12 e7 02 	jeq %d2,1,8000d67a <_dtoa_r+0x1036>
8000d0b0:	82 06       	mov %d6,0
8000d0b2:	7b 40 02 74 	movh %d7,16420
8000d0b6:	80 e4       	mov.d %d4,%a14
8000d0b8:	80 f5       	mov.d %d5,%a15
8000d0ba:	6d ff a3 d4 	call 80007a00 <__muldf3>
8000d0be:	02 35       	mov %d5,%d3
8000d0c0:	02 24       	mov %d4,%d2
8000d0c2:	60 3c       	mov.a %a12,%d3
8000d0c4:	60 2d       	mov.a %a13,%d2
8000d0c6:	6d 00 73 19 	call 800103ac <__fixdfsi>
8000d0ca:	02 24       	mov %d4,%d2
8000d0cc:	02 28       	mov %d8,%d2
8000d0ce:	6d ff 93 d6 	call 80007df4 <__floatsidf>
8000d0d2:	0b 23 10 68 	mov %e6,%d3,%d2
8000d0d6:	80 d4       	mov.d %d4,%a13
8000d0d8:	80 c5       	mov.d %d5,%a12
8000d0da:	6d ff 70 d4 	call 800079ba <__subdf3>
8000d0de:	1b 08 03 80 	addi %d8,%d8,48
8000d0e2:	60 92       	mov.a %a2,%d9
8000d0e4:	60 2e       	mov.a %a14,%d2
8000d0e6:	24 28       	st.b [%a2+],%d8
8000d0e8:	80 29       	mov.d %d9,%a2
8000d0ea:	60 3f       	mov.a %a15,%d3
8000d0ec:	5f a9 e2 ff 	jne %d9,%d10,8000d0b0 <_dtoa_r+0xa6c>
8000d0f0:	19 a9 08 10 	ld.w %d9,[%sp]72
8000d0f4:	19 a8 0c 10 	ld.w %d8,[%sp]76
8000d0f8:	82 06       	mov %d6,0
8000d0fa:	7b 00 fe 73 	movh %d7,16352
8000d0fe:	02 94       	mov %d4,%d9
8000d100:	02 85       	mov %d5,%d8
8000d102:	6d ff 3f d4 	call 80007980 <__adddf3>
8000d106:	0b 23 10 48 	mov %e4,%d3,%d2
8000d10a:	80 e6       	mov.d %d6,%a14
8000d10c:	80 f7       	mov.d %d7,%a15
8000d10e:	6d ff 53 d6 	call 80007db4 <__ltdf2>
8000d112:	bf 02 8b 7e 	jlt %d2,0,8000ce28 <_dtoa_r+0x7e4>
8000d116:	02 96       	mov %d6,%d9
8000d118:	02 87       	mov %d7,%d8
8000d11a:	82 04       	mov %d4,0
8000d11c:	7b 00 fe 53 	movh %d5,16352
8000d120:	6d ff 4d d4 	call 800079ba <__subdf3>
8000d124:	0b 23 10 48 	mov %e4,%d3,%d2
8000d128:	80 e6       	mov.d %d6,%a14
8000d12a:	80 f7       	mov.d %d7,%a15
8000d12c:	6d ff 24 d6 	call 80007d74 <__gtdf2>
8000d130:	bf 12 c6 7c 	jlt %d2,1,8000cabc <_dtoa_r+0x478>
8000d134:	60 a2       	mov.a %a2,%d10
8000d136:	3b 00 03 30 	mov %d3,48
8000d13a:	40 23       	mov.aa %a3,%a2
8000d13c:	09 22 3f f4 	ld.b %d2,[+%a2]-1
8000d140:	5f 32 fd 7f 	jeq %d2,%d3,8000d13a <_dtoa_r+0xaf6>
8000d144:	1d ff 86 fe 	j 8000ce50 <_dtoa_r+0x80c>
8000d148:	df 43 40 7d 	jeq %d3,4,8000cbc8 <_dtoa_r+0x584>
8000d14c:	8b c2 03 21 	rsub %d2,%d2,60
8000d150:	1d ff 31 fd 	j 8000cbb2 <_dtoa_r+0x56e>
8000d154:	60 d4       	mov.a %a4,%d13
8000d156:	40 c5       	mov.aa %a5,%a12
8000d158:	d2 54       	mov %e4,5
8000d15a:	6d 00 2a 03 	call 8000d7ae <__multadd>
8000d15e:	60 e4       	mov.a %a4,%d14
8000d160:	40 25       	mov.aa %a5,%a2
8000d162:	40 2c       	mov.aa %a12,%a2
8000d164:	6d 00 ff 05 	call 8000dd62 <__mcmp>
8000d168:	bf 12 56 7d 	jlt %d2,1,8000cc14 <_dtoa_r+0x5d0>
8000d16c:	3b 10 03 20 	mov %d2,49
8000d170:	60 f3       	mov.a %a3,%d15
8000d172:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d176:	24 32       	st.b [%a3+],%d2
8000d178:	60 fd       	mov.a %a13,%d15
8000d17a:	c2 1b       	add %d11,1
8000d17c:	80 3f       	mov.d %d15,%a3
8000d17e:	1d ff 4f fd 	j 8000cc1c <_dtoa_r+0x5d8>
8000d182:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d186:	c2 1b       	add %d11,1
8000d188:	60 fd       	mov.a %a13,%d15
8000d18a:	19 ac 18 00 	ld.w %d12,[%sp]24
8000d18e:	82 19       	mov %d9,1
8000d190:	1d 00 0a 00 	j 8000d1a4 <_dtoa_r+0xb60>
8000d194:	60 e5       	mov.a %a5,%d14
8000d196:	60 d4       	mov.a %a4,%d13
8000d198:	fb a0 00 40 	mov %e4,10
8000d19c:	6d 00 09 03 	call 8000d7ae <__multadd>
8000d1a0:	80 2e       	mov.d %d14,%a2
8000d1a2:	c2 19       	add %d9,1
8000d1a4:	60 e4       	mov.a %a4,%d14
8000d1a6:	40 c5       	mov.aa %a5,%a12
8000d1a8:	6d ff 9f f9 	call 8000c4e6 <quorem>
8000d1ac:	1b 02 03 20 	addi %d2,%d2,48
8000d1b0:	24 d2       	st.b [%a13+],%d2
8000d1b2:	3f c9 f1 7f 	jlt %d9,%d12,8000d194 <_dtoa_r+0xb50>
8000d1b6:	19 a3 18 00 	ld.w %d3,[%sp]24
8000d1ba:	60 f2       	mov.a %a2,%d15
8000d1bc:	02 2a       	mov %d10,%d2
8000d1be:	8b 13 80 22 	ge %d2,%d3,1
8000d1c2:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000d1c6:	01 22 00 e6 	addsc.a %a14,%a2,%d2,0
8000d1ca:	82 0c       	mov %d12,0
8000d1cc:	60 e5       	mov.a %a5,%d14
8000d1ce:	60 d4       	mov.a %a4,%d13
8000d1d0:	82 14       	mov %d4,1
8000d1d2:	6d 00 41 05 	call 8000dc54 <__lshift>
8000d1d6:	40 c5       	mov.aa %a5,%a12
8000d1d8:	40 24       	mov.aa %a4,%a2
8000d1da:	80 2e       	mov.d %d14,%a2
8000d1dc:	6d 00 c3 05 	call 8000dd62 <__mcmp>
8000d1e0:	bf 12 56 01 	jlt %d2,1,8000d48c <_dtoa_r+0xe48>
8000d1e4:	79 e2 ff ff 	ld.b %d2,[%a14]-1
8000d1e8:	60 f2       	mov.a %a2,%d15
8000d1ea:	3b 90 03 30 	mov %d3,57
8000d1ee:	1d 00 07 00 	j 8000d1fc <_dtoa_r+0xbb8>
8000d1f2:	7d 23 46 01 	jeq.a %a3,%a2,8000d47e <_dtoa_r+0xe3a>
8000d1f6:	79 32 ff ff 	ld.b %d2,[%a3]-1
8000d1fa:	40 3e       	mov.aa %a14,%a3
8000d1fc:	d9 e3 ff ff 	lea %a3,[%a14]-1
8000d200:	5f 32 f9 7f 	jeq %d2,%d3,8000d1f2 <_dtoa_r+0xbae>
8000d204:	c2 12       	add %d2,1
8000d206:	80 2f       	mov.d %d15,%a2
8000d208:	34 32       	st.b [%a3],%d2
8000d20a:	60 d4       	mov.a %a4,%d13
8000d20c:	40 c5       	mov.aa %a5,%a12
8000d20e:	6d 00 c2 02 	call 8000d792 <_Bfree>
8000d212:	df 08 4b 01 	jeq %d8,0,8000d4a8 <_dtoa_r+0xe64>
8000d216:	0b 8c 10 21 	ne %d2,%d12,%d8
8000d21a:	8b 0c 20 24 	and.ne %d2,%d12,0
8000d21e:	df 02 5d 02 	jeq %d2,0,8000d6d8 <_dtoa_r+0x1094>
8000d222:	60 c5       	mov.a %a5,%d12
8000d224:	60 d4       	mov.a %a4,%d13
8000d226:	60 fd       	mov.a %a13,%d15
8000d228:	6d 00 b5 02 	call 8000d792 <_Bfree>
8000d22c:	80 ef       	mov.d %d15,%a14
8000d22e:	1d ff fe fc 	j 8000cc2a <_dtoa_r+0x5e6>
8000d232:	19 a2 28 00 	ld.w %d2,[%sp]40
8000d236:	df 02 fa fe 	jne %d2,0,8000d02a <_dtoa_r+0x9e6>
8000d23a:	b7 0b 0c 2a 	insert %d2,%d11,0,20,12
8000d23e:	df 02 f6 fe 	jne %d2,0,8000d02a <_dtoa_r+0x9e6>
8000d242:	7b 00 ff 27 	movh %d2,32752
8000d246:	26 b2       	and %d2,%d11
8000d248:	a0 0d       	mov.a %a13,0
8000d24a:	df 02 a4 7c 	jeq %d2,0,8000cb92 <_dtoa_r+0x54e>
8000d24e:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d252:	a0 1d       	mov.a %a13,1
8000d254:	c2 12       	add %d2,1
8000d256:	59 a2 10 00 	st.w [%sp]16,%d2
8000d25a:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d25e:	c2 12       	add %d2,1
8000d260:	59 a2 08 00 	st.w [%sp]8,%d2
8000d264:	1d ff 97 fc 	j 8000cb92 <_dtoa_r+0x54e>
8000d268:	a0 0c       	mov.a %a12,0
8000d26a:	82 08       	mov %d8,0
8000d26c:	1d ff d4 fc 	j 8000cc14 <_dtoa_r+0x5d0>
8000d270:	0b a2 80 a0 	sub %d10,%d2,%d10
8000d274:	1d ff 4a fc 	j 8000cb08 <_dtoa_r+0x4c4>
8000d278:	60 85       	mov.a %a5,%d8
8000d27a:	60 d4       	mov.a %a4,%d13
8000d27c:	02 a4       	mov %d4,%d10
8000d27e:	6d 00 7b 04 	call 8000db74 <__pow5mult>
8000d282:	60 e6       	mov.a %a6,%d14
8000d284:	60 d4       	mov.a %a4,%d13
8000d286:	40 25       	mov.aa %a5,%a2
8000d288:	80 28       	mov.d %d8,%a2
8000d28a:	6d 00 a4 03 	call 8000d9d2 <__multiply>
8000d28e:	60 e5       	mov.a %a5,%d14
8000d290:	60 d4       	mov.a %a4,%d13
8000d292:	40 2c       	mov.aa %a12,%a2
8000d294:	80 ce       	mov.d %d14,%a12
8000d296:	6d 00 7e 02 	call 8000d792 <_Bfree>
8000d29a:	1d ff 6b fc 	j 8000cb70 <_dtoa_r+0x52c>
8000d29e:	82 12       	mov %d2,1
8000d2a0:	59 a2 30 00 	st.w [%sp]48,%d2
8000d2a4:	19 a5 14 00 	ld.w %d5,[%sp]20
8000d2a8:	bf 15 45 00 	jlt %d5,1,8000d332 <_dtoa_r+0xcee>
8000d2ac:	59 a5 3c 00 	st.w [%sp]60,%d5
8000d2b0:	59 a5 18 00 	st.w [%sp]24,%d5
8000d2b4:	82 02       	mov %d2,0
8000d2b6:	60 d2       	mov.a %a2,%d13
8000d2b8:	82 04       	mov %d4,0
8000d2ba:	59 22 3c 00 	st.w [%a2]60,%d2
8000d2be:	8b 85 41 22 	lt %d2,%d5,24
8000d2c2:	df 02 5e fb 	jne %d2,0,8000c97e <_dtoa_r+0x33a>
8000d2c6:	82 11       	mov %d1,1
8000d2c8:	82 43       	mov %d3,4
8000d2ca:	06 13       	sh %d3,1
8000d2cc:	1b 43 01 20 	addi %d2,%d3,20
8000d2d0:	02 14       	mov %d4,%d1
8000d2d2:	c2 11       	add %d1,1
8000d2d4:	7f 25 fb ff 	jge.u %d5,%d2,8000d2ca <_dtoa_r+0xc86>
8000d2d8:	60 d2       	mov.a %a2,%d13
8000d2da:	59 24 3c 00 	st.w [%a2]60,%d4
8000d2de:	1d ff 50 fb 	j 8000c97e <_dtoa_r+0x33a>
8000d2e2:	82 12       	mov %d2,1
8000d2e4:	59 a2 30 00 	st.w [%sp]48,%d2
8000d2e8:	19 a2 14 00 	ld.w %d2,[%sp]20
8000d2ec:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000d2f0:	42 32       	add %d2,%d3
8000d2f2:	59 a2 3c 00 	st.w [%sp]60,%d2
8000d2f6:	c2 12       	add %d2,1
8000d2f8:	8b 12 40 53 	max %d5,%d2,1
8000d2fc:	59 a2 18 00 	st.w [%sp]24,%d2
8000d300:	1d ff da ff 	j 8000d2b4 <_dtoa_r+0xc70>
8000d304:	82 02       	mov %d2,0
8000d306:	59 a2 30 00 	st.w [%sp]48,%d2
8000d30a:	1d ff ef ff 	j 8000d2e8 <_dtoa_r+0xca4>
8000d30e:	82 02       	mov %d2,0
8000d310:	59 a2 30 00 	st.w [%sp]48,%d2
8000d314:	1d ff c8 ff 	j 8000d2a4 <_dtoa_r+0xc60>
8000d318:	60 d4       	mov.a %a4,%d13
8000d31a:	82 1c       	mov %d12,1
8000d31c:	6d 00 3b 02 	call 8000d792 <_Bfree>
8000d320:	1d ff e2 fd 	j 8000cee4 <_dtoa_r+0x8a0>
8000d324:	6d 00 45 02 	call 8000d7ae <__multadd>
8000d328:	80 28       	mov.d %d8,%a2
8000d32a:	80 29       	mov.d %d9,%a2
8000d32c:	40 df       	mov.aa %a15,%a13
8000d32e:	1d ff b6 fd 	j 8000ce9a <_dtoa_r+0x856>
8000d332:	82 12       	mov %d2,1
8000d334:	59 a2 14 00 	st.w [%sp]20,%d2
8000d338:	59 a2 18 00 	st.w [%sp]24,%d2
8000d33c:	1d ff 18 fb 	j 8000c96c <_dtoa_r+0x328>
8000d340:	3b c0 01 20 	mov %d2,28
8000d344:	1d ff 37 fc 	j 8000cbb2 <_dtoa_r+0x56e>
8000d348:	19 a2 28 00 	ld.w %d2,[%sp]40
8000d34c:	df 02 23 fc 	jne %d2,0,8000cb92 <_dtoa_r+0x54e>
8000d350:	b7 0b 0c 2a 	insert %d2,%d11,0,20,12
8000d354:	df 02 1f fc 	jne %d2,0,8000cb92 <_dtoa_r+0x54e>
8000d358:	1d ff 75 ff 	j 8000d242 <_dtoa_r+0xbfe>
8000d35c:	19 a2 38 00 	ld.w %d2,[%sp]56
8000d360:	df 02 c8 00 	jeq %d2,0,8000d4f0 <_dtoa_r+0xeac>
8000d364:	19 a2 08 00 	ld.w %d2,[%sp]8
8000d368:	1b 33 43 30 	addi %d3,%d3,1075
8000d36c:	42 32       	add %d2,%d3
8000d36e:	19 aa 2c 00 	ld.w %d10,[%sp]44
8000d372:	59 a2 08 00 	st.w [%sp]8,%d2
8000d376:	19 a2 10 00 	ld.w %d2,[%sp]16
8000d37a:	02 29       	mov %d9,%d2
8000d37c:	42 32       	add %d2,%d3
8000d37e:	59 a2 10 00 	st.w [%sp]16,%d2
8000d382:	1d ff d4 fb 	j 8000cb2a <_dtoa_r+0x4e6>
8000d386:	a0 0c       	mov.a %a12,0
8000d388:	82 08       	mov %d8,0
8000d38a:	1d ff f1 fe 	j 8000d16c <_dtoa_r+0xb28>
8000d38e:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d392:	91 00 00 28 	movh.a %a2,32768
8000d396:	06 32       	sh %d2,3
8000d398:	d9 22 bc 80 	lea %a2,[%a2]2620 <80000a3c <__mprec_tens>>
8000d39c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000d3a0:	82 f2       	mov %d2,-1
8000d3a2:	09 2c c0 09 	ld.da %a12,[%a2]
8000d3a6:	59 a2 18 00 	st.w [%sp]24,%d2
8000d3aa:	19 aa 20 00 	ld.w %d10,[%sp]32
8000d3ae:	19 a9 24 00 	ld.w %d9,[%sp]36
8000d3b2:	80 c6       	mov.d %d6,%a12
8000d3b4:	80 d7       	mov.d %d7,%a13
8000d3b6:	02 a4       	mov %d4,%d10
8000d3b8:	02 95       	mov %d5,%d9
8000d3ba:	6d ff 35 d4 	call 80007c24 <__divdf3>
8000d3be:	0b 23 10 48 	mov %e4,%d3,%d2
8000d3c2:	6d 00 f5 17 	call 800103ac <__fixdfsi>
8000d3c6:	02 24       	mov %d4,%d2
8000d3c8:	02 28       	mov %d8,%d2
8000d3ca:	6d ff 15 d5 	call 80007df4 <__floatsidf>
8000d3ce:	0b 23 10 48 	mov %e4,%d3,%d2
8000d3d2:	80 c6       	mov.d %d6,%a12
8000d3d4:	80 d7       	mov.d %d7,%a13
8000d3d6:	6d ff 15 d3 	call 80007a00 <__muldf3>
8000d3da:	0b 23 10 68 	mov %e6,%d3,%d2
8000d3de:	02 a4       	mov %d4,%d10
8000d3e0:	02 95       	mov %d5,%d9
8000d3e2:	6d ff ec d2 	call 800079ba <__subdf3>
8000d3e6:	60 23       	mov.a %a3,%d2
8000d3e8:	1b 08 03 20 	addi %d2,%d8,48
8000d3ec:	60 f2       	mov.a %a2,%d15
8000d3ee:	82 19       	mov %d9,1
8000d3f0:	24 22       	st.b [%a2+],%d2
8000d3f2:	19 a2 18 00 	ld.w %d2,[%sp]24
8000d3f6:	60 3e       	mov.a %a14,%d3
8000d3f8:	19 ab 18 00 	ld.w %d11,[%sp]24
8000d3fc:	80 2a       	mov.d %d10,%a2
8000d3fe:	40 34       	mov.aa %a4,%a3
8000d400:	5f 92 28 80 	jne %d2,%d9,8000d450 <_dtoa_r+0xe0c>
8000d404:	1d 00 d4 00 	j 8000d5ac <_dtoa_r+0xf68>
8000d408:	80 c6       	mov.d %d6,%a12
8000d40a:	80 d7       	mov.d %d7,%a13
8000d40c:	80 e5       	mov.d %d5,%a14
8000d40e:	80 f4       	mov.d %d4,%a15
8000d410:	6d ff 0a d4 	call 80007c24 <__divdf3>
8000d414:	0b 23 10 48 	mov %e4,%d3,%d2
8000d418:	c2 19       	add %d9,1
8000d41a:	6d 00 c9 17 	call 800103ac <__fixdfsi>
8000d41e:	02 24       	mov %d4,%d2
8000d420:	02 28       	mov %d8,%d2
8000d422:	6d ff e9 d4 	call 80007df4 <__floatsidf>
8000d426:	0b 23 10 48 	mov %e4,%d3,%d2
8000d42a:	80 c6       	mov.d %d6,%a12
8000d42c:	80 d7       	mov.d %d7,%a13
8000d42e:	6d ff e9 d2 	call 80007a00 <__muldf3>
8000d432:	0b 23 10 68 	mov %e6,%d3,%d2
8000d436:	80 e5       	mov.d %d5,%a14
8000d438:	80 f4       	mov.d %d4,%a15
8000d43a:	6d ff c0 d2 	call 800079ba <__subdf3>
8000d43e:	60 24       	mov.a %a4,%d2
8000d440:	1b 08 03 20 	addi %d2,%d8,48
8000d444:	60 a2       	mov.a %a2,%d10
8000d446:	60 3e       	mov.a %a14,%d3
8000d448:	24 22       	st.b [%a2+],%d2
8000d44a:	80 2a       	mov.d %d10,%a2
8000d44c:	5f b9 af 00 	jeq %d9,%d11,8000d5aa <_dtoa_r+0xf66>
8000d450:	80 e5       	mov.d %d5,%a14
8000d452:	82 06       	mov %d6,0
8000d454:	7b 40 02 74 	movh %d7,16420
8000d458:	80 44       	mov.d %d4,%a4
8000d45a:	6d ff d3 d2 	call 80007a00 <__muldf3>
8000d45e:	60 3e       	mov.a %a14,%d3
8000d460:	d2 06       	mov %e6,0
8000d462:	02 24       	mov %d4,%d2
8000d464:	02 35       	mov %d5,%d3
8000d466:	60 2f       	mov.a %a15,%d2
8000d468:	6d 00 28 17 	call 800102b8 <__eqdf2>
8000d46c:	df 02 ce ff 	jne %d2,0,8000d408 <_dtoa_r+0xdc4>
8000d470:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d474:	60 fd       	mov.a %a13,%d15
8000d476:	c2 1b       	add %d11,1
8000d478:	02 af       	mov %d15,%d10
8000d47a:	1d ff dc fb 	j 8000cc32 <_dtoa_r+0x5ee>
8000d47e:	3b 10 03 20 	mov %d2,49
8000d482:	80 2f       	mov.d %d15,%a2
8000d484:	c2 1b       	add %d11,1
8000d486:	34 22       	st.b [%a2],%d2
8000d488:	1d ff c1 fe 	j 8000d20a <_dtoa_r+0xbc6>
8000d48c:	df 02 04 80 	jne %d2,0,8000d494 <_dtoa_r+0xe50>
8000d490:	6f 0a aa fe 	jnz.t %d10,0,8000d1e4 <_dtoa_r+0xba0>
8000d494:	3b 00 03 30 	mov %d3,48
8000d498:	40 e3       	mov.aa %a3,%a14
8000d49a:	09 e2 3f f4 	ld.b %d2,[+%a14]-1
8000d49e:	5f 32 fd 7f 	jeq %d2,%d3,8000d498 <_dtoa_r+0xe54>
8000d4a2:	40 3e       	mov.aa %a14,%a3
8000d4a4:	1d ff b3 fe 	j 8000d20a <_dtoa_r+0xbc6>
8000d4a8:	60 fd       	mov.a %a13,%d15
8000d4aa:	80 ef       	mov.d %d15,%a14
8000d4ac:	1d ff c3 fb 	j 8000cc32 <_dtoa_r+0x5ee>
8000d4b0:	19 a2 04 10 	ld.w %d2,[%sp]68
8000d4b4:	80 2a       	mov.d %d10,%a2
8000d4b6:	c2 12       	add %d2,1
8000d4b8:	80 4f       	mov.d %d15,%a4
8000d4ba:	59 a2 04 10 	st.w [%sp]68,%d2
8000d4be:	3b 10 03 20 	mov %d2,49
8000d4c2:	1d ff c5 fc 	j 8000ce4c <_dtoa_r+0x808>
8000d4c6:	02 a4       	mov %d4,%d10
8000d4c8:	6d ff 96 d4 	call 80007df4 <__floatsidf>
8000d4cc:	0b 23 10 48 	mov %e4,%d3,%d2
8000d4d0:	80 e6       	mov.d %d6,%a14
8000d4d2:	80 f7       	mov.d %d7,%a15
8000d4d4:	6d ff 96 d2 	call 80007a00 <__muldf3>
8000d4d8:	0b 23 10 48 	mov %e4,%d3,%d2
8000d4dc:	82 06       	mov %d6,0
8000d4de:	7b c0 01 74 	movh %d7,16412
8000d4e2:	6d ff 4f d2 	call 80007980 <__adddf3>
8000d4e6:	02 28       	mov %d8,%d2
8000d4e8:	9b 03 cc 9f 	addih %d9,%d3,64704
8000d4ec:	1d ff cc fa 	j 8000ca84 <_dtoa_r+0x440>
8000d4f0:	19 a2 10 10 	ld.w %d2,[%sp]80
8000d4f4:	19 a3 08 00 	ld.w %d3,[%sp]8
8000d4f8:	8b 62 03 21 	rsub %d2,%d2,54
8000d4fc:	42 23       	add %d3,%d2
8000d4fe:	19 aa 2c 00 	ld.w %d10,[%sp]44
8000d502:	59 a3 08 00 	st.w [%sp]8,%d3
8000d506:	19 a3 10 00 	ld.w %d3,[%sp]16
8000d50a:	02 39       	mov %d9,%d3
8000d50c:	42 23       	add %d3,%d2
8000d50e:	59 a3 10 00 	st.w [%sp]16,%d3
8000d512:	1d ff 0c fb 	j 8000cb2a <_dtoa_r+0x4e6>
8000d516:	80 ea       	mov.d %d10,%a14
8000d518:	58 04       	ld.w %d15,[%sp]16
8000d51a:	40 2e       	mov.aa %a14,%a2
8000d51c:	bf 1c 15 00 	jlt %d12,1,8000d546 <_dtoa_r+0xf02>
8000d520:	60 e5       	mov.a %a5,%d14
8000d522:	60 d4       	mov.a %a4,%d13
8000d524:	82 14       	mov %d4,1
8000d526:	6d 00 97 03 	call 8000dc54 <__lshift>
8000d52a:	40 c5       	mov.aa %a5,%a12
8000d52c:	40 24       	mov.aa %a4,%a2
8000d52e:	80 2e       	mov.d %d14,%a2
8000d530:	6d 00 19 04 	call 8000dd62 <__mcmp>
8000d534:	bf 12 bf 00 	jlt %d2,1,8000d6b2 <_dtoa_r+0x106e>
8000d538:	8b 9a 03 a2 	eq %d10,%d10,57
8000d53c:	df 0a 74 80 	jne %d10,0,8000d624 <_dtoa_r+0xfe0>
8000d540:	54 a2       	ld.w %d2,[%sp]
8000d542:	1b 12 03 a0 	addi %d10,%d2,49
8000d546:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d54a:	02 8c       	mov %d12,%d8
8000d54c:	28 0a       	st.b [%a15]0,%d10
8000d54e:	c2 1b       	add %d11,1
8000d550:	02 98       	mov %d8,%d9
8000d552:	1d ff 5c fe 	j 8000d20a <_dtoa_r+0xbc6>
8000d556:	19 ab 04 10 	ld.w %d11,[%sp]68
8000d55a:	60 fd       	mov.a %a13,%d15
8000d55c:	c2 1b       	add %d11,1
8000d55e:	02 9f       	mov %d15,%d9
8000d560:	1d ff 69 fb 	j 8000cc32 <_dtoa_r+0x5ee>
8000d564:	60 82       	mov.a %a2,%d8
8000d566:	60 d4       	mov.a %a4,%d13
8000d568:	19 24 04 00 	ld.w %d4,[%a2]4
8000d56c:	6d 00 dd 00 	call 8000d726 <_Balloc>
8000d570:	40 2d       	mov.aa %a13,%a2
8000d572:	bd 02 b7 00 	jz.a %a2,8000d6e0 <_dtoa_r+0x109c>
8000d576:	60 82       	mov.a %a2,%d8
8000d578:	d9 d4 0c 00 	lea %a4,[%a13]12
8000d57c:	19 22 10 00 	ld.w %d2,[%a2]16
8000d580:	d9 25 0c 00 	lea %a5,[%a2]12
8000d584:	1b 22 00 40 	addi %d4,%d2,2
8000d588:	06 24       	sh %d4,2
8000d58a:	6d ff f3 f5 	call 8000c170 <memcpy>
8000d58e:	60 d4       	mov.a %a4,%d13
8000d590:	82 14       	mov %d4,1
8000d592:	40 d5       	mov.aa %a5,%a13
8000d594:	6d 00 60 03 	call 8000dc54 <__lshift>
8000d598:	80 29       	mov.d %d9,%a2
8000d59a:	1d ff 71 fc 	j 8000ce7c <_dtoa_r+0x838>
8000d59e:	19 ac 08 10 	ld.w %d12,[%sp]72
8000d5a2:	19 ab 00 10 	ld.w %d11,[%sp]64
8000d5a6:	1d ff 8b fa 	j 8000cabc <_dtoa_r+0x478>
8000d5aa:	40 43       	mov.aa %a3,%a4
8000d5ac:	80 e7       	mov.d %d7,%a14
8000d5ae:	80 e5       	mov.d %d5,%a14
8000d5b0:	80 36       	mov.d %d6,%a3
8000d5b2:	80 34       	mov.d %d4,%a3
8000d5b4:	6d ff e6 d1 	call 80007980 <__adddf3>
8000d5b8:	60 2f       	mov.a %a15,%d2
8000d5ba:	60 3e       	mov.a %a14,%d3
8000d5bc:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d5c0:	80 c6       	mov.d %d6,%a12
8000d5c2:	80 d7       	mov.d %d7,%a13
8000d5c4:	80 f4       	mov.d %d4,%a15
8000d5c6:	02 35       	mov %d5,%d3
8000d5c8:	1b 12 00 b0 	addi %d11,%d2,1
8000d5cc:	6d ff d4 d3 	call 80007d74 <__gtdf2>
8000d5d0:	ff 12 37 00 	jge %d2,1,8000d63e <_dtoa_r+0xffa>
8000d5d4:	80 c6       	mov.d %d6,%a12
8000d5d6:	80 d7       	mov.d %d7,%a13
8000d5d8:	80 f4       	mov.d %d4,%a15
8000d5da:	80 e5       	mov.d %d5,%a14
8000d5dc:	6d 00 6e 16 	call 800102b8 <__eqdf2>
8000d5e0:	df 02 04 80 	jne %d2,0,8000d5e8 <_dtoa_r+0xfa4>
8000d5e4:	6f 08 2d 80 	jnz.t %d8,0,8000d63e <_dtoa_r+0xffa>
8000d5e8:	60 fd       	mov.a %a13,%d15
8000d5ea:	02 af       	mov %d15,%d10
8000d5ec:	1d ff 23 fb 	j 8000cc32 <_dtoa_r+0x5ee>
8000d5f0:	80 ea       	mov.d %d10,%a14
8000d5f2:	8b 9a 23 22 	ne %d2,%d10,57
8000d5f6:	58 04       	ld.w %d15,[%sp]16
8000d5f8:	40 2e       	mov.aa %a14,%a2
8000d5fa:	df 02 15 00 	jeq %d2,0,8000d624 <_dtoa_r+0xfe0>
8000d5fe:	c2 1a       	add %d10,1
8000d600:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d604:	02 8c       	mov %d12,%d8
8000d606:	c2 1b       	add %d11,1
8000d608:	28 0a       	st.b [%a15]0,%d10
8000d60a:	02 98       	mov %d8,%d9
8000d60c:	1d ff ff fd 	j 8000d20a <_dtoa_r+0xbc6>
8000d610:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d614:	80 ea       	mov.d %d10,%a14
8000d616:	02 8c       	mov %d12,%d8
8000d618:	58 04       	ld.w %d15,[%sp]16
8000d61a:	40 2e       	mov.aa %a14,%a2
8000d61c:	c2 1b       	add %d11,1
8000d61e:	02 98       	mov %d8,%d9
8000d620:	1d ff d6 fd 	j 8000d1cc <_dtoa_r+0xb88>
8000d624:	3b 90 03 20 	mov %d2,57
8000d628:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d62c:	02 8c       	mov %d12,%d8
8000d62e:	28 02       	st.b [%a15]0,%d2
8000d630:	40 de       	mov.aa %a14,%a13
8000d632:	c2 1b       	add %d11,1
8000d634:	02 98       	mov %d8,%d9
8000d636:	3b 90 03 20 	mov %d2,57
8000d63a:	1d ff d7 fd 	j 8000d1e8 <_dtoa_r+0xba4>
8000d63e:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000d642:	59 a2 04 10 	st.w [%sp]68,%d2
8000d646:	1d ff f1 fb 	j 8000ce28 <_dtoa_r+0x7e4>
8000d64a:	80 ea       	mov.d %d10,%a14
8000d64c:	8b 9a 03 22 	eq %d2,%d10,57
8000d650:	58 04       	ld.w %d15,[%sp]16
8000d652:	d9 fd 01 00 	lea %a13,[%a15]1
8000d656:	df 02 e7 ff 	jne %d2,0,8000d624 <_dtoa_r+0xfe0>
8000d65a:	54 a2       	ld.w %d2,[%sp]
8000d65c:	8b 1b 80 b2 	ge %d11,%d11,1
8000d660:	1b 12 03 20 	addi %d2,%d2,49
8000d664:	2b a2 40 ab 	sel %d10,%d11,%d2,%d10
8000d668:	19 ab 1c 00 	ld.w %d11,[%sp]28
8000d66c:	40 fe       	mov.aa %a14,%a15
8000d66e:	02 8c       	mov %d12,%d8
8000d670:	24 ea       	st.b [%a14+],%d10
8000d672:	c2 1b       	add %d11,1
8000d674:	02 98       	mov %d8,%d9
8000d676:	1d ff ca fd 	j 8000d20a <_dtoa_r+0xbc6>
8000d67a:	02 9a       	mov %d10,%d9
8000d67c:	1d ff 3a fd 	j 8000d0f0 <_dtoa_r+0xaac>
8000d680:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000d684:	59 ac 1c 00 	st.w [%sp]28,%d12
8000d688:	59 a2 18 00 	st.w [%sp]24,%d2
8000d68c:	1d ff c0 fa 	j 8000cc0c <_dtoa_r+0x5c8>
8000d690:	60 85       	mov.a %a5,%d8
8000d692:	60 d4       	mov.a %a4,%d13
8000d694:	fb a0 00 40 	mov %e4,10
8000d698:	6d 00 8b 00 	call 8000d7ae <__multadd>
8000d69c:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000d6a0:	59 ac 1c 00 	st.w [%sp]28,%d12
8000d6a4:	59 a2 18 00 	st.w [%sp]24,%d2
8000d6a8:	80 28       	mov.d %d8,%a2
8000d6aa:	df 0a de 7b 	jeq %d10,0,8000ce66 <_dtoa_r+0x822>
8000d6ae:	1d ff af fa 	j 8000cc0c <_dtoa_r+0x5c8>
8000d6b2:	df 02 4a ff 	jne %d2,0,8000d546 <_dtoa_r+0xf02>
8000d6b6:	6f 0a 41 ff 	jnz.t %d10,0,8000d538 <_dtoa_r+0xef4>
8000d6ba:	1d ff 46 ff 	j 8000d546 <_dtoa_r+0xf02>
8000d6be:	91 00 00 68 	movh.a %a6,32768
8000d6c2:	91 00 00 48 	movh.a %a4,32768
8000d6c6:	d9 66 b6 20 	lea %a6,[%a6]2230 <800008b6 <blanks.1+0x2a>>
8000d6ca:	a0 05       	mov.a %a5,0
8000d6cc:	3b f0 1a 40 	mov %d4,431
8000d6d0:	d9 44 87 30 	lea %a4,[%a4]2247 <800008c7 <blanks.1+0x3b>>
8000d6d4:	1d 00 fa 07 	j 8000e6c8 <__assert_func>
8000d6d8:	60 fd       	mov.a %a13,%d15
8000d6da:	80 ef       	mov.d %d15,%a14
8000d6dc:	1d ff a7 fa 	j 8000cc2a <_dtoa_r+0x5e6>
8000d6e0:	91 00 00 68 	movh.a %a6,32768
8000d6e4:	91 00 00 48 	movh.a %a4,32768
8000d6e8:	d9 66 b6 20 	lea %a6,[%a6]2230 <800008b6 <blanks.1+0x2a>>
8000d6ec:	a0 05       	mov.a %a5,0
8000d6ee:	3b f0 2e 40 	mov %d4,751
8000d6f2:	d9 44 87 30 	lea %a4,[%a4]2247 <800008c7 <blanks.1+0x3b>>
8000d6f6:	1d 00 e9 07 	j 8000e6c8 <__assert_func>

8000d6fa <_dtoa_r_end>:
	...

8000d6fc <__ascii_mbtowc>:
8000d6fc:	20 08       	sub.a %sp,8
8000d6fe:	d9 a2 04 00 	lea %a2,[%sp]4
8000d702:	80 52       	mov.d %d2,%a5
8000d704:	02 43       	mov %d3,%d4
8000d706:	80 24       	mov.d %d4,%a2
8000d708:	2b 42 40 42 	sel %d4,%d2,%d2,%d4
8000d70c:	82 02       	mov %d2,0
8000d70e:	bd 06 0b 00 	jz.a %a6,8000d724 <__ascii_mbtowc+0x28>
8000d712:	82 e2       	mov %d2,-2
8000d714:	df 03 08 00 	jeq %d3,0,8000d724 <__ascii_mbtowc+0x28>
8000d718:	60 42       	mov.a %a2,%d4
8000d71a:	14 62       	ld.bu %d2,[%a6]
8000d71c:	74 22       	st.w [%a2],%d2
8000d71e:	14 62       	ld.bu %d2,[%a6]
8000d720:	8b 02 20 22 	ne %d2,%d2,0
8000d724:	00 90       	ret 

8000d726 <_Balloc>:
8000d726:	99 42 04 10 	ld.a %a2,[%a4]68
8000d72a:	40 4c       	mov.aa %a12,%a4
8000d72c:	02 48       	mov %d8,%d4
8000d72e:	bd 02 11 00 	jz.a %a2,8000d750 <_Balloc+0x2a>
8000d732:	8f 28 00 20 	sh %d2,%d8,2
8000d736:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000d73a:	d4 32       	ld.a %a2,[%a3]
8000d73c:	bd 02 15 00 	jz.a %a2,8000d766 <_Balloc+0x40>
8000d740:	54 22       	ld.w %d2,[%a2]
8000d742:	74 32       	st.w [%a3],%d2
8000d744:	82 02       	mov %d2,0
8000d746:	59 22 10 00 	st.w [%a2]16,%d2
8000d74a:	59 22 0c 00 	st.w [%a2]12,%d2
8000d74e:	00 90       	ret 
8000d750:	3b 10 02 50 	mov %d5,33
8000d754:	82 44       	mov %d4,4
8000d756:	6d 00 e0 07 	call 8000e716 <_calloc_r>
8000d75a:	b5 c2 04 10 	st.a [%a12]68,%a2
8000d75e:	bd 02 ea ff 	jnz.a %a2,8000d732 <_Balloc+0xc>
8000d762:	a0 02       	mov.a %a2,0
8000d764:	00 90       	ret 
8000d766:	82 19       	mov %d9,1
8000d768:	0f 89 00 90 	sh %d9,%d9,%d8
8000d76c:	1b 59 00 50 	addi %d5,%d9,5
8000d770:	06 25       	sh %d5,2
8000d772:	82 14       	mov %d4,1
8000d774:	40 c4       	mov.aa %a4,%a12
8000d776:	6d 00 d0 07 	call 8000e716 <_calloc_r>
8000d77a:	bd 02 f4 7f 	jz.a %a2,8000d762 <_Balloc+0x3c>
8000d77e:	82 02       	mov %d2,0
8000d780:	59 28 04 00 	st.w [%a2]4,%d8
8000d784:	59 29 08 00 	st.w [%a2]8,%d9
8000d788:	59 22 10 00 	st.w [%a2]16,%d2
8000d78c:	59 22 0c 00 	st.w [%a2]12,%d2
8000d790:	00 90       	ret 

8000d792 <_Bfree>:
8000d792:	bd 05 0d 00 	jz.a %a5,8000d7ac <_Bfree+0x1a>
8000d796:	19 43 04 10 	ld.w %d3,[%a4]68
8000d79a:	19 52 04 00 	ld.w %d2,[%a5]4
8000d79e:	60 32       	mov.a %a2,%d3
8000d7a0:	06 22       	sh %d2,2
8000d7a2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000d7a6:	54 22       	ld.w %d2,[%a2]
8000d7a8:	74 52       	st.w [%a5],%d2
8000d7aa:	f4 25       	st.a [%a2],%a5
8000d7ac:	00 90       	ret 

8000d7ae <__multadd>:
8000d7ae:	19 59 10 00 	ld.w %d9,[%a5]16
8000d7b2:	02 58       	mov %d8,%d5
8000d7b4:	40 4d       	mov.aa %a13,%a4
8000d7b6:	40 5c       	mov.aa %a12,%a5
8000d7b8:	d9 53 14 00 	lea %a3,[%a5]20
8000d7bc:	82 05       	mov %d5,0
8000d7be:	54 36       	ld.w %d6,[%a3]
8000d7c0:	40 32       	mov.aa %a2,%a3
8000d7c2:	b7 06 10 28 	insert %d2,%d6,0,16,16
8000d7c6:	8f 06 1f 60 	sh %d6,%d6,-16
8000d7ca:	03 42 0a 28 	madd %d2,%d8,%d2,%d4
8000d7ce:	c2 15       	add %d5,1
8000d7d0:	b0 43       	add.a %a3,4
8000d7d2:	8f 02 1f 30 	sh %d3,%d2,-16
8000d7d6:	03 46 0a 33 	madd %d3,%d3,%d6,%d4
8000d7da:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000d7de:	8f 03 1f 80 	sh %d8,%d3,-16
8000d7e2:	8f 03 01 30 	sh %d3,%d3,16
8000d7e6:	42 32       	add %d2,%d3
8000d7e8:	74 22       	st.w [%a2],%d2
8000d7ea:	3f 95 ea 7f 	jlt %d5,%d9,8000d7be <__multadd+0x10>
8000d7ee:	df 08 0f 00 	jeq %d8,0,8000d80c <__multadd+0x5e>
8000d7f2:	19 c2 08 00 	ld.w %d2,[%a12]8
8000d7f6:	7f 29 0d 00 	jge %d9,%d2,8000d810 <__multadd+0x62>
8000d7fa:	1b 59 00 20 	addi %d2,%d9,5
8000d7fe:	06 22       	sh %d2,2
8000d800:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
8000d804:	c2 19       	add %d9,1
8000d806:	74 28       	st.w [%a2],%d8
8000d808:	59 c9 10 00 	st.w [%a12]16,%d9
8000d80c:	40 c2       	mov.aa %a2,%a12
8000d80e:	00 90       	ret 
8000d810:	19 c2 04 00 	ld.w %d2,[%a12]4
8000d814:	40 d4       	mov.aa %a4,%a13
8000d816:	1b 12 00 40 	addi %d4,%d2,1
8000d81a:	6d ff 86 ff 	call 8000d726 <_Balloc>
8000d81e:	40 2e       	mov.aa %a14,%a2
8000d820:	bd 02 1b 00 	jz.a %a2,8000d856 <__multadd+0xa8>
8000d824:	19 c2 10 00 	ld.w %d2,[%a12]16
8000d828:	d9 c5 0c 00 	lea %a5,[%a12]12
8000d82c:	1b 22 00 40 	addi %d4,%d2,2
8000d830:	06 24       	sh %d4,2
8000d832:	d9 24 0c 00 	lea %a4,[%a2]12
8000d836:	6d ff 9d f4 	call 8000c170 <memcpy>
8000d83a:	19 d3 04 10 	ld.w %d3,[%a13]68
8000d83e:	19 c2 04 00 	ld.w %d2,[%a12]4
8000d842:	60 32       	mov.a %a2,%d3
8000d844:	06 22       	sh %d2,2
8000d846:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000d84a:	54 22       	ld.w %d2,[%a2]
8000d84c:	74 c2       	st.w [%a12],%d2
8000d84e:	f4 2c       	st.a [%a2],%a12
8000d850:	40 ec       	mov.aa %a12,%a14
8000d852:	1d ff d4 ff 	j 8000d7fa <__multadd+0x4c>
8000d856:	91 00 00 68 	movh.a %a6,32768
8000d85a:	91 00 00 48 	movh.a %a4,32768
8000d85e:	d9 66 8c 50 	lea %a6,[%a6]2380 <8000094c <blanks.1+0xc0>>
8000d862:	a0 05       	mov.a %a5,0
8000d864:	3b a0 0b 40 	mov %d4,186
8000d868:	d9 44 9d 50 	lea %a4,[%a4]2397 <8000095d <blanks.1+0xd1>>
8000d86c:	1d 00 2e 07 	j 8000e6c8 <__assert_func>

8000d870 <__hi0bits>:
8000d870:	b7 04 10 30 	insert %d3,%d4,0,0,16
8000d874:	82 02       	mov %d2,0
8000d876:	df 03 06 80 	jne %d3,0,8000d882 <__hi0bits+0x12>
8000d87a:	8f 04 01 40 	sh %d4,%d4,16
8000d87e:	3b 00 01 20 	mov %d2,16
8000d882:	b7 04 18 30 	insert %d3,%d4,0,0,24
8000d886:	df 03 06 80 	jne %d3,0,8000d892 <__hi0bits+0x22>
8000d88a:	1b 82 00 20 	addi %d2,%d2,8
8000d88e:	8f 84 00 40 	sh %d4,%d4,8
8000d892:	b7 04 1c 30 	insert %d3,%d4,0,0,28
8000d896:	df 03 04 80 	jne %d3,0,8000d89e <__hi0bits+0x2e>
8000d89a:	c2 42       	add %d2,4
8000d89c:	06 44       	sh %d4,4
8000d89e:	b7 04 1e 30 	insert %d3,%d4,0,0,30
8000d8a2:	df 03 04 80 	jne %d3,0,8000d8aa <__hi0bits+0x3a>
8000d8a6:	c2 22       	add %d2,2
8000d8a8:	06 24       	sh %d4,2
8000d8aa:	bf 04 07 00 	jlt %d4,0,8000d8b8 <__hi0bits+0x48>
8000d8ae:	37 04 61 4f 	extr.u %d4,%d4,30,1
8000d8b2:	c2 12       	add %d2,1
8000d8b4:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d8b8:	00 90       	ret 

8000d8ba <__lo0bits>:
8000d8ba:	54 43       	ld.w %d3,[%a4]
8000d8bc:	8f 73 00 21 	and %d2,%d3,7
8000d8c0:	df 02 0b 00 	jeq %d2,0,8000d8d6 <__lo0bits+0x1c>
8000d8c4:	82 02       	mov %d2,0
8000d8c6:	6f 03 21 80 	jnz.t %d3,0,8000d908 <__lo0bits+0x4e>
8000d8ca:	6f 13 43 00 	jz.t %d3,1,8000d950 <__lo0bits+0x96>
8000d8ce:	06 f3       	sh %d3,-1
8000d8d0:	82 12       	mov %d2,1
8000d8d2:	74 43       	st.w [%a4],%d3
8000d8d4:	00 90       	ret 
8000d8d6:	b7 03 10 48 	insert %d4,%d3,0,16,16
8000d8da:	82 02       	mov %d2,0
8000d8dc:	df 04 30 00 	jeq %d4,0,8000d93c <__lo0bits+0x82>
8000d8e0:	8f f3 0f 41 	and %d4,%d3,255
8000d8e4:	df 04 23 00 	jeq %d4,0,8000d92a <__lo0bits+0x70>
8000d8e8:	8f f3 00 41 	and %d4,%d3,15
8000d8ec:	df 04 17 00 	jeq %d4,0,8000d91a <__lo0bits+0x60>
8000d8f0:	8f 33 00 41 	and %d4,%d3,3
8000d8f4:	df 04 0d 00 	jeq %d4,0,8000d90e <__lo0bits+0x54>
8000d8f8:	6f 03 09 80 	jnz.t %d3,0,8000d90a <__lo0bits+0x50>
8000d8fc:	06 f3       	sh %d3,-1
8000d8fe:	c2 12       	add %d2,1
8000d900:	df 03 05 80 	jne %d3,0,8000d90a <__lo0bits+0x50>
8000d904:	3b 00 02 20 	mov %d2,32
8000d908:	00 90       	ret 
8000d90a:	74 43       	st.w [%a4],%d3
8000d90c:	00 90       	ret 
8000d90e:	06 e3       	sh %d3,-2
8000d910:	c2 22       	add %d2,2
8000d912:	6f 03 fc ff 	jnz.t %d3,0,8000d90a <__lo0bits+0x50>
8000d916:	1d ff f3 ff 	j 8000d8fc <__lo0bits+0x42>
8000d91a:	06 c3       	sh %d3,-4
8000d91c:	8f 33 00 41 	and %d4,%d3,3
8000d920:	c2 42       	add %d2,4
8000d922:	df 04 eb ff 	jne %d4,0,8000d8f8 <__lo0bits+0x3e>
8000d926:	1d ff f4 ff 	j 8000d90e <__lo0bits+0x54>
8000d92a:	06 83       	sh %d3,-8
8000d92c:	8f f3 00 41 	and %d4,%d3,15
8000d930:	1b 82 00 20 	addi %d2,%d2,8
8000d934:	df 04 de ff 	jne %d4,0,8000d8f0 <__lo0bits+0x36>
8000d938:	1d ff f1 ff 	j 8000d91a <__lo0bits+0x60>
8000d93c:	8f 03 1f 30 	sh %d3,%d3,-16
8000d940:	8f f3 0f 41 	and %d4,%d3,255
8000d944:	3b 00 01 20 	mov %d2,16
8000d948:	df 04 d0 ff 	jne %d4,0,8000d8e8 <__lo0bits+0x2e>
8000d94c:	1d ff ef ff 	j 8000d92a <__lo0bits+0x70>
8000d950:	06 e3       	sh %d3,-2
8000d952:	82 22       	mov %d2,2
8000d954:	74 43       	st.w [%a4],%d3
8000d956:	00 90       	ret 

8000d958 <__i2b>:
8000d958:	99 43 04 10 	ld.a %a3,[%a4]68
8000d95c:	40 4c       	mov.aa %a12,%a4
8000d95e:	02 48       	mov %d8,%d4
8000d960:	bd 03 12 00 	jz.a %a3,8000d984 <__i2b+0x2c>
8000d964:	99 32 04 00 	ld.a %a2,[%a3]4
8000d968:	bd 02 25 00 	jz.a %a2,8000d9b2 <__i2b+0x5a>
8000d96c:	54 22       	ld.w %d2,[%a2]
8000d96e:	59 32 04 00 	st.w [%a3]4,%d2
8000d972:	82 02       	mov %d2,0
8000d974:	59 28 14 00 	st.w [%a2]20,%d8
8000d978:	59 22 0c 00 	st.w [%a2]12,%d2
8000d97c:	82 12       	mov %d2,1
8000d97e:	59 22 10 00 	st.w [%a2]16,%d2
8000d982:	00 90       	ret 
8000d984:	3b 10 02 50 	mov %d5,33
8000d988:	82 44       	mov %d4,4
8000d98a:	6d 00 c6 06 	call 8000e716 <_calloc_r>
8000d98e:	b5 c2 04 10 	st.a [%a12]68,%a2
8000d992:	40 23       	mov.aa %a3,%a2
8000d994:	bd 02 e8 ff 	jnz.a %a2,8000d964 <__i2b+0xc>
8000d998:	91 00 00 68 	movh.a %a6,32768
8000d99c:	91 00 00 48 	movh.a %a4,32768
8000d9a0:	d9 66 8c 50 	lea %a6,[%a6]2380 <8000094c <blanks.1+0xc0>>
8000d9a4:	a0 05       	mov.a %a5,0
8000d9a6:	3b 50 14 40 	mov %d4,325
8000d9aa:	d9 44 9d 50 	lea %a4,[%a4]2397 <8000095d <blanks.1+0xd1>>
8000d9ae:	1d 00 8d 06 	j 8000e6c8 <__assert_func>
8000d9b2:	3b c0 01 50 	mov %d5,28
8000d9b6:	82 14       	mov %d4,1
8000d9b8:	40 c4       	mov.aa %a4,%a12
8000d9ba:	6d 00 ae 06 	call 8000e716 <_calloc_r>
8000d9be:	bd 02 ed 7f 	jz.a %a2,8000d998 <__i2b+0x40>
8000d9c2:	82 12       	mov %d2,1
8000d9c4:	59 22 04 00 	st.w [%a2]4,%d2
8000d9c8:	82 22       	mov %d2,2
8000d9ca:	59 22 08 00 	st.w [%a2]8,%d2
8000d9ce:	1d ff d2 ff 	j 8000d972 <__i2b+0x1a>

8000d9d2 <__multiply>:
8000d9d2:	19 59 10 00 	ld.w %d9,[%a5]16
8000d9d6:	19 6a 10 00 	ld.w %d10,[%a6]16
8000d9da:	40 5f       	mov.aa %a15,%a5
8000d9dc:	40 6d       	mov.aa %a13,%a6
8000d9de:	3f a9 07 00 	jlt %d9,%d10,8000d9ec <__multiply+0x1a>
8000d9e2:	02 a2       	mov %d2,%d10
8000d9e4:	40 5d       	mov.aa %a13,%a5
8000d9e6:	02 9a       	mov %d10,%d9
8000d9e8:	40 6f       	mov.aa %a15,%a6
8000d9ea:	02 29       	mov %d9,%d2
8000d9ec:	19 d2 08 00 	ld.w %d2,[%a13]8
8000d9f0:	0b 9a 00 80 	add %d8,%d10,%d9
8000d9f4:	0b 82 20 41 	lt %d4,%d2,%d8
8000d9f8:	19 d2 04 00 	ld.w %d2,[%a13]4
8000d9fc:	42 24       	add %d4,%d2
8000d9fe:	6d ff 94 fe 	call 8000d726 <_Balloc>
8000da02:	bd 02 ac 00 	jz.a %a2,8000db5a <__multiply+0x188>
8000da06:	d9 2c 14 00 	lea %a12,[%a2]20
8000da0a:	8f 28 00 20 	sh %d2,%d8,2
8000da0e:	01 c2 00 76 	addsc.a %a7,%a12,%d2,0
8000da12:	80 c3       	mov.d %d3,%a12
8000da14:	80 74       	mov.d %d4,%a7
8000da16:	40 c3       	mov.aa %a3,%a12
8000da18:	82 02       	mov %d2,0
8000da1a:	7f 43 09 80 	jge.u %d3,%d4,8000da2c <__multiply+0x5a>
8000da1e:	40 34       	mov.aa %a4,%a3
8000da20:	b0 43       	add.a %a3,4
8000da22:	74 42       	st.w [%a4],%d2
8000da24:	80 33       	mov.d %d3,%a3
8000da26:	80 74       	mov.d %d4,%a7
8000da28:	3f 43 fb ff 	jlt.u %d3,%d4,8000da1e <__multiply+0x4c>
8000da2c:	d9 de 14 00 	lea %a14,[%a13]20
8000da30:	80 e2       	mov.d %d2,%a14
8000da32:	d9 f5 14 00 	lea %a5,[%a15]20
8000da36:	8f 2a 00 50 	sh %d5,%d10,2
8000da3a:	42 25       	add %d5,%d2
8000da3c:	8f 29 00 10 	sh %d1,%d9,2
8000da40:	80 52       	mov.d %d2,%a5
8000da42:	42 21       	add %d1,%d2
8000da44:	80 d2       	mov.d %d2,%a13
8000da46:	8b b2 1e 21 	rsub %d2,%d2,-21
8000da4a:	42 52       	add %d2,%d5
8000da4c:	8f 32 c0 21 	andn %d2,%d2,3
8000da50:	1b 42 00 90 	addi %d9,%d2,4
8000da54:	80 d2       	mov.d %d2,%a13
8000da56:	1b 52 01 20 	addi %d2,%d2,21
8000da5a:	0b 25 50 21 	ge.u %d2,%d5,%d2
8000da5e:	ab 49 80 92 	sel %d9,%d2,%d9,4
8000da62:	80 52       	mov.d %d2,%a5
8000da64:	3f 12 0e 80 	jlt.u %d2,%d1,8000da80 <__multiply+0xae>
8000da68:	1d 00 6a 00 	j 8000db3c <__multiply+0x16a>
8000da6c:	8f 03 1f 20 	sh %d2,%d3,-16
8000da70:	d9 c6 04 00 	lea %a6,[%a12]4
8000da74:	df 02 39 80 	jne %d2,0,8000dae6 <__multiply+0x114>
8000da78:	80 52       	mov.d %d2,%a5
8000da7a:	40 6c       	mov.aa %a12,%a6
8000da7c:	7f 12 60 80 	jge.u %d2,%d1,8000db3c <__multiply+0x16a>
8000da80:	40 53       	mov.aa %a3,%a5
8000da82:	54 33       	ld.w %d3,[%a3]
8000da84:	b0 45       	add.a %a5,4
8000da86:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000da8a:	df 02 f1 7f 	jeq %d2,0,8000da6c <__multiply+0x9a>
8000da8e:	40 e4       	mov.aa %a4,%a14
8000da90:	40 c3       	mov.aa %a3,%a12
8000da92:	82 06       	mov %d6,0
8000da94:	40 46       	mov.aa %a6,%a4
8000da96:	54 64       	ld.w %d4,[%a6]
8000da98:	54 30       	ld.w %d0,[%a3]
8000da9a:	b7 04 10 78 	insert %d7,%d4,0,16,16
8000da9e:	b7 00 10 38 	insert %d3,%d0,0,16,16
8000daa2:	8f 00 1f 00 	sh %d0,%d0,-16
8000daa6:	03 27 0a 33 	madd %d3,%d3,%d7,%d2
8000daaa:	40 36       	mov.aa %a6,%a3
8000daac:	b0 44       	add.a %a4,4
8000daae:	42 63       	add %d3,%d6
8000dab0:	8f 04 1f 60 	sh %d6,%d4,-16
8000dab4:	03 26 0a 60 	madd %d6,%d0,%d6,%d2
8000dab8:	8f 03 1f 40 	sh %d4,%d3,-16
8000dabc:	b0 43       	add.a %a3,4
8000dabe:	42 64       	add %d4,%d6
8000dac0:	37 43 10 38 	insert %d3,%d3,%d4,16,16
8000dac4:	8f 04 1f 60 	sh %d6,%d4,-16
8000dac8:	74 63       	st.w [%a6],%d3
8000daca:	80 43       	mov.d %d3,%a4
8000dacc:	3f 53 e4 ff 	jlt.u %d3,%d5,8000da94 <__multiply+0xc2>
8000dad0:	01 c9 00 36 	addsc.a %a3,%a12,%d9,0
8000dad4:	d9 c6 04 00 	lea %a6,[%a12]4
8000dad8:	74 36       	st.w [%a3],%d6
8000dada:	19 53 fc ff 	ld.w %d3,[%a5]-4
8000dade:	8f 03 1f 20 	sh %d2,%d3,-16
8000dae2:	df 02 cb 7f 	jeq %d2,0,8000da78 <__multiply+0xa6>
8000dae6:	54 c3       	ld.w %d3,[%a12]
8000dae8:	40 e3       	mov.aa %a3,%a14
8000daea:	40 64       	mov.aa %a4,%a6
8000daec:	02 34       	mov %d4,%d3
8000daee:	82 07       	mov %d7,0
8000daf0:	b9 36 00 00 	ld.hu %d6,[%a3]0
8000daf4:	8f 04 1f 40 	sh %d4,%d4,-16
8000daf8:	03 26 0a 64 	madd %d6,%d4,%d6,%d2
8000dafc:	40 4d       	mov.aa %a13,%a4
8000dafe:	b0 44       	add.a %a4,4
8000db00:	42 76       	add %d6,%d7
8000db02:	37 63 10 38 	insert %d3,%d3,%d6,16,16
8000db06:	59 43 f8 ff 	st.w [%a4]-8,%d3
8000db0a:	54 d4       	ld.w %d4,[%a13]
8000db0c:	40 3d       	mov.aa %a13,%a3
8000db0e:	54 d7       	ld.w %d7,[%a13]
8000db10:	b7 04 10 38 	insert %d3,%d4,0,16,16
8000db14:	8f 07 1f 70 	sh %d7,%d7,-16
8000db18:	03 27 0a 73 	madd %d7,%d3,%d7,%d2
8000db1c:	b0 43       	add.a %a3,4
8000db1e:	8f 06 1f 30 	sh %d3,%d6,-16
8000db22:	42 73       	add %d3,%d7
8000db24:	80 36       	mov.d %d6,%a3
8000db26:	8f 03 1f 70 	sh %d7,%d3,-16
8000db2a:	3f 56 e3 ff 	jlt.u %d6,%d5,8000daf0 <__multiply+0x11e>
8000db2e:	01 c9 00 c6 	addsc.a %a12,%a12,%d9,0
8000db32:	80 52       	mov.d %d2,%a5
8000db34:	74 c3       	st.w [%a12],%d3
8000db36:	40 6c       	mov.aa %a12,%a6
8000db38:	3f 12 a4 ff 	jlt.u %d2,%d1,8000da80 <__multiply+0xae>
8000db3c:	ff 18 07 00 	jge %d8,1,8000db4a <__multiply+0x178>
8000db40:	1d 00 0a 00 	j 8000db54 <__multiply+0x182>
8000db44:	c2 f8       	add %d8,-1
8000db46:	df 08 07 00 	jeq %d8,0,8000db54 <__multiply+0x182>
8000db4a:	19 72 fc ff 	ld.w %d2,[%a7]-4
8000db4e:	b0 c7       	add.a %a7,-4
8000db50:	df 02 fa 7f 	jeq %d2,0,8000db44 <__multiply+0x172>
8000db54:	59 28 10 00 	st.w [%a2]16,%d8
8000db58:	00 90       	ret 
8000db5a:	91 00 00 68 	movh.a %a6,32768
8000db5e:	91 00 00 48 	movh.a %a4,32768
8000db62:	d9 66 8c 50 	lea %a6,[%a6]2380 <8000094c <blanks.1+0xc0>>
8000db66:	a0 05       	mov.a %a5,0
8000db68:	3b 20 16 40 	mov %d4,354
8000db6c:	d9 44 9d 50 	lea %a4,[%a4]2397 <8000095d <blanks.1+0xd1>>
8000db70:	1d 00 ac 05 	j 8000e6c8 <__assert_func>

8000db74 <__pow5mult>:
8000db74:	8f 34 00 21 	and %d2,%d4,3
8000db78:	40 4e       	mov.aa %a14,%a4
8000db7a:	40 5d       	mov.aa %a13,%a5
8000db7c:	02 48       	mov %d8,%d4
8000db7e:	df 02 3a 80 	jne %d2,0,8000dbf2 <__pow5mult+0x7e>
8000db82:	86 e8       	sha %d8,-2
8000db84:	df 08 28 00 	jeq %d8,0,8000dbd4 <__pow5mult+0x60>
8000db88:	99 ec 00 10 	ld.a %a12,[%a14]64 <80000040 <__IF_CONST>>
8000db8c:	bd 0c 42 00 	jz.a %a12,8000dc10 <__pow5mult+0x9c>
8000db90:	82 09       	mov %d9,0
8000db92:	6f 08 0b 80 	jnz.t %d8,0,8000dba8 <__pow5mult+0x34>
8000db96:	86 f8       	sha %d8,-1
8000db98:	df 08 1e 00 	jeq %d8,0,8000dbd4 <__pow5mult+0x60>
8000db9c:	d4 c2       	ld.a %a2,[%a12]
8000db9e:	bd 02 1d 00 	jz.a %a2,8000dbd8 <__pow5mult+0x64>
8000dba2:	40 2c       	mov.aa %a12,%a2
8000dba4:	6f 08 f9 7f 	jz.t %d8,0,8000db96 <__pow5mult+0x22>
8000dba8:	40 c6       	mov.aa %a6,%a12
8000dbaa:	40 d5       	mov.aa %a5,%a13
8000dbac:	40 e4       	mov.aa %a4,%a14
8000dbae:	6d ff 12 ff 	call 8000d9d2 <__multiply>
8000dbb2:	40 23       	mov.aa %a3,%a2
8000dbb4:	bd 0d 1c 00 	jz.a %a13,8000dbec <__pow5mult+0x78>
8000dbb8:	19 d2 04 00 	ld.w %d2,[%a13]4
8000dbbc:	99 e4 04 10 	ld.a %a4,[%a14]68 <80000044 <__IF_CONST+0x4>>
8000dbc0:	06 22       	sh %d2,2
8000dbc2:	60 22       	mov.a %a2,%d2
8000dbc4:	86 f8       	sha %d8,-1
8000dbc6:	30 42       	add.a %a2,%a4
8000dbc8:	54 22       	ld.w %d2,[%a2]
8000dbca:	74 d2       	st.w [%a13],%d2
8000dbcc:	f4 2d       	st.a [%a2],%a13
8000dbce:	40 3d       	mov.aa %a13,%a3
8000dbd0:	df 08 e6 ff 	jne %d8,0,8000db9c <__pow5mult+0x28>
8000dbd4:	40 d2       	mov.aa %a2,%a13
8000dbd6:	00 90       	ret 
8000dbd8:	40 c6       	mov.aa %a6,%a12
8000dbda:	40 c5       	mov.aa %a5,%a12
8000dbdc:	40 e4       	mov.aa %a4,%a14
8000dbde:	6d ff fa fe 	call 8000d9d2 <__multiply>
8000dbe2:	f4 c2       	st.a [%a12],%a2
8000dbe4:	74 29       	st.w [%a2],%d9
8000dbe6:	40 2c       	mov.aa %a12,%a2
8000dbe8:	1d ff de ff 	j 8000dba4 <__pow5mult+0x30>
8000dbec:	40 2d       	mov.aa %a13,%a2
8000dbee:	1d ff d4 ff 	j 8000db96 <__pow5mult+0x22>
8000dbf2:	c2 f2       	add %d2,-1
8000dbf4:	91 00 00 28 	movh.a %a2,32768
8000dbf8:	06 22       	sh %d2,2
8000dbfa:	d9 22 a0 70 	lea %a2,[%a2]2528 <800009e0 <p05.0>>
8000dbfe:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000dc02:	82 05       	mov %d5,0
8000dc04:	54 24       	ld.w %d4,[%a2]
8000dc06:	6d ff d4 fd 	call 8000d7ae <__multadd>
8000dc0a:	40 2d       	mov.aa %a13,%a2
8000dc0c:	1d ff bb ff 	j 8000db82 <__pow5mult+0xe>
8000dc10:	82 14       	mov %d4,1
8000dc12:	40 e4       	mov.aa %a4,%a14
8000dc14:	6d ff 89 fd 	call 8000d726 <_Balloc>
8000dc18:	40 2c       	mov.aa %a12,%a2
8000dc1a:	bd 02 10 00 	jz.a %a2,8000dc3a <__pow5mult+0xc6>
8000dc1e:	3b 10 27 20 	mov %d2,625
8000dc22:	82 09       	mov %d9,0
8000dc24:	59 22 14 00 	st.w [%a2]20,%d2
8000dc28:	82 12       	mov %d2,1
8000dc2a:	59 22 10 00 	st.w [%a2]16,%d2
8000dc2e:	82 02       	mov %d2,0
8000dc30:	b5 e2 00 10 	st.a [%a14]64,%a2
8000dc34:	74 22       	st.w [%a2],%d2
8000dc36:	1d ff ae ff 	j 8000db92 <__pow5mult+0x1e>
8000dc3a:	91 00 00 68 	movh.a %a6,32768
8000dc3e:	91 00 00 48 	movh.a %a4,32768
8000dc42:	d9 66 8c 50 	lea %a6,[%a6]2380 <8000094c <blanks.1+0xc0>>
8000dc46:	a0 05       	mov.a %a5,0
8000dc48:	3b 50 14 40 	mov %d4,325
8000dc4c:	d9 44 9d 50 	lea %a4,[%a4]2397 <8000095d <blanks.1+0xd1>>
8000dc50:	1d 00 3c 05 	j 8000e6c8 <__assert_func>

8000dc54 <__lshift>:
8000dc54:	19 52 10 00 	ld.w %d2,[%a5]16
8000dc58:	8f b4 3f a0 	sha %d10,%d4,-5
8000dc5c:	0b 2a 00 90 	add %d9,%d10,%d2
8000dc60:	19 52 08 00 	ld.w %d2,[%a5]8
8000dc64:	1b 19 00 80 	addi %d8,%d9,1
8000dc68:	02 4b       	mov %d11,%d4
8000dc6a:	40 4d       	mov.aa %a13,%a4
8000dc6c:	19 54 04 00 	ld.w %d4,[%a5]4
8000dc70:	40 5c       	mov.aa %a12,%a5
8000dc72:	7f 82 06 00 	jge %d2,%d8,8000dc7e <__lshift+0x2a>
8000dc76:	06 12       	sh %d2,1
8000dc78:	c2 14       	add %d4,1
8000dc7a:	3f 82 fe 7f 	jlt %d2,%d8,8000dc76 <__lshift+0x22>
8000dc7e:	40 d4       	mov.aa %a4,%a13
8000dc80:	6d ff 53 fd 	call 8000d726 <_Balloc>
8000dc84:	bd 02 62 00 	jz.a %a2,8000dd48 <__lshift+0xf4>
8000dc88:	80 22       	mov.d %d2,%a2
8000dc8a:	1b 42 01 70 	addi %d7,%d2,20
8000dc8e:	bf 1a 11 00 	jlt %d10,1,8000dcb0 <__lshift+0x5c>
8000dc92:	1b 5a 00 30 	addi %d3,%d10,5
8000dc96:	06 23       	sh %d3,2
8000dc98:	01 23 00 56 	addsc.a %a5,%a2,%d3,0
8000dc9c:	60 73       	mov.a %a3,%d7
8000dc9e:	82 02       	mov %d2,0
8000dca0:	40 34       	mov.aa %a4,%a3
8000dca2:	74 42       	st.w [%a4],%d2
8000dca4:	b0 43       	add.a %a3,4
8000dca6:	7d 53 fd ff 	jne.a %a3,%a5,8000dca0 <__lshift+0x4c>
8000dcaa:	1b c3 fe 3f 	addi %d3,%d3,-20
8000dcae:	42 37       	add %d7,%d3
8000dcb0:	19 c2 10 00 	ld.w %d2,[%a12]16
8000dcb4:	d9 c3 14 00 	lea %a3,[%a12]20
8000dcb8:	06 22       	sh %d2,2
8000dcba:	80 33       	mov.d %d3,%a3
8000dcbc:	8f fb 01 b1 	and %d11,%d11,31
8000dcc0:	42 32       	add %d2,%d3
8000dcc2:	df 0b 37 00 	jeq %d11,0,8000dd30 <__lshift+0xdc>
8000dcc6:	60 75       	mov.a %a5,%d7
8000dcc8:	8b 0b 02 61 	rsub %d6,%d11,32
8000dccc:	82 03       	mov %d3,0
8000dcce:	54 35       	ld.w %d5,[%a3]
8000dcd0:	40 54       	mov.aa %a4,%a5
8000dcd2:	0f b5 00 50 	sh %d5,%d5,%d11
8000dcd6:	a6 53       	or %d3,%d5
8000dcd8:	b0 45       	add.a %a5,4
8000dcda:	74 43       	st.w [%a4],%d3
8000dcdc:	40 34       	mov.aa %a4,%a3
8000dcde:	54 45       	ld.w %d5,[%a4]
8000dce0:	b0 43       	add.a %a3,4
8000dce2:	8b 06 00 31 	rsub %d3,%d6,0
8000dce6:	80 34       	mov.d %d4,%a3
8000dce8:	0f 35 00 30 	sh %d3,%d5,%d3
8000dcec:	3f 24 f1 ff 	jlt.u %d4,%d2,8000dcce <__lshift+0x7a>
8000dcf0:	80 c4       	mov.d %d4,%a12
8000dcf2:	d9 c3 15 00 	lea %a3,[%a12]21
8000dcf6:	8b b4 1e 41 	rsub %d4,%d4,-21
8000dcfa:	42 24       	add %d4,%d2
8000dcfc:	80 35       	mov.d %d5,%a3
8000dcfe:	8f 34 c0 41 	andn %d4,%d4,3
8000dd02:	0b 52 50 21 	ge.u %d2,%d2,%d5
8000dd06:	2b 47 00 22 	cadd %d2,%d2,%d7,%d4
8000dd0a:	60 23       	mov.a %a3,%d2
8000dd0c:	2b 89 50 93 	seln %d9,%d3,%d9,%d8
8000dd10:	59 33 04 00 	st.w [%a3]4,%d3
8000dd14:	19 d3 04 10 	ld.w %d3,[%a13]68 <80000044 <__IF_CONST+0x4>>
8000dd18:	19 c2 04 00 	ld.w %d2,[%a12]4 <80000044 <__IF_CONST+0x4>>
8000dd1c:	60 33       	mov.a %a3,%d3
8000dd1e:	06 22       	sh %d2,2
8000dd20:	01 32 00 36 	addsc.a %a3,%a3,%d2,0
8000dd24:	59 29 10 00 	st.w [%a2]16,%d9
8000dd28:	54 32       	ld.w %d2,[%a3]
8000dd2a:	74 c2       	st.w [%a12],%d2
8000dd2c:	f4 3c       	st.a [%a3],%a12
8000dd2e:	00 90       	ret 
8000dd30:	60 75       	mov.a %a5,%d7
8000dd32:	40 34       	mov.aa %a4,%a3
8000dd34:	54 43       	ld.w %d3,[%a4]
8000dd36:	b0 43       	add.a %a3,4
8000dd38:	40 54       	mov.aa %a4,%a5
8000dd3a:	74 43       	st.w [%a4],%d3
8000dd3c:	80 33       	mov.d %d3,%a3
8000dd3e:	b0 45       	add.a %a5,4
8000dd40:	3f 23 f9 ff 	jlt.u %d3,%d2,8000dd32 <__lshift+0xde>
8000dd44:	1d ff e8 ff 	j 8000dd14 <__lshift+0xc0>
8000dd48:	91 00 00 68 	movh.a %a6,32768
8000dd4c:	91 00 00 48 	movh.a %a4,32768
8000dd50:	d9 66 8c 50 	lea %a6,[%a6]2380 <8000094c <blanks.1+0xc0>>
8000dd54:	a0 05       	mov.a %a5,0
8000dd56:	3b e0 1d 40 	mov %d4,478
8000dd5a:	d9 44 9d 50 	lea %a4,[%a4]2397 <8000095d <blanks.1+0xd1>>
8000dd5e:	1d 00 b5 04 	j 8000e6c8 <__assert_func>

8000dd62 <__mcmp>:
8000dd62:	19 44 10 00 	ld.w %d4,[%a4]16 <80000010 <BootModeHeader_0+0x10>>
8000dd66:	19 53 10 00 	ld.w %d3,[%a5]16 <80000010 <BootModeHeader_0+0x10>>
8000dd6a:	0b 34 80 20 	sub %d2,%d4,%d3
8000dd6e:	5f 34 1f 80 	jne %d4,%d3,8000ddac <__mcmp+0x4a>
8000dd72:	06 23       	sh %d3,2
8000dd74:	80 44       	mov.d %d4,%a4
8000dd76:	60 34       	mov.a %a4,%d3
8000dd78:	1b 44 01 50 	addi %d5,%d4,20
8000dd7c:	d9 53 14 00 	lea %a3,[%a5]20
8000dd80:	01 45 00 26 	addsc.a %a2,%a4,%d5,0
8000dd84:	30 43       	add.a %a3,%a4
8000dd86:	1d 00 05 00 	j 8000dd90 <__mcmp+0x2e>
8000dd8a:	80 23       	mov.d %d3,%a2
8000dd8c:	7f 35 10 80 	jge.u %d5,%d3,8000ddac <__mcmp+0x4a>
8000dd90:	19 24 fc ff 	ld.w %d4,[%a2]-4
8000dd94:	19 33 fc ff 	ld.w %d3,[%a3]-4
8000dd98:	b0 c2       	add.a %a2,-4
8000dd9a:	b0 c3       	add.a %a3,-4
8000dd9c:	5f 34 f7 7f 	jeq %d4,%d3,8000dd8a <__mcmp+0x28>
8000dda0:	0b 34 30 31 	lt.u %d3,%d4,%d3
8000dda4:	82 f2       	mov %d2,-1
8000dda6:	ab 12 80 23 	sel %d2,%d3,%d2,1
8000ddaa:	00 90       	ret 
8000ddac:	00 90       	ret 

8000ddae <__mdiff>:
8000ddae:	19 53 10 00 	ld.w %d3,[%a5]16
8000ddb2:	19 62 10 00 	ld.w %d2,[%a6]16
8000ddb6:	40 5c       	mov.aa %a12,%a5
8000ddb8:	40 6d       	mov.aa %a13,%a6
8000ddba:	0b 23 80 80 	sub %d8,%d3,%d2
8000ddbe:	5f 23 9f 80 	jne %d3,%d2,8000defc <__mdiff+0x14e>
8000ddc2:	06 22       	sh %d2,2
8000ddc4:	60 23       	mov.a %a3,%d2
8000ddc6:	80 53       	mov.d %d3,%a5
8000ddc8:	1b 43 01 40 	addi %d4,%d3,20
8000ddcc:	d9 65 14 00 	lea %a5,[%a6]20
8000ddd0:	01 34 00 26 	addsc.a %a2,%a3,%d4,0
8000ddd4:	30 53       	add.a %a3,%a5
8000ddd6:	1d 00 05 00 	j 8000dde0 <__mdiff+0x32>
8000ddda:	80 22       	mov.d %d2,%a2
8000dddc:	7f 24 95 80 	jge.u %d4,%d2,8000df06 <__mdiff+0x158>
8000dde0:	19 23 fc ff 	ld.w %d3,[%a2]-4
8000dde4:	19 32 fc ff 	ld.w %d2,[%a3]-4
8000dde8:	b0 c2       	add.a %a2,-4
8000ddea:	b0 c3       	add.a %a3,-4
8000ddec:	5f 23 f7 7f 	jeq %d3,%d2,8000ddda <__mdiff+0x2c>
8000ddf0:	3f 23 80 80 	jlt.u %d3,%d2,8000def0 <__mdiff+0x142>
8000ddf4:	19 c4 04 00 	ld.w %d4,[%a12]4
8000ddf8:	6d ff 97 fc 	call 8000d726 <_Balloc>
8000ddfc:	bd 02 91 00 	jz.a %a2,8000df1e <__mdiff+0x170>
8000de00:	80 c2       	mov.d %d2,%a12
8000de02:	19 c1 10 00 	ld.w %d1,[%a12]16
8000de06:	59 28 0c 00 	st.w [%a2]12,%d8
8000de0a:	1b 42 01 80 	addi %d8,%d2,20
8000de0e:	19 d2 10 00 	ld.w %d2,[%a13]16
8000de12:	d9 d3 14 00 	lea %a3,[%a13]20
8000de16:	80 33       	mov.d %d3,%a3
8000de18:	8f 21 00 70 	sh %d7,%d1,2
8000de1c:	06 22       	sh %d2,2
8000de1e:	d9 25 14 00 	lea %a5,[%a2]20
8000de22:	60 87       	mov.a %a7,%d8
8000de24:	0b 23 00 60 	add %d6,%d3,%d2
8000de28:	42 87       	add %d7,%d8
8000de2a:	40 54       	mov.aa %a4,%a5
8000de2c:	82 03       	mov %d3,0
8000de2e:	40 76       	mov.aa %a6,%a7
8000de30:	54 65       	ld.w %d5,[%a6]
8000de32:	40 36       	mov.aa %a6,%a3
8000de34:	54 64       	ld.w %d4,[%a6]
8000de36:	b7 05 10 08 	insert %d0,%d5,0,16,16
8000de3a:	b7 04 10 28 	insert %d2,%d4,0,16,16
8000de3e:	8f 05 1f 50 	sh %d5,%d5,-16
8000de42:	0b 20 80 20 	sub %d2,%d0,%d2
8000de46:	42 32       	add %d2,%d3
8000de48:	8f 04 1f 40 	sh %d4,%d4,-16
8000de4c:	8f 02 3f 30 	sha %d3,%d2,-16
8000de50:	0b 45 80 40 	sub %d4,%d5,%d4
8000de54:	42 34       	add %d4,%d3
8000de56:	37 42 10 28 	insert %d2,%d2,%d4,16,16
8000de5a:	40 46       	mov.aa %a6,%a4
8000de5c:	b0 43       	add.a %a3,4
8000de5e:	8f 04 3f 30 	sha %d3,%d4,-16
8000de62:	74 62       	st.w [%a6],%d2
8000de64:	80 34       	mov.d %d4,%a3
8000de66:	b0 47       	add.a %a7,4
8000de68:	b0 44       	add.a %a4,4
8000de6a:	3f 64 e2 ff 	jlt.u %d4,%d6,8000de2e <__mdiff+0x80>
8000de6e:	80 d4       	mov.d %d4,%a13
8000de70:	8b b4 1e 51 	rsub %d5,%d4,-21
8000de74:	42 65       	add %d5,%d6
8000de76:	1b 54 01 00 	addi %d0,%d4,21
8000de7a:	0b 06 50 61 	ge.u %d6,%d6,%d0
8000de7e:	8f 35 c0 41 	andn %d4,%d5,3
8000de82:	ab 04 80 46 	sel %d4,%d6,%d4,0
8000de86:	01 54 00 36 	addsc.a %a3,%a5,%d4,0
8000de8a:	8f 35 c0 41 	andn %d4,%d5,3
8000de8e:	c2 44       	add %d4,4
8000de90:	ab 44 80 46 	sel %d4,%d6,%d4,4
8000de94:	42 48       	add %d8,%d4
8000de96:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
8000de9a:	7f 78 20 80 	jge.u %d8,%d7,8000deda <__mdiff+0x12c>
8000de9e:	60 83       	mov.a %a3,%d8
8000dea0:	40 54       	mov.aa %a4,%a5
8000dea2:	40 36       	mov.aa %a6,%a3
8000dea4:	54 64       	ld.w %d4,[%a6]
8000dea6:	b0 43       	add.a %a3,4
8000dea8:	b7 04 10 28 	insert %d2,%d4,0,16,16
8000deac:	8f 04 1f 40 	sh %d4,%d4,-16
8000deb0:	42 32       	add %d2,%d3
8000deb2:	8f 02 3f 30 	sha %d3,%d2,-16
8000deb6:	42 34       	add %d4,%d3
8000deb8:	37 42 10 28 	insert %d2,%d2,%d4,16,16
8000debc:	40 46       	mov.aa %a6,%a4
8000debe:	8f 04 3f 30 	sha %d3,%d4,-16
8000dec2:	80 34       	mov.d %d4,%a3
8000dec4:	74 62       	st.w [%a6],%d2
8000dec6:	b0 44       	add.a %a4,4
8000dec8:	3f 74 ed ff 	jlt.u %d4,%d7,8000dea2 <__mdiff+0xf4>
8000decc:	1b f7 ff 3f 	addi %d3,%d7,-1
8000ded0:	a2 83       	sub %d3,%d8
8000ded2:	8f 33 c0 31 	andn %d3,%d3,3
8000ded6:	01 53 00 36 	addsc.a %a3,%a5,%d3,0
8000deda:	df 02 08 80 	jne %d2,0,8000deea <__mdiff+0x13c>
8000dede:	19 32 fc ff 	ld.w %d2,[%a3]-4
8000dee2:	b0 c3       	add.a %a3,-4
8000dee4:	c2 f1       	add %d1,-1
8000dee6:	df 02 fc 7f 	jeq %d2,0,8000dede <__mdiff+0x130>
8000deea:	59 21 10 00 	st.w [%a2]16,%d1
8000deee:	00 90       	ret 
8000def0:	40 c2       	mov.aa %a2,%a12
8000def2:	82 18       	mov %d8,1
8000def4:	40 dc       	mov.aa %a12,%a13
8000def6:	40 2d       	mov.aa %a13,%a2
8000def8:	1d ff 7e ff 	j 8000ddf4 <__mdiff+0x46>
8000defc:	bf 08 fa 7f 	jlt %d8,0,8000def0 <__mdiff+0x142>
8000df00:	82 08       	mov %d8,0
8000df02:	1d ff 79 ff 	j 8000ddf4 <__mdiff+0x46>
8000df06:	82 04       	mov %d4,0
8000df08:	6d ff 0f fc 	call 8000d726 <_Balloc>
8000df0c:	bd 02 16 00 	jz.a %a2,8000df38 <__mdiff+0x18a>
8000df10:	82 12       	mov %d2,1
8000df12:	59 22 10 00 	st.w [%a2]16,%d2
8000df16:	82 02       	mov %d2,0
8000df18:	59 22 14 00 	st.w [%a2]20,%d2
8000df1c:	00 90       	ret 
8000df1e:	91 00 00 68 	movh.a %a6,32768
8000df22:	91 00 00 48 	movh.a %a4,32768
8000df26:	d9 66 8c 50 	lea %a6,[%a6]2380 <8000094c <blanks.1+0xc0>>
8000df2a:	a0 05       	mov.a %a5,0
8000df2c:	3b 50 24 40 	mov %d4,581
8000df30:	d9 44 9d 50 	lea %a4,[%a4]2397 <8000095d <blanks.1+0xd1>>
8000df34:	1d 00 ca 03 	j 8000e6c8 <__assert_func>
8000df38:	91 00 00 68 	movh.a %a6,32768
8000df3c:	91 00 00 48 	movh.a %a4,32768
8000df40:	d9 66 8c 50 	lea %a6,[%a6]2380 <8000094c <blanks.1+0xc0>>
8000df44:	a0 05       	mov.a %a5,0
8000df46:	3b 70 23 40 	mov %d4,567
8000df4a:	d9 44 9d 50 	lea %a4,[%a4]2397 <8000095d <blanks.1+0xd1>>
8000df4e:	1d 00 bd 03 	j 8000e6c8 <__assert_func>

8000df52 <__d2b>:
8000df52:	20 08       	sub.a %sp,8
8000df54:	02 4a       	mov %d10,%d4
8000df56:	40 5e       	mov.aa %a14,%a5
8000df58:	82 14       	mov %d4,1
8000df5a:	02 59       	mov %d9,%d5
8000df5c:	40 6d       	mov.aa %a13,%a6
8000df5e:	6d ff e4 fb 	call 8000d726 <_Balloc>
8000df62:	40 2c       	mov.aa %a12,%a2
8000df64:	bd 02 5a 00 	jz.a %a2,8000e018 <__d2b+0xc6>
8000df68:	37 09 6b 8a 	extr.u %d8,%d9,20,11
8000df6c:	8b 08 20 22 	ne %d2,%d8,0
8000df70:	37 29 0c 2a 	insert %d2,%d9,%d2,20,12
8000df74:	59 a2 04 00 	st.w [%sp]4,%d2
8000df78:	df 0a 1a 80 	jne %d10,0,8000dfac <__d2b+0x5a>
8000df7c:	d9 a4 04 00 	lea %a4,[%sp]4
8000df80:	82 19       	mov %d9,1
8000df82:	6d ff 9c fc 	call 8000d8ba <__lo0bits>
8000df86:	19 a3 04 00 	ld.w %d3,[%sp]4
8000df8a:	59 c3 14 00 	st.w [%a12]20,%d3
8000df8e:	59 c9 10 00 	st.w [%a12]16,%d9
8000df92:	1b 02 02 20 	addi %d2,%d2,32
8000df96:	df 08 2b 00 	jeq %d8,0,8000dfec <__d2b+0x9a>
8000df9a:	1b d8 bc 3f 	addi %d3,%d8,-1075
8000df9e:	42 23       	add %d3,%d2
8000dfa0:	8b 52 03 21 	rsub %d2,%d2,53
8000dfa4:	40 c2       	mov.aa %a2,%a12
8000dfa6:	74 e3       	st.w [%a14],%d3
8000dfa8:	74 d2       	st.w [%a13],%d2
8000dfaa:	00 90       	ret 
8000dfac:	40 a4       	mov.aa %a4,%sp
8000dfae:	74 aa       	st.w [%sp],%d10
8000dfb0:	6d ff 85 fc 	call 8000d8ba <__lo0bits>
8000dfb4:	19 a9 04 00 	ld.w %d9,[%sp]4
8000dfb8:	df 02 2b 00 	jeq %d2,0,8000e00e <__d2b+0xbc>
8000dfbc:	54 a5       	ld.w %d5,[%sp]
8000dfbe:	8b 02 02 41 	rsub %d4,%d2,32
8000dfc2:	0f 49 00 40 	sh %d4,%d9,%d4
8000dfc6:	02 93       	mov %d3,%d9
8000dfc8:	8b 02 00 91 	rsub %d9,%d2,0
8000dfcc:	a6 54       	or %d4,%d5
8000dfce:	0f 93 00 90 	sh %d9,%d3,%d9
8000dfd2:	59 c4 14 00 	st.w [%a12]20,%d4
8000dfd6:	59 a9 04 00 	st.w [%sp]4,%d9
8000dfda:	59 c9 18 00 	st.w [%a12]24,%d9
8000dfde:	8b 09 20 92 	ne %d9,%d9,0
8000dfe2:	c2 19       	add %d9,1
8000dfe4:	59 c9 10 00 	st.w [%a12]16,%d9
8000dfe8:	df 08 d9 ff 	jne %d8,0,8000df9a <__d2b+0x48>
8000dfec:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000dff0:	74 e2       	st.w [%a14],%d2
8000dff2:	8f 29 00 20 	sh %d2,%d9,2
8000dff6:	01 c2 00 26 	addsc.a %a2,%a12,%d2,0
8000dffa:	06 59       	sh %d9,5
8000dffc:	19 24 10 00 	ld.w %d4,[%a2]16
8000e000:	6d ff 38 fc 	call 8000d870 <__hi0bits>
8000e004:	0b 29 80 20 	sub %d2,%d9,%d2
8000e008:	40 c2       	mov.aa %a2,%a12
8000e00a:	74 d2       	st.w [%a13],%d2
8000e00c:	00 90       	ret 
8000e00e:	54 a3       	ld.w %d3,[%sp]
8000e010:	59 c3 14 00 	st.w [%a12]20,%d3
8000e014:	1d ff e3 ff 	j 8000dfda <__d2b+0x88>
8000e018:	91 00 00 68 	movh.a %a6,32768
8000e01c:	91 00 00 48 	movh.a %a4,32768
8000e020:	d9 66 8c 50 	lea %a6,[%a6]2380 <8000094c <blanks.1+0xc0>>
8000e024:	a0 05       	mov.a %a5,0
8000e026:	3b f0 30 40 	mov %d4,783
8000e02a:	d9 44 9d 50 	lea %a4,[%a4]2397 <8000095d <blanks.1+0xd1>>
8000e02e:	1d 00 4d 03 	j 8000e6c8 <__assert_func>

8000e032 <_realloc_r>:
8000e032:	40 4e       	mov.aa %a14,%a4
8000e034:	40 5c       	mov.aa %a12,%a5
8000e036:	02 4a       	mov %d10,%d4
8000e038:	bd 05 f2 00 	jz.a %a5,8000e21c <_realloc_r+0x1ea>
8000e03c:	6d ff 23 d5 	call 80008a82 <__malloc_lock>
8000e040:	19 c3 fc ff 	ld.w %d3,[%a12]-4
8000e044:	1b ba 00 50 	addi %d5,%d10,11
8000e048:	8b 75 61 42 	lt.u %d4,%d5,23
8000e04c:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000e050:	8f 33 c0 91 	andn %d9,%d3,3
8000e054:	82 06       	mov %d6,0
8000e056:	3b 00 01 80 	mov %d8,16
8000e05a:	3b 00 01 20 	mov %d2,16
8000e05e:	df 04 b0 00 	jeq %d4,0,8000e1be <_realloc_r+0x18c>
8000e062:	0b a8 a0 62 	or.lt.u %d6,%d8,%d10
8000e066:	df 06 b5 80 	jne %d6,0,8000e1d0 <_realloc_r+0x19e>
8000e06a:	7f 29 93 00 	jge %d9,%d2,8000e190 <_realloc_r+0x15e>
8000e06e:	91 00 00 36 	movh.a %a3,24576
8000e072:	d9 33 10 10 	lea %a3,[%a3]80 <60000050 <__malloc_av_>>
8000e076:	99 34 08 00 	ld.a %a4,[%a3]8 <60000008 <LCF_DSPR1_START+0x8>>
8000e07a:	01 f9 00 26 	addsc.a %a2,%a15,%d9,0
8000e07e:	19 24 04 00 	ld.w %d4,[%a2]4
8000e082:	7d 24 11 01 	jeq.a %a4,%a2,8000e2a4 <_realloc_r+0x272>
8000e086:	8f 14 c0 51 	andn %d5,%d4,1
8000e08a:	01 25 00 36 	addsc.a %a3,%a2,%d5,0
8000e08e:	19 35 04 00 	ld.w %d5,[%a3]4
8000e092:	6f 05 b8 80 	jnz.t %d5,0,8000e202 <_realloc_r+0x1d0>
8000e096:	8f 34 c0 51 	andn %d5,%d4,3
8000e09a:	0b 59 00 40 	add %d4,%d9,%d5
8000e09e:	7f 24 6f 00 	jge %d4,%d2,8000e17c <_realloc_r+0x14a>
8000e0a2:	6f 03 14 80 	jnz.t %d3,0,8000e0ca <_realloc_r+0x98>
8000e0a6:	99 c3 f8 ff 	ld.a %a3,[%a12]-8
8000e0aa:	01 3f 20 30 	sub.a %a3,%a15,%a3
8000e0ae:	19 33 04 00 	ld.w %d3,[%a3]4
8000e0b2:	80 3b       	mov.d %d11,%a3
8000e0b4:	8f 33 c0 31 	andn %d3,%d3,3
8000e0b8:	42 35       	add %d5,%d3
8000e0ba:	0b 95 00 c0 	add %d12,%d5,%d9
8000e0be:	7f 2c b4 00 	jge %d12,%d2,8000e226 <_realloc_r+0x1f4>
8000e0c2:	0b 39 00 c0 	add %d12,%d9,%d3
8000e0c6:	7f 2c b9 00 	jge %d12,%d2,8000e238 <_realloc_r+0x206>
8000e0ca:	02 a4       	mov %d4,%d10
8000e0cc:	40 e4       	mov.aa %a4,%a14
8000e0ce:	6d ff 9a d1 	call 80008402 <_malloc_r>
8000e0d2:	40 2d       	mov.aa %a13,%a2
8000e0d4:	bd 02 4f 00 	jz.a %a2,8000e172 <_realloc_r+0x140>
8000e0d8:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000e0dc:	b0 82       	add.a %a2,-8
8000e0de:	8f 12 c0 21 	andn %d2,%d2,1
8000e0e2:	01 f2 00 36 	addsc.a %a3,%a15,%d2,0
8000e0e6:	7d 23 40 01 	jeq.a %a3,%a2,8000e366 <_realloc_r+0x334>
8000e0ea:	1b c9 ff 4f 	addi %d4,%d9,-4
8000e0ee:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e0f2:	df 02 41 81 	jne %d2,0,8000e374 <_realloc_r+0x342>
8000e0f6:	8b 44 61 22 	lt.u %d2,%d4,20
8000e0fa:	40 d3       	mov.aa %a3,%a13
8000e0fc:	40 c2       	mov.aa %a2,%a12
8000e0fe:	df 02 2c 80 	jne %d2,0,8000e156 <_realloc_r+0x124>
8000e102:	54 c2       	ld.w %d2,[%a12]
8000e104:	74 d2       	st.w [%a13],%d2
8000e106:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e10a:	59 d2 04 00 	st.w [%a13]4,%d2
8000e10e:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e112:	d9 c2 08 00 	lea %a2,[%a12]8
8000e116:	d9 d3 08 00 	lea %a3,[%a13]8
8000e11a:	df 02 1e 00 	jeq %d2,0,8000e156 <_realloc_r+0x124>
8000e11e:	19 c2 08 00 	ld.w %d2,[%a12]8
8000e122:	59 d2 08 00 	st.w [%a13]8,%d2
8000e126:	19 c2 0c 00 	ld.w %d2,[%a12]12
8000e12a:	59 d2 0c 00 	st.w [%a13]12,%d2
8000e12e:	8b 44 02 42 	eq %d4,%d4,36
8000e132:	d9 c2 10 00 	lea %a2,[%a12]16
8000e136:	d9 d3 10 00 	lea %a3,[%a13]16
8000e13a:	df 04 0e 00 	jeq %d4,0,8000e156 <_realloc_r+0x124>
8000e13e:	19 c2 10 00 	ld.w %d2,[%a12]16
8000e142:	59 d2 10 00 	st.w [%a13]16,%d2
8000e146:	19 c2 14 00 	ld.w %d2,[%a12]20
8000e14a:	d9 c2 18 00 	lea %a2,[%a12]24
8000e14e:	d9 d3 18 00 	lea %a3,[%a13]24
8000e152:	59 d2 14 00 	st.w [%a13]20,%d2
8000e156:	54 22       	ld.w %d2,[%a2]
8000e158:	74 32       	st.w [%a3],%d2
8000e15a:	19 22 04 00 	ld.w %d2,[%a2]4
8000e15e:	59 32 04 00 	st.w [%a3]4,%d2
8000e162:	19 22 08 00 	ld.w %d2,[%a2]8
8000e166:	59 32 08 00 	st.w [%a3]8,%d2
8000e16a:	40 c5       	mov.aa %a5,%a12
8000e16c:	40 e4       	mov.aa %a4,%a14
8000e16e:	6d ff 69 da 	call 80009640 <_free_r>
8000e172:	40 e4       	mov.aa %a4,%a14
8000e174:	6d ff 88 d4 	call 80008a84 <__malloc_unlock>
8000e178:	40 d2       	mov.aa %a2,%a13
8000e17a:	00 90       	ret 
8000e17c:	99 23 0c 00 	ld.a %a3,[%a2]12
8000e180:	d9 22 08 00 	lea %a2,[%a2]8
8000e184:	d4 22       	ld.a %a2,[%a2]
8000e186:	02 49       	mov %d9,%d4
8000e188:	b5 23 0c 00 	st.a [%a2]12,%a3
8000e18c:	b5 32 08 00 	st.a [%a3]8,%a2
8000e190:	48 12       	ld.w %d2,[%a15]4
8000e192:	0b 89 80 40 	sub %d4,%d9,%d8
8000e196:	8f 12 00 31 	and %d3,%d2,1
8000e19a:	8b 04 61 22 	lt.u %d2,%d4,16
8000e19e:	01 f9 00 26 	addsc.a %a2,%a15,%d9,0
8000e1a2:	df 02 1d 00 	jeq %d2,0,8000e1dc <_realloc_r+0x1aa>
8000e1a6:	a6 93       	or %d3,%d9
8000e1a8:	68 13       	st.w [%a15]4,%d3
8000e1aa:	b7 10 21 20 	imask %e2,1,0,1
8000e1ae:	49 22 44 08 	ldmst [%a2]4,%e2
8000e1b2:	40 e4       	mov.aa %a4,%a14
8000e1b4:	6d ff 68 d4 	call 80008a84 <__malloc_unlock>
8000e1b8:	40 cd       	mov.aa %a13,%a12
8000e1ba:	40 d2       	mov.aa %a2,%a13
8000e1bc:	00 90       	ret 
8000e1be:	8f 75 c0 81 	andn %d8,%d5,7
8000e1c2:	8f 18 1e 60 	sh %d6,%d8,-31
8000e1c6:	0b a8 a0 62 	or.lt.u %d6,%d8,%d10
8000e1ca:	02 82       	mov %d2,%d8
8000e1cc:	df 06 4f 7f 	jeq %d6,0,8000e06a <_realloc_r+0x38>
8000e1d0:	3b c0 00 20 	mov %d2,12
8000e1d4:	a0 0d       	mov.a %a13,0
8000e1d6:	40 d2       	mov.aa %a2,%a13
8000e1d8:	74 e2       	st.w [%a14],%d2
8000e1da:	00 90       	ret 
8000e1dc:	a6 83       	or %d3,%d8
8000e1de:	8f 14 40 41 	or %d4,%d4,1
8000e1e2:	01 f8 00 56 	addsc.a %a5,%a15,%d8,0
8000e1e6:	68 13       	st.w [%a15]4,%d3
8000e1e8:	b7 10 21 20 	imask %e2,1,0,1
8000e1ec:	59 54 04 00 	st.w [%a5]4,%d4
8000e1f0:	40 e4       	mov.aa %a4,%a14
8000e1f2:	d9 55 08 00 	lea %a5,[%a5]8
8000e1f6:	49 22 44 08 	ldmst [%a2]4,%e2
8000e1fa:	6d ff 23 da 	call 80009640 <_free_r>
8000e1fe:	1d ff da ff 	j 8000e1b2 <_realloc_r+0x180>
8000e202:	6f 03 64 ff 	jnz.t %d3,0,8000e0ca <_realloc_r+0x98>
8000e206:	99 c2 f8 ff 	ld.a %a2,[%a12]-8
8000e20a:	01 2f 20 20 	sub.a %a2,%a15,%a2
8000e20e:	19 23 04 00 	ld.w %d3,[%a2]4
8000e212:	80 2b       	mov.d %d11,%a2
8000e214:	8f 33 c0 31 	andn %d3,%d3,3
8000e218:	1d ff 55 ff 	j 8000e0c2 <_realloc_r+0x90>
8000e21c:	6d ff f3 d0 	call 80008402 <_malloc_r>
8000e220:	40 2d       	mov.aa %a13,%a2
8000e222:	40 d2       	mov.aa %a2,%a13
8000e224:	00 90       	ret 
8000e226:	99 23 0c 00 	ld.a %a3,[%a2]12
8000e22a:	d9 22 08 00 	lea %a2,[%a2]8
8000e22e:	d4 22       	ld.a %a2,[%a2]
8000e230:	b5 23 0c 00 	st.a [%a2]12,%a3
8000e234:	b5 32 08 00 	st.a [%a3]8,%a2
8000e238:	60 bd       	mov.a %a13,%d11
8000e23a:	60 b2       	mov.a %a2,%d11
8000e23c:	99 d3 08 00 	ld.a %a3,[%a13]8
8000e240:	d9 22 0c 00 	lea %a2,[%a2]12
8000e244:	d4 22       	ld.a %a2,[%a2]
8000e246:	1b c9 ff 4f 	addi %d4,%d9,-4
8000e24a:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e24e:	b5 32 0c 00 	st.a [%a3]12,%a2
8000e252:	b5 23 08 00 	st.a [%a2]8,%a3
8000e256:	d9 dd 08 00 	lea %a13,[%a13]8
8000e25a:	df 02 93 80 	jne %d2,0,8000e380 <_realloc_r+0x34e>
8000e25e:	8b 44 61 22 	lt.u %d2,%d4,20
8000e262:	40 d2       	mov.aa %a2,%a13
8000e264:	df 02 11 80 	jne %d2,0,8000e286 <_realloc_r+0x254>
8000e268:	54 c2       	ld.w %d2,[%a12]
8000e26a:	74 d2       	st.w [%a13],%d2
8000e26c:	60 b2       	mov.a %a2,%d11
8000e26e:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e272:	59 22 0c 00 	st.w [%a2]12,%d2
8000e276:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e27a:	df 02 a2 80 	jne %d2,0,8000e3be <_realloc_r+0x38c>
8000e27e:	d9 cc 08 00 	lea %a12,[%a12]8
8000e282:	d9 22 10 00 	lea %a2,[%a2]16
8000e286:	54 c2       	ld.w %d2,[%a12]
8000e288:	74 22       	st.w [%a2],%d2
8000e28a:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e28e:	59 22 04 00 	st.w [%a2]4,%d2
8000e292:	19 c2 08 00 	ld.w %d2,[%a12]8
8000e296:	60 bf       	mov.a %a15,%d11
8000e298:	59 22 08 00 	st.w [%a2]8,%d2
8000e29c:	40 dc       	mov.aa %a12,%a13
8000e29e:	02 c9       	mov %d9,%d12
8000e2a0:	1d ff 78 ff 	j 8000e190 <_realloc_r+0x15e>
8000e2a4:	8f 34 c0 51 	andn %d5,%d4,3
8000e2a8:	0b 59 00 60 	add %d6,%d9,%d5
8000e2ac:	1b 08 01 40 	addi %d4,%d8,16
8000e2b0:	7f 46 71 00 	jge %d6,%d4,8000e392 <_realloc_r+0x360>
8000e2b4:	6f 03 0b ff 	jnz.t %d3,0,8000e0ca <_realloc_r+0x98>
8000e2b8:	99 c2 f8 ff 	ld.a %a2,[%a12]-8
8000e2bc:	01 2f 20 20 	sub.a %a2,%a15,%a2
8000e2c0:	19 23 04 00 	ld.w %d3,[%a2]4
8000e2c4:	80 2b       	mov.d %d11,%a2
8000e2c6:	8f 33 c0 31 	andn %d3,%d3,3
8000e2ca:	42 35       	add %d5,%d3
8000e2cc:	0b 95 00 c0 	add %d12,%d5,%d9
8000e2d0:	3f 4c f9 7e 	jlt %d12,%d4,8000e0c2 <_realloc_r+0x90>
8000e2d4:	60 bd       	mov.a %a13,%d11
8000e2d6:	60 b2       	mov.a %a2,%d11
8000e2d8:	99 d4 08 00 	ld.a %a4,[%a13]8
8000e2dc:	d9 22 0c 00 	lea %a2,[%a2]12
8000e2e0:	d4 22       	ld.a %a2,[%a2]
8000e2e2:	1b c9 ff 4f 	addi %d4,%d9,-4
8000e2e6:	8b 54 a2 22 	ge.u %d2,%d4,37
8000e2ea:	b5 42 0c 00 	st.a [%a4]12,%a2
8000e2ee:	b5 24 08 00 	st.a [%a2]8,%a4
8000e2f2:	d9 dd 08 00 	lea %a13,[%a13]8
8000e2f6:	df 02 85 80 	jne %d2,0,8000e400 <_realloc_r+0x3ce>
8000e2fa:	8b 44 61 22 	lt.u %d2,%d4,20
8000e2fe:	40 d2       	mov.aa %a2,%a13
8000e300:	df 02 11 80 	jne %d2,0,8000e322 <_realloc_r+0x2f0>
8000e304:	54 c2       	ld.w %d2,[%a12]
8000e306:	74 d2       	st.w [%a13],%d2
8000e308:	60 b2       	mov.a %a2,%d11
8000e30a:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e30e:	59 22 0c 00 	st.w [%a2]12,%d2
8000e312:	8b c4 a1 22 	ge.u %d2,%d4,28
8000e316:	df 02 80 80 	jne %d2,0,8000e416 <_realloc_r+0x3e4>
8000e31a:	d9 cc 08 00 	lea %a12,[%a12]8
8000e31e:	d9 22 10 00 	lea %a2,[%a2]16
8000e322:	54 c2       	ld.w %d2,[%a12]
8000e324:	74 22       	st.w [%a2],%d2
8000e326:	19 c2 04 00 	ld.w %d2,[%a12]4
8000e32a:	59 22 04 00 	st.w [%a2]4,%d2
8000e32e:	19 c2 08 00 	ld.w %d2,[%a12]8
8000e332:	59 22 08 00 	st.w [%a2]8,%d2
8000e336:	60 b2       	mov.a %a2,%d11
8000e338:	0b 8c 80 20 	sub %d2,%d12,%d8
8000e33c:	01 28 00 26 	addsc.a %a2,%a2,%d8,0
8000e340:	8f 12 40 21 	or %d2,%d2,1
8000e344:	b5 32 08 00 	st.a [%a3]8,%a2
8000e348:	40 e4       	mov.aa %a4,%a14
8000e34a:	59 22 04 00 	st.w [%a2]4,%d2
8000e34e:	60 b2       	mov.a %a2,%d11
8000e350:	19 22 04 00 	ld.w %d2,[%a2]4
8000e354:	8f 12 00 21 	and %d2,%d2,1
8000e358:	a6 82       	or %d2,%d8
8000e35a:	59 22 04 00 	st.w [%a2]4,%d2
8000e35e:	6d ff 93 d3 	call 80008a84 <__malloc_unlock>
8000e362:	1d ff 2c ff 	j 8000e1ba <_realloc_r+0x188>
8000e366:	19 d2 fc ff 	ld.w %d2,[%a13]-4
8000e36a:	8f 32 c0 21 	andn %d2,%d2,3
8000e36e:	42 29       	add %d9,%d2
8000e370:	1d ff 10 ff 	j 8000e190 <_realloc_r+0x15e>
8000e374:	40 c5       	mov.aa %a5,%a12
8000e376:	40 d4       	mov.aa %a4,%a13
8000e378:	6d ff 5f ef 	call 8000c236 <memmove>
8000e37c:	1d ff f7 fe 	j 8000e16a <_realloc_r+0x138>
8000e380:	40 c5       	mov.aa %a5,%a12
8000e382:	40 d4       	mov.aa %a4,%a13
8000e384:	60 bf       	mov.a %a15,%d11
8000e386:	6d ff 58 ef 	call 8000c236 <memmove>
8000e38a:	40 dc       	mov.aa %a12,%a13
8000e38c:	02 c9       	mov %d9,%d12
8000e38e:	1d ff 01 ff 	j 8000e190 <_realloc_r+0x15e>
8000e392:	0b 86 80 20 	sub %d2,%d6,%d8
8000e396:	01 f8 00 f6 	addsc.a %a15,%a15,%d8,0
8000e39a:	8f 12 40 21 	or %d2,%d2,1
8000e39e:	ec 32       	st.a [%a3]8,%a15
8000e3a0:	d9 c2 fc ff 	lea %a2,[%a12]-4
8000e3a4:	68 12       	st.w [%a15]4,%d2
8000e3a6:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000e3aa:	40 e4       	mov.aa %a4,%a14
8000e3ac:	8f 12 00 21 	and %d2,%d2,1
8000e3b0:	a6 82       	or %d2,%d8
8000e3b2:	40 cd       	mov.aa %a13,%a12
8000e3b4:	74 22       	st.w [%a2],%d2
8000e3b6:	6d ff 67 d3 	call 80008a84 <__malloc_unlock>
8000e3ba:	1d ff 00 ff 	j 8000e1ba <_realloc_r+0x188>
8000e3be:	19 c2 08 00 	ld.w %d2,[%a12]8
8000e3c2:	59 22 10 00 	st.w [%a2]16,%d2
8000e3c6:	19 c2 0c 00 	ld.w %d2,[%a12]12
8000e3ca:	59 22 14 00 	st.w [%a2]20,%d2
8000e3ce:	8b 44 02 42 	eq %d4,%d4,36
8000e3d2:	df 04 08 80 	jne %d4,0,8000e3e2 <_realloc_r+0x3b0>
8000e3d6:	d9 cc 10 00 	lea %a12,[%a12]16
8000e3da:	d9 22 18 00 	lea %a2,[%a2]24
8000e3de:	1d ff 54 ff 	j 8000e286 <_realloc_r+0x254>
8000e3e2:	19 c2 10 00 	ld.w %d2,[%a12]16
8000e3e6:	59 22 18 00 	st.w [%a2]24,%d2
8000e3ea:	60 b3       	mov.a %a3,%d11
8000e3ec:	19 c2 14 00 	ld.w %d2,[%a12]20
8000e3f0:	d9 22 20 00 	lea %a2,[%a2]32
8000e3f4:	59 32 1c 00 	st.w [%a3]28,%d2
8000e3f8:	d9 cc 18 00 	lea %a12,[%a12]24
8000e3fc:	1d ff 45 ff 	j 8000e286 <_realloc_r+0x254>
8000e400:	40 c5       	mov.aa %a5,%a12
8000e402:	40 d4       	mov.aa %a4,%a13
8000e404:	6d ff 19 ef 	call 8000c236 <memmove>
8000e408:	7b 00 00 26 	movh %d2,24576
8000e40c:	60 22       	mov.a %a2,%d2
8000e40e:	d9 23 10 10 	lea %a3,[%a2]80
8000e412:	1d ff 92 ff 	j 8000e336 <_realloc_r+0x304>
8000e416:	19 c2 08 00 	ld.w %d2,[%a12]8
8000e41a:	59 22 10 00 	st.w [%a2]16,%d2
8000e41e:	19 c2 0c 00 	ld.w %d2,[%a12]12
8000e422:	59 22 14 00 	st.w [%a2]20,%d2
8000e426:	8b 44 02 42 	eq %d4,%d4,36
8000e42a:	df 04 08 80 	jne %d4,0,8000e43a <_realloc_r+0x408>
8000e42e:	d9 cc 10 00 	lea %a12,[%a12]16
8000e432:	d9 22 18 00 	lea %a2,[%a2]24
8000e436:	1d ff 76 ff 	j 8000e322 <_realloc_r+0x2f0>
8000e43a:	19 c2 10 00 	ld.w %d2,[%a12]16
8000e43e:	59 22 18 00 	st.w [%a2]24,%d2
8000e442:	60 b4       	mov.a %a4,%d11
8000e444:	19 c2 14 00 	ld.w %d2,[%a12]20
8000e448:	d9 22 20 00 	lea %a2,[%a2]32
8000e44c:	59 42 1c 00 	st.w [%a4]28,%d2
8000e450:	d9 cc 18 00 	lea %a12,[%a12]24
8000e454:	1d ff 67 ff 	j 8000e322 <_realloc_r+0x2f0>

8000e458 <__ascii_wctomb>:
8000e458:	82 02       	mov %d2,0
8000e45a:	bd 05 08 00 	jz.a %a5,8000e46a <__ascii_wctomb+0x12>
8000e45e:	8b 04 70 22 	lt.u %d2,%d4,256
8000e462:	df 02 05 00 	jeq %d2,0,8000e46c <__ascii_wctomb+0x14>
8000e466:	34 54       	st.b [%a5],%d4
8000e468:	82 12       	mov %d2,1
8000e46a:	00 90       	ret 
8000e46c:	3b a0 08 20 	mov %d2,138
8000e470:	74 42       	st.w [%a4],%d2
8000e472:	82 f2       	mov %d2,-1
8000e474:	00 90       	ret 

8000e476 <__ssprint_r>:
8000e476:	19 62 08 00 	ld.w %d2,[%a6]8
8000e47a:	d4 6e       	ld.a %a14,[%a6]
8000e47c:	40 4f       	mov.aa %a15,%a4
8000e47e:	40 5c       	mov.aa %a12,%a5
8000e480:	40 6d       	mov.aa %a13,%a6
8000e482:	df 02 8c 00 	jeq %d2,0,8000e59a <__ssprint_r+0x124>
8000e486:	19 52 08 00 	ld.w %d2,[%a5]8
8000e48a:	54 53       	ld.w %d3,[%a5]
8000e48c:	3b 00 48 e0 	mov %d14,1152
8000e490:	3b 00 40 f0 	mov %d15,1024
8000e494:	1d 00 58 00 	j 8000e544 <__ssprint_r+0xce>
8000e498:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000e49c:	0f e2 80 40 	and %d4,%d2,%d14
8000e4a0:	df 04 3b 00 	jeq %d4,0,8000e516 <__ssprint_r+0xa0>
8000e4a4:	99 c5 10 00 	ld.a %a5,[%a12]16
8000e4a8:	26 f2       	and %d2,%d15
8000e4aa:	40 f4       	mov.aa %a4,%a15
8000e4ac:	80 54       	mov.d %d4,%a5
8000e4ae:	0b 43 80 c0 	sub %d12,%d3,%d4
8000e4b2:	19 c3 14 00 	ld.w %d3,[%a12]20
8000e4b6:	53 33 20 30 	mul %d3,%d3,3
8000e4ba:	8f 13 1e 40 	sh %d4,%d3,-31
8000e4be:	42 43       	add %d3,%d4
8000e4c0:	1b 1c 00 40 	addi %d4,%d12,1
8000e4c4:	42 84       	add %d4,%d8
8000e4c6:	86 f3       	sha %d3,-1
8000e4c8:	0b 43 b0 d1 	max.u %d13,%d3,%d4
8000e4cc:	02 d4       	mov %d4,%d13
8000e4ce:	df 02 4b 00 	jeq %d2,0,8000e564 <__ssprint_r+0xee>
8000e4d2:	6d ff 98 cf 	call 80008402 <_malloc_r>
8000e4d6:	80 29       	mov.d %d9,%a2
8000e4d8:	df 09 50 00 	jeq %d9,0,8000e578 <__ssprint_r+0x102>
8000e4dc:	99 c5 10 00 	ld.a %a5,[%a12]16
8000e4e0:	02 c4       	mov %d4,%d12
8000e4e2:	40 24       	mov.aa %a4,%a2
8000e4e4:	6d ff 46 ee 	call 8000c170 <memcpy>
8000e4e8:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000e4ec:	3b f0 b7 3f 	mov %d3,-1153
8000e4f0:	26 32       	and %d2,%d3
8000e4f2:	8f 02 48 21 	or %d2,%d2,128
8000e4f6:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000e4fa:	60 92       	mov.a %a2,%d9
8000e4fc:	59 c9 10 00 	st.w [%a12]16,%d9
8000e500:	01 2c 00 46 	addsc.a %a4,%a2,%d12,0
8000e504:	0b cd 80 c0 	sub %d12,%d13,%d12
8000e508:	f4 c4       	st.a [%a12],%a4
8000e50a:	59 cd 14 00 	st.w [%a12]20,%d13
8000e50e:	02 8a       	mov %d10,%d8
8000e510:	59 cc 08 00 	st.w [%a12]8,%d12
8000e514:	02 89       	mov %d9,%d8
8000e516:	60 b5       	mov.a %a5,%d11
8000e518:	02 94       	mov %d4,%d9
8000e51a:	6d ff 8e ee 	call 8000c236 <memmove>
8000e51e:	19 c2 08 00 	ld.w %d2,[%a12]8
8000e522:	54 c3       	ld.w %d3,[%a12]
8000e524:	19 d4 08 00 	ld.w %d4,[%a13]8
8000e528:	a2 a2       	sub %d2,%d10
8000e52a:	42 93       	add %d3,%d9
8000e52c:	0b 84 80 80 	sub %d8,%d4,%d8
8000e530:	d9 c2 08 00 	lea %a2,[%a12]8
8000e534:	74 22       	st.w [%a2],%d2
8000e536:	74 c3       	st.w [%a12],%d3
8000e538:	59 d8 08 00 	st.w [%a13]8,%d8
8000e53c:	d9 d2 08 00 	lea %a2,[%a13]8
8000e540:	df 08 2d 00 	jeq %d8,0,8000e59a <__ssprint_r+0x124>
8000e544:	19 e8 04 00 	ld.w %d8,[%a14]4
8000e548:	54 eb       	ld.w %d11,[%a14]
8000e54a:	60 34       	mov.a %a4,%d3
8000e54c:	d9 ee 08 00 	lea %a14,[%a14]8
8000e550:	02 2a       	mov %d10,%d2
8000e552:	02 29       	mov %d9,%d2
8000e554:	df 08 f8 7f 	jeq %d8,0,8000e544 <__ssprint_r+0xce>
8000e558:	7f 28 a0 ff 	jge.u %d8,%d2,8000e498 <__ssprint_r+0x22>
8000e55c:	02 8a       	mov %d10,%d8
8000e55e:	02 89       	mov %d9,%d8
8000e560:	1d ff db ff 	j 8000e516 <__ssprint_r+0xa0>
8000e564:	6d ff 67 fd 	call 8000e032 <_realloc_r>
8000e568:	80 29       	mov.d %d9,%a2
8000e56a:	df 09 c8 ff 	jne %d9,0,8000e4fa <__ssprint_r+0x84>
8000e56e:	99 c5 10 00 	ld.a %a5,[%a12]16
8000e572:	40 f4       	mov.aa %a4,%a15
8000e574:	6d ff 66 d8 	call 80009640 <_free_r>
8000e578:	3b c0 00 20 	mov %d2,12
8000e57c:	82 03       	mov %d3,0
8000e57e:	68 02       	st.w [%a15]0,%d2
8000e580:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000e584:	8f 02 44 21 	or %d2,%d2,64
8000e588:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000e58c:	82 02       	mov %d2,0
8000e58e:	59 d3 04 00 	st.w [%a13]4,%d3
8000e592:	59 d2 08 00 	st.w [%a13]8,%d2
8000e596:	82 f2       	mov %d2,-1
8000e598:	00 90       	ret 
8000e59a:	82 03       	mov %d3,0
8000e59c:	82 02       	mov %d2,0
8000e59e:	59 d3 04 00 	st.w [%a13]4,%d3
8000e5a2:	00 90       	ret 

8000e5a4 <__smakebuf_r>:
8000e5a4:	c9 52 0c 00 	ld.h %d2,[%a5]12
8000e5a8:	20 48       	sub.a %sp,72
8000e5aa:	80 49       	mov.d %d9,%a4
8000e5ac:	40 5c       	mov.aa %a12,%a5
8000e5ae:	6f 12 0b 00 	jz.t %d2,1,8000e5c4 <__smakebuf_r+0x20>
8000e5b2:	82 12       	mov %d2,1
8000e5b4:	d9 c2 03 10 	lea %a2,[%a12]67
8000e5b8:	f4 c2       	st.a [%a12],%a2
8000e5ba:	b5 c2 10 00 	st.a [%a12]16,%a2
8000e5be:	59 c2 14 00 	st.w [%a12]20,%d2
8000e5c2:	00 90       	ret 
8000e5c4:	c9 54 0e 00 	ld.h %d4,[%a5]14
8000e5c8:	bf 04 2d 00 	jlt %d4,0,8000e622 <__smakebuf_r+0x7e>
8000e5cc:	40 a5       	mov.aa %a5,%sp
8000e5ce:	6d 00 55 00 	call 8000e678 <_fstat_r>
8000e5d2:	19 a4 04 00 	ld.w %d4,[%sp]4
8000e5d6:	bb 00 00 3f 	mov.u %d3,61440
8000e5da:	26 43       	and %d3,%d4
8000e5dc:	3b 00 00 b2 	mov %d11,8192
8000e5e0:	0b b3 00 b1 	eq %d11,%d3,%d11
8000e5e4:	3b 00 40 80 	mov %d8,1024
8000e5e8:	3b 00 80 a0 	mov %d10,2048
8000e5ec:	bf 02 19 00 	jlt %d2,0,8000e61e <__smakebuf_r+0x7a>
8000e5f0:	60 94       	mov.a %a4,%d9
8000e5f2:	02 84       	mov %d4,%d8
8000e5f4:	6d ff 07 cf 	call 80008402 <_malloc_r>
8000e5f8:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000e5fc:	bd 02 23 00 	jz.a %a2,8000e642 <__smakebuf_r+0x9e>
8000e600:	8f 02 48 21 	or %d2,%d2,128
8000e604:	f4 c2       	st.a [%a12],%a2
8000e606:	b5 c2 10 00 	st.a [%a12]16,%a2
8000e60a:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000e60e:	59 c8 14 00 	st.w [%a12]20,%d8
8000e612:	df 0b 20 80 	jne %d11,0,8000e652 <__smakebuf_r+0xae>
8000e616:	a6 a2       	or %d2,%d10
8000e618:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000e61c:	00 90       	ret 
8000e61e:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000e622:	8f 02 08 21 	and %d2,%d2,128
8000e626:	3b 00 40 80 	mov %d8,1024
8000e62a:	ab 08 a4 82 	seln %d8,%d2,%d8,64
8000e62e:	60 94       	mov.a %a4,%d9
8000e630:	02 84       	mov %d4,%d8
8000e632:	6d ff e8 ce 	call 80008402 <_malloc_r>
8000e636:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000e63a:	82 0b       	mov %d11,0
8000e63c:	82 0a       	mov %d10,0
8000e63e:	bd 02 e1 ff 	jnz.a %a2,8000e600 <__smakebuf_r+0x5c>
8000e642:	6f 92 ed ff 	jnz.t %d2,9,8000e61c <__smakebuf_r+0x78>
8000e646:	b7 22 02 20 	insert %d2,%d2,2,0,2
8000e64a:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000e64e:	1d ff b2 ff 	j 8000e5b2 <__smakebuf_r+0xe>
8000e652:	c9 c4 0e 00 	ld.h %d4,[%a12]14
8000e656:	60 94       	mov.a %a4,%d9
8000e658:	6d 00 22 00 	call 8000e69c <_isatty_r>
8000e65c:	df 02 06 80 	jne %d2,0,8000e668 <__smakebuf_r+0xc4>
8000e660:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000e664:	1d ff d9 ff 	j 8000e616 <__smakebuf_r+0x72>
8000e668:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000e66c:	b7 12 02 20 	insert %d2,%d2,1,0,2
8000e670:	37 02 50 20 	extr %d2,%d2,0,16
8000e674:	1d ff d1 ff 	j 8000e616 <__smakebuf_r+0x72>

8000e678 <_fstat_r>:
8000e678:	82 02       	mov %d2,0
8000e67a:	40 4d       	mov.aa %a13,%a4
8000e67c:	91 00 00 c6 	movh.a %a12,24576
8000e680:	40 54       	mov.aa %a4,%a5
8000e682:	59 c2 98 30 	st.w [%a12]2264 <600008d8 <errno>>,%d2
8000e686:	6d 00 4c 0a 	call 8000fb1e <fstat>
8000e68a:	df f2 03 00 	jeq %d2,-1,8000e690 <_fstat_r+0x18>
8000e68e:	00 90       	ret 
8000e690:	19 c3 98 30 	ld.w %d3,[%a12]2264
8000e694:	df 03 fd 7f 	jeq %d3,0,8000e68e <_fstat_r+0x16>
8000e698:	74 d3       	st.w [%a13],%d3
8000e69a:	00 90       	ret 

8000e69c <_isatty_r>:
8000e69c:	82 02       	mov %d2,0
8000e69e:	91 00 00 c6 	movh.a %a12,24576
8000e6a2:	40 4d       	mov.aa %a13,%a4
8000e6a4:	59 c2 98 30 	st.w [%a12]2264 <600008d8 <errno>>,%d2
8000e6a8:	6d 00 38 0a 	call 8000fb18 <isatty>
8000e6ac:	df f2 03 00 	jeq %d2,-1,8000e6b2 <_isatty_r+0x16>
8000e6b0:	00 90       	ret 
8000e6b2:	19 c3 98 30 	ld.w %d3,[%a12]2264
8000e6b6:	df 03 fd 7f 	jeq %d3,0,8000e6b0 <_isatty_r+0x14>
8000e6ba:	74 d3       	st.w [%a13],%d3
8000e6bc:	00 90       	ret 

8000e6be <__errno>:
8000e6be:	91 00 00 26 	movh.a %a2,24576
8000e6c2:	99 22 68 10 	ld.a %a2,[%a2]1128 <60000468 <_impure_ptr>>
8000e6c6:	00 90       	ret 

8000e6c8 <__assert_func>:
8000e6c8:	91 00 00 26 	movh.a %a2,24576
8000e6cc:	99 22 68 10 	ld.a %a2,[%a2]1128 <60000468 <_impure_ptr>>
8000e6d0:	80 43       	mov.d %d3,%a4
8000e6d2:	20 18       	sub.a %sp,24
8000e6d4:	99 24 0c 00 	ld.a %a4,[%a2]12
8000e6d8:	91 00 00 28 	movh.a %a2,32768
8000e6dc:	80 62       	mov.d %d2,%a6
8000e6de:	d9 22 c8 60 	lea %a2,[%a2]3464 <80000d88 <_ctype_b+0x180>>
8000e6e2:	bd 05 13 00 	jz.a %a5,8000e708 <__assert_func+0x40>
8000e6e6:	b5 a5 10 00 	st.a [%sp]16,%a5
8000e6ea:	91 00 00 58 	movh.a %a5,32768
8000e6ee:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000e6f2:	59 a4 08 00 	st.w [%sp]8,%d4
8000e6f6:	59 a3 04 00 	st.w [%sp]4,%d3
8000e6fa:	d9 55 d6 60 	lea %a5,[%a5]3478 <80000d96 <_ctype_b+0x18e>>
8000e6fe:	74 a2       	st.w [%sp],%d2
8000e700:	6d 00 54 00 	call 8000e7a8 <fiprintf>
8000e704:	6d 00 38 0a 	call 8000fb74 <abort>
8000e708:	91 00 00 28 	movh.a %a2,32768
8000e70c:	d9 22 d5 60 	lea %a2,[%a2]3477 <80000d95 <_ctype_b+0x18d>>
8000e710:	40 25       	mov.aa %a5,%a2
8000e712:	1d ff ea ff 	j 8000e6e6 <__assert_func+0x1e>

8000e716 <_calloc_r>:
8000e716:	73 54 68 40 	mul.u %e4,%d4,%d5
8000e71a:	82 08       	mov %d8,0
8000e71c:	df 05 3e 80 	jne %d5,0,8000e798 <_calloc_r+0x82>
8000e720:	6d ff 71 ce 	call 80008402 <_malloc_r>
8000e724:	40 2c       	mov.aa %a12,%a2
8000e726:	bd 02 29 00 	jz.a %a2,8000e778 <_calloc_r+0x62>
8000e72a:	19 22 fc ff 	ld.w %d2,[%a2]-4
8000e72e:	8f 32 c0 21 	andn %d2,%d2,3
8000e732:	1b c2 ff 5f 	addi %d5,%d2,-4
8000e736:	8b 55 a2 22 	ge.u %d2,%d5,37
8000e73a:	df 02 21 80 	jne %d2,0,8000e77c <_calloc_r+0x66>
8000e73e:	8b 45 61 22 	lt.u %d2,%d5,20
8000e742:	df 02 15 80 	jne %d2,0,8000e76c <_calloc_r+0x56>
8000e746:	74 28       	st.w [%a2],%d8
8000e748:	59 28 04 00 	st.w [%a2]4,%d8
8000e74c:	8b c5 a1 22 	ge.u %d2,%d5,28
8000e750:	d9 22 08 00 	lea %a2,[%a2]8
8000e754:	df 02 0c 00 	jeq %d2,0,8000e76c <_calloc_r+0x56>
8000e758:	59 c8 08 00 	st.w [%a12]8,%d8
8000e75c:	59 c8 0c 00 	st.w [%a12]12,%d8
8000e760:	8b 45 02 52 	eq %d5,%d5,36
8000e764:	d9 c2 10 00 	lea %a2,[%a12]16
8000e768:	df 05 10 80 	jne %d5,0,8000e788 <_calloc_r+0x72>
8000e76c:	82 02       	mov %d2,0
8000e76e:	74 22       	st.w [%a2],%d2
8000e770:	59 22 04 00 	st.w [%a2]4,%d2
8000e774:	59 22 08 00 	st.w [%a2]8,%d2
8000e778:	40 c2       	mov.aa %a2,%a12
8000e77a:	00 90       	ret 
8000e77c:	82 04       	mov %d4,0
8000e77e:	40 24       	mov.aa %a4,%a2
8000e780:	6d ff b2 c7 	call 800076e4 <memset>
8000e784:	40 c2       	mov.aa %a2,%a12
8000e786:	00 90       	ret 
8000e788:	59 c8 10 00 	st.w [%a12]16,%d8
8000e78c:	d9 c2 18 00 	lea %a2,[%a12]24
8000e790:	59 c8 14 00 	st.w [%a12]20,%d8
8000e794:	1d ff ec ff 	j 8000e76c <_calloc_r+0x56>
8000e798:	6d ff 93 ff 	call 8000e6be <__errno>
8000e79c:	3b c0 00 20 	mov %d2,12
8000e7a0:	a0 0c       	mov.a %a12,0
8000e7a2:	74 22       	st.w [%a2],%d2
8000e7a4:	1d ff ea ff 	j 8000e778 <_calloc_r+0x62>

8000e7a8 <fiprintf>:
8000e7a8:	40 56       	mov.aa %a6,%a5
8000e7aa:	40 45       	mov.aa %a5,%a4
8000e7ac:	91 00 00 46 	movh.a %a4,24576
8000e7b0:	99 44 68 10 	ld.a %a4,[%a4]1128 <60000468 <_impure_ptr>>
8000e7b4:	40 a7       	mov.aa %a7,%sp
8000e7b6:	6d 00 41 00 	call 8000e838 <_vfiprintf_r>
8000e7ba:	00 90       	ret 

8000e7bc <__sprint_r.part.0>:
8000e7bc:	19 52 24 10 	ld.w %d2,[%a5]100
8000e7c0:	80 49       	mov.d %d9,%a4
8000e7c2:	40 5c       	mov.aa %a12,%a5
8000e7c4:	40 6e       	mov.aa %a14,%a6
8000e7c6:	6f d2 30 00 	jz.t %d2,13,8000e826 <__sprint_r.part.0+0x6a>
8000e7ca:	19 62 08 00 	ld.w %d2,[%a6]8
8000e7ce:	cc 60       	ld.a %a15,[%a6]0
8000e7d0:	df 02 28 00 	jeq %d2,0,8000e820 <__sprint_r.part.0+0x64>
8000e7d4:	48 1b       	ld.w %d11,[%a15]4
8000e7d6:	c8 0d       	ld.a %a13,[%a15]0
8000e7d8:	8f eb 1f a0 	sh %d10,%d11,-2
8000e7dc:	df 0a 19 00 	jeq %d10,0,8000e80e <__sprint_r.part.0+0x52>
8000e7e0:	82 08       	mov %d8,0
8000e7e2:	1d 00 05 00 	j 8000e7ec <__sprint_r.part.0+0x30>
8000e7e6:	c2 18       	add %d8,1
8000e7e8:	5f 8a 11 00 	jeq %d10,%d8,8000e80a <__sprint_r.part.0+0x4e>
8000e7ec:	40 d2       	mov.aa %a2,%a13
8000e7ee:	54 24       	ld.w %d4,[%a2]
8000e7f0:	60 94       	mov.a %a4,%d9
8000e7f2:	40 c5       	mov.aa %a5,%a12
8000e7f4:	b0 4d       	add.a %a13,4
8000e7f6:	6d 00 e5 08 	call 8000f9c0 <_fputwc_r>
8000e7fa:	df f2 f6 ff 	jne %d2,-1,8000e7e6 <__sprint_r.part.0+0x2a>
8000e7fe:	82 03       	mov %d3,0
8000e800:	59 e3 08 00 	st.w [%a14]8,%d3
8000e804:	59 e3 04 00 	st.w [%a14]4,%d3
8000e808:	00 90       	ret 
8000e80a:	19 e2 08 00 	ld.w %d2,[%a14]8
8000e80e:	8f 3b c0 b1 	andn %d11,%d11,3
8000e812:	a2 b2       	sub %d2,%d11
8000e814:	d9 ff 08 00 	lea %a15,[%a15]8
8000e818:	59 e2 08 00 	st.w [%a14]8,%d2
8000e81c:	df 02 dc ff 	jne %d2,0,8000e7d4 <__sprint_r.part.0+0x18>
8000e820:	82 02       	mov %d2,0
8000e822:	1d ff ee ff 	j 8000e7fe <__sprint_r.part.0+0x42>
8000e826:	6d ff 00 ea 	call 8000bc26 <__sfvwrite_r>
8000e82a:	82 03       	mov %d3,0
8000e82c:	59 e3 08 00 	st.w [%a14]8,%d3
8000e830:	59 e3 04 00 	st.w [%a14]4,%d3
8000e834:	00 90       	ret 
	...

8000e838 <_vfiprintf_r>:
8000e838:	20 e8       	sub.a %sp,232
8000e83a:	80 4d       	mov.d %d13,%a4
8000e83c:	b5 a7 10 00 	st.a [%sp]16,%a7
8000e840:	40 5f       	mov.aa %a15,%a5
8000e842:	80 6f       	mov.d %d15,%a6
8000e844:	df 0d 06 00 	jeq %d13,0,8000e850 <_vfiprintf_r+0x18>
8000e848:	19 42 34 00 	ld.w %d2,[%a4]52
8000e84c:	df 02 84 07 	jeq %d2,0,8000f754 <_vfiprintf_r+0xf1c>
8000e850:	88 62       	ld.h %d2,[%a15]12
8000e852:	6f d2 0e 80 	jnz.t %d2,13,8000e86e <_vfiprintf_r+0x36>
8000e856:	b7 f2 81 26 	insert %d2,%d2,15,13,1
8000e85a:	c5 0d 00 02 	lea %a13,2000 <LCF_CSA0_SIZE>
8000e85e:	a0 0c       	mov.a %a12,0
8000e860:	d9 f2 24 10 	lea %a2,[%a15]100
8000e864:	a8 62       	st.h [%a15]12,%d2
8000e866:	80 c4       	mov.d %d4,%a12
8000e868:	80 d5       	mov.d %d5,%a13
8000e86a:	49 24 40 08 	ldmst [%a2]0,%e4
8000e86e:	6f 32 26 01 	jz.t %d2,3,8000eaba <_vfiprintf_r+0x282>
8000e872:	48 43       	ld.w %d3,[%a15]16
8000e874:	df 03 23 01 	jeq %d3,0,8000eaba <_vfiprintf_r+0x282>
8000e878:	8f a2 01 21 	and %d2,%d2,26
8000e87c:	3b a0 00 30 	mov %d3,10
8000e880:	5f 32 2a 01 	jeq %d2,%d3,8000ead4 <_vfiprintf_r+0x29c>
8000e884:	82 02       	mov %d2,0
8000e886:	d9 a2 04 10 	lea %a2,[%sp]68
8000e88a:	40 fd       	mov.aa %a13,%a15
8000e88c:	80 2c       	mov.d %d12,%a2
8000e88e:	b5 a2 38 00 	st.a [%sp]56,%a2
8000e892:	59 a2 00 10 	st.w [%sp]64,%d2
8000e896:	59 a2 3c 00 	st.w [%sp]60,%d2
8000e89a:	59 a2 14 00 	st.w [%sp]20,%d2
8000e89e:	59 a2 18 00 	st.w [%sp]24,%d2
8000e8a2:	59 a2 20 00 	st.w [%sp]32,%d2
8000e8a6:	59 a2 1c 00 	st.w [%sp]28,%d2
8000e8aa:	59 a2 0c 00 	st.w [%sp]12,%d2
8000e8ae:	40 2f       	mov.aa %a15,%a2
8000e8b0:	78 02       	st.w [%sp]8,%d15
8000e8b2:	99 a3 08 00 	ld.a %a3,[%sp]8
8000e8b6:	79 32 00 00 	ld.b %d2,[%a3]0
8000e8ba:	40 32       	mov.aa %a2,%a3
8000e8bc:	8b 52 22 32 	ne %d3,%d2,37
8000e8c0:	8b 02 20 34 	and.ne %d3,%d2,0
8000e8c4:	df 03 8a 05 	jeq %d3,0,8000f3d8 <_vfiprintf_r+0xba0>
8000e8c8:	b0 12       	add.a %a2,1
8000e8ca:	80 3f       	mov.d %d15,%a3
8000e8cc:	79 22 00 00 	ld.b %d2,[%a2]0
8000e8d0:	d9 23 ff ff 	lea %a3,[%a2]-1
8000e8d4:	8b 52 22 32 	ne %d3,%d2,37
8000e8d8:	8b 02 20 34 	and.ne %d3,%d2,0
8000e8dc:	40 2c       	mov.aa %a12,%a2
8000e8de:	b0 12       	add.a %a2,1
8000e8e0:	df 03 f6 ff 	jne %d3,0,8000e8cc <_vfiprintf_r+0x94>
8000e8e4:	60 f4       	mov.a %a4,%d15
8000e8e6:	01 4c 20 e0 	sub.a %a14,%a12,%a4
8000e8ea:	7d 4c 29 00 	jeq.a %a12,%a4,8000e93c <_vfiprintf_r+0x104>
8000e8ee:	19 a3 00 10 	ld.w %d3,[%sp]64
8000e8f2:	80 e2       	mov.d %d2,%a14
8000e8f4:	42 32       	add %d2,%d3
8000e8f6:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000e8fa:	68 0f       	st.w [%a15]0,%d15
8000e8fc:	c2 13       	add %d3,1
8000e8fe:	e8 1e       	st.a [%a15]4,%a14
8000e900:	59 a2 00 10 	st.w [%sp]64,%d2
8000e904:	59 a3 3c 00 	st.w [%sp]60,%d3
8000e908:	8b 83 80 32 	ge %d3,%d3,8
8000e90c:	d9 ff 08 00 	lea %a15,[%a15]8
8000e910:	df 03 0f 00 	jeq %d3,0,8000e92e <_vfiprintf_r+0xf6>
8000e914:	df 02 66 05 	jeq %d2,0,8000f3e0 <_vfiprintf_r+0xba8>
8000e918:	60 d4       	mov.a %a4,%d13
8000e91a:	d9 a6 38 00 	lea %a6,[%sp]56
8000e91e:	40 d5       	mov.aa %a5,%a13
8000e920:	f4 a3       	st.a [%sp],%a3
8000e922:	6d ff 4d ff 	call 8000e7bc <__sprint_r.part.0>
8000e926:	df 02 db 81 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000e92a:	d4 a3       	ld.a %a3,[%sp]
8000e92c:	60 cf       	mov.a %a15,%d12
8000e92e:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000e932:	79 32 01 00 	ld.b %d2,[%a3]1
8000e936:	30 e2       	add.a %a2,%a14
8000e938:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000e93c:	df 02 46 06 	jeq %d2,0,8000f5c8 <_vfiprintf_r+0xd90>
8000e940:	80 c2       	mov.d %d2,%a12
8000e942:	82 0f       	mov %d15,0
8000e944:	82 03       	mov %d3,0
8000e946:	1b 12 00 40 	addi %d4,%d2,1
8000e94a:	a0 07       	mov.a %a7,0
8000e94c:	79 c2 01 00 	ld.b %d2,[%a12]1
8000e950:	b0 f7       	add.a %a7,-1
8000e952:	91 10 00 c8 	movh.a %a12,32769
8000e956:	60 4e       	mov.a %a14,%d4
8000e958:	e9 af 33 00 	st.b [%sp]51,%d15
8000e95c:	74 a3       	st.w [%sp],%d3
8000e95e:	82 0a       	mov %d10,0
8000e960:	d9 cc b8 be 	lea %a12,[%a12]-5384 <8000eaf8 <_vfiprintf_r+0x2c0>>
8000e964:	3b c0 06 90 	mov %d9,108
8000e968:	3b 80 06 80 	mov %d8,104
8000e96c:	80 7b       	mov.d %d11,%a7
8000e96e:	b0 1e       	add.a %a14,1
8000e970:	1b 02 fe 4f 	addi %d4,%d2,-32
8000e974:	8b b4 a5 32 	ge.u %d3,%d4,91
8000e978:	df 03 bc 00 	jeq %d3,0,8000eaf0 <_vfiprintf_r+0x2b8>
8000e97c:	b5 ae 08 00 	st.a [%sp]8,%a14
8000e980:	df 02 24 06 	jeq %d2,0,8000f5c8 <_vfiprintf_r+0xd90>
8000e984:	82 0f       	mov %d15,0
8000e986:	82 1e       	mov %d14,1
8000e988:	e9 a2 04 20 	st.b [%sp]132,%d2
8000e98c:	e9 af 33 00 	st.b [%sp]51,%d15
8000e990:	59 ae 04 00 	st.w [%sp]4,%d14
8000e994:	d9 ae 04 20 	lea %a14,[%sp]132
8000e998:	a0 07       	mov.a %a7,0
8000e99a:	19 a0 3c 00 	ld.w %d0,[%sp]60
8000e99e:	8f 2a 00 51 	and %d5,%d10,2
8000e9a2:	1b 10 00 70 	addi %d7,%d0,1
8000e9a6:	8f 4a 08 11 	and %d1,%d10,132
8000e9aa:	19 a6 00 10 	ld.w %d6,[%sp]64
8000e9ae:	ab 2e 00 e5 	cadd %d14,%d5,%d14,2
8000e9b2:	02 74       	mov %d4,%d7
8000e9b4:	df 01 07 80 	jne %d1,0,8000e9c2 <_vfiprintf_r+0x18a>
8000e9b8:	54 a2       	ld.w %d2,[%sp]
8000e9ba:	0b e2 80 80 	sub %d8,%d2,%d14
8000e9be:	ff 18 2a 04 	jge %d8,1,8000f212 <_vfiprintf_r+0x9da>
8000e9c2:	79 a3 33 00 	ld.b %d3,[%sp]51
8000e9c6:	df 03 14 00 	jeq %d3,0,8000e9ee <_vfiprintf_r+0x1b6>
8000e9ca:	82 17       	mov %d7,1
8000e9cc:	42 76       	add %d6,%d7
8000e9ce:	d9 a2 33 00 	lea %a2,[%sp]51
8000e9d2:	e8 02       	st.a [%a15]0,%a2
8000e9d4:	68 17       	st.w [%a15]4,%d7
8000e9d6:	59 a6 00 10 	st.w [%sp]64,%d6
8000e9da:	59 a4 3c 00 	st.w [%sp]60,%d4
8000e9de:	8b 84 80 32 	ge %d3,%d4,8
8000e9e2:	df 03 c6 83 	jne %d3,0,8000f16e <_vfiprintf_r+0x936>
8000e9e6:	02 40       	mov %d0,%d4
8000e9e8:	d9 ff 08 00 	lea %a15,[%a15]8
8000e9ec:	c2 14       	add %d4,1
8000e9ee:	df 05 2b 00 	jeq %d5,0,8000ea44 <_vfiprintf_r+0x20c>
8000e9f2:	82 23       	mov %d3,2
8000e9f4:	42 36       	add %d6,%d3
8000e9f6:	d9 a2 34 00 	lea %a2,[%sp]52
8000e9fa:	68 13       	st.w [%a15]4,%d3
8000e9fc:	e8 02       	st.a [%a15]0,%a2
8000e9fe:	59 a6 00 10 	st.w [%sp]64,%d6
8000ea02:	59 a4 3c 00 	st.w [%sp]60,%d4
8000ea06:	8b 84 80 32 	ge %d3,%d4,8
8000ea0a:	df 03 fd 03 	jeq %d3,0,8000f204 <_vfiprintf_r+0x9cc>
8000ea0e:	60 cf       	mov.a %a15,%d12
8000ea10:	82 14       	mov %d4,1
8000ea12:	82 00       	mov %d0,0
8000ea14:	df 06 18 00 	jeq %d6,0,8000ea44 <_vfiprintf_r+0x20c>
8000ea18:	60 d4       	mov.a %a4,%d13
8000ea1a:	d9 a6 38 00 	lea %a6,[%sp]56
8000ea1e:	40 d5       	mov.aa %a5,%a13
8000ea20:	b5 a7 28 00 	st.a [%sp]40,%a7
8000ea24:	59 a1 24 00 	st.w [%sp]36,%d1
8000ea28:	6d ff ca fe 	call 8000e7bc <__sprint_r.part.0>
8000ea2c:	df 02 58 81 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000ea30:	19 a0 3c 00 	ld.w %d0,[%sp]60
8000ea34:	99 a7 28 00 	ld.a %a7,[%sp]40
8000ea38:	19 a6 00 10 	ld.w %d6,[%sp]64
8000ea3c:	19 a1 24 00 	ld.w %d1,[%sp]36
8000ea40:	1b 10 00 40 	addi %d4,%d0,1
8000ea44:	8b 01 28 12 	ne %d1,%d1,128
8000ea48:	df 01 c0 02 	jeq %d1,0,8000efc8 <_vfiprintf_r+0x790>
8000ea4c:	19 a2 04 00 	ld.w %d2,[%sp]4
8000ea50:	80 78       	mov.d %d8,%a7
8000ea52:	a2 28       	sub %d8,%d2
8000ea54:	ff 18 30 03 	jge %d8,1,8000f0b4 <_vfiprintf_r+0x87c>
8000ea58:	19 a3 04 00 	ld.w %d3,[%sp]4
8000ea5c:	59 a4 3c 00 	st.w [%sp]60,%d4
8000ea60:	42 36       	add %d6,%d3
8000ea62:	e8 0e       	st.a [%a15]0,%a14
8000ea64:	68 13       	st.w [%a15]4,%d3
8000ea66:	59 a6 00 10 	st.w [%sp]64,%d6
8000ea6a:	8b 84 80 42 	ge %d4,%d4,8
8000ea6e:	df 04 82 02 	jeq %d4,0,8000ef72 <_vfiprintf_r+0x73a>
8000ea72:	df 06 32 04 	jeq %d6,0,8000f2d6 <_vfiprintf_r+0xa9e>
8000ea76:	60 d4       	mov.a %a4,%d13
8000ea78:	d9 a6 38 00 	lea %a6,[%sp]56
8000ea7c:	40 d5       	mov.aa %a5,%a13
8000ea7e:	6d ff 9f fe 	call 8000e7bc <__sprint_r.part.0>
8000ea82:	df 02 2d 81 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000ea86:	19 a6 00 10 	ld.w %d6,[%sp]64
8000ea8a:	60 cf       	mov.a %a15,%d12
8000ea8c:	6f 2a 07 00 	jz.t %d10,2,8000ea9a <_vfiprintf_r+0x262>
8000ea90:	54 a2       	ld.w %d2,[%sp]
8000ea92:	0b e2 80 80 	sub %d8,%d2,%d14
8000ea96:	ff 18 2a 04 	jge %d8,1,8000f2ea <_vfiprintf_r+0xab2>
8000ea9a:	54 a2       	ld.w %d2,[%sp]
8000ea9c:	0b e2 a0 e1 	max %d14,%d2,%d14
8000eaa0:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000eaa4:	42 e2       	add %d2,%d14
8000eaa6:	59 a2 0c 00 	st.w [%sp]12,%d2
8000eaaa:	df 06 11 81 	jne %d6,0,8000eccc <_vfiprintf_r+0x494>
8000eaae:	82 02       	mov %d2,0
8000eab0:	60 cf       	mov.a %a15,%d12
8000eab2:	59 a2 3c 00 	st.w [%sp]60,%d2
8000eab6:	1d ff fe fe 	j 8000e8b2 <_vfiprintf_r+0x7a>
8000eaba:	60 d4       	mov.a %a4,%d13
8000eabc:	40 f5       	mov.aa %a5,%a15
8000eabe:	6d ff 4e ea 	call 8000bf5a <__swsetup_r>
8000eac2:	df 02 c9 86 	jne %d2,0,8000f854 <_vfiprintf_r+0x101c>
8000eac6:	88 62       	ld.h %d2,[%a15]12
8000eac8:	3b a0 00 30 	mov %d3,10
8000eacc:	8f a2 01 21 	and %d2,%d2,26
8000ead0:	5f 32 da fe 	jne %d2,%d3,8000e884 <_vfiprintf_r+0x4c>
8000ead4:	88 72       	ld.h %d2,[%a15]14
8000ead6:	bf 02 d7 7e 	jlt %d2,0,8000e884 <_vfiprintf_r+0x4c>
8000eada:	99 a7 10 00 	ld.a %a7,[%sp]16
8000eade:	60 f6       	mov.a %a6,%d15
8000eae0:	60 d4       	mov.a %a4,%d13
8000eae2:	40 f5       	mov.aa %a5,%a15
8000eae4:	6d 00 d4 06 	call 8000f88c <__sbprintf>
8000eae8:	59 a2 0c 00 	st.w [%sp]12,%d2
8000eaec:	1d 00 fc 00 	j 8000ece4 <_vfiprintf_r+0x4ac>
8000eaf0:	01 c4 02 26 	addsc.a %a2,%a12,%d4,2
8000eaf4:	dc 02       	ji %a2
8000eaf6:	00 00       	nop 
8000eaf8:	1d 00 20 02 	j 8000ef38 <_vfiprintf_r+0x700>
8000eafc:	1d ff 40 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb00:	1d ff 3e ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb04:	1d 00 25 02 	j 8000ef4e <_vfiprintf_r+0x716>
8000eb08:	1d ff 3a ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb0c:	1d ff 38 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb10:	1d ff 36 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb14:	1d 00 b8 00 	j 8000ec84 <_vfiprintf_r+0x44c>
8000eb18:	1d ff 32 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb1c:	1d ff 30 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb20:	1d 00 1f 01 	j 8000ed5e <_vfiprintf_r+0x526>
8000eb24:	1d 00 ab 01 	j 8000ee7a <_vfiprintf_r+0x642>
8000eb28:	1d ff 2a ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb2c:	1d 00 26 01 	j 8000ed78 <_vfiprintf_r+0x540>
8000eb30:	1d 00 2a 01 	j 8000ed84 <_vfiprintf_r+0x54c>
8000eb34:	1d ff 24 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb38:	1d 00 ea 01 	j 8000ef0c <_vfiprintf_r+0x6d4>
8000eb3c:	1d 00 94 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb40:	1d 00 92 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb44:	1d 00 90 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb48:	1d 00 8e 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb4c:	1d 00 8c 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb50:	1d 00 8a 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb54:	1d 00 88 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb58:	1d 00 86 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb5c:	1d 00 84 00 	j 8000ec64 <_vfiprintf_r+0x42c>
8000eb60:	1d ff 0e ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb64:	1d ff 0c ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb68:	1d ff 0a ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb6c:	1d ff 08 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb70:	1d ff 06 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb74:	1d ff 04 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb78:	1d ff 02 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb7c:	1d ff 00 ff 	j 8000e97c <_vfiprintf_r+0x144>
8000eb80:	1d ff fe fe 	j 8000e97c <_vfiprintf_r+0x144>
8000eb84:	1d 00 d8 00 	j 8000ed34 <_vfiprintf_r+0x4fc>
8000eb88:	1d 00 54 01 	j 8000ee30 <_vfiprintf_r+0x5f8>
8000eb8c:	1d ff f8 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000eb90:	1d ff f6 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000eb94:	1d ff f4 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000eb98:	1d ff f2 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000eb9c:	1d ff f0 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000eba0:	1d ff ee fe 	j 8000e97c <_vfiprintf_r+0x144>
8000eba4:	1d ff ec fe 	j 8000e97c <_vfiprintf_r+0x144>
8000eba8:	1d ff ea fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebac:	1d ff e8 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebb0:	1d ff e6 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebb4:	1d 00 ff 00 	j 8000edb2 <_vfiprintf_r+0x57a>
8000ebb8:	1d ff e2 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebbc:	1d ff e0 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebc0:	1d ff de fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebc4:	1d 00 93 00 	j 8000ecea <_vfiprintf_r+0x4b2>
8000ebc8:	1d ff da fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebcc:	1d 00 a6 01 	j 8000ef18 <_vfiprintf_r+0x6e0>
8000ebd0:	1d ff d6 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebd4:	1d ff d4 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebd8:	1d 00 d7 04 	j 8000f586 <_vfiprintf_r+0xd4e>
8000ebdc:	1d ff d0 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebe0:	1d ff ce fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebe4:	1d ff cc fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebe8:	1d ff ca fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebec:	1d ff c8 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebf0:	1d ff c6 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebf4:	1d ff c4 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebf8:	1d ff c2 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ebfc:	1d ff c0 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec00:	1d ff be fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec04:	1d 00 98 00 	j 8000ed34 <_vfiprintf_r+0x4fc>
8000ec08:	1d 00 8d 04 	j 8000f522 <_vfiprintf_r+0xcea>
8000ec0c:	1d ff b8 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec10:	1d ff b6 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec14:	1d ff b4 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec18:	1d 00 72 01 	j 8000eefc <_vfiprintf_r+0x6c4>
8000ec1c:	1d 00 83 04 	j 8000f522 <_vfiprintf_r+0xcea>
8000ec20:	1d 00 50 00 	j 8000ecc0 <_vfiprintf_r+0x488>
8000ec24:	1d ff ac fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec28:	1d 00 62 01 	j 8000eeec <_vfiprintf_r+0x6b4>
8000ec2c:	1d ff a8 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec30:	1d 00 46 01 	j 8000eebc <_vfiprintf_r+0x684>
8000ec34:	1d 00 c5 04 	j 8000f5be <_vfiprintf_r+0xd86>
8000ec38:	1d 00 28 01 	j 8000ee88 <_vfiprintf_r+0x650>
8000ec3c:	1d 00 42 00 	j 8000ecc0 <_vfiprintf_r+0x488>
8000ec40:	1d ff 9e fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec44:	1d 00 53 00 	j 8000ecea <_vfiprintf_r+0x4b2>
8000ec48:	1d 00 38 00 	j 8000ecb8 <_vfiprintf_r+0x480>
8000ec4c:	1d 00 7a 04 	j 8000f540 <_vfiprintf_r+0xd08>
8000ec50:	1d ff 96 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec54:	1d ff 94 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec58:	1d 00 7a 04 	j 8000f54c <_vfiprintf_r+0xd14>
8000ec5c:	1d ff 90 fe 	j 8000e97c <_vfiprintf_r+0x144>
8000ec60:	1d 00 2c 00 	j 8000ecb8 <_vfiprintf_r+0x480>
8000ec64:	82 03       	mov %d3,0
8000ec66:	74 a3       	st.w [%sp],%d3
8000ec68:	1b 02 fd 3f 	addi %d3,%d2,-48
8000ec6c:	54 a2       	ld.w %d2,[%sp]
8000ec6e:	13 a2 20 23 	madd %d2,%d3,%d2,10
8000ec72:	74 a2       	st.w [%sp],%d2
8000ec74:	09 e2 01 00 	ld.b %d2,[%a14+]1
8000ec78:	1b 02 fd 3f 	addi %d3,%d2,-48
8000ec7c:	bf a3 f8 ff 	jlt.u %d3,10,8000ec6c <_vfiprintf_r+0x434>
8000ec80:	1d ff 78 fe 	j 8000e970 <_vfiprintf_r+0x138>
8000ec84:	60 d4       	mov.a %a4,%d13
8000ec86:	6d ff 01 ec 	call 8000c488 <_localeconv_r>
8000ec8a:	19 22 04 00 	ld.w %d2,[%a2]4
8000ec8e:	59 a2 1c 00 	st.w [%sp]28,%d2
8000ec92:	60 24       	mov.a %a4,%d2
8000ec94:	6d ff 3d d1 	call 80008f0e <strlen>
8000ec98:	60 d4       	mov.a %a4,%d13
8000ec9a:	02 2e       	mov %d14,%d2
8000ec9c:	59 a2 20 00 	st.w [%sp]32,%d2
8000eca0:	6d ff f4 eb 	call 8000c488 <_localeconv_r>
8000eca4:	19 23 08 00 	ld.w %d3,[%a2]8
8000eca8:	59 a3 18 00 	st.w [%sp]24,%d3
8000ecac:	8b 03 20 22 	ne %d2,%d3,0
8000ecb0:	8b 0e 20 24 	and.ne %d2,%d14,0
8000ecb4:	df 02 20 84 	jne %d2,0,8000f4f4 <_vfiprintf_r+0xcbc>
8000ecb8:	79 e2 00 00 	ld.b %d2,[%a14]0
8000ecbc:	1d ff 59 fe 	j 8000e96e <_vfiprintf_r+0x136>
8000ecc0:	79 e2 00 00 	ld.b %d2,[%a14]0
8000ecc4:	8f 0a 42 a1 	or %d10,%d10,32
8000ecc8:	1d ff 53 fe 	j 8000e96e <_vfiprintf_r+0x136>
8000eccc:	60 d4       	mov.a %a4,%d13
8000ecce:	d9 a6 38 00 	lea %a6,[%sp]56
8000ecd2:	40 d5       	mov.aa %a5,%a13
8000ecd4:	6d ff 74 fd 	call 8000e7bc <__sprint_r.part.0>
8000ecd8:	df 02 eb 7e 	jeq %d2,0,8000eaae <_vfiprintf_r+0x276>
8000ecdc:	40 df       	mov.aa %a15,%a13
8000ecde:	88 63       	ld.h %d3,[%a15]12
8000ece0:	6f 63 ba 85 	jnz.t %d3,6,8000f854 <_vfiprintf_r+0x101c>
8000ece4:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000ece8:	00 90       	ret 
8000ecea:	99 ac 10 00 	ld.a %a12,[%sp]16
8000ecee:	82 0f       	mov %d15,0
8000ecf0:	b5 ae 08 00 	st.a [%sp]8,%a14
8000ecf4:	40 c2       	mov.aa %a2,%a12
8000ecf6:	d4 2e       	ld.a %a14,[%a2]
8000ecf8:	e9 af 33 00 	st.b [%sp]51,%d15
8000ecfc:	b0 4c       	add.a %a12,4
8000ecfe:	bd 0e 47 05 	jz.a %a14,8000f78c <_vfiprintf_r+0xf54>
8000ed02:	df fb 15 04 	jeq %d11,-1,8000f52c <_vfiprintf_r+0xcf4>
8000ed06:	82 04       	mov %d4,0
8000ed08:	02 b5       	mov %d5,%d11
8000ed0a:	40 e4       	mov.aa %a4,%a14
8000ed0c:	59 ab 04 00 	st.w [%sp]4,%d11
8000ed10:	6d ff 9c e9 	call 8000c048 <memchr>
8000ed14:	99 a7 04 00 	ld.a %a7,[%sp]4
8000ed18:	80 23       	mov.d %d3,%a2
8000ed1a:	80 e4       	mov.d %d4,%a14
8000ed1c:	80 72       	mov.d %d2,%a7
8000ed1e:	0b 43 80 40 	sub %d4,%d3,%d4
8000ed22:	2b 24 40 23 	sel %d2,%d3,%d4,%d2
8000ed26:	b5 ac 10 00 	st.a [%sp]16,%a12
8000ed2a:	a0 07       	mov.a %a7,0
8000ed2c:	59 a2 04 00 	st.w [%sp]4,%d2
8000ed30:	1d 00 75 00 	j 8000ee1a <_vfiprintf_r+0x5e2>
8000ed34:	99 a2 10 00 	ld.a %a2,[%sp]16
8000ed38:	82 0f       	mov %d15,0
8000ed3a:	82 1e       	mov %d14,1
8000ed3c:	40 23       	mov.aa %a3,%a2
8000ed3e:	54 32       	ld.w %d2,[%a3]
8000ed40:	b0 42       	add.a %a2,4
8000ed42:	b5 ae 08 00 	st.a [%sp]8,%a14
8000ed46:	e9 a2 04 20 	st.b [%sp]132,%d2
8000ed4a:	e9 af 33 00 	st.b [%sp]51,%d15
8000ed4e:	b5 a2 10 00 	st.a [%sp]16,%a2
8000ed52:	59 ae 04 00 	st.w [%sp]4,%d14
8000ed56:	d9 ae 04 20 	lea %a14,[%sp]132
8000ed5a:	1d ff 1f fe 	j 8000e998 <_vfiprintf_r+0x160>
8000ed5e:	99 a2 10 00 	ld.a %a2,[%sp]16
8000ed62:	40 23       	mov.aa %a3,%a2
8000ed64:	54 32       	ld.w %d2,[%a3]
8000ed66:	74 a2       	st.w [%sp],%d2
8000ed68:	b0 42       	add.a %a2,4
8000ed6a:	ff 02 a2 03 	jge %d2,0,8000f4ae <_vfiprintf_r+0xc76>
8000ed6e:	54 a2       	ld.w %d2,[%sp]
8000ed70:	b5 a2 10 00 	st.a [%sp]16,%a2
8000ed74:	32 52       	rsub %d2
8000ed76:	74 a2       	st.w [%sp],%d2
8000ed78:	79 e2 00 00 	ld.b %d2,[%a14]0
8000ed7c:	8f 4a 40 a1 	or %d10,%d10,4
8000ed80:	1d ff f7 fd 	j 8000e96e <_vfiprintf_r+0x136>
8000ed84:	40 e2       	mov.aa %a2,%a14
8000ed86:	09 22 01 00 	ld.b %d2,[%a2+]1
8000ed8a:	8b a2 02 32 	eq %d3,%d2,42
8000ed8e:	df 03 70 85 	jne %d3,0,8000f86e <_vfiprintf_r+0x1036>
8000ed92:	1b 02 fd 3f 	addi %d3,%d2,-48
8000ed96:	40 2e       	mov.aa %a14,%a2
8000ed98:	82 0b       	mov %d11,0
8000ed9a:	ff a3 eb fd 	jge.u %d3,10,8000e970 <_vfiprintf_r+0x138>
8000ed9e:	09 e2 01 00 	ld.b %d2,[%a14+]1
8000eda2:	13 ab 20 b3 	madd %d11,%d3,%d11,10
8000eda6:	1b 02 fd 3f 	addi %d3,%d2,-48
8000edaa:	bf a3 fa ff 	jlt.u %d3,10,8000ed9e <_vfiprintf_r+0x566>
8000edae:	1d ff e1 fd 	j 8000e970 <_vfiprintf_r+0x138>
8000edb2:	60 b7       	mov.a %a7,%d11
8000edb4:	b5 ae 08 00 	st.a [%sp]8,%a14
8000edb8:	8f 0a 41 a1 	or %d10,%d10,16
8000edbc:	99 a2 10 00 	ld.a %a2,[%sp]16
8000edc0:	6f 5a 4e 03 	jz.t %d10,5,8000f45c <_vfiprintf_r+0xc24>
8000edc4:	09 26 48 01 	ld.d %e6,[%a2+]8
8000edc8:	b5 a2 10 00 	st.a [%sp]16,%a2
8000edcc:	b7 0a 01 e5 	insert %d14,%d10,0,10,1
8000edd0:	82 03       	mov %d3,0
8000edd2:	82 02       	mov %d2,0
8000edd4:	e9 a2 33 00 	st.b [%sp]51,%d2
8000edd8:	80 72       	mov.d %d2,%a7
8000edda:	df f2 d1 00 	jeq %d2,-1,8000ef7c <_vfiprintf_r+0x744>
8000edde:	0f 76 a0 40 	or %d4,%d6,%d7
8000ede2:	80 75       	mov.d %d5,%a7
8000ede4:	8b 04 20 22 	ne %d2,%d4,0
8000ede8:	8b 05 00 25 	or.ne %d2,%d5,0
8000edec:	8f 0e c8 a1 	andn %d10,%d14,128
8000edf0:	df 02 c5 80 	jne %d2,0,8000ef7a <_vfiprintf_r+0x742>
8000edf4:	82 02       	mov %d2,0
8000edf6:	a0 07       	mov.a %a7,0
8000edf8:	d9 ae 28 30 	lea %a14,[%sp]232
8000edfc:	59 a2 04 00 	st.w [%sp]4,%d2
8000ee00:	df 03 0d 80 	jne %d3,0,8000ee1a <_vfiprintf_r+0x5e2>
8000ee04:	8f 1e 00 21 	and %d2,%d14,1
8000ee08:	59 a2 04 00 	st.w [%sp]4,%d2
8000ee0c:	6f 0e 07 00 	jz.t %d14,0,8000ee1a <_vfiprintf_r+0x5e2>
8000ee10:	da 30       	mov %d15,48
8000ee12:	d9 ae 27 30 	lea %a14,[%sp]231
8000ee16:	e9 af 27 30 	st.b [%sp]231,%d15
8000ee1a:	19 a3 04 00 	ld.w %d3,[%sp]4
8000ee1e:	80 72       	mov.d %d2,%a7
8000ee20:	0b 32 a0 e1 	max %d14,%d2,%d3
8000ee24:	79 a3 33 00 	ld.b %d3,[%sp]51
8000ee28:	ab 1e 00 e3 	cadd %d14,%d3,%d14,1
8000ee2c:	1d ff b7 fd 	j 8000e99a <_vfiprintf_r+0x162>
8000ee30:	60 b7       	mov.a %a7,%d11
8000ee32:	b5 ae 08 00 	st.a [%sp]8,%a14
8000ee36:	8f 0a 41 a1 	or %d10,%d10,16
8000ee3a:	99 a2 10 00 	ld.a %a2,[%sp]16
8000ee3e:	6f 5a e6 02 	jz.t %d10,5,8000f40a <_vfiprintf_r+0xbd2>
8000ee42:	09 22 48 01 	ld.d %e2,[%a2+]8
8000ee46:	0b 23 10 68 	mov %e6,%d3,%d2
8000ee4a:	b5 a2 10 00 	st.a [%sp]16,%a2
8000ee4e:	bf 03 ef 02 	jlt %d3,0,8000f42c <_vfiprintf_r+0xbf4>
8000ee52:	80 72       	mov.d %d2,%a7
8000ee54:	df f2 ac 02 	jeq %d2,-1,8000f3ac <_vfiprintf_r+0xb74>
8000ee58:	0f 76 a0 30 	or %d3,%d6,%d7
8000ee5c:	8b 02 20 22 	ne %d2,%d2,0
8000ee60:	8b 03 00 25 	or.ne %d2,%d3,0
8000ee64:	8f 0a c8 a1 	andn %d10,%d10,128
8000ee68:	df 02 a2 82 	jne %d2,0,8000f3ac <_vfiprintf_r+0xb74>
8000ee6c:	a0 07       	mov.a %a7,0
8000ee6e:	59 a2 04 00 	st.w [%sp]4,%d2
8000ee72:	d9 ae 28 30 	lea %a14,[%sp]232
8000ee76:	1d ff d2 ff 	j 8000ee1a <_vfiprintf_r+0x5e2>
8000ee7a:	da 2b       	mov %d15,43
8000ee7c:	79 e2 00 00 	ld.b %d2,[%a14]0
8000ee80:	e9 af 33 00 	st.b [%sp]51,%d15
8000ee84:	1d ff 75 fd 	j 8000e96e <_vfiprintf_r+0x136>
8000ee88:	99 a2 10 00 	ld.a %a2,[%sp]16
8000ee8c:	3b 00 83 27 	mov %d2,30768
8000ee90:	60 b7       	mov.a %a7,%d11
8000ee92:	40 23       	mov.aa %a3,%a2
8000ee94:	b0 42       	add.a %a2,4
8000ee96:	b5 a2 10 00 	st.a [%sp]16,%a2
8000ee9a:	91 00 00 28 	movh.a %a2,32768
8000ee9e:	d9 22 d9 70 	lea %a2,[%a2]3545 <80000dd9 <_ctype_b+0x1d1>>
8000eea2:	54 36       	ld.w %d6,[%a3]
8000eea4:	b5 ae 08 00 	st.a [%sp]8 <80000dd9 <_ctype_b+0x1d1>>,%a14
8000eea8:	82 07       	mov %d7,0
8000eeaa:	8f 2a 40 e1 	or %d14,%d10,2
8000eeae:	f9 a2 34 00 	st.h [%sp]52,%d2
8000eeb2:	b5 a2 14 00 	st.a [%sp]20,%a2
8000eeb6:	82 23       	mov %d3,2
8000eeb8:	1d ff 8d ff 	j 8000edd2 <_vfiprintf_r+0x59a>
8000eebc:	99 a3 10 00 	ld.a %a3,[%sp]16
8000eec0:	b5 ae 08 00 	st.a [%sp]8,%a14
8000eec4:	d9 32 04 00 	lea %a2,[%a3]4
8000eec8:	6f 5a 22 83 	jnz.t %d10,5,8000f50c <_vfiprintf_r+0xcd4>
8000eecc:	6f 4a 56 84 	jnz.t %d10,4,8000f778 <_vfiprintf_r+0xf40>
8000eed0:	6f 6a 88 84 	jnz.t %d10,6,8000f7e0 <_vfiprintf_r+0xfa8>
8000eed4:	6f 9a 52 04 	jz.t %d10,9,8000f778 <_vfiprintf_r+0xf40>
8000eed8:	99 a3 10 00 	ld.a %a3,[%sp]16
8000eedc:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000eee0:	b5 a2 10 00 	st.a [%sp]16,%a2
8000eee4:	d4 33       	ld.a %a3,[%a3]
8000eee6:	34 32       	st.b [%a3],%d2
8000eee8:	1d ff e5 fc 	j 8000e8b2 <_vfiprintf_r+0x7a>
8000eeec:	79 e2 00 00 	ld.b %d2,[%a14]0
8000eef0:	5f 92 3d 04 	jeq %d2,%d9,8000f76a <_vfiprintf_r+0xf32>
8000eef4:	8f 0a 41 a1 	or %d10,%d10,16
8000eef8:	1d ff 3b fd 	j 8000e96e <_vfiprintf_r+0x136>
8000eefc:	79 e2 00 00 	ld.b %d2,[%a14]0
8000ef00:	5f 82 2e 04 	jeq %d2,%d8,8000f75c <_vfiprintf_r+0xf24>
8000ef04:	8f 0a 44 a1 	or %d10,%d10,64
8000ef08:	1d ff 33 fd 	j 8000e96e <_vfiprintf_r+0x136>
8000ef0c:	79 e2 00 00 	ld.b %d2,[%a14]0
8000ef10:	8f 0a 48 a1 	or %d10,%d10,128
8000ef14:	1d ff 2d fd 	j 8000e96e <_vfiprintf_r+0x136>
8000ef18:	60 b7       	mov.a %a7,%d11
8000ef1a:	b5 ae 08 00 	st.a [%sp]8,%a14
8000ef1e:	8f 0a 41 e1 	or %d14,%d10,16
8000ef22:	99 a2 10 00 	ld.a %a2,[%sp]16
8000ef26:	6f 5e 62 02 	jz.t %d14,5,8000f3ea <_vfiprintf_r+0xbb2>
8000ef2a:	09 26 48 01 	ld.d %e6,[%a2+]8
8000ef2e:	82 13       	mov %d3,1
8000ef30:	b5 a2 10 00 	st.a [%sp]16,%a2
8000ef34:	1d ff 4f ff 	j 8000edd2 <_vfiprintf_r+0x59a>
8000ef38:	79 a3 33 00 	ld.b %d3,[%sp]51
8000ef3c:	79 e2 00 00 	ld.b %d2,[%a14]0
8000ef40:	df 03 17 fd 	jne %d3,0,8000e96e <_vfiprintf_r+0x136>
8000ef44:	da 20       	mov %d15,32
8000ef46:	e9 af 33 00 	st.b [%sp]51,%d15
8000ef4a:	1d ff 12 fd 	j 8000e96e <_vfiprintf_r+0x136>
8000ef4e:	79 e2 00 00 	ld.b %d2,[%a14]0
8000ef52:	8f 1a 40 a1 	or %d10,%d10,1
8000ef56:	1d ff 0c fd 	j 8000e96e <_vfiprintf_r+0x136>
8000ef5a:	82 13       	mov %d3,1
8000ef5c:	19 a6 04 00 	ld.w %d6,[%sp]4
8000ef60:	60 cf       	mov.a %a15,%d12
8000ef62:	b5 ae 04 10 	st.a [%sp]68,%a14
8000ef66:	59 a6 08 10 	st.w [%sp]72,%d6
8000ef6a:	59 a6 00 10 	st.w [%sp]64,%d6
8000ef6e:	59 a3 3c 00 	st.w [%sp]60,%d3
8000ef72:	d9 ff 08 00 	lea %a15,[%a15]8
8000ef76:	1d ff 8b fd 	j 8000ea8c <_vfiprintf_r+0x254>
8000ef7a:	02 ae       	mov %d14,%d10
8000ef7c:	df 13 19 02 	jeq %d3,1,8000f3ae <_vfiprintf_r+0xb76>
8000ef80:	d9 ae 28 30 	lea %a14,[%sp]232
8000ef84:	df 23 8c 01 	jeq %d3,2,8000f29c <_vfiprintf_r+0xa64>
8000ef88:	58 02       	ld.w %d15,[%sp]8
8000ef8a:	8f 76 00 31 	and %d3,%d6,7
8000ef8e:	1b 03 03 30 	addi %d3,%d3,48
8000ef92:	77 67 80 6e 	dextr %d6,%d7,%d6,29
8000ef96:	06 d7       	sh %d7,-3
8000ef98:	8b 06 20 22 	ne %d2,%d6,0
8000ef9c:	40 e2       	mov.aa %a2,%a14
8000ef9e:	8b 07 00 25 	or.ne %d2,%d7,0
8000efa2:	89 e3 3f f4 	st.b [+%a14]-1,%d3
8000efa6:	df 02 f2 ff 	jne %d2,0,8000ef8a <_vfiprintf_r+0x752>
8000efaa:	8b 03 23 22 	ne %d2,%d3,48
8000efae:	78 02       	st.w [%sp]8,%d15
8000efb0:	26 e2       	and %d2,%d14
8000efb2:	df 02 30 83 	jne %d2,0,8000f612 <_vfiprintf_r+0xdda>
8000efb6:	d9 a2 28 30 	lea %a2,[%sp]232
8000efba:	01 e2 20 20 	sub.a %a2,%a2,%a14
8000efbe:	b5 a2 04 00 	st.a [%sp]4,%a2
8000efc2:	02 ea       	mov %d10,%d14
8000efc4:	1d ff 2b ff 	j 8000ee1a <_vfiprintf_r+0x5e2>
8000efc8:	54 a2       	ld.w %d2,[%sp]
8000efca:	0b e2 80 80 	sub %d8,%d2,%d14
8000efce:	bf 18 3f 7d 	jlt %d8,1,8000ea4c <_vfiprintf_r+0x214>
8000efd2:	8b 18 41 32 	lt %d3,%d8,17
8000efd6:	df 03 44 84 	jne %d3,0,8000f85e <_vfiprintf_r+0x1026>
8000efda:	1b f8 fe 3f 	addi %d3,%d8,-17
8000efde:	8f f3 60 31 	nor %d3,%d3,15
8000efe2:	91 00 00 c8 	movh.a %a12,32768
8000efe6:	02 ef       	mov %d15,%d14
8000efe8:	0b 83 00 90 	add %d9,%d3,%d8
8000efec:	d9 cc f4 70 	lea %a12,[%a12]3572 <80000df4 <zeroes.0>>
8000eff0:	3b 00 01 b0 	mov %d11,16
8000eff4:	80 7e       	mov.d %d14,%a7
8000eff6:	1d 00 0b 00 	j 8000f00c <_vfiprintf_r+0x7d4>
8000effa:	1b 20 00 20 	addi %d2,%d0,2
8000effe:	d9 ff 08 00 	lea %a15,[%a15]8
8000f002:	02 30       	mov %d0,%d3
8000f004:	1b 08 ff 8f 	addi %d8,%d8,-16
8000f008:	5f 89 27 00 	jeq %d9,%d8,8000f056 <_vfiprintf_r+0x81e>
8000f00c:	1b 10 00 30 	addi %d3,%d0,1
8000f010:	1b 06 01 60 	addi %d6,%d6,16
8000f014:	e8 0c       	st.a [%a15]0,%a12
8000f016:	68 1b       	st.w [%a15]4,%d11
8000f018:	59 a6 00 10 	st.w [%sp]64,%d6
8000f01c:	59 a3 3c 00 	st.w [%sp]60,%d3
8000f020:	8b 83 80 22 	ge %d2,%d3,8
8000f024:	df 02 eb 7f 	jeq %d2,0,8000effa <_vfiprintf_r+0x7c2>
8000f028:	60 cf       	mov.a %a15,%d12
8000f02a:	82 12       	mov %d2,1
8000f02c:	82 00       	mov %d0,0
8000f02e:	df 06 eb 7f 	jeq %d6,0,8000f004 <_vfiprintf_r+0x7cc>
8000f032:	60 d4       	mov.a %a4,%d13
8000f034:	d9 a6 38 00 	lea %a6,[%sp]56
8000f038:	40 d5       	mov.aa %a5,%a13
8000f03a:	6d ff c1 fb 	call 8000e7bc <__sprint_r.part.0>
8000f03e:	df 02 4f fe 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f042:	19 a0 3c 00 	ld.w %d0,[%sp]60
8000f046:	1b 08 ff 8f 	addi %d8,%d8,-16
8000f04a:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f04e:	1b 10 00 20 	addi %d2,%d0,1
8000f052:	5f 89 dd ff 	jne %d9,%d8,8000f00c <_vfiprintf_r+0x7d4>
8000f056:	60 e7       	mov.a %a7,%d14
8000f058:	02 fe       	mov %d14,%d15
8000f05a:	42 96       	add %d6,%d9
8000f05c:	e8 0c       	st.a [%a15]0,%a12
8000f05e:	68 19       	st.w [%a15]4,%d9
8000f060:	59 a6 00 10 	st.w [%sp]64,%d6
8000f064:	59 a2 3c 00 	st.w [%sp]60,%d2
8000f068:	8b 82 80 32 	ge %d3,%d2,8
8000f06c:	d9 ff 08 00 	lea %a15,[%a15]8
8000f070:	1b 12 00 40 	addi %d4,%d2,1
8000f074:	02 20       	mov %d0,%d2
8000f076:	df 03 eb 7c 	jeq %d3,0,8000ea4c <_vfiprintf_r+0x214>
8000f07a:	60 cf       	mov.a %a15,%d12
8000f07c:	82 14       	mov %d4,1
8000f07e:	82 00       	mov %d0,0
8000f080:	df 06 e6 7c 	jeq %d6,0,8000ea4c <_vfiprintf_r+0x214>
8000f084:	60 d4       	mov.a %a4,%d13
8000f086:	d9 a6 38 00 	lea %a6,[%sp]56
8000f08a:	40 d5       	mov.aa %a5,%a13
8000f08c:	b5 a7 24 00 	st.a [%sp]36,%a7
8000f090:	6d ff 96 fb 	call 8000e7bc <__sprint_r.part.0>
8000f094:	df 02 24 fe 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f098:	99 a7 24 00 	ld.a %a7,[%sp]36
8000f09c:	19 a2 04 00 	ld.w %d2,[%sp]4
8000f0a0:	19 a0 3c 00 	ld.w %d0,[%sp]60
8000f0a4:	80 78       	mov.d %d8,%a7
8000f0a6:	a2 28       	sub %d8,%d2
8000f0a8:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f0ac:	1b 10 00 40 	addi %d4,%d0,1
8000f0b0:	bf 18 d4 7c 	jlt %d8,1,8000ea58 <_vfiprintf_r+0x220>
8000f0b4:	8b 18 41 32 	lt %d3,%d8,17
8000f0b8:	df 03 82 83 	jne %d3,0,8000f7bc <_vfiprintf_r+0xf84>
8000f0bc:	1b f8 fe 3f 	addi %d3,%d8,-17
8000f0c0:	8f f3 60 31 	nor %d3,%d3,15
8000f0c4:	91 00 00 c8 	movh.a %a12,32768
8000f0c8:	58 02       	ld.w %d15,[%sp]8
8000f0ca:	0b 83 00 90 	add %d9,%d3,%d8
8000f0ce:	d9 cc f4 70 	lea %a12,[%a12]3572 <80000df4 <zeroes.0>>
8000f0d2:	3b 00 01 b0 	mov %d11,16
8000f0d6:	1b 10 00 30 	addi %d3,%d0,1
8000f0da:	1b 06 01 60 	addi %d6,%d6,16
8000f0de:	e8 0c       	st.a [%a15]0,%a12
8000f0e0:	68 1b       	st.w [%a15]4,%d11
8000f0e2:	59 a6 00 10 	st.w [%sp]64,%d6
8000f0e6:	59 a3 3c 00 	st.w [%sp]60,%d3
8000f0ea:	8b 83 80 22 	ge %d2,%d3,8
8000f0ee:	1b 20 00 40 	addi %d4,%d0,2
8000f0f2:	d9 ff 08 00 	lea %a15,[%a15]8
8000f0f6:	02 30       	mov %d0,%d3
8000f0f8:	df 02 15 00 	jeq %d2,0,8000f122 <_vfiprintf_r+0x8ea>
8000f0fc:	60 cf       	mov.a %a15,%d12
8000f0fe:	82 14       	mov %d4,1
8000f100:	82 00       	mov %d0,0
8000f102:	df 06 10 00 	jeq %d6,0,8000f122 <_vfiprintf_r+0x8ea>
8000f106:	60 d4       	mov.a %a4,%d13
8000f108:	d9 a6 38 00 	lea %a6,[%sp]56
8000f10c:	40 d5       	mov.aa %a5,%a13
8000f10e:	6d ff 57 fb 	call 8000e7bc <__sprint_r.part.0>
8000f112:	df 02 e5 fd 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f116:	19 a0 3c 00 	ld.w %d0,[%sp]60
8000f11a:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f11e:	1b 10 00 40 	addi %d4,%d0,1
8000f122:	1b 08 ff 8f 	addi %d8,%d8,-16
8000f126:	5f 89 d8 ff 	jne %d9,%d8,8000f0d6 <_vfiprintf_r+0x89e>
8000f12a:	78 02       	st.w [%sp]8,%d15
8000f12c:	42 96       	add %d6,%d9
8000f12e:	e8 0c       	st.a [%a15]0,%a12
8000f130:	68 19       	st.w [%a15]4,%d9
8000f132:	59 a4 3c 00 	st.w [%sp]60,%d4
8000f136:	8b 84 80 32 	ge %d3,%d4,8
8000f13a:	59 a6 00 10 	st.w [%sp]64,%d6
8000f13e:	d9 ff 08 00 	lea %a15,[%a15]8
8000f142:	c2 14       	add %d4,1
8000f144:	df 03 8a 7c 	jeq %d3,0,8000ea58 <_vfiprintf_r+0x220>
8000f148:	df 06 09 7f 	jeq %d6,0,8000ef5a <_vfiprintf_r+0x722>
8000f14c:	60 d4       	mov.a %a4,%d13
8000f14e:	d9 a6 38 00 	lea %a6,[%sp]56
8000f152:	40 d5       	mov.aa %a5,%a13
8000f154:	6d ff 34 fb 	call 8000e7bc <__sprint_r.part.0>
8000f158:	df 02 c2 fd 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f15c:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000f160:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f164:	60 cf       	mov.a %a15,%d12
8000f166:	1b 12 00 40 	addi %d4,%d2,1
8000f16a:	1d ff 77 fc 	j 8000ea58 <_vfiprintf_r+0x220>
8000f16e:	df 06 90 01 	jeq %d6,0,8000f48e <_vfiprintf_r+0xc56>
8000f172:	60 d4       	mov.a %a4,%d13
8000f174:	d9 a6 38 00 	lea %a6,[%sp]56
8000f178:	40 d5       	mov.aa %a5,%a13
8000f17a:	b5 a7 2c 00 	st.a [%sp]44,%a7
8000f17e:	59 a1 28 00 	st.w [%sp]40,%d1
8000f182:	59 a5 24 00 	st.w [%sp]36,%d5
8000f186:	6d ff 1b fb 	call 8000e7bc <__sprint_r.part.0>
8000f18a:	df 02 a9 fd 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f18e:	19 a0 3c 00 	ld.w %d0,[%sp]60
8000f192:	99 a7 2c 00 	ld.a %a7,[%sp]44
8000f196:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f19a:	60 cf       	mov.a %a15,%d12
8000f19c:	19 a1 28 00 	ld.w %d1,[%sp]40
8000f1a0:	19 a5 24 00 	ld.w %d5,[%sp]36
8000f1a4:	1b 10 00 40 	addi %d4,%d0,1
8000f1a8:	1d ff 23 fc 	j 8000e9ee <_vfiprintf_r+0x1b6>
8000f1ac:	99 a7 24 00 	ld.a %a7,[%sp]36
8000f1b0:	02 e1       	mov %d1,%d14
8000f1b2:	19 ae 28 00 	ld.w %d14,[%sp]40
8000f1b6:	02 a5       	mov %d5,%d10
8000f1b8:	02 fa       	mov %d10,%d15
8000f1ba:	42 96       	add %d6,%d9
8000f1bc:	e8 0c       	st.a [%a15]0,%a12
8000f1be:	68 19       	st.w [%a15]4,%d9
8000f1c0:	59 a6 00 10 	st.w [%sp]64,%d6
8000f1c4:	59 a2 3c 00 	st.w [%sp]60,%d2
8000f1c8:	8b 82 80 32 	ge %d3,%d2,8
8000f1cc:	d9 ff 08 00 	lea %a15,[%a15]8
8000f1d0:	1b 12 00 40 	addi %d4,%d2,1
8000f1d4:	02 20       	mov %d0,%d2
8000f1d6:	df 03 f6 7b 	jeq %d3,0,8000e9c2 <_vfiprintf_r+0x18a>
8000f1da:	df 06 70 81 	jne %d6,0,8000f4ba <_vfiprintf_r+0xc82>
8000f1de:	79 a2 33 00 	ld.b %d2,[%sp]51
8000f1e2:	df 02 f4 82 	jne %d2,0,8000f7ca <_vfiprintf_r+0xf92>
8000f1e6:	60 cf       	mov.a %a15,%d12
8000f1e8:	82 00       	mov %d0,0
8000f1ea:	82 14       	mov %d4,1
8000f1ec:	df 05 30 7c 	jeq %d5,0,8000ea4c <_vfiprintf_r+0x214>
8000f1f0:	82 22       	mov %d2,2
8000f1f2:	d9 a2 34 00 	lea %a2,[%sp]52
8000f1f6:	60 cf       	mov.a %a15,%d12
8000f1f8:	b5 a2 04 10 	st.a [%sp]68,%a2
8000f1fc:	59 a2 08 10 	st.w [%sp]72,%d2
8000f200:	82 14       	mov %d4,1
8000f202:	02 26       	mov %d6,%d2
8000f204:	02 40       	mov %d0,%d4
8000f206:	d9 ff 08 00 	lea %a15,[%a15]8
8000f20a:	1b 10 00 40 	addi %d4,%d0,1
8000f20e:	1d ff 1b fc 	j 8000ea44 <_vfiprintf_r+0x20c>
8000f212:	8b 18 41 32 	lt %d3,%d8,17
8000f216:	df 03 0e 83 	jne %d3,0,8000f832 <_vfiprintf_r+0xffa>
8000f21a:	1b f8 fe 3f 	addi %d3,%d8,-17
8000f21e:	8f f3 60 31 	nor %d3,%d3,15
8000f222:	91 00 00 c8 	movh.a %a12,32768
8000f226:	59 ae 28 00 	st.w [%sp]40,%d14
8000f22a:	0b 83 00 90 	add %d9,%d3,%d8
8000f22e:	0b 1a 10 e8 	mov %e14,%d10,%d1
8000f232:	d9 cc c4 80 	lea %a12,[%a12]3588 <80000e04 <blanks.1>>
8000f236:	3b 00 01 b0 	mov %d11,16
8000f23a:	b5 a7 24 00 	st.a [%sp]36,%a7
8000f23e:	02 5a       	mov %d10,%d5
8000f240:	1d 00 0d 00 	j 8000f25a <_vfiprintf_r+0xa22>
8000f244:	1b 20 00 20 	addi %d2,%d0,2
8000f248:	d9 ff 08 00 	lea %a15,[%a15]8
8000f24c:	02 70       	mov %d0,%d7
8000f24e:	1b 08 ff 8f 	addi %d8,%d8,-16
8000f252:	5f 89 ad 7f 	jeq %d9,%d8,8000f1ac <_vfiprintf_r+0x974>
8000f256:	1b 10 00 70 	addi %d7,%d0,1
8000f25a:	1b 06 01 60 	addi %d6,%d6,16
8000f25e:	e8 0c       	st.a [%a15]0,%a12
8000f260:	68 1b       	st.w [%a15]4,%d11
8000f262:	59 a6 00 10 	st.w [%sp]64,%d6
8000f266:	59 a7 3c 00 	st.w [%sp]60,%d7
8000f26a:	8b 87 80 22 	ge %d2,%d7,8
8000f26e:	df 02 eb 7f 	jeq %d2,0,8000f244 <_vfiprintf_r+0xa0c>
8000f272:	60 cf       	mov.a %a15,%d12
8000f274:	82 00       	mov %d0,0
8000f276:	82 12       	mov %d2,1
8000f278:	df 06 eb 7f 	jeq %d6,0,8000f24e <_vfiprintf_r+0xa16>
8000f27c:	60 d4       	mov.a %a4,%d13
8000f27e:	d9 a6 38 00 	lea %a6,[%sp]56
8000f282:	40 d5       	mov.aa %a5,%a13
8000f284:	6d ff 9c fa 	call 8000e7bc <__sprint_r.part.0>
8000f288:	df 02 2a fd 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f28c:	19 a0 3c 00 	ld.w %d0,[%sp]60
8000f290:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f294:	1b 10 00 20 	addi %d2,%d0,1
8000f298:	1d ff db ff 	j 8000f24e <_vfiprintf_r+0xa16>
8000f29c:	99 a3 14 00 	ld.a %a3,[%sp]20
8000f2a0:	58 02       	ld.w %d15,[%sp]8
8000f2a2:	8f f6 00 21 	and %d2,%d6,15
8000f2a6:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
8000f2aa:	77 67 00 6e 	dextr %d6,%d7,%d6,28
8000f2ae:	14 22       	ld.bu %d2,[%a2]
8000f2b0:	89 e2 3f f4 	st.b [+%a14]-1,%d2
8000f2b4:	06 c7       	sh %d7,-4
8000f2b6:	8b 06 20 22 	ne %d2,%d6,0
8000f2ba:	8b 07 00 25 	or.ne %d2,%d7,0
8000f2be:	df 02 f2 ff 	jne %d2,0,8000f2a2 <_vfiprintf_r+0xa6a>
8000f2c2:	d9 a2 28 30 	lea %a2,[%sp]232
8000f2c6:	01 e2 20 20 	sub.a %a2,%a2,%a14
8000f2ca:	78 02       	st.w [%sp]8,%d15
8000f2cc:	b5 a2 04 00 	st.a [%sp]4,%a2
8000f2d0:	02 ea       	mov %d10,%d14
8000f2d2:	1d ff a4 fd 	j 8000ee1a <_vfiprintf_r+0x5e2>
8000f2d6:	59 a6 3c 00 	st.w [%sp]60,%d6
8000f2da:	6f 2a 5f 00 	jz.t %d10,2,8000f398 <_vfiprintf_r+0xb60>
8000f2de:	54 a2       	ld.w %d2,[%sp]
8000f2e0:	0b e2 80 80 	sub %d8,%d2,%d14
8000f2e4:	bf 18 5a 00 	jlt %d8,1,8000f398 <_vfiprintf_r+0xb60>
8000f2e8:	60 cf       	mov.a %a15,%d12
8000f2ea:	8b 18 41 32 	lt %d3,%d8,17
8000f2ee:	19 a4 3c 00 	ld.w %d4,[%sp]60
8000f2f2:	df 03 a8 82 	jne %d3,0,8000f842 <_vfiprintf_r+0x100a>
8000f2f6:	1b f8 fe 3f 	addi %d3,%d8,-17
8000f2fa:	8f f3 60 31 	nor %d3,%d3,15
8000f2fe:	91 00 00 c8 	movh.a %a12,32768
8000f302:	58 02       	ld.w %d15,[%sp]8
8000f304:	0b 83 00 90 	add %d9,%d3,%d8
8000f308:	d9 cc c4 80 	lea %a12,[%a12]3588 <80000e04 <blanks.1>>
8000f30c:	3b 00 01 a0 	mov %d10,16
8000f310:	1b 14 00 20 	addi %d2,%d4,1
8000f314:	1b 06 01 60 	addi %d6,%d6,16
8000f318:	e8 0c       	st.a [%a15]0,%a12
8000f31a:	68 1a       	st.w [%a15]4,%d10
8000f31c:	59 a6 00 10 	st.w [%sp]64,%d6
8000f320:	59 a2 3c 00 	st.w [%sp]60,%d2
8000f324:	8b 82 80 32 	ge %d3,%d2,8
8000f328:	1b 24 00 50 	addi %d5,%d4,2
8000f32c:	d9 ff 08 00 	lea %a15,[%a15]8
8000f330:	02 24       	mov %d4,%d2
8000f332:	df 03 15 00 	jeq %d3,0,8000f35c <_vfiprintf_r+0xb24>
8000f336:	60 cf       	mov.a %a15,%d12
8000f338:	82 15       	mov %d5,1
8000f33a:	82 04       	mov %d4,0
8000f33c:	df 06 10 00 	jeq %d6,0,8000f35c <_vfiprintf_r+0xb24>
8000f340:	60 d4       	mov.a %a4,%d13
8000f342:	d9 a6 38 00 	lea %a6,[%sp]56
8000f346:	40 d5       	mov.aa %a5,%a13
8000f348:	6d ff 3a fa 	call 8000e7bc <__sprint_r.part.0>
8000f34c:	df 02 c8 fc 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f350:	19 a4 3c 00 	ld.w %d4,[%sp]60
8000f354:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f358:	1b 14 00 50 	addi %d5,%d4,1
8000f35c:	1b 08 ff 8f 	addi %d8,%d8,-16
8000f360:	5f 89 d8 ff 	jne %d9,%d8,8000f310 <_vfiprintf_r+0xad8>
8000f364:	78 02       	st.w [%sp]8,%d15
8000f366:	42 96       	add %d6,%d9
8000f368:	59 a5 3c 00 	st.w [%sp]60,%d5
8000f36c:	e8 0c       	st.a [%a15]0,%a12
8000f36e:	68 19       	st.w [%a15]4,%d9
8000f370:	59 a6 00 10 	st.w [%sp]64,%d6
8000f374:	8b 85 40 52 	lt %d5,%d5,8
8000f378:	df 05 91 fb 	jne %d5,0,8000ea9a <_vfiprintf_r+0x262>
8000f37c:	df 06 0e 00 	jeq %d6,0,8000f398 <_vfiprintf_r+0xb60>
8000f380:	60 d4       	mov.a %a4,%d13
8000f382:	d9 a6 38 00 	lea %a6,[%sp]56
8000f386:	40 d5       	mov.aa %a5,%a13
8000f388:	6d ff 1a fa 	call 8000e7bc <__sprint_r.part.0>
8000f38c:	df 02 a8 fc 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f390:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f394:	1d ff 83 fb 	j 8000ea9a <_vfiprintf_r+0x262>
8000f398:	54 a2       	ld.w %d2,[%sp]
8000f39a:	0b e2 a0 e1 	max %d14,%d2,%d14
8000f39e:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000f3a2:	42 e2       	add %d2,%d14
8000f3a4:	59 a2 0c 00 	st.w [%sp]12,%d2
8000f3a8:	1d ff 83 fb 	j 8000eaae <_vfiprintf_r+0x276>
8000f3ac:	02 ae       	mov %d14,%d10
8000f3ae:	a0 9c       	mov.a %a12,9
8000f3b0:	8b 07 00 22 	eq %d2,%d7,0
8000f3b4:	80 c3       	mov.d %d3,%a12
8000f3b6:	60 23       	mov.a %a3,%d2
8000f3b8:	0b 63 50 22 	and.ge.u %d2,%d3,%d6
8000f3bc:	df 02 39 01 	jeq %d2,0,8000f62e <_vfiprintf_r+0xdf6>
8000f3c0:	1b 06 03 60 	addi %d6,%d6,48
8000f3c4:	82 12       	mov %d2,1
8000f3c6:	02 ea       	mov %d10,%d14
8000f3c8:	e9 a6 27 30 	st.b [%sp]231,%d6
8000f3cc:	59 a2 04 00 	st.w [%sp]4,%d2
8000f3d0:	d9 ae 27 30 	lea %a14,[%sp]231
8000f3d4:	1d ff 23 fd 	j 8000ee1a <_vfiprintf_r+0x5e2>
8000f3d8:	99 ac 08 00 	ld.a %a12,[%sp]8
8000f3dc:	1d ff b0 fa 	j 8000e93c <_vfiprintf_r+0x104>
8000f3e0:	60 cf       	mov.a %a15,%d12
8000f3e2:	59 a2 3c 00 	st.w [%sp]60,%d2
8000f3e6:	1d ff a4 fa 	j 8000e92e <_vfiprintf_r+0xf6>
8000f3ea:	40 23       	mov.aa %a3,%a2
8000f3ec:	b0 42       	add.a %a2,4
8000f3ee:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f3f2:	54 32       	ld.w %d2,[%a3]
8000f3f4:	6f 4e 06 80 	jnz.t %d14,4,8000f400 <_vfiprintf_r+0xbc8>
8000f3f8:	6f 6e d7 01 	jz.t %d14,6,8000f7a6 <_vfiprintf_r+0xf6e>
8000f3fc:	37 02 70 20 	extr.u %d2,%d2,0,16
8000f400:	53 12 40 60 	mul.u %e6,%d2,1
8000f404:	82 13       	mov %d3,1
8000f406:	1d ff e6 fc 	j 8000edd2 <_vfiprintf_r+0x59a>
8000f40a:	40 23       	mov.aa %a3,%a2
8000f40c:	b0 42       	add.a %a2,4
8000f40e:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f412:	54 34       	ld.w %d4,[%a3]
8000f414:	6f 4a 1e 80 	jnz.t %d10,4,8000f450 <_vfiprintf_r+0xc18>
8000f418:	6f 6a 14 00 	jz.t %d10,6,8000f440 <_vfiprintf_r+0xc08>
8000f41c:	37 04 50 40 	extr %d4,%d4,0,16
8000f420:	0b 40 00 68 	mov %e6,%d4
8000f424:	0b 67 10 28 	mov %e2,%d7,%d6
8000f428:	ff 03 15 7d 	jge %d3,0,8000ee52 <_vfiprintf_r+0x61a>
8000f42c:	32 57       	rsub %d7
8000f42e:	32 56       	rsub %d6
8000f430:	ab f7 1f 76 	cadd %d7,%d6,%d7,-1
8000f434:	02 ae       	mov %d14,%d10
8000f436:	3b d0 02 20 	mov %d2,45
8000f43a:	82 13       	mov %d3,1
8000f43c:	1d ff cc fc 	j 8000edd4 <_vfiprintf_r+0x59c>
8000f440:	0b 40 00 68 	mov %e6,%d4
8000f444:	0b 67 10 28 	mov %e2,%d7,%d6
8000f448:	6f 9a 03 7d 	jz.t %d10,9,8000ee4e <_vfiprintf_r+0x616>
8000f44c:	37 04 48 40 	extr %d4,%d4,0,8
8000f450:	0b 40 00 68 	mov %e6,%d4
8000f454:	0b 67 10 28 	mov %e2,%d7,%d6
8000f458:	1d ff fb fc 	j 8000ee4e <_vfiprintf_r+0x616>
8000f45c:	40 23       	mov.aa %a3,%a2
8000f45e:	b0 42       	add.a %a2,4
8000f460:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f464:	54 32       	ld.w %d2,[%a3]
8000f466:	6f 4a 10 80 	jnz.t %d10,4,8000f486 <_vfiprintf_r+0xc4e>
8000f46a:	6f 6a 08 00 	jz.t %d10,6,8000f47a <_vfiprintf_r+0xc42>
8000f46e:	37 02 70 20 	extr.u %d2,%d2,0,16
8000f472:	53 12 40 60 	mul.u %e6,%d2,1
8000f476:	1d ff ab fc 	j 8000edcc <_vfiprintf_r+0x594>
8000f47a:	53 12 40 60 	mul.u %e6,%d2,1
8000f47e:	6f 9a a7 7c 	jz.t %d10,9,8000edcc <_vfiprintf_r+0x594>
8000f482:	8f f2 0f 21 	and %d2,%d2,255
8000f486:	53 12 40 60 	mul.u %e6,%d2,1
8000f48a:	1d ff a1 fc 	j 8000edcc <_vfiprintf_r+0x594>
8000f48e:	60 cf       	mov.a %a15,%d12
8000f490:	82 00       	mov %d0,0
8000f492:	02 74       	mov %d4,%d7
8000f494:	df 05 d8 7a 	jeq %d5,0,8000ea44 <_vfiprintf_r+0x20c>
8000f498:	82 23       	mov %d3,2
8000f49a:	d9 a2 34 00 	lea %a2,[%sp]52
8000f49e:	b5 a2 04 10 	st.a [%sp]68,%a2
8000f4a2:	59 a3 08 10 	st.w [%sp]72,%d3
8000f4a6:	02 70       	mov %d0,%d7
8000f4a8:	02 36       	mov %d6,%d3
8000f4aa:	1d ff ae fe 	j 8000f206 <_vfiprintf_r+0x9ce>
8000f4ae:	79 e2 00 00 	ld.b %d2,[%a14]0
8000f4b2:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f4b6:	1d ff 5c fa 	j 8000e96e <_vfiprintf_r+0x136>
8000f4ba:	60 d4       	mov.a %a4,%d13
8000f4bc:	d9 a6 38 00 	lea %a6,[%sp]56
8000f4c0:	40 d5       	mov.aa %a5,%a13
8000f4c2:	b5 a7 2c 00 	st.a [%sp]44,%a7
8000f4c6:	59 a1 28 00 	st.w [%sp]40,%d1
8000f4ca:	59 a5 24 00 	st.w [%sp]36,%d5
8000f4ce:	6d ff 77 f9 	call 8000e7bc <__sprint_r.part.0>
8000f4d2:	df 02 05 fc 	jne %d2,0,8000ecdc <_vfiprintf_r+0x4a4>
8000f4d6:	19 a0 3c 00 	ld.w %d0,[%sp]60
8000f4da:	99 a7 2c 00 	ld.a %a7,[%sp]44
8000f4de:	19 a6 00 10 	ld.w %d6,[%sp]64
8000f4e2:	60 cf       	mov.a %a15,%d12
8000f4e4:	19 a1 28 00 	ld.w %d1,[%sp]40
8000f4e8:	19 a5 24 00 	ld.w %d5,[%sp]36
8000f4ec:	1b 10 00 40 	addi %d4,%d0,1
8000f4f0:	1d ff 69 fa 	j 8000e9c2 <_vfiprintf_r+0x18a>
8000f4f4:	99 a2 18 00 	ld.a %a2,[%sp]24
8000f4f8:	b7 fa 01 35 	insert %d3,%d10,15,10,1
8000f4fc:	79 e2 00 00 	ld.b %d2,[%a14]0
8000f500:	79 24 00 00 	ld.b %d4,[%a2]0
8000f504:	2b a3 40 a4 	sel %d10,%d4,%d3,%d10
8000f508:	1d ff 33 fa 	j 8000e96e <_vfiprintf_r+0x136>
8000f50c:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000f510:	d4 33       	ld.a %a3,[%a3]
8000f512:	0b 20 00 28 	mov %e2,%d2
8000f516:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f51a:	89 32 40 09 	st.d [%a3],%e2
8000f51e:	1d ff ca f9 	j 8000e8b2 <_vfiprintf_r+0x7a>
8000f522:	60 b7       	mov.a %a7,%d11
8000f524:	b5 ae 08 00 	st.a [%sp]8,%a14
8000f528:	1d ff 89 fc 	j 8000ee3a <_vfiprintf_r+0x602>
8000f52c:	40 e4       	mov.aa %a4,%a14
8000f52e:	6d ff f0 cc 	call 80008f0e <strlen>
8000f532:	59 a2 04 00 	st.w [%sp]4,%d2
8000f536:	b5 ac 10 00 	st.a [%sp]16,%a12
8000f53a:	a0 07       	mov.a %a7,0
8000f53c:	1d ff 6f fc 	j 8000ee1a <_vfiprintf_r+0x5e2>
8000f540:	60 b7       	mov.a %a7,%d11
8000f542:	b5 ae 08 00 	st.a [%sp]8,%a14
8000f546:	02 ae       	mov %d14,%d10
8000f548:	1d ff ed fc 	j 8000ef22 <_vfiprintf_r+0x6ea>
8000f54c:	91 00 00 28 	movh.a %a2,32768
8000f550:	d9 22 d9 70 	lea %a2,[%a2]3545 <80000dd9 <_ctype_b+0x1d1>>
8000f554:	b5 a2 14 00 	st.a [%sp]20 <80000dd9 <_ctype_b+0x1d1>>,%a2
8000f558:	b5 ae 08 00 	st.a [%sp]8 <80000dd9 <_ctype_b+0x1d1>>,%a14
8000f55c:	99 a2 10 00 	ld.a %a2,[%sp]16 <80000dd9 <_ctype_b+0x1d1>>
8000f560:	60 b7       	mov.a %a7,%d11
8000f562:	6f 5a 1f 00 	jz.t %d10,5,8000f5a0 <_vfiprintf_r+0xd68>
8000f566:	09 26 48 01 	ld.d %e6,[%a2+]8
8000f56a:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f56e:	0f 76 a0 30 	or %d3,%d6,%d7
8000f572:	8b 03 20 32 	ne %d3,%d3,0
8000f576:	26 a3       	and %d3,%d10
8000f578:	df 03 44 80 	jne %d3,0,8000f600 <_vfiprintf_r+0xdc8>
8000f57c:	b7 0a 01 e5 	insert %d14,%d10,0,10,1
8000f580:	82 23       	mov %d3,2
8000f582:	1d ff 28 fc 	j 8000edd2 <_vfiprintf_r+0x59a>
8000f586:	91 00 00 28 	movh.a %a2,32768
8000f58a:	d9 22 c8 70 	lea %a2,[%a2]3528 <80000dc8 <_ctype_b+0x1c0>>
8000f58e:	b5 a2 14 00 	st.a [%sp]20 <80000dc8 <_ctype_b+0x1c0>>,%a2
8000f592:	b5 ae 08 00 	st.a [%sp]8 <80000dc8 <_ctype_b+0x1c0>>,%a14
8000f596:	99 a2 10 00 	ld.a %a2,[%sp]16 <80000dc8 <_ctype_b+0x1c0>>
8000f59a:	60 b7       	mov.a %a7,%d11
8000f59c:	6f 5a e5 ff 	jnz.t %d10,5,8000f566 <_vfiprintf_r+0xd2e>
8000f5a0:	40 23       	mov.aa %a3,%a2
8000f5a2:	b0 42       	add.a %a2,4
8000f5a4:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f5a8:	54 33       	ld.w %d3,[%a3]
8000f5aa:	6f 4a 22 80 	jnz.t %d10,4,8000f5ee <_vfiprintf_r+0xdb6>
8000f5ae:	6f 6a 1a 00 	jz.t %d10,6,8000f5e2 <_vfiprintf_r+0xdaa>
8000f5b2:	37 03 70 30 	extr.u %d3,%d3,0,16
8000f5b6:	53 13 40 60 	mul.u %e6,%d3,1
8000f5ba:	1d ff da ff 	j 8000f56e <_vfiprintf_r+0xd36>
8000f5be:	60 b7       	mov.a %a7,%d11
8000f5c0:	b5 ae 08 00 	st.a [%sp]8,%a14
8000f5c4:	1d ff fc fb 	j 8000edbc <_vfiprintf_r+0x584>
8000f5c8:	19 a2 00 10 	ld.w %d2,[%sp]64
8000f5cc:	40 df       	mov.aa %a15,%a13
8000f5ce:	df 02 88 7b 	jeq %d2,0,8000ecde <_vfiprintf_r+0x4a6>
8000f5d2:	60 d4       	mov.a %a4,%d13
8000f5d4:	d9 a6 38 00 	lea %a6,[%sp]56
8000f5d8:	40 d5       	mov.aa %a5,%a13
8000f5da:	6d ff f1 f8 	call 8000e7bc <__sprint_r.part.0>
8000f5de:	1d ff 80 fb 	j 8000ecde <_vfiprintf_r+0x4a6>
8000f5e2:	53 13 40 60 	mul.u %e6,%d3,1
8000f5e6:	6f 9a c4 7f 	jz.t %d10,9,8000f56e <_vfiprintf_r+0xd36>
8000f5ea:	8f f3 0f 31 	and %d3,%d3,255
8000f5ee:	53 13 40 60 	mul.u %e6,%d3,1
8000f5f2:	0f 76 a0 30 	or %d3,%d6,%d7
8000f5f6:	8b 03 20 32 	ne %d3,%d3,0
8000f5fa:	26 a3       	and %d3,%d10
8000f5fc:	df 03 c0 7f 	jeq %d3,0,8000f57c <_vfiprintf_r+0xd44>
8000f600:	da 30       	mov %d15,48
8000f602:	e9 a2 35 00 	st.b [%sp]53,%d2
8000f606:	8f 2a 40 a1 	or %d10,%d10,2
8000f60a:	e9 af 34 00 	st.b [%sp]52,%d15
8000f60e:	1d ff b7 ff 	j 8000f57c <_vfiprintf_r+0xd44>
8000f612:	da 30       	mov %d15,48
8000f614:	b0 e2       	add.a %a2,-2
8000f616:	d9 a3 28 30 	lea %a3,[%sp]232
8000f61a:	01 23 20 30 	sub.a %a3,%a3,%a2
8000f61e:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000f622:	b5 a3 04 00 	st.a [%sp]4,%a3
8000f626:	02 ea       	mov %d10,%d14
8000f628:	40 2e       	mov.aa %a14,%a2
8000f62a:	1d ff f8 fb 	j 8000ee1a <_vfiprintf_r+0x5e2>
8000f62e:	3b 00 40 20 	mov %d2,1024
8000f632:	26 e2       	and %d2,%d14
8000f634:	a0 04       	mov.a %a4,0
8000f636:	40 f6       	mov.aa %a6,%a15
8000f638:	b5 ad 24 00 	st.a [%sp]36,%a13
8000f63c:	80 3f       	mov.d %d15,%a3
8000f63e:	99 ad 18 00 	ld.a %a13,[%sp]24
8000f642:	60 e3       	mov.a %a3,%d14
8000f644:	60 2f       	mov.a %a15,%d2
8000f646:	d9 a2 28 30 	lea %a2,[%sp]232
8000f64a:	59 ad 04 00 	st.w [%sp]4,%d13
8000f64e:	80 4e       	mov.d %d14,%a4
8000f650:	1d 00 30 00 	j 8000f6b0 <_vfiprintf_r+0xe78>
8000f654:	b7 0a 04 2e 	insert %d2,%d10,0,28,4
8000f658:	7b d0 cc 1c 	movh %d1,52429
8000f65c:	42 d2       	add %d2,%d13
8000f65e:	42 2b       	add %d11,%d2
8000f660:	7b d0 cc 2c 	movh %d2,52429
8000f664:	1b d2 cc 2c 	addi %d2,%d2,-13107
8000f668:	73 2b 68 20 	mul.u %e2,%d11,%d2
8000f66c:	1b d1 cc 1c 	addi %d1,%d1,-13107
8000f670:	1b f1 ff 8f 	addi %d8,%d1,-1
8000f674:	8f e3 1f 20 	sh %d2,%d3,-2
8000f678:	13 b2 3f 2b 	madd %d2,%d11,%d2,-5
8000f67c:	82 03       	mov %d3,0
8000f67e:	0b 26 c0 a0 	subx %d10,%d6,%d2
8000f682:	0b 37 d0 b0 	subc %d11,%d7,%d3
8000f686:	73 1a 68 20 	mul.u %e2,%d10,%d1
8000f68a:	03 8a 0a 33 	madd %d3,%d3,%d10,%d8
8000f68e:	03 1b 0a 33 	madd %d3,%d3,%d11,%d1
8000f692:	77 23 80 9f 	dextr %d9,%d3,%d2,31
8000f696:	80 c2       	mov.d %d2,%a12
8000f698:	0b 62 30 f2 	and.lt.u %d15,%d2,%d6
8000f69c:	8b 07 00 f5 	or.ne %d15,%d7,0
8000f6a0:	8f f3 1f 80 	sh %d8,%d3,-1
8000f6a4:	df 0f 4e 00 	jeq %d15,0,8000f740 <_vfiprintf_r+0xf08>
8000f6a8:	0b 98 10 68 	mov %e6,%d8,%d9
8000f6ac:	40 e2       	mov.aa %a2,%a14
8000f6ae:	ba 07       	eq %d15,%d7,0
8000f6b0:	77 67 00 a2 	dextr %d10,%d7,%d6,4
8000f6b4:	b7 06 04 de 	insert %d13,%d6,0,28,4
8000f6b8:	b7 0a 04 2e 	insert %d2,%d10,0,28,4
8000f6bc:	8f 87 1e b0 	sh %d11,%d7,-24
8000f6c0:	42 d2       	add %d2,%d13
8000f6c2:	0b b2 00 40 	add %d4,%d2,%d11
8000f6c6:	7b d0 cc 2c 	movh %d2,52429
8000f6ca:	1b d2 cc 2c 	addi %d2,%d2,-13107
8000f6ce:	73 24 68 20 	mul.u %e2,%d4,%d2
8000f6d2:	7b d0 cc 1c 	movh %d1,52429
8000f6d6:	1b d1 cc 1c 	addi %d1,%d1,-13107
8000f6da:	8f e3 1f 20 	sh %d2,%d3,-2
8000f6de:	13 b2 3f 24 	madd %d2,%d4,%d2,-5
8000f6e2:	82 03       	mov %d3,0
8000f6e4:	1b f1 ff 8f 	addi %d8,%d1,-1
8000f6e8:	0b 26 c0 20 	subx %d2,%d6,%d2
8000f6ec:	0b 37 d0 30 	subc %d3,%d7,%d3
8000f6f0:	60 24       	mov.a %a4,%d2
8000f6f2:	60 35       	mov.a %a5,%d3
8000f6f4:	73 12 68 20 	mul.u %e2,%d2,%d1
8000f6f8:	80 44       	mov.d %d4,%a4
8000f6fa:	80 55       	mov.d %d5,%a5
8000f6fc:	03 84 0a 33 	madd %d3,%d3,%d4,%d8
8000f700:	d9 2e ff ff 	lea %a14,[%a2]-1
8000f704:	c2 1e       	add %d14,1
8000f706:	03 15 0a 33 	madd %d3,%d3,%d5,%d1
8000f70a:	77 23 80 9f 	dextr %d9,%d3,%d2,31
8000f70e:	8f f3 1f 80 	sh %d8,%d3,-1
8000f712:	33 a9 40 26 	msub.u %e2,%e6,%d9,10
8000f716:	1b 02 03 20 	addi %d2,%d2,48
8000f71a:	e9 22 ff ff 	st.b [%a2]-1,%d2
8000f71e:	bd 0f 9b 7f 	jz.a %a15,8000f654 <_vfiprintf_r+0xe1c>
8000f722:	79 d2 00 00 	ld.b %d2,[%a13]0
8000f726:	0b e2 00 31 	eq %d3,%d2,%d14
8000f72a:	8b f2 27 34 	and.ne %d3,%d2,127
8000f72e:	df 03 93 7f 	jeq %d3,0,8000f654 <_vfiprintf_r+0xe1c>
8000f732:	80 c2       	mov.d %d2,%a12
8000f734:	0b 62 30 f2 	and.lt.u %d15,%d2,%d6
8000f738:	8b 07 00 f5 	or.ne %d15,%d7,0
8000f73c:	df 0f 5c 80 	jne %d15,0,8000f7f4 <_vfiprintf_r+0xfbc>
8000f740:	b5 ad 18 00 	st.a [%sp]24,%a13
8000f744:	19 ad 04 00 	ld.w %d13,[%sp]4
8000f748:	99 ad 24 00 	ld.a %a13,[%sp]36
8000f74c:	80 3e       	mov.d %d14,%a3
8000f74e:	40 6f       	mov.aa %a15,%a6
8000f750:	1d ff 33 fc 	j 8000efb6 <_vfiprintf_r+0x77e>
8000f754:	6d ff 35 cb 	call 80008dbe <__sinit>
8000f758:	1d ff 7c f8 	j 8000e850 <_vfiprintf_r+0x18>
8000f75c:	79 e2 01 00 	ld.b %d2,[%a14]1
8000f760:	b7 fa 81 a4 	insert %d10,%d10,15,9,1
8000f764:	b0 1e       	add.a %a14,1
8000f766:	1d ff 04 f9 	j 8000e96e <_vfiprintf_r+0x136>
8000f76a:	79 e2 01 00 	ld.b %d2,[%a14]1
8000f76e:	8f 0a 42 a1 	or %d10,%d10,32
8000f772:	b0 1e       	add.a %a14,1
8000f774:	1d ff fd f8 	j 8000e96e <_vfiprintf_r+0x136>
8000f778:	99 a3 10 00 	ld.a %a3,[%sp]16
8000f77c:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000f780:	d4 33       	ld.a %a3,[%a3]
8000f782:	74 32       	st.w [%a3],%d2
8000f784:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f788:	1d ff 95 f8 	j 8000e8b2 <_vfiprintf_r+0x7a>
8000f78c:	8b 6b 20 23 	min.u %d2,%d11,6
8000f790:	91 00 00 e8 	movh.a %a14,32768
8000f794:	02 2e       	mov %d14,%d2
8000f796:	59 a2 04 00 	st.w [%sp]4,%d2
8000f79a:	b5 ac 10 00 	st.a [%sp]16,%a12
8000f79e:	d9 ee ea 70 	lea %a14,[%a14]3562 <80000dea <_ctype_b+0x1e2>>
8000f7a2:	1d ff fb f8 	j 8000e998 <_vfiprintf_r+0x160>
8000f7a6:	53 12 40 60 	mul.u %e6,%d2,1
8000f7aa:	82 13       	mov %d3,1
8000f7ac:	6f 9e 13 7b 	jz.t %d14,9,8000edd2 <_vfiprintf_r+0x59a>
8000f7b0:	8f f2 0f 21 	and %d2,%d2,255
8000f7b4:	53 12 40 60 	mul.u %e6,%d2,1
8000f7b8:	1d ff 0d fb 	j 8000edd2 <_vfiprintf_r+0x59a>
8000f7bc:	91 00 00 c8 	movh.a %a12,32768
8000f7c0:	02 89       	mov %d9,%d8
8000f7c2:	d9 cc f4 70 	lea %a12,[%a12]3572 <80000df4 <zeroes.0>>
8000f7c6:	1d ff b3 fc 	j 8000f12c <_vfiprintf_r+0x8f4>
8000f7ca:	82 14       	mov %d4,1
8000f7cc:	d9 a2 33 00 	lea %a2,[%sp]51
8000f7d0:	60 cf       	mov.a %a15,%d12
8000f7d2:	b5 a2 04 10 	st.a [%sp]68,%a2
8000f7d6:	59 a4 08 10 	st.w [%sp]72,%d4
8000f7da:	02 46       	mov %d6,%d4
8000f7dc:	1d ff 05 f9 	j 8000e9e6 <_vfiprintf_r+0x1ae>
8000f7e0:	99 a3 10 00 	ld.a %a3,[%sp]16
8000f7e4:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000f7e8:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f7ec:	d4 33       	ld.a %a3,[%a3]
8000f7ee:	b4 32       	st.h [%a3],%d2
8000f7f0:	1d ff 61 f8 	j 8000e8b2 <_vfiprintf_r+0x7a>
8000f7f4:	99 a2 20 00 	ld.a %a2,[%sp]32
8000f7f8:	99 a5 1c 00 	ld.a %a5,[%sp]28
8000f7fc:	b5 a6 2c 00 	st.a [%sp]44,%a6
8000f800:	01 2e 20 e0 	sub.a %a14,%a14,%a2
8000f804:	80 24       	mov.d %d4,%a2
8000f806:	40 e4       	mov.aa %a4,%a14
8000f808:	b5 a7 28 00 	st.a [%sp]40,%a7
8000f80c:	b5 a3 18 00 	st.a [%sp]24,%a3
8000f810:	6d ff c3 cb 	call 80008f96 <strncpy>
8000f814:	79 d2 01 00 	ld.b %d2,[%a13]1
8000f818:	80 d3       	mov.d %d3,%a13
8000f81a:	ab 13 00 22 	cadd %d2,%d2,%d3,1
8000f81e:	99 a3 18 00 	ld.a %a3,[%sp]24
8000f822:	99 a7 28 00 	ld.a %a7,[%sp]40
8000f826:	99 a6 2c 00 	ld.a %a6,[%sp]44
8000f82a:	60 2d       	mov.a %a13,%d2
8000f82c:	82 0e       	mov %d14,0
8000f82e:	1d ff 3d ff 	j 8000f6a8 <_vfiprintf_r+0xe70>
8000f832:	91 00 00 c8 	movh.a %a12,32768
8000f836:	02 72       	mov %d2,%d7
8000f838:	02 89       	mov %d9,%d8
8000f83a:	d9 cc c4 80 	lea %a12,[%a12]3588 <80000e04 <blanks.1>>
8000f83e:	1d ff be fc 	j 8000f1ba <_vfiprintf_r+0x982>
8000f842:	91 00 00 c8 	movh.a %a12,32768
8000f846:	1b 14 00 50 	addi %d5,%d4,1
8000f84a:	02 89       	mov %d9,%d8
8000f84c:	d9 cc c4 80 	lea %a12,[%a12]3588 <80000e04 <blanks.1>>
8000f850:	1d ff 8b fd 	j 8000f366 <_vfiprintf_r+0xb2e>
8000f854:	82 f2       	mov %d2,-1
8000f856:	59 a2 0c 00 	st.w [%sp]12,%d2
8000f85a:	1d ff 45 fa 	j 8000ece4 <_vfiprintf_r+0x4ac>
8000f85e:	91 00 00 c8 	movh.a %a12,32768
8000f862:	02 42       	mov %d2,%d4
8000f864:	02 89       	mov %d9,%d8
8000f866:	d9 cc f4 70 	lea %a12,[%a12]3572 <80000df4 <zeroes.0>>
8000f86a:	1d ff f8 fb 	j 8000f05a <_vfiprintf_r+0x822>
8000f86e:	99 a3 10 00 	ld.a %a3,[%sp]16
8000f872:	79 e2 01 00 	ld.b %d2,[%a14]1
8000f876:	40 2e       	mov.aa %a14,%a2
8000f878:	40 34       	mov.aa %a4,%a3
8000f87a:	54 4b       	ld.w %d11,[%a4]
8000f87c:	b0 43       	add.a %a3,4
8000f87e:	8b fb 5f b3 	max %d11,%d11,-1
8000f882:	b5 a3 10 00 	st.a [%sp]16,%a3
8000f886:	1d ff 74 f8 	j 8000e96e <_vfiprintf_r+0x136>

8000f88a <_vfiprintf_r_end>:
	...

8000f88c <__sbprintf>:
8000f88c:	c9 52 0c 00 	ld.h %d2,[%a5]12
8000f890:	d9 aa 98 ef 	lea %sp,[%sp]-1128
8000f894:	8f 22 c0 21 	andn %d2,%d2,2
8000f898:	d9 a2 28 10 	lea %a2,[%sp]104
8000f89c:	40 5c       	mov.aa %a12,%a5
8000f89e:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000f8a2:	19 52 24 10 	ld.w %d2,[%a5]100
8000f8a6:	59 a2 24 10 	st.w [%sp]100,%d2
8000f8aa:	c9 52 0e 00 	ld.h %d2,[%a5]14
8000f8ae:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000f8b2:	19 52 1c 00 	ld.w %d2,[%a5]28
8000f8b6:	59 a2 1c 00 	st.w [%sp]28,%d2
8000f8ba:	19 52 24 00 	ld.w %d2,[%a5]36
8000f8be:	59 a2 24 00 	st.w [%sp]36,%d2
8000f8c2:	3b 00 40 20 	mov %d2,1024
8000f8c6:	40 a5       	mov.aa %a5,%sp
8000f8c8:	80 49       	mov.d %d9,%a4
8000f8ca:	59 a2 08 00 	st.w [%sp]8,%d2
8000f8ce:	59 a2 14 00 	st.w [%sp]20,%d2
8000f8d2:	82 02       	mov %d2,0
8000f8d4:	f4 a2       	st.a [%sp],%a2
8000f8d6:	b5 a2 10 00 	st.a [%sp]16,%a2
8000f8da:	59 a2 18 00 	st.w [%sp]24,%d2
8000f8de:	6d ff ad f7 	call 8000e838 <_vfiprintf_r>
8000f8e2:	02 28       	mov %d8,%d2
8000f8e4:	bf 02 08 00 	jlt %d2,0,8000f8f4 <__sbprintf+0x68>
8000f8e8:	60 94       	mov.a %a4,%d9
8000f8ea:	40 a5       	mov.aa %a5,%sp
8000f8ec:	6d ff 93 c9 	call 80008c12 <_fflush_r>
8000f8f0:	ab f8 bf 82 	seln %d8,%d2,%d8,-1
8000f8f4:	c9 a2 0c 00 	ld.h %d2,[%sp]12
8000f8f8:	6f 62 08 00 	jz.t %d2,6,8000f908 <__sbprintf+0x7c>
8000f8fc:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000f900:	8f 02 44 21 	or %d2,%d2,64
8000f904:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000f908:	02 82       	mov %d2,%d8
8000f90a:	00 90       	ret 

8000f90c <__fputwc>:
8000f90c:	20 08       	sub.a %sp,8
8000f90e:	80 4a       	mov.d %d10,%a4
8000f910:	02 4b       	mov %d11,%d4
8000f912:	40 5c       	mov.aa %a12,%a5
8000f914:	6d ff b3 e5 	call 8000c47a <__locale_mb_cur_max>
8000f918:	df 12 08 80 	jne %d2,1,8000f928 <__fputwc+0x1c>
8000f91c:	1b fb ff 3f 	addi %d3,%d11,-1
8000f920:	8b f3 af 32 	ge.u %d3,%d3,255
8000f924:	df 03 3c 00 	jeq %d3,0,8000f99c <__fputwc+0x90>
8000f928:	60 a4       	mov.a %a4,%d10
8000f92a:	d9 c6 1c 10 	lea %a6,[%a12]92
8000f92e:	02 b4       	mov %d4,%d11
8000f930:	d9 a5 04 00 	lea %a5,[%sp]4
8000f934:	6d 00 55 00 	call 8000f9de <_wcrtomb_r>
8000f938:	02 28       	mov %d8,%d2
8000f93a:	df f2 3b 00 	jeq %d2,-1,8000f9b0 <__fputwc+0xa4>
8000f93e:	df 02 36 00 	jeq %d2,0,8000f9aa <__fputwc+0x9e>
8000f942:	79 a5 04 00 	ld.b %d5,[%sp]4
8000f946:	d9 ad 05 00 	lea %a13,[%sp]5
8000f94a:	82 09       	mov %d9,0
8000f94c:	1d 00 0c 00 	j 8000f964 <__fputwc+0x58>
8000f950:	d4 c2       	ld.a %a2,[%a12]
8000f952:	d9 23 01 00 	lea %a3,[%a2]1
8000f956:	f4 c3       	st.a [%a12],%a3
8000f958:	34 24       	st.b [%a2],%d4
8000f95a:	c2 19       	add %d9,1
8000f95c:	7f 89 27 80 	jge.u %d9,%d8,8000f9aa <__fputwc+0x9e>
8000f960:	09 d5 01 00 	ld.b %d5,[%a13+]1
8000f964:	19 c2 08 00 	ld.w %d2,[%a12]8
8000f968:	d9 c2 08 00 	lea %a2,[%a12]8
8000f96c:	1b f2 ff 3f 	addi %d3,%d2,-1
8000f970:	8f f5 0f 41 	and %d4,%d5,255
8000f974:	74 23       	st.w [%a2],%d3
8000f976:	ff 03 ed 7f 	jge %d3,0,8000f950 <__fputwc+0x44>
8000f97a:	19 c6 18 00 	ld.w %d6,[%a12]24
8000f97e:	8b a5 20 22 	ne %d2,%d5,10
8000f982:	0b 63 40 22 	and.ge %d2,%d3,%d6
8000f986:	df 02 e5 ff 	jne %d2,0,8000f950 <__fputwc+0x44>
8000f98a:	60 a4       	mov.a %a4,%d10
8000f98c:	40 c5       	mov.aa %a5,%a12
8000f98e:	6d 00 45 00 	call 8000fa18 <__swbuf_r>
8000f992:	df f2 e4 ff 	jne %d2,-1,8000f95a <__fputwc+0x4e>
8000f996:	02 28       	mov %d8,%d2
8000f998:	02 82       	mov %d2,%d8
8000f99a:	00 90       	ret 
8000f99c:	37 0b 48 50 	extr %d5,%d11,0,8
8000f9a0:	02 28       	mov %d8,%d2
8000f9a2:	e9 a5 04 00 	st.b [%sp]4,%d5
8000f9a6:	1d ff d0 ff 	j 8000f946 <__fputwc+0x3a>
8000f9aa:	02 b8       	mov %d8,%d11
8000f9ac:	02 82       	mov %d2,%d8
8000f9ae:	00 90       	ret 
8000f9b0:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000f9b4:	8f 02 44 21 	or %d2,%d2,64
8000f9b8:	f9 c2 0c 00 	st.h [%a12]12,%d2
8000f9bc:	1d ff ee ff 	j 8000f998 <__fputwc+0x8c>

8000f9c0 <_fputwc_r>:
8000f9c0:	c9 52 0c 00 	ld.h %d2,[%a5]12
8000f9c4:	6f d2 0a 80 	jnz.t %d2,13,8000f9d8 <_fputwc_r+0x18>
8000f9c8:	b7 f2 81 26 	insert %d2,%d2,15,13,1
8000f9cc:	f9 52 0c 00 	st.h [%a5]12,%d2
8000f9d0:	b7 10 a1 26 	imask %e2,1,13,1
8000f9d4:	49 52 64 18 	ldmst [%a5]100,%e2
8000f9d8:	6d ff 9a ff 	call 8000f90c <__fputwc>
8000f9dc:	00 90       	ret 

8000f9de <_wcrtomb_r>:
8000f9de:	91 00 00 26 	movh.a %a2,24576
8000f9e2:	99 22 68 90 	ld.a %a2,[%a2]1640 <60000668 <__global_locale+0xe0>>
8000f9e6:	20 10       	sub.a %sp,16
8000f9e8:	40 4c       	mov.aa %a12,%a4
8000f9ea:	40 6d       	mov.aa %a13,%a6
8000f9ec:	bd 05 0d 00 	jz.a %a5,8000fa06 <_wcrtomb_r+0x28>
8000f9f0:	2d 02 00 00 	calli %a2
8000f9f4:	df f2 03 00 	jeq %d2,-1,8000f9fa <_wcrtomb_r+0x1c>
8000f9f8:	00 90       	ret 
8000f9fa:	82 03       	mov %d3,0
8000f9fc:	74 d3       	st.w [%a13],%d3
8000f9fe:	3b a0 08 30 	mov %d3,138
8000fa02:	74 c3       	st.w [%a12],%d3
8000fa04:	00 90       	ret 
8000fa06:	82 04       	mov %d4,0
8000fa08:	d9 a5 04 00 	lea %a5,[%sp]4
8000fa0c:	2d 02 00 00 	calli %a2
8000fa10:	df f2 f4 ff 	jne %d2,-1,8000f9f8 <_wcrtomb_r+0x1a>
8000fa14:	1d ff f3 ff 	j 8000f9fa <_wcrtomb_r+0x1c>

8000fa18 <__swbuf_r>:
8000fa18:	20 08       	sub.a %sp,8
8000fa1a:	40 4d       	mov.aa %a13,%a4
8000fa1c:	02 48       	mov %d8,%d4
8000fa1e:	40 5c       	mov.aa %a12,%a5
8000fa20:	bd 04 06 00 	jz.a %a4,8000fa2c <__swbuf_r+0x14>
8000fa24:	19 42 34 00 	ld.w %d2,[%a4]52
8000fa28:	df 02 74 00 	jeq %d2,0,8000fb10 <__swbuf_r+0xf8>
8000fa2c:	19 c2 18 00 	ld.w %d2,[%a12]24
8000fa30:	c9 c3 0c 00 	ld.h %d3,[%a12]12
8000fa34:	59 c2 08 00 	st.w [%a12]8,%d2
8000fa38:	6f 33 2d 00 	jz.t %d3,3,8000fa92 <__swbuf_r+0x7a>
8000fa3c:	19 c2 10 00 	ld.w %d2,[%a12]16
8000fa40:	df 02 29 00 	jeq %d2,0,8000fa92 <__swbuf_r+0x7a>
8000fa44:	8f f8 0f 91 	and %d9,%d8,255
8000fa48:	8f f8 0f 81 	and %d8,%d8,255
8000fa4c:	6f d3 33 00 	jz.t %d3,13,8000fab2 <__swbuf_r+0x9a>
8000fa50:	d4 c2       	ld.a %a2,[%a12]
8000fa52:	80 23       	mov.d %d3,%a2
8000fa54:	0b 23 80 20 	sub %d2,%d3,%d2
8000fa58:	19 c3 14 00 	ld.w %d3,[%a12]20
8000fa5c:	7f 32 47 00 	jge %d2,%d3,8000faea <__swbuf_r+0xd2>
8000fa60:	1b 12 00 30 	addi %d3,%d2,1
8000fa64:	19 c2 08 00 	ld.w %d2,[%a12]8
8000fa68:	d9 c3 08 00 	lea %a3,[%a12]8
8000fa6c:	c2 f2       	add %d2,-1
8000fa6e:	74 32       	st.w [%a3],%d2
8000fa70:	d9 23 01 00 	lea %a3,[%a2]1
8000fa74:	f4 c3       	st.a [%a12],%a3
8000fa76:	34 29       	st.b [%a2],%d9
8000fa78:	19 c2 14 00 	ld.w %d2,[%a12]20
8000fa7c:	5f 32 41 00 	jeq %d2,%d3,8000fafe <__swbuf_r+0xe6>
8000fa80:	c9 c2 0c 00 	ld.h %d2,[%a12]12
8000fa84:	8b a8 00 32 	eq %d3,%d8,10
8000fa88:	26 32       	and %d2,%d3
8000fa8a:	df 02 3a 80 	jne %d2,0,8000fafe <__swbuf_r+0xe6>
8000fa8e:	02 82       	mov %d2,%d8
8000fa90:	00 90       	ret 
8000fa92:	40 c5       	mov.aa %a5,%a12
8000fa94:	40 d4       	mov.aa %a4,%a13
8000fa96:	6d ff 62 e2 	call 8000bf5a <__swsetup_r>
8000fa9a:	df 02 38 80 	jne %d2,0,8000fb0a <__swbuf_r+0xf2>
8000fa9e:	c9 c3 0c 00 	ld.h %d3,[%a12]12
8000faa2:	8f f8 0f 91 	and %d9,%d8,255
8000faa6:	19 c2 10 00 	ld.w %d2,[%a12]16
8000faaa:	8f f8 0f 81 	and %d8,%d8,255
8000faae:	6f d3 d1 ff 	jnz.t %d3,13,8000fa50 <__swbuf_r+0x38>
8000fab2:	b7 f3 81 36 	insert %d3,%d3,15,13,1
8000fab6:	89 ae c0 09 	st.da [%sp],%a14
8000faba:	c5 02 00 02 	lea %a2,2000 <LCF_CSA0_SIZE>
8000fabe:	b5 a2 04 00 	st.a [%sp]4,%a2
8000fac2:	f9 c3 0c 00 	st.h [%a12]12,%d3
8000fac6:	82 03       	mov %d3,0
8000fac8:	d9 c2 24 10 	lea %a2,[%a12]100
8000facc:	74 a3       	st.w [%sp],%d3
8000face:	09 ae c0 09 	ld.da %a14,[%sp]
8000fad2:	80 e4       	mov.d %d4,%a14
8000fad4:	80 f5       	mov.d %d5,%a15
8000fad6:	49 24 40 08 	ldmst [%a2]0,%e4
8000fada:	d4 c2       	ld.a %a2,[%a12]
8000fadc:	80 23       	mov.d %d3,%a2
8000fade:	0b 23 80 20 	sub %d2,%d3,%d2
8000fae2:	19 c3 14 00 	ld.w %d3,[%a12]20
8000fae6:	3f 32 bd 7f 	jlt %d2,%d3,8000fa60 <__swbuf_r+0x48>
8000faea:	40 c5       	mov.aa %a5,%a12
8000faec:	40 d4       	mov.aa %a4,%a13
8000faee:	6d ff 92 c8 	call 80008c12 <_fflush_r>
8000faf2:	df 02 0c 80 	jne %d2,0,8000fb0a <__swbuf_r+0xf2>
8000faf6:	d4 c2       	ld.a %a2,[%a12]
8000faf8:	82 13       	mov %d3,1
8000fafa:	1d ff b5 ff 	j 8000fa64 <__swbuf_r+0x4c>
8000fafe:	40 c5       	mov.aa %a5,%a12
8000fb00:	40 d4       	mov.aa %a4,%a13
8000fb02:	6d ff 88 c8 	call 80008c12 <_fflush_r>
8000fb06:	df 02 c4 7f 	jeq %d2,0,8000fa8e <__swbuf_r+0x76>
8000fb0a:	82 f8       	mov %d8,-1
8000fb0c:	1d ff c1 ff 	j 8000fa8e <__swbuf_r+0x76>
8000fb10:	6d ff 57 c9 	call 80008dbe <__sinit>
8000fb14:	1d ff 8c ff 	j 8000fa2c <__swbuf_r+0x14>

8000fb18 <isatty>:
8000fb18:	8b 34 60 22 	lt.u %d2,%d4,3
8000fb1c:	00 90       	ret 

8000fb1e <fstat>:
8000fb1e:	ff 34 0c 80 	jge.u %d4,3,8000fb36 <fstat+0x18>
8000fb22:	3b 00 00 22 	mov %d2,8192
8000fb26:	59 42 04 00 	st.w [%a4]4,%d2
8000fb2a:	3b 00 40 20 	mov %d2,1024
8000fb2e:	59 42 38 00 	st.w [%a4]56,%d2
8000fb32:	82 02       	mov %d2,0
8000fb34:	00 90       	ret 
8000fb36:	6d ff c4 f5 	call 8000e6be <__errno>
8000fb3a:	3b 90 00 20 	mov %d2,9
8000fb3e:	74 22       	st.w [%a2],%d2
8000fb40:	82 f2       	mov %d2,-1
8000fb42:	00 90       	ret 

8000fb44 <close>:
8000fb44:	82 2c       	mov %d12,2
8000fb46:	1d 00 0d 00 	j 8000fb60 <___virtio>
8000fb4a:	00 90       	ret 

8000fb4c <lseek>:
8000fb4c:	82 3c       	mov %d12,3
8000fb4e:	1d 00 09 00 	j 8000fb60 <___virtio>
8000fb52:	00 90       	ret 

8000fb54 <read>:
8000fb54:	82 4c       	mov %d12,4
8000fb56:	1d 00 05 00 	j 8000fb60 <___virtio>
8000fb5a:	00 90       	ret 

8000fb5c <__virtio_dummy_hnd>:
8000fb5c:	5f 76 69 6f 	jeq %d6,%d7,8000da2e <__multiply+0x5c>

8000fb60 <___virtio>:
8000fb60:	00 a0       	debug 
8000fb62:	6d ff ae f5 	call 8000e6be <__errno>
8000fb66:	74 2c       	st.w [%a2],%d12
8000fb68:	02 b2       	mov %d2,%d11
8000fb6a:	00 90       	ret 

8000fb6c <write>:
8000fb6c:	82 5c       	mov %d12,5
8000fb6e:	1d ff f9 ff 	j 8000fb60 <___virtio>
8000fb72:	00 90       	ret 

8000fb74 <abort>:
8000fb74:	00 a0       	debug 
8000fb76:	7b e0 ea 2d 	movh %d2,57006
8000fb7a:	1b f2 ee 2b 	addi %d2,%d2,-16657
8000fb7e:	60 2e       	mov.a %a14,%d2
8000fb80:	1d 00 04 00 	j 8000fb88 <_exit>
8000fb84:	1d 00 00 00 	j 8000fb84 <abort+0x10>

8000fb88 <_exit>:
8000fb88:	df 04 06 00 	jeq %d4,0,8000fb94 <_exit+0xc>
8000fb8c:	60 4e       	mov.a %a14,%d4
8000fb8e:	00 a0       	debug 
8000fb90:	1d 00 00 00 	j 8000fb90 <_exit+0x8>
8000fb94:	bb d0 00 29 	mov.u %d2,36877
8000fb98:	60 2e       	mov.a %a14,%d2
8000fb9a:	00 a0       	debug 
8000fb9c:	1d ff fa ff 	j 8000fb90 <_exit+0x8>

8000fba0 <sbrk>:
8000fba0:	91 00 00 36 	movh.a %a3,24576
8000fba4:	99 32 78 b0 	ld.a %a2,[%a3]1784 <600006f8 <heap_top.0>>
8000fba8:	91 00 00 46 	movh.a %a4,24576
8000fbac:	80 22       	mov.d %d2,%a2
8000fbae:	42 24       	add %d4,%d2
8000fbb0:	80 42       	mov.d %d2,%a4
8000fbb2:	1b 02 2d 22 	addi %d2,%d2,8912
8000fbb6:	3f 42 0c 80 	jlt.u %d2,%d4,8000fbce <sbrk+0x2e>
8000fbba:	91 00 00 46 	movh.a %a4,24576
8000fbbe:	80 42       	mov.d %d2,%a4
8000fbc0:	1b 02 2d 21 	addi %d2,%d2,4816
8000fbc4:	3f 24 0d 80 	jlt.u %d4,%d2,8000fbde <sbrk+0x3e>
8000fbc8:	59 34 78 b0 	st.w [%a3]1784 <600006f8 <heap_top.0>>,%d4
8000fbcc:	00 90       	ret 
8000fbce:	6d ff 78 f5 	call 8000e6be <__errno>
8000fbd2:	3b c0 00 20 	mov %d2,12
8000fbd6:	74 22       	st.w [%a2],%d2
8000fbd8:	a0 02       	mov.a %a2,0
8000fbda:	b0 f2       	add.a %a2,-1
8000fbdc:	00 90       	ret 
8000fbde:	6d ff cb ff 	call 8000fb74 <abort>

8000fbe2 <atan2>:
8000fbe2:	6d 00 18 00 	call 8000fc12 <__ieee754_atan2>
8000fbe6:	00 90       	ret 

8000fbe8 <sqrtf>:
8000fbe8:	02 48       	mov %d8,%d4
8000fbea:	6d 00 f0 02 	call 800101ca <__ieee754_sqrtf>
8000fbee:	4b 88 01 30 	cmp.f %d3,%d8,%d8
8000fbf2:	6f 33 07 80 	jnz.t %d3,3,8000fc00 <sqrtf+0x18>
8000fbf6:	82 09       	mov %d9,0
8000fbf8:	4b 98 01 80 	cmp.f %d8,%d8,%d9
8000fbfc:	6f 08 03 80 	jnz.t %d8,0,8000fc02 <sqrtf+0x1a>
8000fc00:	00 90       	ret 
8000fc02:	6d ff 5e f5 	call 8000e6be <__errno>
8000fc06:	3b 10 02 20 	mov %d2,33
8000fc0a:	74 22       	st.w [%a2],%d2
8000fc0c:	4b 99 51 20 	div.f %d2,%d9,%d9
8000fc10:	00 90       	ret 

8000fc12 <__ieee754_atan2>:
8000fc12:	b7 07 81 8f 	insert %d8,%d7,0,31,1
8000fc16:	0b 56 10 28 	mov %e2,%d6,%d5
8000fc1a:	8b 03 20 92 	ne %d9,%d3,0
8000fc1e:	7b 00 ff a7 	movh %d10,32752
8000fc22:	a6 89       	or %d9,%d8
8000fc24:	c2 1a       	add %d10,1
8000fc26:	02 41       	mov %d1,%d4
8000fc28:	02 70       	mov %d0,%d7
8000fc2a:	7f a9 68 80 	jge.u %d9,%d10,8000fcfa <__ieee754_atan2+0xe8>
8000fc2e:	b7 02 81 9f 	insert %d9,%d2,0,31,1
8000fc32:	8b 04 20 b2 	ne %d11,%d4,0
8000fc36:	a6 9b       	or %d11,%d9
8000fc38:	02 2c       	mov %d12,%d2
8000fc3a:	7f ab 60 80 	jge.u %d11,%d10,8000fcfa <__ieee754_atan2+0xe8>
8000fc3e:	9b 07 01 ac 	addih %d10,%d7,49168
8000fc42:	a6 3a       	or %d10,%d3
8000fc44:	df 0a 7e 00 	jeq %d10,0,8000fd40 <__ieee754_atan2+0x12e>
8000fc48:	8f 27 3e a0 	sha %d10,%d7,-30
8000fc4c:	8f 2a 00 a1 	and %d10,%d10,2
8000fc50:	0f 49 a0 b0 	or %d11,%d9,%d4
8000fc54:	8b 02 20 a5 	or.lt %d10,%d2,0
8000fc58:	df 0b 5c 00 	jeq %d11,0,8000fd10 <__ieee754_atan2+0xfe>
8000fc5c:	a6 83       	or %d3,%d8
8000fc5e:	df 03 77 00 	jeq %d3,0,8000fd4c <__ieee754_atan2+0x13a>
8000fc62:	7b 00 ff 27 	movh %d2,32752
8000fc66:	5f 28 a5 00 	jeq %d8,%d2,8000fdb0 <__ieee754_atan2+0x19e>
8000fc6a:	5f 29 71 00 	jeq %d9,%d2,8000fd4c <__ieee754_atan2+0x13a>
8000fc6e:	0b 89 80 20 	sub %d2,%d9,%d8
8000fc72:	8f c2 3e 20 	sha %d2,%d2,-20
8000fc76:	91 40 44 45 	movh.a %a4,21572
8000fc7a:	91 90 ff 53 	movh.a %a5,16377
8000fc7e:	8b d2 83 32 	ge %d3,%d2,61
8000fc82:	d9 44 d8 42 	lea %a4,[%a4]11544 <54442d18 <__CSA2_END+0x4425118>>
8000fc86:	d9 55 3b 72 	lea %a5,[%a5]8699 <3ff921fb <LCF_DSPR1_SIZE+0x3ff741fb>>
8000fc8a:	df 03 16 80 	jne %d3,0,8000fcb6 <__ieee754_atan2+0xa4>
8000fc8e:	8b 42 5c 22 	lt %d2,%d2,-60
8000fc92:	87 27 1f 20 	and.t %d2,%d7,31,%d2,0
8000fc96:	a0 04       	mov.a %a4,0
8000fc98:	a0 05       	mov.a %a5,0
8000fc9a:	df 02 0e 80 	jne %d2,0,8000fcb6 <__ieee754_atan2+0xa4>
8000fc9e:	6d ff c3 bf 	call 80007c24 <__divdf3>
8000fca2:	0b 23 10 48 	mov %e4,%d3,%d2
8000fca6:	6d 00 8c 02 	call 800101be <fabs>
8000fcaa:	0b 23 10 48 	mov %e4,%d3,%d2
8000fcae:	6d 00 ab 00 	call 8000fe04 <atan>
8000fcb2:	60 24       	mov.a %a4,%d2
8000fcb4:	60 35       	mov.a %a5,%d3
8000fcb6:	df 1a 77 00 	jeq %d10,1,8000fda4 <__ieee754_atan2+0x192>
8000fcba:	df 2a 59 00 	jeq %d10,2,8000fd6c <__ieee754_atan2+0x15a>
8000fcbe:	df 0a 26 00 	jeq %d10,0,8000fd0a <__ieee754_atan2+0xf8>
8000fcc2:	7b 40 31 63 	movh %d6,13076
8000fcc6:	7b 20 ca 73 	movh %d7,15522
8000fcca:	80 44       	mov.d %d4,%a4
8000fccc:	80 55       	mov.d %d5,%a5
8000fcce:	1b 76 c0 65 	addi %d6,%d6,23559
8000fcd2:	1b 67 62 7a 	addi %d7,%d7,-23002
8000fcd6:	6d ff 72 be 	call 800079ba <__subdf3>
8000fcda:	0b 23 10 48 	mov %e4,%d3,%d2
8000fcde:	7b 40 44 65 	movh %d6,21572
8000fce2:	7b 90 00 74 	movh %d7,16393
8000fce6:	1b 86 d1 62 	addi %d6,%d6,11544
8000fcea:	1b b7 1f 72 	addi %d7,%d7,8699
8000fcee:	6d ff 66 be 	call 800079ba <__subdf3>
8000fcf2:	60 24       	mov.a %a4,%d2
8000fcf4:	60 35       	mov.a %a5,%d3
8000fcf6:	1d 00 0a 00 	j 8000fd0a <__ieee754_atan2+0xf8>
8000fcfa:	02 16       	mov %d6,%d1
8000fcfc:	02 27       	mov %d7,%d2
8000fcfe:	0b 30 10 48 	mov %e4,%d0,%d3
8000fd02:	6d ff 3f be 	call 80007980 <__adddf3>
8000fd06:	60 24       	mov.a %a4,%d2
8000fd08:	60 35       	mov.a %a5,%d3
8000fd0a:	80 42       	mov.d %d2,%a4
8000fd0c:	80 53       	mov.d %d3,%a5
8000fd0e:	00 90       	ret 
8000fd10:	91 40 44 45 	movh.a %a4,21572
8000fd14:	91 90 00 54 	movh.a %a5,16393
8000fd18:	d9 44 d8 42 	lea %a4,[%a4]11544 <54442d18 <__CSA2_END+0x4425118>>
8000fd1c:	d9 55 3b 72 	lea %a5,[%a5]8699 <400921fb <LCF_DSPR1_SIZE+0x400741fb>>
8000fd20:	df 2a f5 7f 	jeq %d10,2,8000fd0a <__ieee754_atan2+0xf8>
8000fd24:	60 44       	mov.a %a4,%d4
8000fd26:	60 25       	mov.a %a5,%d2
8000fd28:	df 3a f1 ff 	jne %d10,3,8000fd0a <__ieee754_atan2+0xf8>
8000fd2c:	91 40 44 45 	movh.a %a4,21572
8000fd30:	91 90 00 5c 	movh.a %a5,49161
8000fd34:	d9 44 d8 42 	lea %a4,[%a4]11544 <54442d18 <__CSA2_END+0x4425118>>
8000fd38:	d9 55 3b 72 	lea %a5,[%a5]8699 <c00921fb <_SMALL_DATA4_+0x3008a1fb>>
8000fd3c:	1d ff e7 ff 	j 8000fd0a <__ieee754_atan2+0xf8>
8000fd40:	6d 00 62 00 	call 8000fe04 <atan>
8000fd44:	60 24       	mov.a %a4,%d2
8000fd46:	60 35       	mov.a %a5,%d3
8000fd48:	1d ff e1 ff 	j 8000fd0a <__ieee754_atan2+0xf8>
8000fd4c:	91 40 44 45 	movh.a %a4,21572
8000fd50:	91 90 ff 53 	movh.a %a5,16377
8000fd54:	d9 44 d8 42 	lea %a4,[%a4]11544 <54442d18 <__CSA2_END+0x4425118>>
8000fd58:	d9 55 3b 72 	lea %a5,[%a5]8699 <3ff921fb <LCF_DSPR1_SIZE+0x3ff741fb>>
8000fd5c:	ff 0c d7 7f 	jge %d12,0,8000fd0a <__ieee754_atan2+0xf8>
8000fd60:	91 90 ff 5b 	movh.a %a5,49145
8000fd64:	d9 55 3b 72 	lea %a5,[%a5]8699 <bff921fb <_SMALL_DATA4_+0x2ff8a1fb>>
8000fd68:	1d ff d1 ff 	j 8000fd0a <__ieee754_atan2+0xf8>
8000fd6c:	7b 40 31 63 	movh %d6,13076
8000fd70:	7b 20 ca 73 	movh %d7,15522
8000fd74:	80 44       	mov.d %d4,%a4
8000fd76:	80 55       	mov.d %d5,%a5
8000fd78:	1b 76 c0 65 	addi %d6,%d6,23559
8000fd7c:	1b 67 62 7a 	addi %d7,%d7,-23002
8000fd80:	6d ff 1d be 	call 800079ba <__subdf3>
8000fd84:	0b 23 10 68 	mov %e6,%d3,%d2
8000fd88:	7b 40 44 45 	movh %d4,21572
8000fd8c:	7b 90 00 54 	movh %d5,16393
8000fd90:	1b 84 d1 42 	addi %d4,%d4,11544
8000fd94:	1b b5 1f 52 	addi %d5,%d5,8699
8000fd98:	6d ff 11 be 	call 800079ba <__subdf3>
8000fd9c:	60 24       	mov.a %a4,%d2
8000fd9e:	60 35       	mov.a %a5,%d3
8000fda0:	1d ff b5 ff 	j 8000fd0a <__ieee754_atan2+0xf8>
8000fda4:	80 53       	mov.d %d3,%a5
8000fda6:	9b 03 00 38 	addih %d3,%d3,32768
8000fdaa:	60 35       	mov.a %a5,%d3
8000fdac:	1d ff af ff 	j 8000fd0a <__ieee754_atan2+0xf8>
8000fdb0:	c2 fa       	add %d10,-1
8000fdb2:	5f 89 13 00 	jeq %d9,%d8,8000fdd8 <__ieee754_atan2+0x1c6>
8000fdb6:	a0 04       	mov.a %a4,0
8000fdb8:	a0 05       	mov.a %a5,0
8000fdba:	ff 3a a8 ff 	jge.u %d10,3,8000fd0a <__ieee754_atan2+0xf8>
8000fdbe:	91 00 00 28 	movh.a %a2,32768
8000fdc2:	8f 3a 00 20 	sh %d2,%d10,3
8000fdc6:	d9 22 d4 80 	lea %a2,[%a2]3604 <80000e14 <CSWTCH.9>>
8000fdca:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000fdce:	d4 24       	ld.a %a4,[%a2]
8000fdd0:	99 25 04 00 	ld.a %a5,[%a2]4
8000fdd4:	1d ff 9b ff 	j 8000fd0a <__ieee754_atan2+0xf8>
8000fdd8:	91 40 44 45 	movh.a %a4,21572
8000fddc:	91 90 fe 53 	movh.a %a5,16361
8000fde0:	d9 44 d8 42 	lea %a4,[%a4]11544 <54442d18 <__CSA2_END+0x4425118>>
8000fde4:	d9 55 3b 72 	lea %a5,[%a5]8699 <3fe921fb <LCF_DSPR1_SIZE+0x3fe741fb>>
8000fde8:	ff 3a 91 ff 	jge.u %d10,3,8000fd0a <__ieee754_atan2+0xf8>
8000fdec:	91 00 00 28 	movh.a %a2,32768
8000fdf0:	06 3a       	sh %d10,3
8000fdf2:	d9 22 ec 80 	lea %a2,[%a2]3628 <80000e2c <CSWTCH.8>>
8000fdf6:	01 2a 00 26 	addsc.a %a2,%a2,%d10,0
8000fdfa:	d4 24       	ld.a %a4,[%a2]
8000fdfc:	99 25 04 00 	ld.a %a5,[%a2]4
8000fe00:	1d ff 85 ff 	j 8000fd0a <__ieee754_atan2+0xf8>

8000fe04 <atan>:
8000fe04:	b7 05 81 9f 	insert %d9,%d5,0,31,1
8000fe08:	7b 00 41 24 	movh %d2,17424
8000fe0c:	02 4a       	mov %d10,%d4
8000fe0e:	02 58       	mov %d8,%d5
8000fe10:	02 5b       	mov %d11,%d5
8000fe12:	3f 29 2d 00 	jlt %d9,%d2,8000fe6c <atan+0x68>
8000fe16:	7b 00 ff 27 	movh %d2,32752
8000fe1a:	c2 12       	add %d2,1
8000fe1c:	7f 29 1d 00 	jge %d9,%d2,8000fe56 <atan+0x52>
8000fe20:	7b 00 ff 47 	movh %d4,32752
8000fe24:	8b 0a 20 22 	ne %d2,%d10,0
8000fe28:	7b 90 ff 33 	movh %d3,16377
8000fe2c:	7b 90 ff 6b 	movh %d6,49145
8000fe30:	0b 49 00 22 	and.eq %d2,%d9,%d4
8000fe34:	7b 40 44 55 	movh %d5,21572
8000fe38:	8b 18 80 42 	ge %d4,%d8,1
8000fe3c:	1b b3 1f 32 	addi %d3,%d3,8699
8000fe40:	1b b6 1f 62 	addi %d6,%d6,8699
8000fe44:	1b 85 d1 52 	addi %d5,%d5,11544
8000fe48:	2b 63 40 44 	sel %d4,%d4,%d3,%d6
8000fe4c:	df 02 05 80 	jne %d2,0,8000fe56 <atan+0x52>
8000fe50:	02 52       	mov %d2,%d5
8000fe52:	02 43       	mov %d3,%d4
8000fe54:	00 90       	ret 
8000fe56:	0b a8 10 48 	mov %e4,%d8,%d10
8000fe5a:	0b a8 10 68 	mov %e6,%d8,%d10
8000fe5e:	6d ff 91 bd 	call 80007980 <__adddf3>
8000fe62:	0b 32 10 48 	mov %e4,%d2,%d3
8000fe66:	02 52       	mov %d2,%d5
8000fe68:	02 43       	mov %d3,%d4
8000fe6a:	00 90       	ret 
8000fe6c:	7b c0 fd 23 	movh %d2,16348
8000fe70:	7f 29 20 01 	jge %d9,%d2,800100b0 <atan+0x2ac>
8000fe74:	7b 00 e2 23 	movh %d2,15904
8000fe78:	3f 29 05 01 	jlt %d9,%d2,80010082 <atan+0x27e>
8000fe7c:	82 f9       	mov %d9,-1
8000fe7e:	0b a8 10 68 	mov %e6,%d8,%d10
8000fe82:	0b a8 10 48 	mov %e4,%d8,%d10
8000fe86:	6d ff bd bd 	call 80007a00 <__muldf3>
8000fe8a:	60 3e       	mov.a %a14,%d3
8000fe8c:	02 26       	mov %d6,%d2
8000fe8e:	02 37       	mov %d7,%d3
8000fe90:	02 24       	mov %d4,%d2
8000fe92:	02 35       	mov %d5,%d3
8000fe94:	60 2f       	mov.a %a15,%d2
8000fe96:	6d ff b5 bd 	call 80007a00 <__muldf3>
8000fe9a:	7b 30 32 6e 	movh %d6,58147
8000fe9e:	7b 10 f9 73 	movh %d7,16273
8000fea2:	1b 16 a1 6d 	addi %d6,%d6,-9711
8000fea6:	1b a7 d3 7a 	addi %d7,%d7,-21190
8000feaa:	02 24       	mov %d4,%d2
8000feac:	02 35       	mov %d5,%d3
8000feae:	60 2d       	mov.a %a13,%d2
8000feb0:	60 3c       	mov.a %a12,%d3
8000feb2:	6d ff a7 bd 	call 80007a00 <__muldf3>
8000feb6:	0b 23 10 48 	mov %e4,%d3,%d2
8000feba:	7b 60 47 62 	movh %d6,9334
8000febe:	7b 90 fa 73 	movh %d7,16297
8000fec2:	1b b6 de 60 	addi %d6,%d6,3563
8000fec6:	1b b7 b4 77 	addi %d7,%d7,31563
8000feca:	6d ff 5b bd 	call 80007980 <__adddf3>
8000fece:	0b 23 10 48 	mov %e4,%d3,%d2
8000fed2:	80 d6       	mov.d %d6,%a13
8000fed4:	80 c7       	mov.d %d7,%a12
8000fed6:	6d ff 95 bd 	call 80007a00 <__muldf3>
8000feda:	0b 23 10 48 	mov %e4,%d3,%d2
8000fede:	7b 00 0d 6a 	movh %d6,41168
8000fee2:	7b 10 fb 73 	movh %d7,16305
8000fee6:	1b 16 d5 63 	addi %d6,%d6,15697
8000feea:	1b 67 d6 70 	addi %d7,%d7,3430
8000feee:	6d ff 49 bd 	call 80007980 <__adddf3>
8000fef2:	0b 23 10 48 	mov %e4,%d3,%d2
8000fef6:	80 d6       	mov.d %d6,%a13
8000fef8:	80 c7       	mov.d %d7,%a12
8000fefa:	6d ff 83 bd 	call 80007a00 <__muldf3>
8000fefe:	0b 23 10 48 	mov %e4,%d3,%d2
8000ff02:	7b c0 54 6c 	movh %d6,50508
8000ff06:	7b 70 fb 73 	movh %d7,16311
8000ff0a:	1b e6 06 62 	addi %d6,%d6,8302
8000ff0e:	1b d7 5c 74 	addi %d7,%d7,17869
8000ff12:	6d ff 37 bd 	call 80007980 <__adddf3>
8000ff16:	0b 23 10 48 	mov %e4,%d3,%d2
8000ff1a:	80 d6       	mov.d %d6,%a13
8000ff1c:	80 c7       	mov.d %d7,%a12
8000ff1e:	6d ff 71 bd 	call 80007a00 <__muldf3>
8000ff22:	0b 23 10 48 	mov %e4,%d3,%d2
8000ff26:	7b 10 20 69 	movh %d6,37377
8000ff2a:	7b 20 fc 73 	movh %d7,16322
8000ff2e:	1b f6 3f 68 	addi %d6,%d6,-31745
8000ff32:	1b 47 92 74 	addi %d7,%d7,18724
8000ff36:	6d ff 25 bd 	call 80007980 <__adddf3>
8000ff3a:	0b 23 10 48 	mov %e4,%d3,%d2
8000ff3e:	80 d6       	mov.d %d6,%a13
8000ff40:	80 c7       	mov.d %d7,%a12
8000ff42:	6d ff 5f bd 	call 80007a00 <__muldf3>
8000ff46:	0b 23 10 48 	mov %e4,%d3,%d2
8000ff4a:	7b 50 55 65 	movh %d6,21845
8000ff4e:	7b 50 fd 73 	movh %d7,16341
8000ff52:	1b d6 50 65 	addi %d6,%d6,21773
8000ff56:	1b 57 55 75 	addi %d7,%d7,21845
8000ff5a:	6d ff 13 bd 	call 80007980 <__adddf3>
8000ff5e:	0b 23 10 48 	mov %e4,%d3,%d2
8000ff62:	80 f6       	mov.d %d6,%a15
8000ff64:	80 e7       	mov.d %d7,%a14
8000ff66:	6d ff 4d bd 	call 80007a00 <__muldf3>
8000ff6a:	60 3e       	mov.a %a14,%d3
8000ff6c:	7b a0 c6 62 	movh %d6,11370
8000ff70:	7b 30 fa 7b 	movh %d7,49059
8000ff74:	1b f6 c2 66 	addi %d6,%d6,27695
8000ff78:	1b 47 44 7b 	addi %d7,%d7,-19388
8000ff7c:	80 d4       	mov.d %d4,%a13
8000ff7e:	80 c5       	mov.d %d5,%a12
8000ff80:	60 2f       	mov.a %a15,%d2
8000ff82:	6d ff 3f bd 	call 80007a00 <__muldf3>
8000ff86:	0b 23 10 48 	mov %e4,%d3,%d2
8000ff8a:	7b f0 2d 65 	movh %d6,21215
8000ff8e:	7b e0 fa 73 	movh %d7,16302
8000ff92:	1b a6 d9 6f 	addi %d6,%d6,-614
8000ff96:	1b d7 e2 7d 	addi %d7,%d7,-8659
8000ff9a:	6d ff 10 bd 	call 800079ba <__subdf3>
8000ff9e:	0b 23 10 48 	mov %e4,%d3,%d2
8000ffa2:	80 d6       	mov.d %d6,%a13
8000ffa4:	80 c7       	mov.d %d7,%a12
8000ffa6:	6d ff 2d bd 	call 80007a00 <__muldf3>
8000ffaa:	0b 23 10 48 	mov %e4,%d3,%d2
8000ffae:	7b 50 f7 6a 	movh %d6,44917
8000ffb2:	7b 40 fb 73 	movh %d7,16308
8000ffb6:	1b d6 a6 69 	addi %d6,%d6,-26003
8000ffba:	1b 27 0f 7b 	addi %d7,%d7,-20238
8000ffbe:	6d ff fe bc 	call 800079ba <__subdf3>
8000ffc2:	0b 23 10 48 	mov %e4,%d3,%d2
8000ffc6:	80 d6       	mov.d %d6,%a13
8000ffc8:	80 c7       	mov.d %d7,%a12
8000ffca:	6d ff 1b bd 	call 80007a00 <__muldf3>
8000ffce:	0b 23 10 48 	mov %e4,%d3,%d2
8000ffd2:	7b 30 e2 6f 	movh %d6,65059
8000ffd6:	7b c0 fb 73 	movh %d7,16316
8000ffda:	1b 16 67 61 	addi %d6,%d6,5745
8000ffde:	1b 67 1c 77 	addi %d7,%d7,29126
8000ffe2:	6d ff ec bc 	call 800079ba <__subdf3>
8000ffe6:	0b 23 10 48 	mov %e4,%d3,%d2
8000ffea:	80 d6       	mov.d %d6,%a13
8000ffec:	80 c7       	mov.d %d7,%a12
8000ffee:	6d ff 09 bd 	call 80007a00 <__muldf3>
8000fff2:	0b 23 10 48 	mov %e4,%d3,%d2
8000fff6:	7b 90 99 69 	movh %d6,39321
8000fffa:	7b a0 fc 73 	movh %d7,16330
8000fffe:	1b 46 bc 6e 	addi %d6,%d6,-5180
80010002:	1b 97 99 79 	addi %d7,%d7,-26215
80010006:	6d ff da bc 	call 800079ba <__subdf3>
8001000a:	0b 23 10 48 	mov %e4,%d3,%d2
8001000e:	80 d6       	mov.d %d6,%a13
80010010:	80 c7       	mov.d %d7,%a12
80010012:	6d ff f7 bc 	call 80007a00 <__muldf3>
80010016:	0b 23 10 68 	mov %e6,%d3,%d2
8001001a:	80 f4       	mov.d %d4,%a15
8001001c:	80 e5       	mov.d %d5,%a14
8001001e:	6d ff b1 bc 	call 80007980 <__adddf3>
80010022:	0b 23 10 48 	mov %e4,%d3,%d2
80010026:	0b a8 10 68 	mov %e6,%d8,%d10
8001002a:	6d ff eb bc 	call 80007a00 <__muldf3>
8001002e:	df f9 6e 00 	jeq %d9,-1,8001010a <atan+0x306>
80010032:	91 00 00 28 	movh.a %a2,32768
80010036:	06 39       	sh %d9,3
80010038:	d9 22 e4 90 	lea %a2,[%a2]3684 <80000e64 <atanhi>>
8001003c:	01 29 00 c6 	addsc.a %a12,%a2,%d9,0
80010040:	91 00 00 28 	movh.a %a2,32768
80010044:	d9 22 c4 90 	lea %a2,[%a2]3652 <80000e44 <atanlo>>
80010048:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
8001004c:	02 24       	mov %d4,%d2
8001004e:	09 26 40 09 	ld.d %e6,[%a2]
80010052:	02 35       	mov %d5,%d3
80010054:	6d ff b3 bc 	call 800079ba <__subdf3>
80010058:	0b 23 10 48 	mov %e4,%d3,%d2
8001005c:	0b a8 10 68 	mov %e6,%d8,%d10
80010060:	6d ff ad bc 	call 800079ba <__subdf3>
80010064:	09 c4 40 09 	ld.d %e4,[%a12]
80010068:	0b 23 10 68 	mov %e6,%d3,%d2
8001006c:	6d ff a7 bc 	call 800079ba <__subdf3>
80010070:	0b 32 10 48 	mov %e4,%d2,%d3
80010074:	ff 0b ee 7e 	jge %d11,0,8000fe50 <atan+0x4c>
80010078:	9b 03 00 48 	addih %d4,%d3,32768
8001007c:	02 52       	mov %d2,%d5
8001007e:	02 43       	mov %d3,%d4
80010080:	00 90       	ret 
80010082:	7b 00 80 68 	movh %d6,34816
80010086:	7b 80 e3 77 	movh %d7,32312
8001008a:	1b c6 59 67 	addi %d6,%d6,30108
8001008e:	1b c7 43 7e 	addi %d7,%d7,-7108
80010092:	6d ff 77 bc 	call 80007980 <__adddf3>
80010096:	0b 23 10 48 	mov %e4,%d3,%d2
8001009a:	82 06       	mov %d6,0
8001009c:	7b 00 ff 73 	movh %d7,16368
800100a0:	6d ff 6a be 	call 80007d74 <__gtdf2>
800100a4:	0b 8a 10 48 	mov %e4,%d10,%d8
800100a8:	bf 12 ea 7e 	jlt %d2,1,8000fe7c <atan+0x78>
800100ac:	1d ff d2 fe 	j 8000fe50 <atan+0x4c>
800100b0:	6d 00 87 00 	call 800101be <fabs>
800100b4:	60 2d       	mov.a %a13,%d2
800100b6:	7b 30 ff 23 	movh %d2,16371
800100ba:	60 3c       	mov.a %a12,%d3
800100bc:	7f 29 32 00 	jge %d9,%d2,80010120 <atan+0x31c>
800100c0:	7b 60 fe 23 	movh %d2,16358
800100c4:	7f 29 62 00 	jge %d9,%d2,80010188 <atan+0x384>
800100c8:	80 d6       	mov.d %d6,%a13
800100ca:	80 c7       	mov.d %d7,%a12
800100cc:	80 d4       	mov.d %d4,%a13
800100ce:	80 c5       	mov.d %d5,%a12
800100d0:	6d ff 58 bc 	call 80007980 <__adddf3>
800100d4:	0b 23 10 48 	mov %e4,%d3,%d2
800100d8:	82 06       	mov %d6,0
800100da:	7b 00 ff 73 	movh %d7,16368
800100de:	6d ff 6e bc 	call 800079ba <__subdf3>
800100e2:	60 3e       	mov.a %a14,%d3
800100e4:	82 06       	mov %d6,0
800100e6:	7b 00 00 74 	movh %d7,16384
800100ea:	80 d4       	mov.d %d4,%a13
800100ec:	80 c5       	mov.d %d5,%a12
800100ee:	60 2f       	mov.a %a15,%d2
800100f0:	6d ff 48 bc 	call 80007980 <__adddf3>
800100f4:	0b 23 10 68 	mov %e6,%d3,%d2
800100f8:	80 f4       	mov.d %d4,%a15
800100fa:	80 e5       	mov.d %d5,%a14
800100fc:	6d ff 94 bd 	call 80007c24 <__divdf3>
80010100:	02 2a       	mov %d10,%d2
80010102:	02 38       	mov %d8,%d3
80010104:	82 09       	mov %d9,0
80010106:	1d ff bc fe 	j 8000fe7e <atan+0x7a>
8001010a:	0b a8 10 48 	mov %e4,%d8,%d10
8001010e:	02 26       	mov %d6,%d2
80010110:	02 37       	mov %d7,%d3
80010112:	6d ff 54 bc 	call 800079ba <__subdf3>
80010116:	0b 32 10 48 	mov %e4,%d2,%d3
8001011a:	02 52       	mov %d2,%d5
8001011c:	02 43       	mov %d3,%d4
8001011e:	00 90       	ret 
80010120:	7b 30 00 24 	movh %d2,16387
80010124:	1b f2 ff 27 	addi %d2,%d2,32767
80010128:	3f 92 24 00 	jlt %d2,%d9,80010170 <atan+0x36c>
8001012c:	82 06       	mov %d6,0
8001012e:	7b 80 ff 73 	movh %d7,16376
80010132:	80 d4       	mov.d %d4,%a13
80010134:	80 c5       	mov.d %d5,%a12
80010136:	6d ff 42 bc 	call 800079ba <__subdf3>
8001013a:	60 3e       	mov.a %a14,%d3
8001013c:	82 06       	mov %d6,0
8001013e:	7b 80 ff 73 	movh %d7,16376
80010142:	80 d4       	mov.d %d4,%a13
80010144:	80 c5       	mov.d %d5,%a12
80010146:	60 2f       	mov.a %a15,%d2
80010148:	6d ff 5c bc 	call 80007a00 <__muldf3>
8001014c:	0b 23 10 48 	mov %e4,%d3,%d2
80010150:	82 06       	mov %d6,0
80010152:	7b 00 ff 73 	movh %d7,16368
80010156:	6d ff 15 bc 	call 80007980 <__adddf3>
8001015a:	0b 23 10 68 	mov %e6,%d3,%d2
8001015e:	80 f4       	mov.d %d4,%a15
80010160:	80 e5       	mov.d %d5,%a14
80010162:	6d ff 61 bd 	call 80007c24 <__divdf3>
80010166:	02 2a       	mov %d10,%d2
80010168:	02 38       	mov %d8,%d3
8001016a:	82 29       	mov %d9,2
8001016c:	1d ff 89 fe 	j 8000fe7e <atan+0x7a>
80010170:	80 d6       	mov.d %d6,%a13
80010172:	80 c7       	mov.d %d7,%a12
80010174:	82 04       	mov %d4,0
80010176:	7b 00 ff 5b 	movh %d5,49136
8001017a:	6d ff 55 bd 	call 80007c24 <__divdf3>
8001017e:	02 2a       	mov %d10,%d2
80010180:	02 38       	mov %d8,%d3
80010182:	82 39       	mov %d9,3
80010184:	1d ff 7d fe 	j 8000fe7e <atan+0x7a>
80010188:	82 06       	mov %d6,0
8001018a:	7b 00 ff 73 	movh %d7,16368
8001018e:	80 d4       	mov.d %d4,%a13
80010190:	80 c5       	mov.d %d5,%a12
80010192:	6d ff 14 bc 	call 800079ba <__subdf3>
80010196:	60 3e       	mov.a %a14,%d3
80010198:	82 06       	mov %d6,0
8001019a:	7b 00 ff 73 	movh %d7,16368
8001019e:	80 d4       	mov.d %d4,%a13
800101a0:	80 c5       	mov.d %d5,%a12
800101a2:	60 2f       	mov.a %a15,%d2
800101a4:	6d ff ee bb 	call 80007980 <__adddf3>
800101a8:	0b 23 10 68 	mov %e6,%d3,%d2
800101ac:	80 f4       	mov.d %d4,%a15
800101ae:	80 e5       	mov.d %d5,%a14
800101b0:	6d ff 3a bd 	call 80007c24 <__divdf3>
800101b4:	02 2a       	mov %d10,%d2
800101b6:	02 38       	mov %d8,%d3
800101b8:	82 19       	mov %d9,1
800101ba:	1d ff 62 fe 	j 8000fe7e <atan+0x7a>

800101be <fabs>:
800101be:	02 43       	mov %d3,%d4
800101c0:	b7 05 81 4f 	insert %d4,%d5,0,31,1
800101c4:	02 32       	mov %d2,%d3
800101c6:	02 43       	mov %d3,%d4
800101c8:	00 90       	ret 

800101ca <__ieee754_sqrtf>:
800101ca:	b7 04 81 3f 	insert %d3,%d4,0,31,1
800101ce:	7b 00 f8 57 	movh %d5,32640
800101d2:	7f 53 5d 80 	jge.u %d3,%d5,8001028c <__ieee754_sqrtf+0xc2>
800101d6:	02 42       	mov %d2,%d4
800101d8:	df 03 59 00 	jeq %d3,0,8001028a <__ieee754_sqrtf+0xc0>
800101dc:	02 43       	mov %d3,%d4
800101de:	bf 04 68 00 	jlt %d4,0,800102ae <__ieee754_sqrtf+0xe4>
800101e2:	26 45       	and %d5,%d4
800101e4:	8f 94 3e 10 	sha %d1,%d4,-23
800101e8:	df 05 55 00 	jeq %d5,0,80010292 <__ieee754_sqrtf+0xc8>
800101ec:	b7 13 89 6b 	insert %d6,%d3,1,23,9
800101f0:	1b 11 f8 1f 	addi %d1,%d1,-127
800101f4:	8f 11 00 31 	and %d3,%d1,1
800101f8:	0f 36 00 60 	sh %d6,%d6,%d3
800101fc:	86 f1       	sha %d1,-1
800101fe:	06 16       	sh %d6,1
80010200:	3b 90 01 50 	mov %d5,25
80010204:	82 07       	mov %d7,0
80010206:	82 00       	mov %d0,0
80010208:	7b 00 10 30 	movh %d3,256
8001020c:	0b 30 00 40 	add %d4,%d0,%d3
80010210:	02 62       	mov %d2,%d6
80010212:	3f 46 06 00 	jlt %d6,%d4,8001021e <__ieee754_sqrtf+0x54>
80010216:	0b 34 00 00 	add %d0,%d4,%d3
8001021a:	a2 42       	sub %d2,%d4
8001021c:	42 37       	add %d7,%d3
8001021e:	c2 f5       	add %d5,-1
80010220:	8f 12 00 60 	sh %d6,%d2,1
80010224:	06 f3       	sh %d3,-1
80010226:	df 05 f3 ff 	jne %d5,0,8001020c <__ieee754_sqrtf+0x42>
8001022a:	df 02 29 00 	jeq %d2,0,8001027c <__ieee754_sqrtf+0xb2>
8001022e:	91 00 00 28 	movh.a %a2,32768
80010232:	d9 23 c8 a0 	lea %a3,[%a2]3720 <80000e88 <one>>
80010236:	54 34       	ld.w %d4,[%a3]
80010238:	91 00 00 38 	movh.a %a3,32768
8001023c:	d9 34 c4 a0 	lea %a4,[%a3]3716 <80000e84 <tiny>>
80010240:	54 43       	ld.w %d3,[%a4]
80010242:	d9 24 c8 a0 	lea %a4,[%a2]3720 <80000e88 <one>>
80010246:	54 42       	ld.w %d2,[%a4]
80010248:	6b 03 31 34 	sub.f %d3,%d4,%d3
8001024c:	4b 32 01 20 	cmp.f %d2,%d2,%d3
80010250:	87 22 a0 20 	or.t %d2,%d2,0,%d2,1
80010254:	df 02 14 00 	jeq %d2,0,8001027c <__ieee754_sqrtf+0xb2>
80010258:	d9 33 c4 a0 	lea %a3,[%a3]3716 <80000e84 <tiny>>
8001025c:	54 44       	ld.w %d4,[%a4]
8001025e:	54 33       	ld.w %d3,[%a3]
80010260:	54 42       	ld.w %d2,[%a4]
80010262:	6b 03 21 34 	add.f %d3,%d4,%d3
80010266:	4b 32 01 20 	cmp.f %d2,%d2,%d3
8001026a:	37 02 61 20 	extr.u %d2,%d2,0,1
8001026e:	1b 17 00 30 	addi %d3,%d7,1
80010272:	8f 13 c0 31 	andn %d3,%d3,1
80010276:	c2 27       	add %d7,2
80010278:	2b 37 40 72 	sel %d7,%d2,%d7,%d3
8001027c:	8f f7 3f 30 	sha %d3,%d7,-1
80010280:	9b 03 f0 33 	addih %d3,%d3,16128
80010284:	8f 71 01 20 	sh %d2,%d1,23
80010288:	42 32       	add %d2,%d3
8001028a:	00 90       	ret 
8001028c:	6b 44 61 24 	madd.f %d2,%d4,%d4,%d4
80010290:	00 90       	ret 
80010292:	7b 00 08 20 	movh %d2,128
80010296:	26 42       	and %d2,%d4
80010298:	82 f4       	mov %d4,-1
8001029a:	df 02 07 80 	jne %d2,0,800102a8 <__ieee754_sqrtf+0xde>
8001029e:	06 13       	sh %d3,1
800102a0:	02 24       	mov %d4,%d2
800102a2:	c2 12       	add %d2,1
800102a4:	ef 73 fd 7f 	jz.t %d3,23,8001029e <__ieee754_sqrtf+0xd4>
800102a8:	a2 41       	sub %d1,%d4
800102aa:	1d ff a1 ff 	j 800101ec <__ieee754_sqrtf+0x22>
800102ae:	6b 04 31 24 	sub.f %d2,%d4,%d4
800102b2:	4b 22 51 20 	div.f %d2,%d2,%d2
800102b6:	00 90       	ret 

800102b8 <__eqdf2>:
800102b8:	20 38       	sub.a %sp,56
800102ba:	d9 a5 10 00 	lea %a5,[%sp]16
800102be:	40 a4       	mov.aa %a4,%sp
800102c0:	89 a4 40 09 	st.d [%sp],%e4
800102c4:	89 a6 48 09 	st.d [%sp]8,%e6
800102c8:	6d ff 4e bf 	call 80008164 <__unpack_d>
800102cc:	d9 a5 24 00 	lea %a5,[%sp]36
800102d0:	d9 a4 08 00 	lea %a4,[%sp]8
800102d4:	6d ff 48 bf 	call 80008164 <__unpack_d>
800102d8:	19 a3 10 00 	ld.w %d3,[%sp]16
800102dc:	82 12       	mov %d2,1
800102de:	bf 23 0c 80 	jlt.u %d3,2,800102f6 <__eqdf2+0x3e>
800102e2:	19 a3 24 00 	ld.w %d3,[%sp]36
800102e6:	bf 23 08 80 	jlt.u %d3,2,800102f6 <__eqdf2+0x3e>
800102ea:	d9 a5 24 00 	lea %a5,[%sp]36
800102ee:	d9 a4 10 00 	lea %a4,[%sp]16
800102f2:	6d ff 98 bf 	call 80008222 <__fpcmp_parts_d>
800102f6:	00 90       	ret 

800102f8 <__nedf2>:
800102f8:	20 38       	sub.a %sp,56
800102fa:	d9 a5 10 00 	lea %a5,[%sp]16
800102fe:	40 a4       	mov.aa %a4,%sp
80010300:	89 a4 40 09 	st.d [%sp],%e4
80010304:	89 a6 48 09 	st.d [%sp]8,%e6
80010308:	6d ff 2e bf 	call 80008164 <__unpack_d>
8001030c:	d9 a5 24 00 	lea %a5,[%sp]36
80010310:	d9 a4 08 00 	lea %a4,[%sp]8
80010314:	6d ff 28 bf 	call 80008164 <__unpack_d>
80010318:	19 a3 10 00 	ld.w %d3,[%sp]16
8001031c:	82 12       	mov %d2,1
8001031e:	bf 23 0c 80 	jlt.u %d3,2,80010336 <__nedf2+0x3e>
80010322:	19 a3 24 00 	ld.w %d3,[%sp]36
80010326:	bf 23 08 80 	jlt.u %d3,2,80010336 <__nedf2+0x3e>
8001032a:	d9 a5 24 00 	lea %a5,[%sp]36
8001032e:	d9 a4 10 00 	lea %a4,[%sp]16
80010332:	6d ff 78 bf 	call 80008222 <__fpcmp_parts_d>
80010336:	00 90       	ret 

80010338 <__ledf2>:
80010338:	20 38       	sub.a %sp,56
8001033a:	d9 a5 10 00 	lea %a5,[%sp]16
8001033e:	40 a4       	mov.aa %a4,%sp
80010340:	89 a4 40 09 	st.d [%sp],%e4
80010344:	89 a6 48 09 	st.d [%sp]8,%e6
80010348:	6d ff 0e bf 	call 80008164 <__unpack_d>
8001034c:	d9 a5 24 00 	lea %a5,[%sp]36
80010350:	d9 a4 08 00 	lea %a4,[%sp]8
80010354:	6d ff 08 bf 	call 80008164 <__unpack_d>
80010358:	19 a3 10 00 	ld.w %d3,[%sp]16
8001035c:	82 12       	mov %d2,1
8001035e:	bf 23 0c 80 	jlt.u %d3,2,80010376 <__ledf2+0x3e>
80010362:	19 a3 24 00 	ld.w %d3,[%sp]36
80010366:	bf 23 08 80 	jlt.u %d3,2,80010376 <__ledf2+0x3e>
8001036a:	d9 a5 24 00 	lea %a5,[%sp]36
8001036e:	d9 a4 10 00 	lea %a4,[%sp]16
80010372:	6d ff 58 bf 	call 80008222 <__fpcmp_parts_d>
80010376:	00 90       	ret 

80010378 <__unorddf2>:
80010378:	20 38       	sub.a %sp,56
8001037a:	d9 a5 10 00 	lea %a5,[%sp]16
8001037e:	40 a4       	mov.aa %a4,%sp
80010380:	89 a4 40 09 	st.d [%sp],%e4
80010384:	89 a6 48 09 	st.d [%sp]8,%e6
80010388:	6d ff ee be 	call 80008164 <__unpack_d>
8001038c:	d9 a5 24 00 	lea %a5,[%sp]36
80010390:	d9 a4 08 00 	lea %a4,[%sp]8
80010394:	6d ff e8 be 	call 80008164 <__unpack_d>
80010398:	19 a3 10 00 	ld.w %d3,[%sp]16
8001039c:	82 12       	mov %d2,1
8001039e:	bf 23 06 80 	jlt.u %d3,2,800103aa <__unorddf2+0x32>
800103a2:	19 a2 24 00 	ld.w %d2,[%sp]36
800103a6:	8b 22 60 22 	lt.u %d2,%d2,2
800103aa:	00 90       	ret 

800103ac <__fixdfsi>:
800103ac:	20 20       	sub.a %sp,32
800103ae:	d9 a5 0c 00 	lea %a5,[%sp]12
800103b2:	d9 a4 04 00 	lea %a4,[%sp]4
800103b6:	89 a4 44 09 	st.d [%sp]4,%e4
800103ba:	6d ff d5 be 	call 80008164 <__unpack_d>
800103be:	19 a3 0c 00 	ld.w %d3,[%sp]12
800103c2:	82 02       	mov %d2,0
800103c4:	bf 33 25 80 	jlt.u %d3,3,8001040e <__fixdfsi+0x62>
800103c8:	df 43 29 00 	jeq %d3,4,8001041a <__fixdfsi+0x6e>
800103cc:	19 a3 14 00 	ld.w %d3,[%sp]20
800103d0:	bf 03 1f 00 	jlt %d3,0,8001040e <__fixdfsi+0x62>
800103d4:	8b f3 41 22 	lt %d2,%d3,31
800103d8:	19 a6 10 00 	ld.w %d6,[%sp]16
800103dc:	df 02 1a 00 	jeq %d2,0,80010410 <__fixdfsi+0x64>
800103e0:	8b c3 03 21 	rsub %d2,%d3,60
800103e4:	19 a5 1c 00 	ld.w %d5,[%sp]28
800103e8:	19 a4 18 00 	ld.w %d4,[%sp]24
800103ec:	8b 02 82 32 	ge %d3,%d2,32
800103f0:	2b 54 50 43 	seln %d4,%d3,%d4,%d5
800103f4:	ab 05 a0 53 	seln %d5,%d3,%d5,0
800103f8:	8f f2 01 31 	and %d3,%d2,31
800103fc:	8b 03 02 21 	rsub %d2,%d3,32
80010400:	17 45 80 22 	dextr %d2,%d5,%d4,%d2
80010404:	2b 42 40 23 	sel %d2,%d3,%d2,%d4
80010408:	df 06 03 00 	jeq %d6,0,8001040e <__fixdfsi+0x62>
8001040c:	32 52       	rsub %d2
8001040e:	00 90       	ret 
80010410:	82 f2       	mov %d2,-1
80010412:	06 f2       	sh %d2,-1
80010414:	ab 12 00 26 	cadd %d2,%d6,%d2,1
80010418:	00 90       	ret 
8001041a:	19 a3 10 00 	ld.w %d3,[%sp]16
8001041e:	82 f2       	mov %d2,-1
80010420:	06 f2       	sh %d2,-1
80010422:	ab 12 00 23 	cadd %d2,%d3,%d2,1
80010426:	00 90       	ret 

80010428 <__do_global_ctors_aux>:
80010428:	91 10 00 28 	movh.a %a2,32769
8001042c:	d9 22 70 10 	lea %a2,[%a2]1136 <80010470 <__CTOR_END__>>
80010430:	19 22 fc ff 	ld.w %d2,[%a2]-4 <8000fffc <atan+0x1f8>>
80010434:	d9 23 fc ff 	lea %a3,[%a2]-4 <8000fffc <atan+0x1f8>>
80010438:	df f2 0a 00 	jeq %d2,-1,8001044c <__do_global_ctors_aux+0x24>
8001043c:	40 3c       	mov.aa %a12,%a3
8001043e:	60 22       	mov.a %a2,%d2
80010440:	b0 cc       	add.a %a12,-4
80010442:	2d 02 00 00 	calli %a2
80010446:	54 c2       	ld.w %d2,[%a12]
80010448:	df f2 fb ff 	jne %d2,-1,8001043e <__do_global_ctors_aux+0x16>
8001044c:	00 90       	ret 
	...

Disassembly of section .init:

80010450 <_init>:
80010450:	6d ff bc 86 	call 800011c8 <frame_dummy>
80010454:	6d ff ea ff 	call 80010428 <__do_global_ctors_aux>
80010458:	00 90       	ret 
8001045a:	00 00       	nop 
8001045c:	00 00       	nop 
	...

Disassembly of section .fini:

80010460 <_fini>:
80010460:	6d ff 82 86 	call 80001164 <__do_global_dtors_aux>
80010464:	00 90       	ret 
	...

Disassembly of section .traptab_tc2:

801f6100 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6100:	0d 00 00 02 	svlcx 
801f6104:	02 f4       	mov %d4,%d15
801f6106:	91 00 00 28 	movh.a %a2,32768
801f610a:	d9 22 32 85 	lea %a2,[%a2]21042 <80005232 <IfxCpu_Trap_memoryManagementError>>
801f610e:	dc 02       	ji %a2
801f6110:	00 80       	rfe 
	...
801f611e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6120:	0d 00 00 02 	svlcx 
801f6124:	02 f4       	mov %d4,%d15
801f6126:	91 00 00 28 	movh.a %a2,32768
801f612a:	d9 22 20 95 	lea %a2,[%a2]21088 <80005260 <IfxCpu_Trap_internalProtectionError>>
801f612e:	dc 02       	ji %a2
801f6130:	00 80       	rfe 
	...
801f613e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6140:	0d 00 00 02 	svlcx 
801f6144:	02 f4       	mov %d4,%d15
801f6146:	91 00 00 28 	movh.a %a2,32768
801f614a:	d9 22 0e a5 	lea %a2,[%a2]21134 <8000528e <IfxCpu_Trap_instructionError>>
801f614e:	dc 02       	ji %a2
801f6150:	00 80       	rfe 
	...
801f615e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6160:	02 f4       	mov %d4,%d15
801f6162:	91 00 00 28 	movh.a %a2,32768
801f6166:	d9 22 3c a5 	lea %a2,[%a2]21180 <800052bc <IfxCpu_Trap_contextManagementError>>
801f616a:	dc 02       	ji %a2
801f616c:	00 80       	rfe 
	...
801f617e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6180:	0d 00 00 02 	svlcx 
801f6184:	02 f4       	mov %d4,%d15
801f6186:	91 00 00 28 	movh.a %a2,32768
801f618a:	d9 22 2a b5 	lea %a2,[%a2]21226 <800052ea <IfxCpu_Trap_busError>>
801f618e:	dc 02       	ji %a2
801f6190:	00 80       	rfe 
	...
801f619e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f61a0:	0d 00 00 02 	svlcx 
801f61a4:	02 f4       	mov %d4,%d15
801f61a6:	91 00 00 28 	movh.a %a2,32768
801f61aa:	d9 22 18 c5 	lea %a2,[%a2]21272 <80005318 <IfxCpu_Trap_assertion>>
801f61ae:	dc 02       	ji %a2
801f61b0:	00 80       	rfe 
	...
801f61be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
801f61c0:	0d 00 00 02 	svlcx 
801f61c4:	02 f4       	mov %d4,%d15
801f61c6:	91 00 00 28 	movh.a %a2,32768
801f61ca:	d9 22 24 e5 	lea %a2,[%a2]21412 <800053a4 <IfxCpu_Trap_systemCall_Cpu2>>
801f61ce:	dc 02       	ji %a2
801f61d0:	00 80       	rfe 
	...
801f61de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f61e0:	0d 00 00 02 	svlcx 
801f61e4:	02 f4       	mov %d4,%d15
801f61e6:	91 00 00 28 	movh.a %a2,32768
801f61ea:	d9 22 10 f5 	lea %a2,[%a2]21456 <800053d0 <IfxCpu_Trap_nonMaskableInterrupt>>
801f61ee:	dc 02       	ji %a2
801f61f0:	00 80       	rfe 
}
801f61f2:	00 90       	ret 

801f61f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc1:

801f6200 <IfxCpu_Trap_vectorTable1>:
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
801f6200:	0d 00 00 02 	svlcx 
801f6204:	02 f4       	mov %d4,%d15
801f6206:	91 00 00 28 	movh.a %a2,32768
801f620a:	d9 22 32 85 	lea %a2,[%a2]21042 <80005232 <IfxCpu_Trap_memoryManagementError>>
801f620e:	dc 02       	ji %a2
801f6210:	00 80       	rfe 
	...
801f621e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
801f6220:	0d 00 00 02 	svlcx 
801f6224:	02 f4       	mov %d4,%d15
801f6226:	91 00 00 28 	movh.a %a2,32768
801f622a:	d9 22 20 95 	lea %a2,[%a2]21088 <80005260 <IfxCpu_Trap_internalProtectionError>>
801f622e:	dc 02       	ji %a2
801f6230:	00 80       	rfe 
	...
801f623e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
801f6240:	0d 00 00 02 	svlcx 
801f6244:	02 f4       	mov %d4,%d15
801f6246:	91 00 00 28 	movh.a %a2,32768
801f624a:	d9 22 0e a5 	lea %a2,[%a2]21134 <8000528e <IfxCpu_Trap_instructionError>>
801f624e:	dc 02       	ji %a2
801f6250:	00 80       	rfe 
	...
801f625e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
801f6260:	02 f4       	mov %d4,%d15
801f6262:	91 00 00 28 	movh.a %a2,32768
801f6266:	d9 22 3c a5 	lea %a2,[%a2]21180 <800052bc <IfxCpu_Trap_contextManagementError>>
801f626a:	dc 02       	ji %a2
801f626c:	00 80       	rfe 
	...
801f627e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
801f6280:	0d 00 00 02 	svlcx 
801f6284:	02 f4       	mov %d4,%d15
801f6286:	91 00 00 28 	movh.a %a2,32768
801f628a:	d9 22 2a b5 	lea %a2,[%a2]21226 <800052ea <IfxCpu_Trap_busError>>
801f628e:	dc 02       	ji %a2
801f6290:	00 80       	rfe 
	...
801f629e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
801f62a0:	0d 00 00 02 	svlcx 
801f62a4:	02 f4       	mov %d4,%d15
801f62a6:	91 00 00 28 	movh.a %a2,32768
801f62aa:	d9 22 18 c5 	lea %a2,[%a2]21272 <80005318 <IfxCpu_Trap_assertion>>
801f62ae:	dc 02       	ji %a2
801f62b0:	00 80       	rfe 
	...
801f62be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
801f62c0:	0d 00 00 02 	svlcx 
801f62c4:	02 f4       	mov %d4,%d15
801f62c6:	91 00 00 28 	movh.a %a2,32768
801f62ca:	d9 22 38 d5 	lea %a2,[%a2]21368 <80005378 <IfxCpu_Trap_systemCall_Cpu1>>
801f62ce:	dc 02       	ji %a2
801f62d0:	00 80       	rfe 
	...
801f62de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
801f62e0:	0d 00 00 02 	svlcx 
801f62e4:	02 f4       	mov %d4,%d15
801f62e6:	91 00 00 28 	movh.a %a2,32768
801f62ea:	d9 22 10 f5 	lea %a2,[%a2]21456 <800053d0 <IfxCpu_Trap_nonMaskableInterrupt>>
801f62ee:	dc 02       	ji %a2
801f62f0:	00 80       	rfe 
}
801f62f2:	00 90       	ret 

801f62f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .inttab_tc0_004:

801f4080 <__intvec_tc0_4>:
801f4080:	0d 00 00 02 	svlcx 
801f4084:	91 00 00 e8 	movh.a %a14,32768
801f4088:	d9 ee 62 d2 	lea %a14,[%a14]10082 <80002762 <asc0RxISR>>
801f408c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_008:

801f4100 <__intvec_tc0_8>:
801f4100:	0d 00 00 02 	svlcx 
801f4104:	91 00 00 e8 	movh.a %a14,32768
801f4108:	d9 ee 5a 82 	lea %a14,[%a14]9754 <8000261a <asc0TxISR>>
801f410c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_00C:

801f4180 <__intvec_tc0_12>:
801f4180:	0d 00 00 02 	svlcx 
801f4184:	91 00 00 e8 	movh.a %a14,32768
801f4188:	d9 ee 78 82 	lea %a14,[%a14]9784 <80002638 <asc0ErrISR>>
801f418c:	dc 0e       	ji %a14
